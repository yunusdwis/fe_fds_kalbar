(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DmnModeler = factory());
})(this, (function () { 'use strict';

  function ownKeys$b(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) {
        _defineProperty$I(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey$F(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty$I(obj, key, value) {
    key = _toPropertyKey$F(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _inherits$1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf$1(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf$1(o, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _objectWithoutPropertiesLoose$7(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties$7(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$7(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }
  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive$F(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$F(arg) {
    var key = _toPrimitive$F(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  var name$6 = "Camunda";
  var uri$5 = "http://camunda.org/schema/1.0/dmn";
  var prefix$6 = "camunda";
  var xml$3 = {
  	tagAlias: "lowerCase"
  };
  var associations$4 = [
  ];
  var types$7 = [
  	{
  		name: "Definitions",
  		isAbstract: true,
  		"extends": [
  			"dmn:Definitions"
  		],
  		properties: [
  			{
  				name: "diagramRelationId",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Decision",
  		isAbstract: true,
  		"extends": [
  			"dmn:Decision"
  		],
  		properties: [
  			{
  				name: "versionTag",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "historyTimeToLive",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "InputClause",
  		"extends": [
  			"dmn:InputClause"
  		],
  		properties: [
  			{
  				name: "inputVariable",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	}
  ];
  var emumerations = [
  ];
  var CamundaModdle = {
  	name: name$6,
  	uri: uri$5,
  	prefix: prefix$6,
  	xml: xml$3,
  	associations: associations$4,
  	types: types$7,
  	emumerations: emumerations
  };

  var n$2,
    u$3,
    i$3,
    t$5,
    o$4,
    r$3 = {},
    f$3 = [],
    e$5 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  function c$3(n, l) {
    for (var u in l) n[u] = l[u];
    return n;
  }
  function s$3(n) {
    var l = n.parentNode;
    l && l.removeChild(n);
  }
  function a$3(n, l, u) {
    var i,
      t,
      o,
      r = arguments,
      f = {};
    for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];
    if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
    if (null != u && (f.children = u), "function" == typeof n && null != n.defaultProps) for (o in n.defaultProps) void 0 === f[o] && (f[o] = n.defaultProps[o]);
    return v$3(n, f, i, t, null);
  }
  function v$3(l, u, i, t, o) {
    var r = {
      type: l,
      props: u,
      key: i,
      ref: t,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: null == o ? ++n$2.__v : o
    };
    return null != n$2.vnode && n$2.vnode(r), r;
  }
  function h$3() {
    return {
      current: null
    };
  }
  function y$2(n) {
    return n.children;
  }
  function p$3(n, l) {
    this.props = n, this.context = l;
  }
  function d$3(n, l) {
    if (null == l) return n.__ ? d$3(n.__, n.__.__k.indexOf(n) + 1) : null;
    for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
    return "function" == typeof n.type ? d$3(n) : null;
  }
  function _$3(n) {
    var l, u;
    if (null != (n = n.__) && null != n.__c) {
      for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
        n.__e = n.__c.base = u.__e;
        break;
      }
      return _$3(n);
    }
  }
  function k$4(l) {
    (!l.__d && (l.__d = !0) && u$3.push(l) && !b$3.__r++ || t$5 !== n$2.debounceRendering) && ((t$5 = n$2.debounceRendering) || i$3)(b$3);
  }
  function b$3() {
    for (var n; b$3.__r = u$3.length;) n = u$3.sort(function (n, l) {
      return n.__v.__b - l.__v.__b;
    }), u$3 = [], n.some(function (n) {
      var l, u, i, t, o, r;
      n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = c$3({}, t)).__v = t.__v + 1, I$2(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? d$3(t) : o, t.__h), T$4(u, t), t.__e != o && _$3(t)));
    });
  }
  function m$4(n, l, u, i, t, o, e, c, s, a) {
    var h,
      p,
      _,
      k,
      b,
      m,
      w,
      A = i && i.__k || f$3,
      P = A.length;
    for (u.__k = [], h = 0; h < l.length; h++) if (null != (k = u.__k[h] = null == (k = l[h]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? v$3(null, k, null, null, k) : Array.isArray(k) ? v$3(y$2, {
      children: k
    }, null, null, null) : k.__b > 0 ? v$3(k.type, k.props, k.key, null, k.__v) : k)) {
      if (k.__ = u, k.__b = u.__b + 1, null === (_ = A[h]) || _ && k.key == _.key && k.type === _.type) A[h] = void 0;else for (p = 0; p < P; p++) {
        if ((_ = A[p]) && k.key == _.key && k.type === _.type) {
          A[p] = void 0;
          break;
        }
        _ = null;
      }
      I$2(n, k, _ = _ || r$3, t, o, e, c, s, a), b = k.__e, (p = k.ref) && _.ref != p && (w || (w = []), _.ref && w.push(_.ref, null, k), w.push(p, k.__c || b, k)), null != b ? (null == m && (m = b), "function" == typeof k.type && null != k.__k && k.__k === _.__k ? k.__d = s = g$4(k, s, n) : s = x$2(n, k, _, A, b, s), a || "option" !== u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && _.__e == s && s.parentNode != n && (s = d$3(_));
    }
    for (u.__e = m, h = P; h--;) null != A[h] && ("function" == typeof u.type && null != A[h].__e && A[h].__e == u.__d && (u.__d = d$3(i, h + 1)), L$2(A[h], A[h]));
    if (w) for (h = 0; h < w.length; h++) z$3(w[h], w[++h], w[++h]);
  }
  function g$4(n, l, u) {
    var i, t;
    for (i = 0; i < n.__k.length; i++) (t = n.__k[i]) && (t.__ = n, l = "function" == typeof t.type ? g$4(t, l, u) : x$2(u, t, t, n.__k, t.__e, l));
    return l;
  }
  function w$4(n, l) {
    return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
      w$4(n, l);
    }) : l.push(n)), l;
  }
  function x$2(n, l, u, i, t, o) {
    var r, f, e;
    if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
      for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) if (f == t) break n;
      n.insertBefore(t, o), r = o;
    }
    return void 0 !== r ? r : t.nextSibling;
  }
  function A$3(n, l, u, i, t) {
    var o;
    for (o in u) "children" === o || "key" === o || o in l || C$3(n, o, null, u[o], i);
    for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || C$3(n, o, l[o], u[o], i);
  }
  function P$2(n, l, u) {
    "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || e$5.test(l) ? u : u + "px";
  }
  function C$3(n, l, u, i, t) {
    var o;
    n: if ("style" === l) {
      if ("string" == typeof u) n.style.cssText = u;else {
        if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || P$2(n.style, l, "");
        if (u) for (l in u) i && u[l] === i[l] || P$2(n.style, l, u[l]);
      }
    } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? H$2 : $$2, o) : n.removeEventListener(l, o ? H$2 : $$2, o);else if ("dangerouslySetInnerHTML" !== l) {
      if (t) l = l.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
        n[l] = null == u ? "" : u;
        break n;
      } catch (n) {}
      "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
    }
  }
  function $$2(l) {
    this.l[l.type + !1](n$2.event ? n$2.event(l) : l);
  }
  function H$2(l) {
    this.l[l.type + !0](n$2.event ? n$2.event(l) : l);
  }
  function I$2(l, u, i, t, o, r, f, e, s) {
    var a,
      v,
      h,
      d,
      _,
      k,
      b,
      g,
      w,
      x,
      A,
      P = u.type;
    if (void 0 !== u.constructor) return null;
    null != i.__h && (s = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = n$2.__b) && a(u);
    try {
      n: if ("function" == typeof P) {
        if (g = u.props, w = (a = P.contextType) && t[a.__c], x = a ? w ? w.props.value : a.__ : t, i.__c ? b = (v = u.__c = i.__c).__ = v.__E : ("prototype" in P && P.prototype.render ? u.__c = v = new P(g, x) : (u.__c = v = new p$3(g, x), v.constructor = P, v.render = M$2), w && w.sub(v), v.props = g, v.state || (v.state = {}), v.context = x, v.__n = t, h = v.__d = !0, v.__h = []), null == v.__s && (v.__s = v.state), null != P.getDerivedStateFromProps && (v.__s == v.state && (v.__s = c$3({}, v.__s)), c$3(v.__s, P.getDerivedStateFromProps(g, v.__s))), d = v.props, _ = v.state, h) null == P.getDerivedStateFromProps && null != v.componentWillMount && v.componentWillMount(), null != v.componentDidMount && v.__h.push(v.componentDidMount);else {
          if (null == P.getDerivedStateFromProps && g !== d && null != v.componentWillReceiveProps && v.componentWillReceiveProps(g, x), !v.__e && null != v.shouldComponentUpdate && !1 === v.shouldComponentUpdate(g, v.__s, x) || u.__v === i.__v) {
            v.props = g, v.state = v.__s, u.__v !== i.__v && (v.__d = !1), v.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
              n && (n.__ = u);
            }), v.__h.length && f.push(v);
            break n;
          }
          null != v.componentWillUpdate && v.componentWillUpdate(g, v.__s, x), null != v.componentDidUpdate && v.__h.push(function () {
            v.componentDidUpdate(d, _, k);
          });
        }
        v.context = x, v.props = g, v.state = v.__s, (a = n$2.__r) && a(u), v.__d = !1, v.__v = u, v.__P = l, a = v.render(v.props, v.state, v.context), v.state = v.__s, null != v.getChildContext && (t = c$3(c$3({}, t), v.getChildContext())), h || null == v.getSnapshotBeforeUpdate || (k = v.getSnapshotBeforeUpdate(d, _)), A = null != a && a.type === y$2 && null == a.key ? a.props.children : a, m$4(l, Array.isArray(A) ? A : [A], u, i, t, o, r, f, e, s), v.base = u.__e, u.__h = null, v.__h.length && f.push(v), b && (v.__E = v.__ = null), v.__e = !1;
      } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = j$4(i.__e, u, i, t, o, r, f, s);
      (a = n$2.diffed) && a(u);
    } catch (l) {
      u.__v = null, (s || null != r) && (u.__e = e, u.__h = !!s, r[r.indexOf(e)] = null), n$2.__e(l, u, i);
    }
  }
  function T$4(l, u) {
    n$2.__c && n$2.__c(u, l), l.some(function (u) {
      try {
        l = u.__h, u.__h = [], l.some(function (n) {
          n.call(u);
        });
      } catch (l) {
        n$2.__e(l, u.__v);
      }
    });
  }
  function j$4(n, l, u, i, t, o, e, c) {
    var a,
      v,
      h,
      y,
      p = u.props,
      d = l.props,
      _ = l.type,
      k = 0;
    if ("svg" === _ && (t = !0), null != o) for (; k < o.length; k++) if ((a = o[k]) && (a === n || (_ ? a.localName == _ : 3 == a.nodeType))) {
      n = a, o[k] = null;
      break;
    }
    if (null == n) {
      if (null === _) return document.createTextNode(d);
      n = t ? document.createElementNS("http://www.w3.org/2000/svg", _) : document.createElement(_, d.is && d), o = null, c = !1;
    }
    if (null === _) p === d || c && n.data === d || (n.data = d);else {
      if (o = o && f$3.slice.call(n.childNodes), v = (p = u.props || r$3).dangerouslySetInnerHTML, h = d.dangerouslySetInnerHTML, !c) {
        if (null != o) for (p = {}, y = 0; y < n.attributes.length; y++) p[n.attributes[y].name] = n.attributes[y].value;
        (h || v) && (h && (v && h.__html == v.__html || h.__html === n.innerHTML) || (n.innerHTML = h && h.__html || ""));
      }
      if (A$3(n, d, p, t, c), h) l.__k = [];else if (k = l.props.children, m$4(n, Array.isArray(k) ? k : [k], l, u, i, t && "foreignObject" !== _, o, e, n.firstChild, c), null != o) for (k = o.length; k--;) null != o[k] && s$3(o[k]);
      c || ("value" in d && void 0 !== (k = d.value) && (k !== n.value || "progress" === _ && !k) && C$3(n, "value", k, p.value, !1), "checked" in d && void 0 !== (k = d.checked) && k !== n.checked && C$3(n, "checked", k, p.checked, !1));
    }
    return n;
  }
  function z$3(l, u, i) {
    try {
      "function" == typeof l ? l(u) : l.current = u;
    } catch (l) {
      n$2.__e(l, i);
    }
  }
  function L$2(l, u, i) {
    var t, o, r;
    if (n$2.unmount && n$2.unmount(l), (t = l.ref) && (t.current && t.current !== l.__e || z$3(t, null, u)), i || "function" == typeof l.type || (i = null != (o = l.__e)), l.__e = l.__d = void 0, null != (t = l.__c)) {
      if (t.componentWillUnmount) try {
        t.componentWillUnmount();
      } catch (l) {
        n$2.__e(l, u);
      }
      t.base = t.__P = null;
    }
    if (t = l.__k) for (r = 0; r < t.length; r++) t[r] && L$2(t[r], u, i);
    null != o && s$3(o);
  }
  function M$2(n, l, u) {
    return this.constructor(n, u);
  }
  function N$2(l, u, i) {
    var t, o, e;
    n$2.__ && n$2.__(l, u), o = (t = "function" == typeof i) ? null : i && i.__k || u.__k, e = [], I$2(u, l = (!t && i || u).__k = a$3(y$2, null, [l]), o || r$3, r$3, void 0 !== u.ownerSVGElement, !t && i ? [i] : o ? null : u.firstChild ? f$3.slice.call(u.childNodes) : null, e, !t && i ? i : o ? o.__e : u.firstChild, t), T$4(e, l);
  }
  function O$2(n, l) {
    N$2(n, l, O$2);
  }
  function S$1(n, l, u) {
    var i,
      t,
      o,
      r = arguments,
      f = c$3({}, n.props);
    for (o in l) "key" == o ? i = l[o] : "ref" == o ? t = l[o] : f[o] = l[o];
    if (arguments.length > 3) for (u = [u], o = 3; o < arguments.length; o++) u.push(r[o]);
    return null != u && (f.children = u), v$3(n.type, f, i || n.key, t || n.ref, null);
  }
  function q$1(n, l) {
    var u = {
      __c: l = "__cC" + o$4++,
      __: n,
      Consumer: function (n, l) {
        return n.children(l);
      },
      Provider: function (n) {
        var u, i;
        return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
          return i;
        }, this.shouldComponentUpdate = function (n) {
          this.props.value !== n.value && u.some(k$4);
        }, this.sub = function (n) {
          u.push(n);
          var l = n.componentWillUnmount;
          n.componentWillUnmount = function () {
            u.splice(u.indexOf(n), 1), l && l.call(n);
          };
        }), n.children;
      }
    };
    return u.Provider.__ = u.Consumer.contextType = u;
  }
  n$2 = {
    __e: function (n, l) {
      for (var u, i, t; l = l.__;) if ((u = l.__c) && !u.__) try {
        if ((i = u.constructor) && null != i.getDerivedStateFromError && (u.setState(i.getDerivedStateFromError(n)), t = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), t = u.__d), t) return u.__E = u;
      } catch (l) {
        n = l;
      }
      throw n;
    },
    __v: 0
  }, p$3.prototype.setState = function (n, l) {
    var u;
    u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = c$3({}, this.state), "function" == typeof n && (n = n(c$3({}, u), this.props)), n && c$3(u, n), null != n && this.__v && (l && this.__h.push(l), k$4(this));
  }, p$3.prototype.forceUpdate = function (n) {
    this.__v && (this.__e = !0, n && this.__h.push(n), k$4(this));
  }, p$3.prototype.render = y$2, u$3 = [], i$3 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b$3.__r = 0, o$4 = 0;

  var t$4,
    u$2,
    r$2,
    o$3 = 0,
    i$2 = [],
    c$2 = n$2.__b,
    f$2 = n$2.__r,
    e$4 = n$2.diffed,
    a$2 = n$2.__c,
    v$2 = n$2.unmount;
  function m$3(t, r) {
    n$2.__h && n$2.__h(u$2, t, o$3 || r), o$3 = 0;
    var i = u$2.__H || (u$2.__H = {
      __: [],
      __h: []
    });
    return t >= i.__.length && i.__.push({}), i.__[t];
  }
  function l$2(n) {
    return o$3 = 1, p$2(w$3, n);
  }
  function p$2(n, r, o) {
    var i = m$3(t$4++, 2);
    return i.t = n, i.__c || (i.__ = [o ? o(r) : w$3(void 0, r), function (n) {
      var t = i.t(i.__[0], n);
      i.__[0] !== t && (i.__ = [t, i.__[1]], i.__c.setState({}));
    }], i.__c = u$2), i.__;
  }
  function y$1(r, o) {
    var i = m$3(t$4++, 3);
    !n$2.__s && k$3(i.__H, o) && (i.__ = r, i.__H = o, u$2.__H.__h.push(i));
  }
  function h$2(r, o) {
    var i = m$3(t$4++, 4);
    !n$2.__s && k$3(i.__H, o) && (i.__ = r, i.__H = o, u$2.__h.push(i));
  }
  function s$2(n) {
    return o$3 = 5, d$2(function () {
      return {
        current: n
      };
    }, []);
  }
  function _$2(n, t, u) {
    o$3 = 6, h$2(function () {
      "function" == typeof n ? n(t()) : n && (n.current = t());
    }, null == u ? u : u.concat(n));
  }
  function d$2(n, u) {
    var r = m$3(t$4++, 7);
    return k$3(r.__H, u) && (r.__ = n(), r.__H = u, r.__h = n), r.__;
  }
  function A$2(n, t) {
    return o$3 = 8, d$2(function () {
      return n;
    }, t);
  }
  function F$2(n) {
    var r = u$2.context[n.__c],
      o = m$3(t$4++, 9);
    return o.__c = n, r ? (null == o.__ && (o.__ = !0, r.sub(u$2)), r.props.value) : n.__;
  }
  function T$3(t, u) {
    n$2.useDebugValue && n$2.useDebugValue(u ? u(t) : t);
  }
  function x$1() {
    i$2.forEach(function (t) {
      if (t.__P) try {
        t.__H.__h.forEach(g$3), t.__H.__h.forEach(j$3), t.__H.__h = [];
      } catch (u) {
        t.__H.__h = [], n$2.__e(u, t.__v);
      }
    }), i$2 = [];
  }
  n$2.__b = function (n) {
    u$2 = null, c$2 && c$2(n);
  }, n$2.__r = function (n) {
    f$2 && f$2(n), t$4 = 0;
    var r = (u$2 = n.__c).__H;
    r && (r.__h.forEach(g$3), r.__h.forEach(j$3), r.__h = []);
  }, n$2.diffed = function (t) {
    e$4 && e$4(t);
    var o = t.__c;
    o && o.__H && o.__H.__h.length && (1 !== i$2.push(o) && r$2 === n$2.requestAnimationFrame || ((r$2 = n$2.requestAnimationFrame) || function (n) {
      var t,
        u = function () {
          clearTimeout(r), b$2 && cancelAnimationFrame(t), setTimeout(n);
        },
        r = setTimeout(u, 100);
      b$2 && (t = requestAnimationFrame(u));
    })(x$1)), u$2 = void 0;
  }, n$2.__c = function (t, u) {
    u.some(function (t) {
      try {
        t.__h.forEach(g$3), t.__h = t.__h.filter(function (n) {
          return !n.__ || j$3(n);
        });
      } catch (r) {
        u.some(function (n) {
          n.__h && (n.__h = []);
        }), u = [], n$2.__e(r, t.__v);
      }
    }), a$2 && a$2(t, u);
  }, n$2.unmount = function (t) {
    v$2 && v$2(t);
    var u = t.__c;
    if (u && u.__H) try {
      u.__H.__.forEach(g$3);
    } catch (t) {
      n$2.__e(t, u.__v);
    }
  };
  var b$2 = "function" == typeof requestAnimationFrame;
  function g$3(n) {
    var t = u$2;
    "function" == typeof n.__c && n.__c(), u$2 = t;
  }
  function j$3(n) {
    var t = u$2;
    n.__c = n.__(), u$2 = t;
  }
  function k$3(n, t) {
    return !n || n.length !== t.length || t.some(function (t, u) {
      return t !== n[u];
    });
  }
  function w$3(n, t) {
    return "function" == typeof t ? t(n) : t;
  }

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */
  function flatten$1(arr) {
    return Array.prototype.concat.apply([], arr);
  }
  const nativeToString$4 = Object.prototype.toString;
  const nativeHasOwnProperty$3 = Object.prototype.hasOwnProperty;
  function isUndefined$5(obj) {
    return obj === undefined;
  }
  function isDefined(obj) {
    return obj !== undefined;
  }
  function isNil(obj) {
    return obj == null;
  }
  function isArray$6(obj) {
    return nativeToString$4.call(obj) === '[object Array]';
  }
  function isObject$1(obj) {
    return nativeToString$4.call(obj) === '[object Object]';
  }
  function isNumber$3(obj) {
    return nativeToString$4.call(obj) === '[object Number]';
  }
  function isFunction$2(obj) {
    const tag = nativeToString$4.call(obj);
    return tag === '[object Function]' || tag === '[object AsyncFunction]' || tag === '[object GeneratorFunction]' || tag === '[object AsyncGeneratorFunction]' || tag === '[object Proxy]';
  }
  function isString$4(obj) {
    return nativeToString$4.call(obj) === '[object String]';
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has$3(target, key) {
    return nativeHasOwnProperty$3.call(target, key);
  }

  /**
   * Find element in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function|Object} matcher
   *
   * @return {Object}
   */
  function find$2(collection, matcher) {
    matcher = toMatcher$1(matcher);
    let match;
    forEach$3(collection, function (val, key) {
      if (matcher(val, key)) {
        match = val;
        return false;
      }
    });
    return match;
  }

  /**
   * Find element index in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function} matcher
   *
   * @return {Object}
   */
  function findIndex$1(collection, matcher) {
    matcher = toMatcher$1(matcher);
    let idx = isArray$6(collection) ? -1 : undefined;
    forEach$3(collection, function (val, key) {
      if (matcher(val, key)) {
        idx = key;
        return false;
      }
    });
    return idx;
  }

  /**
   * Find element in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function} matcher
   *
   * @return {Array} result
   */
  function filter$2(collection, matcher) {
    let result = [];
    forEach$3(collection, function (val, key) {
      if (matcher(val, key)) {
        result.push(val);
      }
    });
    return result;
  }

  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */
  function forEach$3(collection, iterator) {
    let val, result;
    if (isUndefined$5(collection)) {
      return;
    }
    const convertKey = isArray$6(collection) ? toNum$3 : identity$3;
    for (let key in collection) {
      if (has$3(collection, key)) {
        val = collection[key];
        result = iterator(val, convertKey(key));
        if (result === false) {
          return val;
        }
      }
    }
  }

  /**
   * Reduce collection, returning a single result.
   *
   * @param  {Object|Array} collection
   * @param  {Function} iterator
   * @param  {Any} result
   *
   * @return {Any} result returned from last iterator
   */
  function reduce(collection, iterator, result) {
    forEach$3(collection, function (value, idx) {
      result = iterator(result, value, idx);
    });
    return result;
  }

  /**
   * Return true if every element in the collection
   * matches the criteria.
   *
   * @param  {Object|Array} collection
   * @param  {Function} matcher
   *
   * @return {Boolean}
   */
  function every(collection, matcher) {
    return !!reduce(collection, function (matches, val, key) {
      return matches && matcher(val, key);
    }, true);
  }

  /**
   * Return true if some elements in the collection
   * match the criteria.
   *
   * @param  {Object|Array} collection
   * @param  {Function} matcher
   *
   * @return {Boolean}
   */
  function some(collection, matcher) {
    return !!find$2(collection, matcher);
  }

  /**
   * Transform a collection into another collection
   * by piping each member through the given fn.
   *
   * @param  {Object|Array}   collection
   * @param  {Function} fn
   *
   * @return {Array} transformed collection
   */
  function map$2(collection, fn) {
    let result = [];
    forEach$3(collection, function (val, key) {
      result.push(fn(val, key));
    });
    return result;
  }

  /**
   * Get the collections keys.
   *
   * @param  {Object|Array} collection
   *
   * @return {Array}
   */
  function keys(collection) {
    return collection && Object.keys(collection) || [];
  }

  /**
   * Shorthand for `keys(o).length`.
   *
   * @param  {Object|Array} collection
   *
   * @return {Number}
   */
  function size(collection) {
    return keys(collection).length;
  }

  /**
   * Get the values in the collection.
   *
   * @param  {Object|Array} collection
   *
   * @return {Array}
   */
  function values$1(collection) {
    return map$2(collection, val => val);
  }

  /**
   * Group collection members by attribute.
   *
   * @param  {Object|Array} collection
   * @param  {Function} extractor
   *
   * @return {Object} map with { attrValue => [ a, b, c ] }
   */
  function groupBy(collection, extractor, grouped = {}) {
    extractor = toExtractor(extractor);
    forEach$3(collection, function (val) {
      let discriminator = extractor(val) || '_';
      let group = grouped[discriminator];
      if (!group) {
        group = grouped[discriminator] = [];
      }
      group.push(val);
    });
    return grouped;
  }
  function uniqueBy(extractor, ...collections) {
    extractor = toExtractor(extractor);
    let grouped = {};
    forEach$3(collections, c => groupBy(c, extractor, grouped));
    let result = map$2(grouped, function (val, key) {
      return val[0];
    });
    return result;
  }

  /**
   * Sort collection by criteria.
   *
   * @param  {Object|Array} collection
   * @param  {String|Function} extractor
   *
   * @return {Array}
   */
  function sortBy(collection, extractor) {
    extractor = toExtractor(extractor);
    let sorted = [];
    forEach$3(collection, function (value, key) {
      let disc = extractor(value, key);
      let entry = {
        d: disc,
        v: value
      };
      for (var idx = 0; idx < sorted.length; idx++) {
        let {
          d
        } = sorted[idx];
        if (disc < d) {
          sorted.splice(idx, 0, entry);
          return;
        }
      }

      // not inserted, append (!)
      sorted.push(entry);
    });
    return map$2(sorted, e => e.v);
  }

  /**
   * Create an object pattern matcher.
   *
   * @example
   *
   * const matcher = matchPattern({ id: 1 });
   *
   * let element = find(elements, matcher);
   *
   * @param  {Object} pattern
   *
   * @return {Function} matcherFn
   */
  function matchPattern(pattern) {
    return function (el) {
      return every(pattern, function (val, key) {
        return el[key] === val;
      });
    };
  }
  function toExtractor(extractor) {
    return isFunction$2(extractor) ? extractor : e => {
      return e[extractor];
    };
  }
  function toMatcher$1(matcher) {
    return isFunction$2(matcher) ? matcher : e => {
      return e === matcher;
    };
  }
  function identity$3(arg) {
    return arg;
  }
  function toNum$3(arg) {
    return Number(arg);
  }

  /**
   * Debounce fn, calling it only once if the given time
   * elapsed between calls.
   *
   * Lodash-style the function exposes methods to `#clear`
   * and `#flush` to control internal behavior.
   *
   * @param  {Function} fn
   * @param  {Number} timeout
   *
   * @return {Function} debounced function
   */
  function debounce(fn, timeout) {
    let timer;
    let lastArgs;
    let lastThis;
    let lastNow;
    function fire(force) {
      let now = Date.now();
      let scheduledDiff = force ? 0 : lastNow + timeout - now;
      if (scheduledDiff > 0) {
        return schedule(scheduledDiff);
      }
      fn.apply(lastThis, lastArgs);
      clear();
    }
    function schedule(timeout) {
      timer = setTimeout(fire, timeout);
    }
    function clear() {
      if (timer) {
        clearTimeout(timer);
      }
      timer = lastNow = lastArgs = lastThis = undefined;
    }
    function flush() {
      if (timer) {
        fire(true);
      }
      clear();
    }
    function callback(...args) {
      lastNow = Date.now();
      lastArgs = args;
      lastThis = this;

      // ensure an execution is scheduled
      if (!timer) {
        schedule(timeout);
      }
    }
    callback.flush = flush;
    callback.cancel = clear;
    return callback;
  }

  /**
   * Throttle fn, calling at most once
   * in the given interval.
   *
   * @param  {Function} fn
   * @param  {Number} interval
   *
   * @return {Function} throttled function
   */
  function throttle(fn, interval) {
    let throttling = false;
    return function (...args) {
      if (throttling) {
        return;
      }
      fn(...args);
      throttling = true;
      setTimeout(() => {
        throttling = false;
      }, interval);
    };
  }

  /**
   * Bind function against target <this>.
   *
   * @param  {Function} fn
   * @param  {Object}   target
   *
   * @return {Function} bound function
   */
  function bind$3(fn, target) {
    return fn.bind(target);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */
  function assign$4(target, ...others) {
    return Object.assign(target, ...others);
  }

  /**
   * Sets a nested property of a given object to the specified value.
   *
   * This mutates the object and returns it.
   *
   * @param {Object} target The target of the set operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} value The value to set.
   */
  function set$2(target, path, value) {
    let currentTarget = target;
    forEach$3(path, function (key, idx) {
      if (typeof key !== 'number' && typeof key !== 'string') {
        throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
      }
      if (key === 'constructor') {
        throw new Error('illegal key: constructor');
      }
      if (key === '__proto__') {
        throw new Error('illegal key: __proto__');
      }
      let nextKey = path[idx + 1];
      let nextTarget = currentTarget[key];
      if (isDefined(nextKey) && isNil(nextTarget)) {
        nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
      }
      if (isUndefined$5(nextKey)) {
        if (isUndefined$5(value)) {
          delete currentTarget[key];
        } else {
          currentTarget[key] = value;
        }
      } else {
        currentTarget = nextTarget;
      }
    });
    return target;
  }

  /**
   * Gets a nested property of a given object.
   *
   * @param {Object} target The target of the get operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} [defaultValue] The value to return if no value exists.
   */
  function get$2(target, path, defaultValue) {
    let currentTarget = target;
    forEach$3(path, function (key) {
      // accessing nil property yields <undefined>
      if (isNil(currentTarget)) {
        currentTarget = undefined;
        return false;
      }
      currentTarget = currentTarget[key];
    });
    return isUndefined$5(currentTarget) ? defaultValue : currentTarget;
  }

  /**
   * Pick given properties from the target object.
   *
   * @param {Object} target
   * @param {Array} properties
   *
   * @return {Object} target
   */
  function pick$1(target, properties) {
    let result = {};
    let obj = Object(target);
    forEach$3(properties, function (prop) {
      if (prop in obj) {
        result[prop] = target[prop];
      }
    });
    return result;
  }

  /**
   * Pick all target properties, excluding the given ones.
   *
   * @param {Object} target
   * @param {Array} properties
   *
   * @return {Object} target
   */
  function omit(target, properties) {
    let result = {};
    let obj = Object(target);
    forEach$3(obj, function (prop, key) {
      if (properties.indexOf(key) === -1) {
        result[key] = prop;
      }
    });
    return result;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var classnamesExports = {};
  var classnames$1 = {
    get exports(){ return classnamesExports; },
    set exports(v){ classnamesExports = v; },
  };

  /*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  */

  (function (module) {
  	/* global define */

  	(function () {

  	  var hasOwn = {}.hasOwnProperty;
  	  function classNames() {
  	    var classes = [];
  	    for (var i = 0; i < arguments.length; i++) {
  	      var arg = arguments[i];
  	      if (!arg) continue;
  	      var argType = typeof arg;
  	      if (argType === 'string' || argType === 'number') {
  	        classes.push(arg);
  	      } else if (Array.isArray(arg)) {
  	        if (arg.length) {
  	          var inner = classNames.apply(null, arg);
  	          if (inner) {
  	            classes.push(inner);
  	          }
  	        }
  	      } else if (argType === 'object') {
  	        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
  	          classes.push(arg.toString());
  	          continue;
  	        }
  	        for (var key in arg) {
  	          if (hasOwn.call(arg, key) && arg[key]) {
  	            classes.push(key);
  	          }
  	        }
  	      }
  	    }
  	    return classes.join(' ');
  	  }
  	  if (module.exports) {
  	    classNames.default = classNames;
  	    module.exports = classNames;
  	  } else {
  	    window.classNames = classNames;
  	  }
  	})();
  } (classnames$1));

  var classnames = classnamesExports;

  function C$2(n, t) {
    for (var e in t) n[e] = t[e];
    return n;
  }
  function S(n, t) {
    for (var e in n) if ("__source" !== e && !(e in t)) return !0;
    for (var r in t) if ("__source" !== r && n[r] !== t[r]) return !0;
    return !1;
  }
  function E(n) {
    this.props = n;
  }
  function g$2(n, t) {
    function e(n) {
      var e = this.props.ref,
        r = e == n.ref;
      return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : S(this.props, n);
    }
    function r(t) {
      return this.shouldComponentUpdate = e, a$3(n, t);
    }
    return r.displayName = "Memo(" + (n.displayName || n.name) + ")", r.prototype.isReactComponent = !0, r.__f = !0, r;
  }
  (E.prototype = new p$3()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {
    return S(this.props, n) || S(this.state, t);
  };
  var w$2 = n$2.__b;
  n$2.__b = function (n) {
    n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w$2 && w$2(n);
  };
  var R = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
  function x(n) {
    function t(t, e) {
      var r = C$2({}, t);
      return delete r.ref, n(r, (e = t.ref || e) && ("object" != typeof e || "current" in e) ? e : null);
    }
    return t.$$typeof = R, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
  }
  var N$1 = function (n, t) {
      return null == n ? null : w$4(w$4(n).map(t));
    },
    k$2 = {
      map: N$1,
      forEach: N$1,
      count: function (n) {
        return n ? w$4(n).length : 0;
      },
      only: function (n) {
        var t = w$4(n);
        if (1 !== t.length) throw "Children.only";
        return t[0];
      },
      toArray: w$4
    },
    A$1 = n$2.__e;
  n$2.__e = function (n, t, e) {
    if (n.then) for (var r, u = t; u = u.__;) if ((r = u.__c) && r.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), r.__c(n, t);
    A$1(n, t, e);
  };
  var O$1 = n$2.unmount;
  function L$1() {
    this.__u = 0, this.t = null, this.__b = null;
  }
  function U(n) {
    var t = n.__.__c;
    return t && t.__e && t.__e(n);
  }
  function D(n) {
    var t, e, r;
    function u(u) {
      if (t || (t = n()).then(function (n) {
        e = n.default || n;
      }, function (n) {
        r = n;
      }), r) throw r;
      if (!e) throw t;
      return a$3(e, u);
    }
    return u.displayName = "Lazy", u.__f = !0, u;
  }
  function F$1() {
    this.u = null, this.o = null;
  }
  n$2.unmount = function (n) {
    var t = n.__c;
    t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O$1 && O$1(n);
  }, (L$1.prototype = new p$3()).__c = function (n, t) {
    var e = t.__c,
      r = this;
    null == r.t && (r.t = []), r.t.push(e);
    var u = U(r.__v),
      o = !1,
      i = function () {
        o || (o = !0, e.__R = null, u ? u(l) : l());
      };
    e.__R = i;
    var l = function () {
        if (! --r.__u) {
          if (r.state.__e) {
            var n = r.state.__e;
            r.__v.__k[0] = function n(t, e, r) {
              return t && (t.__v = null, t.__k = t.__k && t.__k.map(function (t) {
                return n(t, e, r);
              }), t.__c && t.__c.__P === e && (t.__e && r.insertBefore(t.__e, t.__d), t.__c.__e = !0, t.__c.__P = r)), t;
            }(n, n.__c.__P, n.__c.__O);
          }
          var t;
          for (r.setState({
            __e: r.__b = null
          }); t = r.t.pop();) t.forceUpdate();
        }
      },
      f = !0 === t.__h;
    r.__u++ || f || r.setState({
      __e: r.__b = r.__v.__k[0]
    }), n.then(i, i);
  }, L$1.prototype.componentWillUnmount = function () {
    this.t = [];
  }, L$1.prototype.render = function (n, t) {
    if (this.__b) {
      if (this.__v.__k) {
        var e = document.createElement("div"),
          r = this.__v.__k[0].__c;
        this.__v.__k[0] = function n(t, e, r) {
          return t && (t.__c && t.__c.__H && (t.__c.__H.__.forEach(function (n) {
            "function" == typeof n.__c && n.__c();
          }), t.__c.__H = null), null != (t = C$2({}, t)).__c && (t.__c.__P === r && (t.__c.__P = e), t.__c = null), t.__k = t.__k && t.__k.map(function (t) {
            return n(t, e, r);
          })), t;
        }(this.__b, e, r.__O = r.__P);
      }
      this.__b = null;
    }
    var u = t.__e && a$3(y$2, null, n.fallback);
    return u && (u.__h = null), [a$3(y$2, null, t.__e ? null : n.children), u];
  };
  var M$1 = function (n, t, e) {
    if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {
      for (; e.length > 3;) e.pop()();
      if (e[1] < e[0]) break;
      n.u = e = e[2];
    }
  };
  function T$2(n) {
    return this.getChildContext = function () {
      return n.context;
    }, n.children;
  }
  function j$2(n) {
    var t = this,
      e = n.i;
    t.componentWillUnmount = function () {
      N$2(null, t.l), t.l = null, t.i = null;
    }, t.i && t.i !== e && t.componentWillUnmount(), n.__v ? (t.l || (t.i = e, t.l = {
      nodeType: 1,
      parentNode: e,
      childNodes: [],
      appendChild: function (n) {
        this.childNodes.push(n), t.i.appendChild(n);
      },
      insertBefore: function (n, e) {
        this.childNodes.push(n), t.i.appendChild(n);
      },
      removeChild: function (n) {
        this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), t.i.removeChild(n);
      }
    }), N$2(a$3(T$2, {
      context: t.context
    }, n.__v), t.l)) : t.l && t.componentWillUnmount();
  }
  function I$1(n, t) {
    return a$3(j$2, {
      __v: n,
      i: t
    });
  }
  (F$1.prototype = new p$3()).__e = function (n) {
    var t = this,
      e = U(t.__v),
      r = t.o.get(n);
    return r[0]++, function (u) {
      var o = function () {
        t.props.revealOrder ? (r.push(u), M$1(t, n, r)) : u();
      };
      e ? e(o) : o();
    };
  }, F$1.prototype.render = function (n) {
    this.u = null, this.o = new Map();
    var t = w$4(n.children);
    n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
    for (var e = t.length; e--;) this.o.set(t[e], this.u = [1, 0, this.u]);
    return n.children;
  }, F$1.prototype.componentDidUpdate = F$1.prototype.componentDidMount = function () {
    var n = this;
    this.o.forEach(function (t, e) {
      M$1(n, e, t);
    });
  };
  var W = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103,
    P$1 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
    V = function (n) {
      return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
    };
  function z$2(n, t, e) {
    return null == t.__k && (t.textContent = ""), N$2(n, t), "function" == typeof e && e(), n ? n.__c : null;
  }
  function B$1(n, t, e) {
    return O$2(n, t), "function" == typeof e && e(), n ? n.__c : null;
  }
  p$3.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function (n) {
    Object.defineProperty(p$3.prototype, n, {
      configurable: !0,
      get: function () {
        return this["UNSAFE_" + n];
      },
      set: function (t) {
        Object.defineProperty(this, n, {
          configurable: !0,
          writable: !0,
          value: t
        });
      }
    });
  });
  var H$1 = n$2.event;
  function Z() {}
  function Y() {
    return this.cancelBubble;
  }
  function $$1() {
    return this.defaultPrevented;
  }
  n$2.event = function (n) {
    return H$1 && (n = H$1(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = $$1, n.nativeEvent = n;
  };
  var q,
    G = {
      configurable: !0,
      get: function () {
        return this.class;
      }
    },
    J = n$2.vnode;
  n$2.vnode = function (n) {
    var t = n.type,
      e = n.props,
      r = e;
    if ("string" == typeof t) {
      for (var u in r = {}, e) {
        var o = e[u];
        "value" === u && "defaultValue" in e && null == o || ("defaultValue" === u && "value" in e && null == e.value ? u = "value" : "download" === u && !0 === o ? o = "" : /ondoubleclick/i.test(u) ? u = "ondblclick" : /^onchange(textarea|input)/i.test(u + t) && !V(e.type) ? u = "oninput" : /^on(Ani|Tra|Tou|BeforeInp)/.test(u) ? u = u.toLowerCase() : P$1.test(u) ? u = u.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === o && (o = void 0), r[u] = o);
      }
      "select" == t && r.multiple && Array.isArray(r.value) && (r.value = w$4(e.children).forEach(function (n) {
        n.props.selected = -1 != r.value.indexOf(n.props.value);
      })), "select" == t && null != r.defaultValue && (r.value = w$4(e.children).forEach(function (n) {
        n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;
      })), n.props = r;
    }
    t && e.class != e.className && (G.enumerable = "className" in e, null != e.className && (r.class = e.className), Object.defineProperty(r, "className", G)), n.$$typeof = W, J && J(n);
  };
  var K = n$2.__r;
  n$2.__r = function (n) {
    K && K(n), q = n.__c;
  };
  var Q = {
      ReactCurrentDispatcher: {
        current: {
          readContext: function (n) {
            return q.__n[n.__c].props.value;
          }
        }
      }
    };
  "object" == typeof performance && "function" == typeof performance.now ? performance.now.bind(performance) : function () {
      return Date.now();
    };
  function fn(n) {
    return a$3.bind(null, n);
  }
  function cn(n) {
    return !!n && n.$$typeof === W;
  }
  function an(n) {
    return cn(n) ? S$1.apply(null, arguments) : n;
  }
  function sn(n) {
    return !!n.__k && (N$2(null, n), !0);
  }
  function hn(n) {
    return n && (n.base || 1 === n.nodeType && n) || null;
  }
  var pn = function (n, t) {
      return n(t);
    };
  var React = {
    useState: l$2,
    useReducer: p$2,
    useEffect: y$1,
    useLayoutEffect: h$2,
    useRef: s$2,
    useImperativeHandle: _$2,
    useMemo: d$2,
    useCallback: A$2,
    useContext: F$2,
    useDebugValue: T$3,
    version: "16.8.0",
    Children: k$2,
    render: z$2,
    hydrate: B$1,
    unmountComponentAtNode: sn,
    createPortal: I$1,
    createElement: a$3,
    createContext: q$1,
    createFactory: fn,
    cloneElement: an,
    createRef: h$3,
    Fragment: y$2,
    isValidElement: cn,
    findDOMNode: hn,
    Component: p$3,
    PureComponent: E,
    memo: g$2,
    forwardRef: x,
    unstable_batchedUpdates: pn,
    StrictMode: y$2,
    Suspense: L$1,
    SuspenseList: F$1,
    lazy: D,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: Q
  };

  function o$2(_, o, e, n, t) {
    var f = {};
    for (var l in o) "ref" != l && (f[l] = o[l]);
    var s,
      u,
      a = {
        type: _,
        props: f,
        key: e,
        ref: o && o.ref,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: ++n$2.__v,
        __source: n,
        __self: t
      };
    if ("function" == typeof _ && (s = _.defaultProps)) for (u in s) void 0 === f[u] && (f[u] = s[u]);
    return n$2.vnode && n$2.vnode(a), a;
  }

  function _mergeNamespaces$1(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */

  const nativeToString$3 = Object.prototype.toString;
  const nativeHasOwnProperty$2 = Object.prototype.hasOwnProperty;
  function isUndefined$4(obj) {
    return obj === undefined;
  }
  function isArray$5(obj) {
    return nativeToString$3.call(obj) === '[object Array]';
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has$2(target, key) {
    return nativeHasOwnProperty$2.call(target, key);
  }

  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */
  function forEach$2(collection, iterator) {
    let val, result;
    if (isUndefined$4(collection)) {
      return;
    }
    const convertKey = isArray$5(collection) ? toNum$2 : identity$2;
    for (let key in collection) {
      if (has$2(collection, key)) {
        val = collection[key];
        result = iterator(val, convertKey(key));
        if (result === false) {
          return val;
        }
      }
    }
  }
  function identity$2(arg) {
    return arg;
  }
  function toNum$2(arg) {
    return Number(arg);
  }

  /**
   * Assigns style attributes in a style-src compliant way.
   *
   * @param {Element} element
   * @param {...Object} styleSources
   *
   * @return {Element} the element
   */
  function assign$3(element, ...styleSources) {
    const target = element.style;
    forEach$2(styleSources, function (style) {
      if (!style) {
        return;
      }
      forEach$2(style, function (value, key) {
        target[key] = value;
      });
    });
    return element;
  }

  /**
   * Set attribute `name` to `val`, or get attr `name`.
   *
   * @param {Element} el
   * @param {String} name
   * @param {String} [val]
   * @api public
   */
  function attr$1(el, name, val) {
    // get
    if (arguments.length == 2) {
      return el.getAttribute(name);
    }

    // remove
    if (val === null) {
      return el.removeAttribute(name);
    }

    // set
    el.setAttribute(name, val);
    return el;
  }

  /**
   * Taken from https://github.com/component/classes
   *
   * Without the component bits.
   */

  /**
   * toString reference.
   */

  const toString$1 = Object.prototype.toString;

  /**
   * Wrap `el` in a `ClassList`.
   *
   * @param {Element} el
   * @return {ClassList}
   * @api public
   */

  function classes$1(el) {
    return new ClassList$1(el);
  }

  /**
   * Initialize a new ClassList for `el`.
   *
   * @param {Element} el
   * @api private
   */

  function ClassList$1(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
   * Add class `name` if not already present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList$1.prototype.add = function (name) {
    this.list.add(name);
    return this;
  };

  /**
   * Remove class `name` when present, or
   * pass a regular expression to remove
   * any which match.
   *
   * @param {String|RegExp} name
   * @return {ClassList}
   * @api public
   */

  ClassList$1.prototype.remove = function (name) {
    if ('[object RegExp]' == toString$1.call(name)) {
      return this.removeMatching(name);
    }
    this.list.remove(name);
    return this;
  };

  /**
   * Remove all classes matching `re`.
   *
   * @param {RegExp} re
   * @return {ClassList}
   * @api private
   */

  ClassList$1.prototype.removeMatching = function (re) {
    const arr = this.array();
    for (let i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
   * Toggle class `name`, can force state via `force`.
   *
   * For browsers that support classList, but do not support `force` yet,
   * the mistake will be detected and corrected.
   *
   * @param {String} name
   * @param {Boolean} force
   * @return {ClassList}
   * @api public
   */

  ClassList$1.prototype.toggle = function (name, force) {
    if ('undefined' !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  };

  /**
   * Return an array of classes.
   *
   * @return {Array}
   * @api public
   */

  ClassList$1.prototype.array = function () {
    return Array.from(this.list);
  };

  /**
   * Check if class `name` is present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList$1.prototype.has = ClassList$1.prototype.contains = function (name) {
    return this.list.contains(name);
  };

  /**
   * Remove all children from the given element.
   */
  function clear$1(el) {
    var c;
    while (el.childNodes.length) {
      c = el.childNodes[0];
      el.removeChild(c);
    }
    return el;
  }

  /**
   * @param { HTMLElement } element
   * @param { String } selector
   *
   * @return { boolean }
   */
  function matches(element, selector) {
    return element && typeof element.matches === 'function' && element.matches(selector);
  }

  /**
   * Closest
   *
   * @param {Element} el
   * @param {String} selector
   * @param {Boolean} checkYourSelf (optional)
   */
  function closest(element, selector, checkYourSelf) {
    var currentElem = checkYourSelf ? element : element.parentNode;
    while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {
      if (matches(currentElem, selector)) {
        return currentElem;
      }
      currentElem = currentElem.parentNode;
    }
    return matches(currentElem, selector) ? currentElem : null;
  }
  var componentEvent = {};
  var bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent',
    unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
    prefix$5 = bind$1 !== 'addEventListener' ? 'on' : '';

  /**
   * Bind `el` event `type` to `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var bind_1 = componentEvent.bind = function (el, type, fn, capture) {
    el[bind$1](prefix$5 + type, fn, capture || false);
    return fn;
  };

  /**
   * Unbind `el` event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var unbind_1 = componentEvent.unbind = function (el, type, fn, capture) {
    el[unbind$1](prefix$5 + type, fn, capture || false);
    return fn;
  };
  var event = /*#__PURE__*/_mergeNamespaces$1({
    __proto__: null,
    bind: bind_1,
    unbind: unbind_1,
    'default': componentEvent
  }, [componentEvent]);

  /**
   * Module dependencies.
   */

  /**
   * Delegate event `type` to `selector`
   * and invoke `fn(e)`. A callback function
   * is returned which may be passed to `.unbind()`.
   *
   * @param {Element} el
   * @param {String} selector
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  // Some events don't bubble, so we want to bind to the capture phase instead
  // when delegating.
  var forceCaptureEvents = ['focus', 'blur'];
  function bind$2(el, selector, type, fn, capture) {
    if (forceCaptureEvents.indexOf(type) !== -1) {
      capture = true;
    }
    return event.bind(el, type, function (e) {
      var target = e.target || e.srcElement;
      e.delegateTarget = closest(target, selector, true);
      if (e.delegateTarget) {
        fn.call(el, e);
      }
    }, capture);
  }

  /**
   * Unbind event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @api public
   */
  function unbind(el, type, fn, capture) {
    if (forceCaptureEvents.indexOf(type) !== -1) {
      capture = true;
    }
    return event.unbind(el, type, fn, capture);
  }
  var delegate = {
    bind: bind$2,
    unbind
  };

  /**
   * Expose `parse`.
   */

  var domify = parse$1;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug = false;
  var bugTestDiv;
  if (typeof document !== 'undefined') {
    bugTestDiv = document.createElement('div');
    // Setup
    bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
    bugTestDiv = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map$1 = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
  };
  map$1.td = map$1.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
  map$1.option = map$1.optgroup = [1, '<select multiple="multiple">', '</select>'];
  map$1.thead = map$1.tbody = map$1.colgroup = map$1.caption = map$1.tfoot = [1, '<table>', '</table>'];
  map$1.polyline = map$1.ellipse = map$1.polygon = map$1.circle = map$1.text = map$1.line = map$1.path = map$1.rect = map$1.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', '</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse$1(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);
    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = Object.prototype.hasOwnProperty.call(map$1, tag) ? map$1[tag] : map$1._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }
    return fragment;
  }
  var domify$1 = domify;
  function query(selector, el) {
    el = el || document;
    return el.querySelector(selector);
  }
  function all(selector, el) {
    el = el || document;
    return el.querySelectorAll(selector);
  }
  function remove$4(el) {
    el.parentNode && el.parentNode.removeChild(el);
  }

  /**
  The data structure for documents. @nonabstract
  */
  class Text$1 {
    /**
    @internal
    */
    constructor() {}
    /**
    Get the line description around the given position.
    */
    lineAt(pos) {
      if (pos < 0 || pos > this.length) throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
    line(n) {
      if (n < 1 || n > this.lines) throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
      return this.lineInner(n, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
    replace(from, to, text) {
      let parts = [];
      this.decompose(0, from, parts, 2 /* Open.To */);
      if (text.length) text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
      this.decompose(to, this.length, parts, 1 /* Open.From */);
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
    append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
    slice(from, to = this.length) {
      let parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
    eq(other) {
      if (other == this) return true;
      if (other.length != this.length || other.lines != this.lines) return false;
      let start = this.scanIdentical(other, 1),
        end = this.length - this.scanIdentical(other, -1);
      let a = new RawTextCursor(this),
        b = new RawTextCursor(other);
      for (let skip = start, pos = start;;) {
        a.next(skip);
        b.next(skip);
        skip = 0;
        if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
        pos += a.value.length;
        if (a.done || pos >= end) return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
    iter(dir = 1) {
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
    iterRange(from, to = this.length) {
      return new PartialTextCursor(this, from, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
    iterLines(from, to) {
      let inner;
      if (from == null) {
        inner = this.iter();
      } else {
        if (to == null) to = this.lines + 1;
        let start = this.line(from).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    @internal
    */
    toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
    toJSON() {
      let lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    static of(text) {
      if (text.length == 0) throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0]) return Text$1.empty;
      return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  }
  // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  class TextLeaf extends Text$1 {
    constructor(text, length = textLength(text)) {
      super();
      this.text = text;
      this.length = length;
    }
    get lines() {
      return this.text.length;
    }
    get children() {
      return null;
    }
    lineInner(target, isLine, line, offset) {
      for (let i = 0;; i++) {
        let string = this.text[i],
          end = offset + string.length;
        if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
        offset = end + 1;
        line++;
      }
    }
    decompose(from, to, target, open) {
      let text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1 /* Open.From */) {
        let prev = target.pop();
        let joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32 /* Tree.Branch */) {
          target.push(new TextLeaf(joined, prev.length + text.length));
        } else {
          let mid = joined.length >> 1;
          target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
    replace(from, to, text) {
      if (!(text instanceof TextLeaf)) return super.replace(from, to, text);
      let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      let newLen = this.length + text.length - (to - from);
      if (lines.length <= 32 /* Tree.Branch */) return new TextLeaf(lines, newLen);
      return TextNode.from(TextLeaf.split(lines, []), newLen);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      let result = "";
      for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
        let line = this.text[i],
          end = pos + line.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let line of this.text) target.push(line);
    }
    scanIdentical() {
      return 0;
    }
    static split(text, target) {
      let part = [],
        len = -1;
      for (let line of text) {
        part.push(line);
        len += line.length + 1;
        if (part.length == 32 /* Tree.Branch */) {
          target.push(new TextLeaf(part, len));
          part = [];
          len = -1;
        }
      }
      if (len > -1) target.push(new TextLeaf(part, len));
      return target;
    }
  }
  // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  class TextNode extends Text$1 {
    constructor(children, length) {
      super();
      this.children = children;
      this.length = length;
      this.lines = 0;
      for (let child of children) this.lines += child.lines;
    }
    lineInner(target, isLine, line, offset) {
      for (let i = 0;; i++) {
        let child = this.children[i],
          end = offset + child.length,
          endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
    decompose(from, to, target, open) {
      for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
        let child = this.children[i],
          end = pos + child.length;
        if (from <= end && to >= pos) {
          let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
          if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
    replace(from, to, text) {
      if (text.lines < this.lines) for (let i = 0, pos = 0; i < this.children.length; i++) {
        let child = this.children[i],
          end = pos + child.length;
        // Fast path: if the change only affects one child and the
        // child's size remains in the acceptable range, only update
        // that child
        if (from >= pos && to <= end) {
          let updated = child.replace(from - pos, to - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 /* Tree.BranchShift */ - 1 && updated.lines > totalLines >> 5 /* Tree.BranchShift */ + 1) {
            let copy = this.children.slice();
            copy[i] = updated;
            return new TextNode(copy, this.length - (to - from) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
      return super.replace(from, to, text);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      let result = "";
      for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
        let child = this.children[i],
          end = pos + child.length;
        if (pos > from && i) result += lineSep;
        if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let child of this.children) child.flatten(target);
    }
    scanIdentical(other, dir) {
      if (!(other instanceof TextNode)) return 0;
      let length = 0;
      let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
      for (;; iA += dir, iB += dir) {
        if (iA == eA || iB == eB) return length;
        let chA = this.children[iA],
          chB = other.children[iB];
        if (chA != chB) return length + chA.scanIdentical(chB, dir);
        length += chA.length + 1;
      }
    }
    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
      let lines = 0;
      for (let ch of children) lines += ch.lines;
      if (lines < 32 /* Tree.Branch */) {
        let flat = [];
        for (let ch of children) ch.flatten(flat);
        return new TextLeaf(flat, length);
      }
      let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */),
        maxChunk = chunk << 1,
        minChunk = chunk >> 1;
      let chunked = [],
        currentLines = 0,
        currentLen = -1,
        currentChunk = [];
      function add(child) {
        let last;
        if (child.lines > maxChunk && child instanceof TextNode) {
          for (let node of child.children) add(node);
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk) flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0) return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      for (let child of children) add(child);
      flush();
      return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
    }
  }
  Text$1.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
    let length = -1;
    for (let line of text) length += line.length + 1;
    return length;
  }
  function appendText(text, target, from = 0, to = 1e9) {
    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
      let line = text[i],
        end = pos + line.length;
      if (end >= from) {
        if (end > to) line = line.slice(0, to - pos);
        if (pos < from) line = line.slice(from - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  function sliceText(text, from, to) {
    return appendText(text, [""], from, to);
  }
  class RawTextCursor {
    constructor(text, dir = 1) {
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text];
      this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
    }
    nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (;;) {
        let last = this.nodes.length - 1;
        let top = this.nodes[last],
          offsetValue = this.offsets[last],
          offset = offsetValue >> 1;
        let size = top instanceof TextLeaf ? top.text.length : top.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0) this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top instanceof TextLeaf) {
          // Move to the next string
          let next = top.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          let next = top.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > next.length) {
            skip -= next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0) this.offsets[last]--;
            this.nodes.push(next);
            this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
          }
        }
      }
    }
    next(skip = 0) {
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  }
  class PartialTextCursor {
    constructor(text, start, end) {
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
      this.pos = start > end ? text.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit) skip = limit;
      limit -= skip;
      let {
        value
      } = this.cursor.next(skip);
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
    next(skip = 0) {
      if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
    get lineBreak() {
      return this.cursor.lineBreak && this.value != "";
    }
  }
  class LineCursor {
    constructor(inner) {
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    next(skip = 0) {
      let {
        done,
        lineBreak,
        value
      } = this.inner.next(skip);
      if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
    get lineBreak() {
      return false;
    }
  }
  if (typeof Symbol != "undefined") {
    Text$1.prototype[Symbol.iterator] = function () {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
      return this;
    };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  class Line {
    /**
    @internal
    */
    constructor(
    /**
    The position of the start of the line.
    */
    from,
    /**
    The position at the end of the line (_before_ the line break,
    or at the end of document for the last line).
    */
    to,
    /**
    This line's line number (1-based).
    */
    number,
    /**
    The line's content.
    */
    text) {
      this.from = from;
      this.to = to;
      this.number = number;
      this.text = text;
    }
    /**
    The length of the line (not including any line break after it).
    */
    get length() {
      return this.to - this.from;
    }
  }

  // Compressed representation of the Grapheme_Cluster_Break=Extend
  // information from
  // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
  // Each pair of elements represents a range, as an offet from the
  // previous range and a length. Numbers are in base-36, with the empty
  // string being a shorthand for 1.
  let extend$2 = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
  // Convert offsets into absolute values
  for (let i = 1; i < extend$2.length; i++) extend$2[i] += extend$2[i - 1];
  function isExtendingChar(code) {
    for (let i = 1; i < extend$2.length; i += 2) if (extend$2[i] > code) return extend$2[i - 1] <= code;
    return false;
  }
  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF;
  }
  const ZWJ = 0x200d;
  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos;
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt(str, pos);
    pos += codePointSize(prev);
    while (pos < str.length) {
      let next = codePointAt(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0,
          i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
          countBefore++;
          i -= 2;
        }
        if (countBefore % 2 == 0) break;else pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found;
      pos--;
    }
    return 0;
  }
  function surrogateLow(ch) {
    return ch >= 0xDC00 && ch < 0xE000;
  }
  function surrogateHigh(ch) {
    return ch >= 0xD800 && ch < 0xDC00;
  }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1)) return code0;
    return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint(code) {
    if (code <= 0xffff) return String.fromCharCode(code);
    code -= 0x10000;
    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up a JavaScript string.
  */
  function codePointSize(code) {
    return code < 0x10000 ? 1 : 2;
  }
  const DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/function (MapMode) {
    /**
    Map a position to a valid new position, even when its context
    was deleted.
    */
    MapMode[MapMode["Simple"] = 0] = "Simple";
    /**
    Return null if deletion happens across the position.
    */
    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
    /**
    Return null if the character _before_ the position is deleted.
    */
    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
    /**
    Return null if the character _after_ the position is deleted.
    */
    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode;
  }(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  class ChangeDesc {
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    constructor(
    /**
    @internal
    */
    sections) {
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    get length() {
      let result = 0;
      for (let i = 0; i < this.sections.length; i += 2) result += this.sections[i];
      return result;
    }
    /**
    The length of the document after the change.
    */
    get newLength() {
      let result = 0;
      for (let i = 0; i < this.sections.length; i += 2) {
        let ins = this.sections[i + 1];
        result += ins < 0 ? this.sections[i] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
    get empty() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
    iterGaps(f) {
      for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
        let len = this.sections[i++],
          ins = this.sections[i++];
        if (ins < 0) {
          f(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
    iterChangedRanges(f, individual = false) {
      iterChanges(this, f, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
    get invertedDesc() {
      let sections = [];
      for (let i = 0; i < this.sections.length;) {
        let len = this.sections[i++],
          ins = this.sections[i++];
        if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
      }
      return new ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
    composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `other` happened before the ones in `this`.
    */
    mapDesc(other, before = false) {
      return other.empty ? this : mapSet(this, other, before);
    }
    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
      let posA = 0,
        posB = 0;
      for (let i = 0; i < this.sections.length;) {
        let len = this.sections[i++],
          ins = this.sections[i++],
          endA = posA + len;
        if (ins < 0) {
          if (endA > pos) return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
          if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA) throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
    touchesRange(from, to = from) {
      for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
        let len = this.sections[i++],
          ins = this.sections[i++],
          end = pos + len;
        if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
    toString() {
      let result = "";
      for (let i = 0; i < this.sections.length;) {
        let len = this.sections[i++],
          ins = this.sections[i++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
    toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number")) throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new ChangeDesc(json);
    }
    /**
    @internal
    */
    static create(sections) {
      return new ChangeDesc(sections);
    }
  }
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  class ChangeSet extends ChangeDesc {
    constructor(sections,
    /**
    @internal
    */
    inserted) {
      super(sections);
      this.inserted = inserted;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    apply(doc) {
      if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
      iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
      return doc;
    }
    mapDesc(other, before = false) {
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
    invert(doc) {
      let sections = this.sections.slice(),
        inserted = [];
      for (let i = 0, pos = 0; i < sections.length; i += 2) {
        let len = sections[i],
          ins = sections[i + 1];
        if (ins >= 0) {
          sections[i] = ins;
          sections[i + 1] = len;
          let index = i >> 1;
          while (inserted.length < index) inserted.push(Text$1.empty);
          inserted.push(len ? doc.slice(pos, pos + len) : Text$1.empty);
        }
        pos += len;
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
    compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
    map(other, before = false) {
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
    iterChanges(f, individual = false) {
      iterChanges(this, f, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
    get desc() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
    filter(ranges) {
      let resultSections = [],
        resultInserted = [],
        filteredSections = [];
      let iter = new SectionIter(this);
      done: for (let i = 0, pos = 0;;) {
        let next = i == ranges.length ? 1e9 : ranges[i++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done) break done;
          let len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        let end = ranges[i++];
        while (pos < end) {
          if (iter.done) break done;
          let len = Math.min(iter.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(len);
          pos += len;
        }
      }
      return {
        changes: new ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
    toJSON() {
      let parts = [];
      for (let i = 0; i < this.sections.length; i += 2) {
        let len = this.sections[i],
          ins = this.sections[i + 1];
        if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[i >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
    static of(changes, length, lineSep) {
      let sections = [],
        inserted = [],
        pos = 0;
      let total = null;
      function flush(force = false) {
        if (!force && !sections.length) return;
        if (pos < length) addSection(sections, length - pos, -1);
        let set = new ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process(spec) {
        if (Array.isArray(spec)) {
          for (let sub of spec) process(sub);
        } else if (spec instanceof ChangeSet) {
          if (spec.length != length) throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          let {
            from,
            to = from,
            insert
          } = spec;
          if (from > to || from < 0 || to > length) throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
          let insText = !insert ? Text$1.empty : typeof insert == "string" ? Text$1.of(insert.split(lineSep || DefaultSplit)) : insert;
          let insLen = insText.length;
          if (from == to && insLen == 0) return;
          if (from < pos) flush();
          if (from > pos) addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
    static empty(length) {
      return new ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
      let sections = [],
        inserted = [];
      for (let i = 0; i < json.length; i++) {
        let part = json[i];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < i) inserted.push(Text$1.empty);
          inserted[i] = Text$1.of(part.slice(1));
          sections.push(part[0], inserted[i].length);
        }
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
    static createSet(sections, inserted) {
      return new ChangeSet(sections, inserted);
    }
  }
  function addSection(sections, len, ins, forceJoin = false) {
    if (len == 0 && ins <= 0) return;
    let last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
    if (value.length == 0) return;
    let index = sections.length - 2 >> 1;
    if (index < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index) values.push(Text$1.empty);
      values.push(value);
    }
  }
  function iterChanges(desc, f, individual) {
    let inserted = desc.inserted;
    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
      let len = desc.sections[i++],
        ins = desc.sections[i++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        let endA = posA,
          endB = posB,
          text = Text$1.empty;
        for (;;) {
          endA += len;
          endB += ins;
          if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);
          if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;
          len = desc.sections[i++];
          ins = desc.sections[i++];
        }
        f(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before, mkSet = false) {
    // Produce a copy of setA that applies to the document after setB
    // has been applied (assuming both start at the same document).
    let sections = [],
      insert = mkSet ? [] : null;
    let a = new SectionIter(setA),
      b = new SectionIter(setB);
    // Iterate over both sets in parallel. inserted tracks, for changes
    // in A that have to be processed piece-by-piece, whether their
    // content has been inserted already, and refers to the section
    // index.
    for (let inserted = -1;;) {
      if (a.ins == -1 && b.ins == -1) {
        // Move across ranges skipped by both sets.
        let len = Math.min(a.len, b.len);
        addSection(sections, len, -1);
        a.forward(len);
        b.forward(len);
      } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
        // If there's a change in B that comes before the next change in
        // A (ordered by start pos, then len, then before flag), skip
        // that (and process any changes in A it covers).
        let len = b.len;
        addSection(sections, b.ins, -1);
        while (len) {
          let piece = Math.min(a.len, len);
          if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
            addSection(sections, 0, a.ins);
            if (insert) addInsert(insert, sections, a.text);
            inserted = a.i;
          }
          a.forward(piece);
          len -= piece;
        }
        b.next();
      } else if (a.ins >= 0) {
        // Process the part of a change in A up to the start of the next
        // non-deletion change in B (if overlapping).
        let len = 0,
          left = a.len;
        while (left) {
          if (b.ins == -1) {
            let piece = Math.min(left, b.len);
            len += piece;
            left -= piece;
            b.forward(piece);
          } else if (b.ins == 0 && b.len < left) {
            left -= b.len;
            b.next();
          } else {
            break;
          }
        }
        addSection(sections, len, inserted < a.i ? a.ins : 0);
        if (insert && inserted < a.i) addInsert(insert, sections, a.text);
        inserted = a.i;
        a.forward(a.len - left);
      } else if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB, mkSet = false) {
    let sections = [];
    let insert = mkSet ? [] : null;
    let a = new SectionIter(setA),
      b = new SectionIter(setB);
    for (let open = false;;) {
      if (a.done && b.done) {
        return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
      } else if (a.ins == 0) {
        // Deletion in A
        addSection(sections, a.len, 0, open);
        a.next();
      } else if (b.len == 0 && !b.done) {
        // Insertion in B
        addSection(sections, 0, b.ins, open);
        if (insert) addInsert(insert, sections, b.text);
        b.next();
      } else if (a.done || b.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        let len = Math.min(a.len2, b.len),
          sectionLen = sections.length;
        if (a.ins == -1) {
          let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
          addSection(sections, len, insB, open);
          if (insert && insB) addInsert(insert, sections, b.text);
        } else if (b.ins == -1) {
          addSection(sections, a.off ? 0 : a.len, len, open);
          if (insert) addInsert(insert, sections, a.textBit(len));
        } else {
          addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
          if (insert && !b.off) addInsert(insert, sections, b.text);
        }
        open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
        a.forward2(len);
        b.forward(len);
      }
    }
  }
  class SectionIter {
    constructor(set) {
      this.set = set;
      this.i = 0;
      this.next();
    }
    next() {
      let {
        sections
      } = this.set;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
    get done() {
      return this.ins == -2;
    }
    get len2() {
      return this.ins < 0 ? this.len : this.ins;
    }
    get text() {
      let {
          inserted
        } = this.set,
        index = this.i - 2 >> 1;
      return index >= inserted.length ? Text$1.empty : inserted[index];
    }
    textBit(len) {
      let {
          inserted
        } = this.set,
        index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? Text$1.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
    }
    forward(len) {
      if (len == this.len) this.next();else {
        this.len -= len;
        this.off += len;
      }
    }
    forward2(len) {
      if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
        this.ins -= len;
        this.off += len;
      }
    }
  }

  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  class SelectionRange {
    constructor(
    /**
    The lower boundary of the range.
    */
    from,
    /**
    The upper boundary of the range.
    */
    to, flags) {
      this.from = from;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    get anchor() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
    get head() {
      return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
    get empty() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
    get assoc() {
      return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
    get bidiLevel() {
      let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
      return level == 3 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
    get goalColumn() {
      let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
      return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
    map(change, assoc = -1) {
      let from, to;
      if (this.empty) {
        from = to = change.mapPos(this.from, assoc);
      } else {
        from = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
    extend(from, to = from) {
      if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
      let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
    eq(other) {
      return this.anchor == other.anchor && this.head == other.head;
    }
    /**
    Return a JSON-serializable object representing the range.
    */
    toJSON() {
      return {
        anchor: this.anchor,
        head: this.head
      };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
    static fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
    static create(from, to, flags) {
      return new SelectionRange(from, to, flags);
    }
  }
  /**
  An editor selection holds one or more selection ranges.
  */
  class EditorSelection {
    constructor(
    /**
    The ranges in the selection, sorted by position. Ranges cannot
    overlap (but they may touch, if they aren't empty).
    */
    ranges,
    /**
    The index of the _main_ range in the selection (which is
    usually the range that was added last).
    */
    mainIndex) {
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    map(change, assoc = -1) {
      if (change.empty) return this;
      return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
    }
    /**
    Compare this selection to another selection.
    */
    eq(other) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
      for (let i = 0; i < this.ranges.length; i++) if (!this.ranges[i].eq(other.ranges[i])) return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
    get main() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
    asSingle() {
      return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
    addRange(range, main = true) {
      return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
    replaceRange(range, which = this.mainIndex) {
      let ranges = this.ranges.slice();
      ranges[which] = range;
      return EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
    toJSON() {
      return {
        ranges: this.ranges.map(r => r.toJSON()),
        main: this.mainIndex
      };
    }
    /**
    Create a selection from a JSON representation.
    */
    static fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
      return new EditorSelection(json.ranges.map(r => SelectionRange.fromJSON(r)), json.main);
    }
    /**
    Create a selection holding a single range.
    */
    static single(anchor, head = anchor) {
      return new EditorSelection([EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
    static create(ranges, mainIndex = 0) {
      if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
      for (let pos = 0, i = 0; i < ranges.length; i++) {
        let range = ranges[i];
        if (range.empty ? range.from <= pos : range.from < pos) return EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */);
    }
    /**
    Create a selection range.
    */
    static range(anchor, head, goalColumn) {
      let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */;
      return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | goal | 8 /* RangeFlag.AssocAfter */) : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0));
    }
    /**
    @internal
    */
    static normalized(ranges, mainIndex = 0) {
      let main = ranges[mainIndex];
      ranges.sort((a, b) => a.from - b.from);
      mainIndex = ranges.indexOf(main);
      for (let i = 1; i < ranges.length; i++) {
        let range = ranges[i],
          prev = ranges[i - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          let from = prev.from,
            to = Math.max(range.to, prev.to);
          if (i <= mainIndex) mainIndex--;
          ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
        }
      }
      return new EditorSelection(ranges, mainIndex);
    }
  }
  function checkSelection(selection, docLength) {
    for (let range of selection.ranges) if (range.to > docLength) throw new RangeError("Selection points outside of document");
  }
  let nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
  */
  class Facet {
    constructor(
    /**
    @internal
    */
    combine,
    /**
    @internal
    */
    compareInput,
    /**
    @internal
    */
    compare, isStatic, enables) {
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare;
      this.isStatic = isStatic;
      /**
      @internal
      */
      this.id = nextID++;
      this.default = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Define a new facet.
    */
    static define(config = {}) {
      return new Facet(config.combine || (a => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
    }
    /**
    Returns an extension that adds the given value to this facet.
    */
    of(value) {
      return new FacetProvider([], this, 0 /* Provider.Static */, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
    compute(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
    computeN(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
    }
    from(field, get) {
      if (!get) get = x => x;
      return this.compute([field], state => get(state.field(field)));
    }
  }
  function sameArray$1(a, b) {
    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  class FacetProvider {
    constructor(dependencies, facet, type, value) {
      this.dependencies = dependencies;
      this.facet = facet;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    dynamicSlot(addresses) {
      var _a;
      let getter = this.value;
      let compare = this.facet.compareInput;
      let id = this.id,
        idx = addresses[id] >> 1,
        multi = this.type == 2 /* Provider.Multi */;
      let depDoc = false,
        depSel = false,
        depAddrs = [];
      for (let dep of this.dependencies) {
        if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
      }
      return {
        create(state) {
          state.values[idx] = getter(state);
          return 1 /* SlotStatus.Changed */;
        },

        update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            let newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1 /* SlotStatus.Changed */;
            }
          }

          return 0;
        },
        reconfigure: (state, oldState) => {
          let newVal,
            oldAddr = oldState.config.address[id];
          if (oldAddr != null) {
            let oldVal = getAddr(oldState, oldAddr);
            if (this.dependencies.every(dep => {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
  }

  function compareArray(a, b, compare) {
    if (a.length != b.length) return false;
    for (let i = 0; i < a.length; i++) if (!compare(a[i], b[i])) return false;
    return true;
  }
  function ensureAll(state, addrs) {
    let changed = false;
    for (let addr of addrs) if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */) changed = true;
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    let providerAddrs = providers.map(p => addresses[p.id]);
    let providerTypes = providers.map(p => p.type);
    let dynamic = providerAddrs.filter(p => !(p & 1));
    let idx = addresses[facet.id] >> 1;
    function get(state) {
      let values = [];
      for (let i = 0; i < providerAddrs.length; i++) {
        let value = getAddr(state, providerAddrs[i]);
        if (providerTypes[i] == 2 /* Provider.Multi */) for (let val of value) values.push(val);else values.push(value);
      }
      return facet.combine(values);
    }
    return {
      create(state) {
        for (let addr of providerAddrs) ensureAddr(state, addr);
        state.values[idx] = get(state);
        return 1 /* SlotStatus.Changed */;
      },

      update(state, tr) {
        if (!ensureAll(state, dynamic)) return 0;
        let value = get(state);
        if (facet.compare(value, state.values[idx])) return 0;
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      },

      reconfigure(state, oldState) {
        let depChanged = ensureAll(state, providerAddrs);
        let oldProviders = oldState.config.facets[facet.id],
          oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        let value = get(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1 /* SlotStatus.Changed */;
      }
    };
  }

  const initField = /*@__PURE__*/Facet.define({
    static: true
  });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  class StateField {
    constructor(
    /**
    @internal
    */
    id, createF, updateF, compareF,
    /**
    @internal
    */
    spec) {
      this.id = id;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      /**
      @internal
      */
      this.provides = undefined;
    }
    /**
    Define a state field.
    */
    static define(config) {
      let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
      if (config.provide) field.provides = config.provide(field);
      return field;
    }
    create(state) {
      let init = state.facet(initField).find(i => i.field == this);
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
    slot(addresses) {
      let idx = addresses[this.id] >> 1;
      return {
        create: state => {
          state.values[idx] = this.create(state);
          return 1 /* SlotStatus.Changed */;
        },

        update: (state, tr) => {
          let oldVal = state.values[idx];
          let value = this.updateF(oldVal, tr);
          if (this.compareF(oldVal, value)) return 0;
          state.values[idx] = value;
          return 1 /* SlotStatus.Changed */;
        },

        reconfigure: (state, oldState) => {
          if (oldState.config.address[this.id] != null) {
            state.values[idx] = oldState.field(this);
            return 0;
          }
          state.values[idx] = this.create(state);
          return 1 /* SlotStatus.Changed */;
        }
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
    init(create) {
      return [this, initField.of({
        field: this,
        create
      })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
    get extension() {
      return this;
    }
  }
  const Prec_ = {
    lowest: 4,
    low: 3,
    default: 2,
    high: 1,
    highest: 0
  };
  function prec(value) {
    return ext => new PrecExtension(ext, value);
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  const Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /*@__PURE__*/prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /*@__PURE__*/prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    default: /*@__PURE__*/prec(Prec_.default),
    /**
    A lower-than-default precedence.
    */
    low: /*@__PURE__*/prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  class PrecExtension {
    constructor(inner, prec) {
      this.inner = inner;
      this.prec = prec;
    }
  }
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  class Compartment {
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
    reconfigure(content) {
      return Compartment.reconfigure.of({
        compartment: this,
        extension: content
      });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
    get(state) {
      return state.config.compartments.get(this);
    }
  }
  class CompartmentInstance {
    constructor(compartment, inner) {
      this.compartment = compartment;
      this.inner = inner;
    }
  }
  class Configuration {
    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
      this.base = base;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
    }

    staticFacet(facet) {
      let addr = this.address[facet.id];
      return addr == null ? facet.default : this.staticValues[addr >> 1];
    }
    static resolve(base, compartments, oldState) {
      let fields = [];
      let facets = Object.create(null);
      let newCompartments = new Map();
      for (let ext of flatten(base, compartments, newCompartments)) {
        if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
      }
      let address = Object.create(null);
      let staticValues = [];
      let dynamicSlots = [];
      for (let field of fields) {
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push(a => field.slot(a));
      }
      let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      for (let id in facets) {
        let providers = facets[id],
          facet = providers[0].facet;
        let oldProviders = oldFacets && oldFacets[id] || [];
        if (providers.every(p => p.type == 0 /* Provider.Static */)) {
          address[facet.id] = staticValues.length << 1 | 1;
          if (sameArray$1(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet));
          } else {
            let value = facet.combine(providers.map(p => p.value));
            staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
          }
        } else {
          for (let p of providers) {
            if (p.type == 0 /* Provider.Static */) {
              address[p.id] = staticValues.length << 1 | 1;
              staticValues.push(p.value);
            } else {
              address[p.id] = dynamicSlots.length << 1;
              dynamicSlots.push(a => p.dynamicSlot(a));
            }
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
        }
      }
      let dynamic = dynamicSlots.map(f => f(address));
      return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
    }
  }
  function flatten(extension, compartments, newCompartments) {
    let result = [[], [], [], [], []];
    let seen = new Map();
    function inner(ext, prec) {
      let known = seen.get(ext);
      if (known != null) {
        if (known <= prec) return;
        let found = result[known].indexOf(ext);
        if (found > -1) result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance) newCompartments.delete(ext.compartment);
      }
      seen.set(ext, prec);
      if (Array.isArray(ext)) {
        for (let e of ext) inner(e, prec);
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment)) throw new RangeError(`Duplicate use of compartment in extensions`);
        let content = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content);
        inner(content, prec);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec].push(ext);
        if (ext.provides) inner(ext.provides, prec);
      } else if (ext instanceof FacetProvider) {
        result[prec].push(ext);
        if (ext.facet.extensions) inner(ext.facet.extensions, Prec_.default);
      } else {
        let content = ext.extension;
        if (!content) throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
        inner(content, prec);
      }
    }
    inner(extension, Prec_.default);
    return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
    if (addr & 1) return 2 /* SlotStatus.Computed */;
    let idx = addr >> 1;
    let status = state.status[idx];
    if (status == 4 /* SlotStatus.Computing */) throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2 /* SlotStatus.Computed */) return status;
    state.status[idx] = 4 /* SlotStatus.Computing */;
    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  const languageData = /*@__PURE__*/Facet.define();
  const allowMultipleSelections = /*@__PURE__*/Facet.define({
    combine: values => values.some(v => v),
    static: true
  });
  const lineSeparator = /*@__PURE__*/Facet.define({
    combine: values => values.length ? values[0] : undefined,
    static: true
  });
  const changeFilter = /*@__PURE__*/Facet.define();
  const transactionFilter = /*@__PURE__*/Facet.define();
  const transactionExtender = /*@__PURE__*/Facet.define();
  const readOnly = /*@__PURE__*/Facet.define({
    combine: values => values.length ? values[0] : false
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  class Annotation {
    /**
    @internal
    */
    constructor(
    /**
    The annotation type.
    */
    type,
    /**
    The value of this annotation.
    */
    value) {
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    static define() {
      return new AnnotationType();
    }
  }
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  class AnnotationType {
    /**
    Create an instance of this annotation.
    */
    of(value) {
      return new Annotation(this, value);
    }
  }
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  class StateEffectType {
    /**
    @internal
    */
    constructor(
    // The `any` types in these function types are there to work
    // around TypeScript issue #37631, where the type guard on
    // `StateEffect.is` mysteriously stops working when these properly
    // have type `Value`.
    /**
    @internal
    */
    map) {
      this.map = map;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    of(value) {
      return new StateEffect(this, value);
    }
  }
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  class StateEffect {
    /**
    @internal
    */
    constructor(
    /**
    @internal
    */
    type,
    /**
    The value of this effect.
    */
    value) {
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    map(mapping) {
      let mapped = this.type.map(this.value, mapping);
      return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
    is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds.
    */
    static define(spec = {}) {
      return new StateEffectType(spec.map || (v => v));
    }
    /**
    Map an array of effects through a change set.
    */
    static mapEffects(effects, mapping) {
      if (!effects.length) return effects;
      let result = [];
      for (let effect of effects) {
        let mapped = effect.map(mapping);
        if (mapped) result.push(mapped);
      }
      return result;
    }
  }
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  class Transaction {
    constructor(
    /**
    The state from which the transaction starts.
    */
    startState,
    /**
    The document changes made by this transaction.
    */
    changes,
    /**
    The selection set by this transaction, or undefined if it
    doesn't explicitly set a selection.
    */
    selection,
    /**
    The effects added to the transaction.
    */
    effects,
    /**
    @internal
    */
    annotations,
    /**
    Whether the selection should be scrolled into view after this
    transaction is dispatched.
    */
    scrollIntoView) {
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView;
      /**
      @internal
      */
      this._doc = null;
      /**
      @internal
      */
      this._state = null;
      if (selection) checkSelection(selection, changes.newLength);
      if (!annotations.some(a => a.type == Transaction.time)) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    static create(startState, changes, selection, effects, annotations, scrollIntoView) {
      return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
    }
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    get newDoc() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
    get newSelection() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
    get state() {
      if (!this._state) this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
    annotation(type) {
      for (let ann of this.annotations) if (ann.type == type) return ann.value;
      return undefined;
    }
    /**
    Indicates whether the transaction changed the document.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
    get reconfigured() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
    isUserEvent(event) {
      let e = this.annotation(Transaction.userEvent);
      return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
    }
  }
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
    let result = [];
    for (let iA = 0, iB = 0;;) {
      let from, to;
      if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
        from = a[iA++];
        to = a[iA++];
      } else if (iB < b.length) {
        from = b[iB++];
        to = b[iB++];
      } else return result;
      if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a, b, sequential) {
    var _a;
    let mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b.changes;
      mapForB = ChangeSet.empty(b.changes.length);
      changes = a.changes.compose(b.changes);
    } else {
      mapForA = b.changes.map(a.changes);
      mapForB = a.changes.mapDesc(b.changes, true);
      changes = a.changes.compose(mapForA);
    }
    return {
      changes,
      selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
      effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
      annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
      scrollIntoView: a.scrollIntoView || b.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    let sel = spec.selection,
      annotations = asArray(spec.annotations);
    if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray(spec.effects),
      annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false) filter = false;
    for (let i = 1; i < specs.length; i++) {
      if (specs[i].filter === false) filter = false;
      let seq = !!specs[i].sequential;
      s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
    }
    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
    let state = tr.startState;
    // Change filters
    let result = true;
    for (let filter of state.facet(changeFilter)) {
      let value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
    }
    if (result !== true) {
      let changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        let filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    // Transaction filters
    let filters = state.facet(transactionFilter);
    for (let i = filters.length - 1; i >= 0; i--) {
      let filtered = filters[i](tr);
      if (filtered instanceof Transaction) tr = filtered;else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction) tr = filtered[0];else tr = resolveTransaction(state, asArray(filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    let state = tr.startState,
      extenders = state.facet(transactionExtender),
      spec = tr;
    for (let i = extenders.length - 1; i >= 0; i--) {
      let extension = extenders[i](tr);
      if (extension && Object.keys(extension).length) spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  const none$1 = [];
  function asArray(value) {
    return value == null ? none$1 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/function (CharCategory) {
    /**
    Word characters.
    */
    CharCategory[CharCategory["Word"] = 0] = "Word";
    /**
    Whitespace.
    */
    CharCategory[CharCategory["Space"] = 1] = "Space";
    /**
    Anything else.
    */
    CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory;
  }(CharCategory || (CharCategory = {}));
  const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  let wordChar;
  try {
    wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_) {}
  function hasWordChar(str) {
    if (wordChar) return wordChar.test(str);
    for (let i = 0; i < str.length; i++) {
      let ch = str[i];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return char => {
      if (!/\S/.test(char)) return CharCategory.Space;
      if (hasWordChar(char)) return CharCategory.Word;
      for (let i = 0; i < wordChars.length; i++) if (char.indexOf(wordChars[i]) > -1) return CharCategory.Word;
      return CharCategory.Other;
    };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  class EditorState {
    constructor(
    /**
    @internal
    */
    config,
    /**
    The current document.
    */
    doc,
    /**
    The current selection.
    */
    selection,
    /**
    @internal
    */
    values, computeSlot, tr) {
      this.config = config;
      this.doc = doc;
      this.selection = selection;
      this.values = values;
      this.status = config.statusTemplate.slice();
      this.computeSlot = computeSlot;
      // Fill in the computed state immediately, so that further queries
      // for it made during the update return this state
      if (tr) tr._state = this;
      for (let i = 0; i < this.config.dynamicSlots.length; i++) ensureAddr(this, i << 1);
      this.computeSlot = null;
    }
    field(field, require = true) {
      let addr = this.config.address[field.id];
      if (addr == null) {
        if (require) throw new RangeError("Field is not present in this state");
        return undefined;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
    update(...specs) {
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
    applyTransaction(tr) {
      let conf = this.config,
        {
          base,
          compartments
        } = conf;
      for (let effect of tr.effects) {
        if (effect.is(Compartment.reconfigure)) {
          if (conf) {
            compartments = new Map();
            conf.compartments.forEach((val, key) => compartments.set(key, val));
            conf = null;
          }
          compartments.set(effect.value.compartment, effect.value.extension);
        } else if (effect.is(StateEffect.reconfigure)) {
          conf = null;
          base = effect.value;
        } else if (effect.is(StateEffect.appendConfig)) {
          conf = null;
          base = asArray(base).concat(effect.value);
        }
      }
      let startValues;
      if (!conf) {
        conf = Configuration.resolve(base, compartments, this);
        let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
    replaceSelection(text) {
      if (typeof text == "string") text = this.toText(text);
      return this.changeByRange(range => ({
        changes: {
          from: range.from,
          to: range.to,
          insert: text
        },
        range: EditorSelection.cursor(range.from + text.length)
      }));
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    changeByRange(f) {
      let sel = this.selection;
      let result1 = f(sel.ranges[0]);
      let changes = this.changes(result1.changes),
        ranges = [result1.range];
      let effects = asArray(result1.effects);
      for (let i = 1; i < sel.ranges.length; i++) {
        let result = f(sel.ranges[i]);
        let newChanges = this.changes(result.changes),
          newMapped = newChanges.map(changes);
        for (let j = 0; j < i; j++) ranges[j] = ranges[j].map(newMapped);
        let mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
    changes(spec = []) {
      if (spec instanceof ChangeSet) return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
    toText(string) {
      return Text$1.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
    sliceDoc(from = 0, to = this.doc.length) {
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
    facet(facet) {
      let addr = this.config.address[facet.id];
      if (addr == null) return facet.default;
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
    toJSON(fields) {
      let result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields) for (let prop in fields) {
        let value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
    static fromJSON(json, config = {}, fields) {
      if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
      let fieldInit = [];
      if (fields) for (let prop in fields) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields[prop],
            value = json[prop];
          fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
        }
      }
      return EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
    static create(config = {}) {
      let configuration = Configuration.resolve(config.extensions || [], new Map());
      let doc = config.doc instanceof Text$1 ? config.doc : Text$1.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
      let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
      checkSelection(selection, doc.length);
      if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
      return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
    }
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    get tabSize() {
      return this.facet(EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
    get lineBreak() {
      return this.facet(EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
    get readOnly() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
    phrase(phrase, ...insert) {
      for (let map of this.facet(EditorState.phrases)) if (Object.prototype.hasOwnProperty.call(map, phrase)) {
        phrase = map[phrase];
        break;
      }
      if (insert.length) phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
        if (i == "$") return "$";
        let n = +(i || 1);
        return !n || n > insert.length ? m : insert[n - 1];
      });
      return phrase;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
    languageDataAt(name, pos, side = -1) {
      let values = [];
      for (let provider of this.facet(languageData)) {
        for (let result of provider(this, pos, side)) {
          if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
        }
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
    charCategorizer(at) {
      return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
    wordAt(pos) {
      let {
        text,
        from,
        length
      } = this.doc.lineAt(pos);
      let cat = this.charCategorizer(pos);
      let start = pos - from,
        end = pos - from;
      while (start > 0) {
        let prev = findClusterBreak(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word) break;
        start = prev;
      }
      while (end < length) {
        let next = findClusterBreak(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word) break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from, end + from);
    }
  }
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
    combine: values => values.length ? values[0] : 4
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
    compare(a, b) {
      let kA = Object.keys(a),
        kB = Object.keys(b);
      return kA.length == kB.length && kA.every(k => a[k] == b[k]);
    }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults,
  // Should hold only the optional properties of Config, but I haven't managed to express that
  combine = {}) {
    let result = {};
    for (let config of configs) for (let key of Object.keys(config)) {
      let value = config[key],
        current = result[key];
      if (current === undefined) result[key] = value;else if (current === value || value === undefined) ; // No conflict
      else if (Object.hasOwnProperty.call(combine, key)) result[key] = combine[key](current, value);else throw new Error("Config merge conflict for field " + key);
    }
    for (let key in defaults) if (result[key] === undefined) result[key] = defaults[key];
    return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  class RangeValue {
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
    range(from, to = from) {
      return Range$1.create(from, to, this);
    }
  }
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  class Range$1 {
    constructor(
    /**
    The range's start position.
    */
    from,
    /**
    Its end position.
    */
    to,
    /**
    The value associated with this range.
    */
    value) {
      this.from = from;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    static create(from, to, value) {
      return new Range$1(from, to, value);
    }
  }
  function cmpRange(a, b) {
    return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  class Chunk {
    constructor(from, to, value,
    // Chunks are marked with the largest point that occurs
    // in them (or -1 for no points), so that scans that are
    // only interested in points (such as the
    // heightmap-related logic) can skip range-only chunks.
    maxPoint) {
      this.from = from;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    get length() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
    findIndex(pos, side, end, startAt = 0) {
      let arr = end ? this.to : this.from;
      for (let lo = startAt, hi = arr.length;;) {
        if (lo == hi) return lo;
        let mid = lo + hi >> 1;
        let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo) return diff >= 0 ? lo : hi;
        if (diff >= 0) hi = mid;else lo = mid + 1;
      }
    }
    between(offset, from, to, f) {
      for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++) if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false) return false;
    }
    map(offset, changes) {
      let value = [],
        from = [],
        to = [],
        newPos = -1,
        maxPoint = -1;
      for (let i = 0; i < this.value.length; i++) {
        let val = this.value[i],
          curFrom = this.from[i] + offset,
          curTo = this.to[i] + offset,
          newFrom,
          newTo;
        if (curFrom == curTo) {
          let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null) continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom) continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
        if (newPos < 0) newPos = newFrom;
        if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return {
        mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
        pos: newPos
      };
    }
  }
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  class RangeSet {
    constructor(
    /**
    @internal
    */
    chunkPos,
    /**
    @internal
    */
    chunk,
    /**
    @internal
    */
    nextLayer,
    /**
    @internal
    */
    maxPoint) {
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    static create(chunkPos, chunk, nextLayer, maxPoint) {
      return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
    /**
    @internal
    */
    get length() {
      let last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
    get size() {
      if (this.isEmpty) return 0;
      let size = this.nextLayer.size;
      for (let chunk of this.chunk) size += chunk.value.length;
      return size;
    }
    /**
    @internal
    */
    chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
    update(updateSpec) {
      let {
        add = [],
        sort = false,
        filterFrom = 0,
        filterTo = this.length
      } = updateSpec;
      let filter = updateSpec.filter;
      if (add.length == 0 && !filter) return this;
      if (sort) add = add.slice().sort(cmpRange);
      if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
      let cur = new LayerCursor(this, null, -1).goto(0),
        i = 0,
        spill = [];
      let builder = new RangeSetBuilder();
      while (cur.value || i < add.length) {
        if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
          let range = add[i++];
          if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
        } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
          cur.nextChunk();
        } else {
          if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
            if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(Range$1.create(cur.from, cur.to, cur.value));
          }
          cur.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
        add: spill,
        filter,
        filterFrom,
        filterTo
      }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
    map(changes) {
      if (changes.empty || this.isEmpty) return this;
      let chunks = [],
        chunkPos = [],
        maxPoint = -1;
      for (let i = 0; i < this.chunk.length; i++) {
        let start = this.chunkPos[i],
          chunk = this.chunk[i];
        let touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          let {
            mapped,
            pos
          } = chunk.map(start, changes);
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      let next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
    between(from, to, f) {
      if (this.isEmpty) return;
      for (let i = 0; i < this.chunk.length; i++) {
        let start = this.chunkPos[i],
          chunk = this.chunk[i];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
      }
      this.nextLayer.between(from, to, f);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
    iter(from = 0) {
      return HeapCursor.from([this]).goto(from);
    }
    /**
    @internal
    */
    get isEmpty() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
    static iter(sets, from = 0) {
      return HeapCursor.from(sets).goto(from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
    static compare(oldSets, newSets,
    /**
    This indicates how the underlying data changed between these
    ranges, and is needed to synchronize the iteration. `from` and
    `to` are coordinates in the _new_ space, after these changes.
    */
    textDiff, comparator,
    /**
    Can be used to ignore all non-point ranges, and points below
    the given size. When -1, all ranges are compared.
    */
    minPointSize = -1) {
      let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let sharedChunks = findSharedChunks(a, b, textDiff);
      let sideA = new SpanCursor(a, sharedChunks, minPointSize);
      let sideB = new SpanCursor(b, sharedChunks, minPointSize);
      textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
      if (textDiff.empty && textDiff.length == 0) compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
    static eq(oldSets, newSets, from = 0, to) {
      if (to == null) to = 1000000000 /* C.Far */ - 1;
      let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
      let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
      if (a.length != b.length) return false;
      if (!a.length) return true;
      let sharedChunks = findSharedChunks(a, b);
      let sideA = new SpanCursor(a, sharedChunks, 0).goto(from),
        sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
      for (;;) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
        if (sideA.to > to) return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
    static spans(sets, from, to, iterator,
    /**
    When given and greater than -1, only points of at least this
    size are taken into account.
    */
    minPointSize = -1) {
      let cursor = new SpanCursor(sets, null, minPointSize).goto(from),
        pos = from;
      let openRanges = cursor.openStart;
      for (;;) {
        let curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          let active = cursor.activeForPoint(cursor.to);
          let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
    static of(ranges, sort = false) {
      let build = new RangeSetBuilder();
      for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges) build.add(range.from, range.to, range.value);
      return build.finish();
    }
  }
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1) for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
      let cur = ranges[i];
      if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
      prev = cur;
    }
    return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  class RangeSetBuilder {
    /**
    Create an empty builder.
    */
    constructor() {
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1000000000 /* C.Far */;
      this.lastTo = -1000000000 /* C.Far */;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    add(from, to, value) {
      if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
    addInner(from, to, value) {
      let diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0) return false;
      if (this.from.length == 250 /* C.ChunkSize */) this.finishChunk(true);
      if (this.chunkStart < 0) this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
    addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
      if (this.from.length) this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      let last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
    finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
    finishInner(next) {
      if (this.from.length) this.finishChunk(false);
      if (this.chunks.length == 0) return next;
      let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null; // Make sure further `add` calls produce errors
      return result;
    }
  }
  function findSharedChunks(a, b, textDiff) {
    let inA = new Map();
    for (let set of a) for (let i = 0; i < set.chunk.length; i++) if (set.chunk[i].maxPoint <= 0) inA.set(set.chunk[i], set.chunkPos[i]);
    let shared = new Set();
    for (let set of b) for (let i = 0; i < set.chunk.length; i++) {
      let known = inA.get(set.chunk[i]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length))) shared.add(set.chunk[i]);
    }
    return shared;
  }
  class LayerCursor {
    constructor(layer, skip, minPoint, rank = 0) {
      this.layer = layer;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    get endSide() {
      return this.value ? this.value.endSide : 0;
    }
    goto(pos, side = -1000000000 /* C.Far */) {
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
    gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        let next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
    forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
    }
    next() {
      for (;;) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1000000000 /* C.Far */;
          this.value = null;
          break;
        } else {
          let chunkPos = this.layer.chunkPos[this.chunkIndex],
            chunk = this.layer.chunk[this.chunkIndex];
          let from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
        }
      }
    }
    setRangeIndex(index) {
      if (index == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index;
      }
    }
    nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
    compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  }
  class HeapCursor {
    constructor(heap) {
      this.heap = heap;
    }
    static from(sets, skip = null, minPoint = -1) {
      let heap = [];
      for (let i = 0; i < sets.length; i++) {
        for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
          if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, i));
        }
      }
      return heap.length == 1 ? heap[0] : new HeapCursor(heap);
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    goto(pos, side = -1000000000 /* C.Far */) {
      for (let cur of this.heap) cur.goto(pos, side);
      for (let i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);
      this.next();
      return this;
    }
    forward(pos, side) {
      for (let cur of this.heap) cur.forward(pos, side);
      for (let i = this.heap.length >> 1; i >= 0; i--) heapBubble(this.heap, i);
      if ((this.to - pos || this.value.endSide - side) < 0) this.next();
    }
    next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1000000000 /* C.Far */;
        this.value = null;
        this.rank = -1;
      } else {
        let top = this.heap[0];
        this.from = top.from;
        this.to = top.to;
        this.value = top.value;
        this.rank = top.rank;
        if (top.value) top.next();
        heapBubble(this.heap, 0);
      }
    }
  }
  function heapBubble(heap, index) {
    for (let cur = heap[index];;) {
      let childIndex = (index << 1) + 1;
      if (childIndex >= heap.length) break;
      let child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur.compare(child) < 0) break;
      heap[childIndex] = cur;
      heap[index] = child;
      index = childIndex;
    }
  }
  class SpanCursor {
    constructor(sets, skip, minPoint) {
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      // A currently active point range, if any
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1000000000 /* C.Far */;
      this.endSide = 0;
      // The amount of open active ranges at the start of the iterator.
      // Not including points.
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    goto(pos, side = -1000000000 /* C.Far */) {
      this.cursor.goto(pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
    forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
    removeActive(index) {
      remove$3(this.active, index);
      remove$3(this.activeTo, index);
      remove$3(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    addActive(trackOpen) {
      let i = 0,
        {
          value,
          to,
          rank
        } = this.cursor;
      while (i < this.activeRank.length && this.activeRank[i] <= rank) i++;
      insert(this.active, i, value);
      insert(this.activeTo, i, to);
      insert(this.activeRank, i, rank);
      if (trackOpen) insert(trackOpen, i, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
    next() {
      let from = this.to,
        wasPoint = this.point;
      this.point = null;
      let trackOpen = this.openStart < 0 ? [] : null;
      for (;;) {
        let a = this.minActive;
        if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a] > from) {
            this.to = this.activeTo[a];
            this.endSide = this.active[a].endSide;
            break;
          }
          this.removeActive(a);
          if (trackOpen) remove$3(trackOpen, a);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1000000000 /* C.Far */;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          let nextVal = this.cursor.value;
          if (!nextVal.point) {
            // Opening a range
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            // Ignore any non-empty points that end precisely at the end of the prev point
            this.cursor.next();
          } else {
            // New point
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--) this.openStart++;
      }
    }
    activeForPoint(to) {
      if (!this.active.length) return this.active;
      let active = [];
      for (let i = this.active.length - 1; i >= 0; i--) {
        if (this.activeRank[i] < this.pointRank) break;
        if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide) active.push(this.active[i]);
      }
      return active.reverse();
    }
    openEnd(to) {
      let open = 0;
      for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--) open++;
      return open;
    }
  }
  function compare(a, startA, b, startB, length, comparator) {
    a.goto(startA);
    b.goto(startB);
    let endB = startB + length;
    let pos = startB,
      dPos = startB - startA;
    for (;;) {
      let diff = a.to + dPos - b.to || a.endSide - b.endSide;
      let end = diff < 0 ? a.to + dPos : b.to,
        clipEnd = Math.min(end, endB);
      if (a.point || b.point) {
        if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
      } else {
        if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
      }
      if (end > endB) break;
      pos = end;
      if (diff <= 0) a.next();
      if (diff >= 0) b.next();
    }
  }
  function sameValues(a, b) {
    if (a.length != b.length) return false;
    for (let i = 0; i < a.length; i++) if (a[i] != b[i] && !a[i].eq(b[i])) return false;
    return true;
  }
  function remove$3(array, index) {
    for (let i = index, e = array.length - 1; i < e; i++) array[i] = array[i + 1];
    array.pop();
  }
  function insert(array, index, value) {
    for (let i = array.length - 1; i >= index; i--) array[i + 1] = array[i];
    array[index] = value;
  }
  function findMinIndex(value, array) {
    let found = -1,
      foundPos = 1000000000 /* C.Far */;
    for (let i = 0; i < array.length; i++) if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array[i];
    }
    return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize, to = string.length) {
    let n = 0;
    for (let i = 0; i < to;) {
      if (string.charCodeAt(i) == 9) {
        n += tabSize - n % tabSize;
        i++;
      } else {
        n++;
        i = findClusterBreak(string, i);
      }
    }
    return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
    for (let i = 0, n = 0;;) {
      if (n >= col) return i;
      if (i == string.length) break;
      n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
      i = findClusterBreak(string, i);
    }
    return strict === true ? -1 : string.length;
  }

  const C$1 = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C$1 : Symbol.for(C$1);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {
        finish
      } = options || {};
      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
      }
      function render(selectors, spec, target, isKeyframes) {
        let local = [],
          isAt = /^@(\w+)\b/.exec(selectors[0]),
          keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";");
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)), value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
        }
      }
      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() {
      return this.rules.join("\n");
    }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C$1 + id.toString(36);
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    static mount(root, modules) {
      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
    }
  }
  let adoptedSet = null;
  class StyleSet {
    constructor(root) {
      if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
        if (adoptedSet) {
          root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
          return root[SET] = adoptedSet;
        }
        this.sheet = new CSSStyleSheet();
        root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
        adoptedSet = this;
      } else {
        this.styleTag = (root.ownerDocument || root).createElement("style");
        let target = root.head || root;
        target.insertBefore(this.styleTag, target.firstChild);
      }
      this.modules = [];
      root[SET] = this;
    }
    mount(modules) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */,
        j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i],
          index = this.modules.indexOf(mod);
        if (index < j && index > -1) {
          // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++) sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }
      if (!sheet) {
        let text = "";
        for (let i = 0; i < this.modules.length; i++) text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
      }
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };
  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };
  var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
  typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  var brokenModifierNames = mac || chrome$1 && +chrome$1[1] < 57;

  // Fill in the digit keys
  for (var i$1 = 0; i$1 < 10; i$1++) base[48 + i$1] = base[96 + i$1] = String(i$1);

  // The function keys
  for (var i$1 = 1; i$1 <= 24; i$1++) base[i$1 + 111] = "F" + i$1;

  // And the alphabetic keys
  for (var i$1 = 65; i$1 <= 90; i$1++) {
    base[i$1] = String.fromCharCode(i$1 + 32);
    shift[i$1] = String.fromCharCode(i$1);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
  function keyName(event) {
    var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie$1 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name;
  }

  function getSelection(root) {
    let target;
    // Browsers differ on whether shadow roots have a getSelection
    // method. If it exists, use that, otherwise, call it on the
    // document.
    if (root.nodeType == 11) {
      // Shadow root
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function deepActiveElement(doc) {
    let elt = doc.activeElement;
    while (elt && elt.shadowRoot) elt = elt.shadowRoot.activeElement;
    return elt;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode) return false;
    try {
      // Firefox will raise 'permission denied' errors when accessing
      // properties of `sel.anchorNode` when it's in a generated CSS
      // element.
      return contains(dom, selection.anchorNode);
    } catch (_) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node) {
    for (var index = 0;; index++) {
      node = node.previousSibling;
      if (!node) return index;
    }
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (;;) {
      if (node == targetNode && off == targetOff) return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV") return false;
        let parent = node.parentNode;
        if (!parent || parent.nodeType != 1) return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false") return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  const Rect0 = {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  function flattenRect(rect, left) {
    let x = left ? rect.left : rect.right;
    return {
      left: x,
      right: x,
      top: rect.top,
      bottom: rect.bottom
    };
  }
  function windowRect(win) {
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
    let doc = dom.ownerDocument,
      win = doc.defaultView || window;
    for (let cur = dom; cur;) {
      if (cur.nodeType == 1) {
        // Element
        let bounding,
          top = cur == doc.body;
        if (top) {
          bounding = windowRect(win);
        } else {
          if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
            cur = cur.assignedSlot || cur.parentNode;
            continue;
          }
          let rect = cur.getBoundingClientRect();
          // Make sure scrollbar width isn't included in the rectangle
          bounding = {
            left: rect.left,
            right: rect.left + cur.clientWidth,
            top: rect.top,
            bottom: rect.top + cur.clientHeight
          };
        }
        let moveX = 0,
          moveY = 0;
        if (y == "nearest") {
          if (rect.top < bounding.top) {
            moveY = -(bounding.top - rect.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);
          }
        } else {
          let rectHeight = rect.bottom - rect.top,
            boundingHeight = bounding.bottom - bounding.top;
          let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x == "nearest") {
          if (rect.left < bounding.left) {
            moveX = -(bounding.left - rect.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);
          }
        } else {
          let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top) {
            win.scrollBy(moveX, moveY);
          } else {
            let movedX = 0,
              movedY = 0;
            if (moveY) {
              let start = cur.scrollTop;
              cur.scrollTop += moveY;
              movedY = cur.scrollTop - start;
            }
            if (moveX) {
              let start = cur.scrollLeft;
              cur.scrollLeft += moveX;
              movedX = cur.scrollLeft - start;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1) x = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1) y = "nearest";
          }
        }
        if (top) break;
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        // A shadow root
        cur = cur.host;
      } else {
        break;
      }
    }
  }
  function scrollableParent(dom) {
    let doc = dom.ownerDocument;
    for (let cur = dom.parentNode; cur;) {
      if (cur == doc.body) {
        break;
      } else if (cur.nodeType == 1) {
        if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth) return cur;
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        cur = cur.host;
      } else {
        break;
      }
    }
    return null;
  }
  class DOMSelectionState {
    constructor() {
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
    setRange(range) {
      this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
    }
    set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
    if (dom.setActive) return dom.setActive(); // in IE
    if (preventScrollSupported) return dom.focus(preventScrollSupported);
    let stack = [];
    for (let cur = dom; cur; cur = cur.parentNode) {
      stack.push(cur, cur.scrollTop, cur.scrollLeft);
      if (cur == cur.ownerDocument) break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = {
          preventScroll: true
        };
        return true;
      }
    } : undefined);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (let i = 0; i < stack.length;) {
        let elt = stack[i++],
          top = stack[i++],
          left = stack[i++];
        if (elt.scrollTop != top) elt.scrollTop = top;
        if (elt.scrollLeft != left) elt.scrollLeft = left;
      }
    }
  }
  let scratchRange;
  function textRange(node, from, to = from) {
    let range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from);
    return range;
  }
  function dispatchKey(elt, name, code) {
    let options = {
      key: name,
      code: name,
      keyCode: code,
      which: code,
      cancelable: true
    };
    let down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    let up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  function clearAttributes(node) {
    while (node.attributes.length) node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
    let node = selection.focusNode,
      offset = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;
    for (;;) {
      if (offset) {
        if (node.nodeType != 1) return false;
        let prev = node.childNodes[offset - 1];
        if (prev.contentEditable == "false") offset--;else {
          node = prev;
          offset = maxOffset(node);
        }
      } else if (node == doc) {
        return true;
      } else {
        offset = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  class DOMPos {
    constructor(node, offset, precise = true) {
      this.node = node;
      this.offset = offset;
      this.precise = precise;
    }
    static before(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom), precise);
    }
    static after(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  }
  const noChildren = [];
  class ContentView {
    constructor() {
      this.parent = null;
      this.dom = null;
      this.dirty = 2 /* Dirty.Node */;
    }

    get editorView() {
      if (!this.parent) throw new Error("Accessing view in orphan content view");
      return this.parent.editorView;
    }
    get overrideDOMText() {
      return null;
    }
    get posAtStart() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
    get posAtEnd() {
      return this.posAtStart + this.length;
    }
    posBefore(view) {
      let pos = this.posAtStart;
      for (let child of this.children) {
        if (child == view) return pos;
        pos += child.length + child.breakAfter;
      }
      throw new RangeError("Invalid child in posBefore");
    }
    posAfter(view) {
      return this.posBefore(view) + view.length;
    }
    // Will return a rectangle directly before (when side < 0), after
    // (side > 0) or directly on (when the browser supports it) the
    // given position.
    coordsAt(_pos, _side) {
      return null;
    }
    sync(track) {
      if (this.dirty & 2 /* Dirty.Node */) {
        let parent = this.dom;
        let prev = null,
          next;
        for (let child of this.children) {
          if (child.dirty) {
            if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
              let contentView = ContentView.get(next);
              if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);
            }
            child.sync(track);
            child.dirty = 0 /* Dirty.Not */;
          }

          next = prev ? prev.nextSibling : parent.firstChild;
          if (track && !track.written && track.node == parent && next != child.dom) track.written = true;
          if (child.dom.parentNode == parent) {
            while (next && next != child.dom) next = rm$1(next);
          } else {
            parent.insertBefore(child.dom, next);
          }
          prev = child.dom;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track && track.node == parent) track.written = true;
        while (next) next = rm$1(next);
      } else if (this.dirty & 1 /* Dirty.Child */) {
        for (let child of this.children) if (child.dirty) {
          child.sync(track);
          child.dirty = 0 /* Dirty.Not */;
        }
      }
    }

    reuseDOM(_dom) {}
    localPosFromDOM(node, offset) {
      let after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (;;) {
          let parent = node.parentNode;
          if (parent == this.dom) break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild) bias = -1;else bias = 1;
          }
          node = parent;
        }
        if (bias < 0) after = node;else after = node.nextSibling;
      }
      if (after == this.dom.firstChild) return 0;
      while (after && !ContentView.get(after)) after = after.nextSibling;
      if (!after) return this.length;
      for (let i = 0, pos = 0;; i++) {
        let child = this.children[i];
        if (child.dom == after) return pos;
        pos += child.length + child.breakAfter;
      }
    }
    domBoundsAround(from, to, offset = 0) {
      let fromI = -1,
        fromStart = -1,
        toI = -1,
        toEnd = -1;
      for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
        let child = this.children[i],
          end = pos + child.length;
        if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
    markDirty(andParent = false) {
      this.dirty |= 2 /* Dirty.Node */;
      this.markParentsDirty(andParent);
    }
    markParentsDirty(childList) {
      for (let parent = this.parent; parent; parent = parent.parent) {
        if (childList) parent.dirty |= 2 /* Dirty.Node */;
        if (parent.dirty & 1 /* Dirty.Child */) return;
        parent.dirty |= 1 /* Dirty.Child */;
        childList = false;
      }
    }
    setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.dirty) this.markParentsDirty(true);
      }
    }
    setDOM(dom) {
      if (this.dom) this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
    get rootView() {
      for (let v = this;;) {
        let parent = v.parent;
        if (!parent) return v;
        v = parent;
      }
    }
    replaceChildren(from, to, children = noChildren) {
      this.markDirty();
      for (let i = from; i < to; i++) {
        let child = this.children[i];
        if (child.parent == this) child.destroy();
      }
      this.children.splice(from, to - from, ...children);
      for (let i = 0; i < children.length; i++) children[i].setParent(this);
    }
    ignoreMutation(_rec) {
      return false;
    }
    ignoreEvent(_event) {
      return false;
    }
    childCursor(pos = this.length) {
      return new ChildCursor(this.children, pos, this.children.length);
    }
    childPos(pos, bias = 1) {
      return this.childCursor().findPos(pos, bias);
    }
    toString() {
      let name = this.constructor.name.replace("View", "");
      return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
    static get(node) {
      return node.cmView;
    }
    get isEditable() {
      return true;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      return false;
    }
    become(other) {
      return false;
    }
    canReuseDOM(other) {
      return other.constructor == this.constructor;
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
    getSide() {
      return 0;
    }
    destroy() {
      this.parent = null;
    }
  }
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  class ChildCursor {
    constructor(children, pos, i) {
      this.children = children;
      this.pos = pos;
      this.i = i;
      this.off = 0;
    }
    findPos(pos, bias = 1) {
      for (;;) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        let next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
    let {
      children
    } = parent;
    let before = children.length ? children[fromI] : null;
    let last = insert.length ? insert[insert.length - 1] : null;
    let breakAtEnd = last ? last.breakAfter : breakAtStart;
    // Change within a single child
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;
    if (toI < children.length) {
      let after = children[toI];
      // Make sure the end of the child after the update is preserved in `after`
      if (after && toOff < after.length) {
        // If we're splitting a child, separate part of it to avoid that
        // being mangled when updating the child before the update.
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        // If the element after the replacement should be merged with
        // the last replacing element, update `content`
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert[insert.length - 1] = after;
        } else {
          // Remove the start of the after element, if necessary, and
          // add it to `content`.
          if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
          insert.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        // The element at `toI` is entirely covered by this range.
        // Preserve its line break, if any.
        if (last) last.breakAfter = 1;else breakAtStart = 1;
      }
      // Since we've handled the next element from the current elements
      // now, make sure `toI` points after that.
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
          before.breakAfter = insert.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    // Try to merge widgets on the boundaries of the replacement
    while (fromI < toI && insert.length) {
      if (children[toI - 1].become(insert[insert.length - 1])) {
        toI--;
        insert.pop();
        openEnd = insert.length ? 0 : openStart;
      } else if (children[fromI].become(insert[0])) {
        fromI++;
        insert.shift();
        openStart = insert.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
    if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
    let cur = parent.childCursor();
    let {
      i: toI,
      off: toOff
    } = cur.findPos(to, 1);
    let {
      i: fromI,
      off: fromOff
    } = cur.findPos(from, -1);
    let dLen = from - to;
    for (let view of insert) dLen += view.length;
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }
  let nav = typeof navigator != "undefined" ? navigator : {
    userAgent: "",
    vendor: "",
    platform: ""
  };
  let doc = typeof document != "undefined" ? document : {
    documentElement: {
      style: {}
    }
  };
  const ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
  const ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
  const ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  const ie = !!(ie_upto10 || ie_11up || ie_edge);
  const gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
  const chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
  const webkit = ("webkitFontSmoothing" in doc.documentElement.style);
  const safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
  const ios = safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /*@__PURE__*/ /Mac/.test(nav.platform),
    windows: /*@__PURE__*/ /Win/.test(nav.platform),
    linux: /*@__PURE__*/ /Linux|X11/.test(nav.platform),
    ie,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko,
    gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios,
    android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
    webkit,
    safari,
    webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  const MaxJoinLen = 256;
  class TextView extends ContentView {
    constructor(text) {
      super();
      this.text = text;
    }
    get length() {
      return this.text.length;
    }
    createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
    sync(track) {
      if (!this.dom) this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom) track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
    reuseDOM(dom) {
      if (dom.nodeType == 3) this.createDOM(dom);
    }
    merge(from, to, source) {
      if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = new TextView(this.text.slice(from));
      this.text = this.text.slice(0, from);
      this.markDirty();
      return result;
    }
    localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
    domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
    domBoundsAround(_from, _to, offset) {
      return {
        from: offset,
        to: offset + this.length,
        startDOM: this.dom,
        endDOM: this.dom.nextSibling
      };
    }
    coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  }
  class MarkView extends ContentView {
    constructor(mark, children = [], length = 0) {
      super();
      this.mark = mark;
      this.children = children;
      this.length = length;
      for (let ch of children) ch.setParent(this);
    }
    setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark.class) dom.className = this.mark.class;
      if (this.mark.attrs) for (let name in this.mark.attrs) dom.setAttribute(name, this.mark.attrs[name]);
      return dom;
    }
    reuseDOM(node) {
      if (node.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node);
        this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
      }
    }

    sync(track) {
      if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.dirty & 4 /* Dirty.Attrs */) this.setAttrs(this.dom);
      super.sync(track);
    }
    merge(from, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = [],
        off = 0,
        detachFrom = -1,
        i = 0;
      for (let elt of this.children) {
        let end = off + elt.length;
        if (end > from) result.push(off < from ? elt.split(from - off) : elt);
        if (detachFrom < 0 && off >= from) detachFrom = i;
        off = end;
        i++;
      }
      let length = this.length - from;
      this.length = from;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new MarkView(this.mark, result, length);
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  }
  function textCoords(text, pos, side) {
    let length = text.nodeValue.length;
    if (pos > length) pos = length;
    let from = pos,
      to = pos,
      flatten = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        // These browsers reliably return valid rectangles for empty ranges
        if (pos) {
          from--;
          flatten = 1;
        } // FIXME this is wrong in RTL text
        else if (to < length) {
          to++;
          flatten = -1;
        }
      }
    } else {
      if (side < 0) from--;else if (to < length) to++;
    }
    let rects = textRange(text, from, to).getClientRects();
    if (!rects.length) return Rect0;
    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, r => r.width) || rect;
    return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  class WidgetView extends ContentView {
    constructor(widget, length, side) {
      super();
      this.widget = widget;
      this.length = length;
      this.side = side;
      this.prevWidget = null;
    }
    static create(widget, length, side) {
      return new (widget.customView || WidgetView)(widget, length, side);
    }
    split(from) {
      let result = WidgetView.create(this.widget, this.length - from, this.side);
      this.length -= from;
      return result;
    }
    sync() {
      if (!this.dom || !this.widget.updateDOM(this.dom)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(this.editorView));
        this.dom.contentEditable = "false";
      }
    }
    getSide() {
      return this.side;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    become(other) {
      if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
        if (this.widget.constructor == other.widget.constructor) {
          if (!this.widget.eq(other.widget)) this.markDirty(true);
          if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
          this.widget = other.widget;
          return true;
        }
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get overrideDOMText() {
      if (this.length == 0) return Text$1.empty;
      let top = this;
      while (top.parent) top = top.parent;
      let view = top.editorView,
        text = view && view.state.doc,
        start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : Text$1.empty;
    }
    domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos, side) {
      let rects = this.dom.getClientRects(),
        rect = null;
      if (!rects.length) return Rect0;
      for (let i = pos > 0 ? rects.length - 1 : 0;; i += pos > 0 ? -1 : 1) {
        rect = rects[i];
        if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
      }
      return this.length ? rect : flattenRect(rect, this.side > 0);
    }
    get isEditable() {
      return false;
    }
    destroy() {
      super.destroy();
      if (this.dom) this.widget.destroy(this.dom);
    }
  }
  class CompositionView extends WidgetView {
    domAtPos(pos) {
      let {
        topView,
        text
      } = this.widget;
      if (!topView) return new DOMPos(text, Math.min(pos, text.nodeValue.length));
      return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
    }
    sync() {
      this.setDOM(this.widget.toDOM());
    }
    localPosFromDOM(node, offset) {
      let {
        topView,
        text
      } = this.widget;
      if (!topView) return Math.min(offset, this.length);
      return posFromDOMInCompositionTree(node, offset, topView, text);
    }
    ignoreMutation() {
      return false;
    }
    get overrideDOMText() {
      return null;
    }
    coordsAt(pos, side) {
      let {
        topView,
        text
      } = this.widget;
      if (!topView) return textCoords(text, pos, side);
      return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
    }
    destroy() {
      var _a;
      super.destroy();
      (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    get isEditable() {
      return true;
    }
    canReuseDOM() {
      return true;
    }
  }
  // Uses the old structure of a chunk of content view frozen for
  // composition to try and find a reasonable DOM location for the given
  // offset.
  function scanCompositionTree(pos, side, view, text, enterView, fromText) {
    if (view instanceof MarkView) {
      for (let child = view.dom.firstChild; child; child = child.nextSibling) {
        let desc = ContentView.get(child);
        if (!desc) return fromText(pos, side);
        let hasComp = contains(child, text);
        let len = desc.length + (hasComp ? text.nodeValue.length : 0);
        if (pos < len || pos == len && desc.getSide() <= 0) return hasComp ? scanCompositionTree(pos, side, desc, text, enterView, fromText) : enterView(desc, pos, side);
        pos -= len;
      }
      return enterView(view, view.length, -1);
    } else if (view.dom == text) {
      return fromText(pos, side);
    } else {
      return enterView(view, pos, side);
    }
  }
  function posFromDOMInCompositionTree(node, offset, view, text) {
    if (view instanceof MarkView) {
      for (let child of view.children) {
        let pos = 0,
          hasComp = contains(child.dom, text);
        if (contains(child.dom, node)) return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
        pos += hasComp ? text.nodeValue.length : child.length;
      }
    } else if (view.dom == text) {
      return Math.min(offset, text.nodeValue.length);
    }
    return view.localPosFromDOM(node, offset);
  }
  // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  class WidgetBufferView extends ContentView {
    constructor(side) {
      super();
      this.side = side;
    }
    get length() {
      return 0;
    }
    merge() {
      return false;
    }
    become(other) {
      return other instanceof WidgetBufferView && other.side == this.side;
    }
    split() {
      return new WidgetBufferView(this.side);
    }
    sync() {
      if (!this.dom) {
        let dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
    getSide() {
      return this.side;
    }
    domAtPos(pos) {
      return DOMPos.before(this.dom);
    }
    localPosFromDOM() {
      return 0;
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos) {
      let imgRect = this.dom.getBoundingClientRect();
      // Since the <img> height doesn't correspond to text height, try
      // to borrow the height from some sibling node.
      let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
      return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top ? {
        left: imgRect.left,
        right: imgRect.right,
        top: siblingRect.top,
        bottom: siblingRect.bottom
      } : imgRect;
    }
    get overrideDOMText() {
      return Text$1.empty;
    }
  }
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineSiblingRect(view, side) {
    let parent = view.parent,
      index = parent ? parent.children.indexOf(view) : -1;
    while (parent && index >= 0) {
      if (side < 0 ? index > 0 : index < parent.children.length) {
        let next = parent.children[index + side];
        if (next instanceof TextView) {
          let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
          if (nextRect) return nextRect;
        }
        index += side;
      } else if (parent instanceof MarkView && parent.parent) {
        index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
        parent = parent.parent;
      } else {
        let last = parent.dom.lastChild;
        if (last && last.nodeName == "BR") return last.getClientRects()[0];
        break;
      }
    }
    return undefined;
  }
  function inlineDOMAtPos(parent, pos) {
    let dom = parent.dom,
      {
        children
      } = parent,
      i = 0;
    for (let off = 0; i < children.length; i++) {
      let child = children[i],
        end = off + child.length;
      if (end == off && child.getSide() <= 0) continue;
      if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
      if (pos <= off) break;
      off = end;
    }
    for (let j = i; j > 0; j--) {
      let prev = children[j - 1];
      if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);
    }
    for (let j = i; j < children.length; j++) {
      let next = children[j];
      if (next.dom.parentNode == dom) return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
    let last,
      {
        children
      } = parent;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    let before = null,
      beforePos = -1,
      after = null,
      afterPos = -1;
    function scan(view, pos) {
      for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
        let child = view.children[i],
          end = off + child.length;
        if (end >= pos) {
          if (child.children.length) {
            scan(child, pos - off);
          } else if (!after && (end > pos || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos - off;
          } else if (off < pos || off == end && child.getSide() < 0) {
            before = child;
            beforePos = pos - off;
          }
        }
        off = end;
      }
    }
    scan(view, pos);
    let target = (side < 0 ? before : after) || before || after;
    if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    let last = view.dom.lastChild;
    if (!last) return view.dom.getBoundingClientRect();
    let rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function combineAttrs(source, target) {
    for (let name in source) {
      if (name == "class" && target.class) target.class += " " + source.class;else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
    }
    return target;
  }
  function attrsEq(a, b) {
    if (a == b) return true;
    if (!a || !b) return false;
    let keysA = Object.keys(a),
      keysB = Object.keys(b);
    if (keysA.length != keysB.length) return false;
    for (let key of keysA) {
      if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
    }
    return true;
  }
  function updateAttrs(dom, prev, attrs) {
    let changed = null;
    if (prev) for (let name in prev) if (!(attrs && name in attrs)) dom.removeAttribute(changed = name);
    if (attrs) for (let name in attrs) if (!(prev && prev[name] == attrs[name])) dom.setAttribute(changed = name, attrs[name]);
    return !!changed;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  class WidgetType {
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
    updateDOM(dom) {
      return false;
    }
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
    get estimatedHeight() {
      return -1;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
    ignoreEvent(event) {
      return true;
    }
    /**
    @internal
    */
    get customView() {
      return null;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
    destroy(dom) {}
  }
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/function (BlockType) {
    /**
    A line of text.
    */
    BlockType[BlockType["Text"] = 0] = "Text";
    /**
    A block widget associated with the position after it.
    */
    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
    /**
    A block widget associated with the position before it.
    */
    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
    /**
    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
    */
    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType;
  }(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  class Decoration extends RangeValue {
    constructor(
    /**
    @internal
    */
    startSide,
    /**
    @internal
    */
    endSide,
    /**
    @internal
    */
    widget,
    /**
    The config object used to create this decoration. You can
    include additional properties in there to store metadata about
    your decoration.
    */
    spec) {
      super();
      this.startSide = startSide;
      this.endSide = endSide;
      this.widget = widget;
      this.spec = spec;
    }
    /**
    @internal
    */
    get heightRelevant() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
    static mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
    static widget(spec) {
      let side = spec.side || 0,
        block = !!spec.block;
      side += block ? side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */ : side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
    static replace(spec) {
      let block = !!spec.block,
        startSide,
        endSide;
      if (spec.isBlockGap) {
        startSide = -500000000 /* Side.GapStart */;
        endSide = 400000000 /* Side.GapEnd */;
      } else {
        let {
          start,
          end
        } = getInclusive(spec, block);
        startSide = (start ? block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */) - 1;
        endSide = (end ? block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
    static line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
    static set(of, sort = false) {
      return RangeSet.of(of, sort);
    }
    /**
    @internal
    */
    hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  }
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  class MarkDecoration extends Decoration {
    constructor(spec) {
      let {
        start,
        end
      } = getInclusive(spec);
      super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
      this.tagName = spec.tagName || "span";
      this.class = spec.class || "";
      this.attrs = spec.attributes || null;
    }
    eq(other) {
      return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this.class == other.class && attrsEq(this.attrs, other.attrs);
    }
    range(from, to = from) {
      if (from >= to) throw new RangeError("Mark decorations may not be empty");
      return super.range(from, to);
    }
  }
  MarkDecoration.prototype.point = false;
  class LineDecoration extends Decoration {
    constructor(spec) {
      super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
    }
    eq(other) {
      return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
    }
    range(from, to = from) {
      if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
      return super.range(from, to);
    }
  }
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  class PointDecoration extends Decoration {
    constructor(spec, startSide, endSide, block, widget, isReplace) {
      super(startSide, endSide, widget, spec);
      this.block = block;
      this.isReplace = isReplace;
      this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
    }
    // Only relevant when this.block == true
    get type() {
      return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
    get heightRelevant() {
      return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
    }
    eq(other) {
      return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
    range(from, to = from) {
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
      return super.range(from, to);
    }
  }
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
    let {
      inclusiveStart: start,
      inclusiveEnd: end
    } = spec;
    if (start == null) start = spec.inclusive;
    if (end == null) end = spec.inclusive;
    return {
      start: start !== null && start !== void 0 ? start : block,
      end: end !== null && end !== void 0 ? end : block
    };
  }
  function widgetsEq(a, b) {
    return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
  }
  class LineView extends ContentView {
    constructor() {
      super(...arguments);
      this.children = [];
      this.length = 0;
      this.prevAttrs = undefined;
      this.attrs = null;
      this.breakAfter = 0;
    }
    // Consumes source
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof LineView)) return false;
        if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
      }

      if (hasStart) this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
      return true;
    }
    split(at) {
      let end = new LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0) return end;
      let {
        i,
        off
      } = this.childPos(at);
      if (off) {
        end.append(this.children[i].split(off), 0);
        this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
        i++;
      }
      for (let j = i; j < this.children.length; j++) end.append(this.children[j], 0);
      while (i > 0 && this.children[i - 1].length == 0) this.children[--i].destroy();
      this.children.length = i;
      this.markDirty();
      this.length = at;
      return end;
    }
    transferDOM(other) {
      if (!this.dom) return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
      this.prevAttrs = undefined;
      this.dom = null;
    }
    setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
    append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
    addLineDeco(deco) {
      let attrs = deco.spec.attributes,
        cls = deco.spec.class;
      if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls) this.attrs = combineAttrs({
        class: cls
      }, this.attrs || {});
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    reuseDOM(node) {
      if (node.nodeName == "DIV") {
        this.setDOM(node);
        this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
      }
    }

    sync(track) {
      var _a;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      } else if (this.dirty & 4 /* Dirty.Attrs */) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      }
      if (this.prevAttrs !== undefined) {
        updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = undefined;
      }
      super.sync(track);
      let last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView) last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
        let hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
    measureTextSize() {
      if (this.children.length == 0 || this.length > 20) return null;
      let totalWidth = 0;
      for (let child of this.children) {
        if (!(child instanceof TextView) || /[^ -~]/.test(child.text)) return null;
        let rects = clientRectsFor(child.dom);
        if (rects.length != 1) return null;
        totalWidth += rects[0].width;
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length
      };
    }
    coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
    become(_other) {
      return false;
    }
    get type() {
      return BlockType.Text;
    }
    static find(docView, pos) {
      for (let i = 0, off = 0; i < docView.children.length; i++) {
        let block = docView.children[i],
          end = off + block.length;
        if (end >= pos) {
          if (block instanceof LineView) return block;
          if (end > pos) break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  }
  class BlockWidgetView extends ContentView {
    constructor(widget, length, type) {
      super();
      this.widget = widget;
      this.length = length;
      this.type = type;
      this.breakAfter = 0;
      this.prevWidget = null;
    }
    merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    split(at) {
      let len = this.length - at;
      this.length = at;
      let end = new BlockWidgetView(this.widget, len, this.type);
      end.breakAfter = this.breakAfter;
      return end;
    }
    get children() {
      return noChildren;
    }
    sync() {
      if (!this.dom || !this.widget.updateDOM(this.dom)) {
        if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(this.editorView));
        this.dom.contentEditable = "false";
      }
    }
    get overrideDOMText() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text$1.empty;
    }
    domBoundsAround() {
      return null;
    }
    become(other) {
      if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.eq(this.widget)) this.markDirty(true);
        if (this.dom && !this.prevWidget) this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    destroy() {
      super.destroy();
      if (this.dom) this.widget.destroy(this.dom);
    }
  }
  class ContentBuilder {
    constructor(doc, pos, end, disallowBlockEffectsFor) {
      this.doc = doc;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0 /* Buf.No */;
      this.bufferMarks = [];
      // Set to false directly after a widget that covers the position after it
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc.iter();
      this.skip = pos;
    }
    posCovered() {
      if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      let last = this.content[this.content.length - 1];
      return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
    }
    getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
    flushBuffer(active = this.bufferMarks) {
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0 /* Buf.No */;
      }
    }

    addBlockWidget(view) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view);
    }
    finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();else this.pendingBuffer = 0 /* Buf.No */;
      if (!this.posCovered()) this.getLine();
    }
    buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          let {
            value,
            lineBreak,
            done
          } = this.cursor.next(this.skip);
          this.skip = 0;
          if (done) throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered()) this.getLine();
            if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
    span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0) this.openStart = openStart;
    }
    point(from, to, deco, active, openStart, index) {
      if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
        if (deco.block) throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      let len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          let {
            type
          } = deco;
          if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
        } else {
          let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
          let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
          let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
          let line = this.getLine();
          if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore) this.pendingBuffer = 0 /* Buf.No */;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
          if (this.pendingBuffer) this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        // Line decoration
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        // Advance the iterator past the replaced content
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0) this.openStart = openStart;
    }
    static build(text, from, to, decorations, dynamicDecorationMap) {
      let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
      builder.openEnd = RangeSet.spans(decorations, from, to, builder);
      if (builder.openStart < 0) builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  }
  function wrapMarks(view, active) {
    for (let mark of active) view = new MarkView(mark, [view], view.length);
    return view;
  }
  class NullWidget extends WidgetType {
    constructor(tag) {
      super();
      this.tag = tag;
    }
    eq(other) {
      return other.tag == this.tag;
    }
    toDOM() {
      return document.createElement(this.tag);
    }
    updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
  }
  const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  const mouseSelectionStyle = /*@__PURE__*/Facet.define();
  const exceptionSink = /*@__PURE__*/Facet.define();
  const updateListener = /*@__PURE__*/Facet.define();
  const inputHandler$1 = /*@__PURE__*/Facet.define();
  const perLineTextDirection = /*@__PURE__*/Facet.define({
    combine: values => values.some(x => x)
  });
  const nativeSelectionHidden = /*@__PURE__*/Facet.define({
    combine: values => values.some(x => x)
  });
  class ScrollTarget {
    constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
      this.range = range;
      this.y = y;
      this.x = x;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
    }
    map(changes) {
      return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
    }
  }
  const scrollIntoView$2 = /*@__PURE__*/StateEffect.define({
    map: (t, ch) => t.map(ch)
  });
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
    let handler = state.facet(exceptionSink);
    if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
  }
  const editable = /*@__PURE__*/Facet.define({
    combine: values => values.length ? values[0] : true
  });
  let nextPluginID = 0;
  const viewPlugin = /*@__PURE__*/Facet.define();
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view.
  */
  class ViewPlugin {
    constructor(
    /**
    @internal
    */
    id,
    /**
    @internal
    */
    create,
    /**
    @internal
    */
    domEventHandlers, buildExtensions) {
      this.id = id;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.extension = buildExtensions(this);
    }
    /**
    Define a plugin from a constructor function that creates the
    plugin's value, given an editor view.
    */
    static define(create, spec) {
      const {
        eventHandlers,
        provide,
        decorations: deco
      } = spec || {};
      return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
        let ext = [viewPlugin.of(plugin)];
        if (deco) ext.push(decorations.of(view => {
          let pluginInst = view.plugin(plugin);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
        if (provide) ext.push(provide(plugin));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
    static fromClass(cls, spec) {
      return ViewPlugin.define(view => new cls(view), spec);
    }
  }
  class PluginInstance {
    constructor(spec) {
      this.spec = spec;
      // When starting an update, all plugins have this field set to the
      // update object, indicating they need to be updated. When finished
      // updating, it is set to `false`. Retrieving a plugin that needs to
      // be updated with `view.plugin` forces an eager update.
      this.mustUpdate = null;
      // This is null when the plugin is initially created, but
      // initialized on the first update.
      this.value = null;
    }
    update(view) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.create(view);
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        let update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e) {
            logException(update.state, e, "CodeMirror plugin crashed");
            if (this.value.destroy) try {
              this.value.destroy();
            } catch (_) {}
            this.deactivate();
          }
        }
      }
      return this;
    }
    destroy(view) {
      var _a;
      if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
        try {
          this.value.destroy();
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
        }
      }
    }
    deactivate() {
      this.spec = this.value = null;
    }
  }
  const editorAttributes = /*@__PURE__*/Facet.define();
  const contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  const decorations = /*@__PURE__*/Facet.define();
  const atomicRanges = /*@__PURE__*/Facet.define();
  const scrollMargins = /*@__PURE__*/Facet.define();
  const styleModule = /*@__PURE__*/Facet.define();
  class ChangedRange {
    constructor(fromA, toA, fromB, toB) {
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    join(other) {
      return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
    addToSet(set) {
      let i = set.length,
        me = this;
      for (; i > 0; i--) {
        let range = set[i - 1];
        if (range.fromA > me.toA) continue;
        if (range.toA < me.fromA) break;
        me = me.join(range);
        set.splice(i - 1, 1);
      }
      set.splice(i, 0, me);
      return set;
    }
    static extendWithRanges(diff, ranges) {
      if (ranges.length == 0) return diff;
      let result = [];
      for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
        let next = dI == diff.length ? null : diff[dI],
          off = posA - posB;
        let end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          let from = ranges[rI],
            to = ranges[rI + 1];
          let fromB = Math.max(posB, from),
            toB = Math.min(end, to);
          if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end) break;else rI += 2;
        }
        if (!next) return result;
        new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  }
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  class ViewUpdate {
    constructor(
    /**
    The editor view that the update is associated with.
    */
    view,
    /**
    The new editor state.
    */
    state,
    /**
    The transactions involved in the update. May be empty.
    */
    transactions) {
      this.view = view;
      this.state = state;
      this.transactions = transactions;
      /**
      @internal
      */
      this.flags = 0;
      this.startState = view.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      for (let tr of transactions) this.changes = this.changes.compose(tr.changes);
      let changedRanges = [];
      this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
      this.changedRanges = changedRanges;
      let focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        view.inputState.notifiedFocused = focus;
        this.flags |= 1 /* UpdateFlag.Focus */;
      }
    }
    /**
    @internal
    */
    static create(view, state, transactions) {
      return new ViewUpdate(view, state, transactions);
    }
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    get viewportChanged() {
      return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
    get heightChanged() {
      return (this.flags & 2 /* UpdateFlag.Height */) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
    get geometryChanged() {
      return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
    get focusChanged() {
      return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
    }
    /**
    Whether the document changed in this update.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
    get selectionSet() {
      return this.transactions.some(tr => tr.selection);
    }
    /**
    @internal
    */
    get empty() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  }

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction = /*@__PURE__*/function (Direction) {
    // (These are chosen to match the base levels, in bidi algorithm
    // terms, of spans in that direction.)
    /**
    Left-to-right.
    */
    Direction[Direction["LTR"] = 0] = "LTR";
    /**
    Right-to-left.
    */
    Direction[Direction["RTL"] = 1] = "RTL";
    return Direction;
  }(Direction || (Direction = {}));
  const LTR = Direction.LTR,
    RTL = Direction.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
    let result = [];
    for (let i = 0; i < str.length; i++) result.push(1 << +str[i]);
    return result;
  }
  // Character types for codepoints 0 to 0xf8
  const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  const Brackets = /*@__PURE__*/Object.create(null),
    BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (let p of ["()", "[]", "{}"]) {
    let l = /*@__PURE__*/p.charCodeAt(0),
      r = /*@__PURE__*/p.charCodeAt(1);
    Brackets[l] = r;
    Brackets[r] = -l;
  }
  function charType(ch) {
    return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ : 0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
  }

  const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  class BidiSpan {
    /**
    @internal
    */
    constructor(
    /**
    The start of the span (relative to the start of the line).
    */
    from,
    /**
    The end of the span.
    */
    to,
    /**
    The ["bidi
    level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
    of the span (in this context, 0 means
    left-to-right, 1 means right-to-left, 2 means left-to-right
    number inside right-to-left text).
    */
    level) {
      this.from = from;
      this.to = to;
      this.level = level;
    }
    /**
    The direction of this span.
    */
    get dir() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
    side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
    static find(order, index, level, assoc) {
      let maybe = -1;
      for (let i = 0; i < order.length; i++) {
        let span = order[i];
        if (span.from <= index && span.to >= index) {
          if (span.level == level) return i;
          // When multiple spans match, if assoc != 0, take the one that
          // covers that side, otherwise take the one with the minimum
          // level.
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
        }
      }
      if (maybe < 0) throw new RangeError("Index out of range");
      return maybe;
    }
  }
  // Reused array of character types
  const types$6 = [];
  function computeOrder(line, direction) {
    let len = line.length,
      outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */,
      oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;
    if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line)) return trivialOrder(len);
    // W1. Examine each non-spacing mark (NSM) in the level run, and
    // change the type of the NSM to the type of the previous
    // character. If the NSM is at the start of the level run, it will
    // get the type of sor.
    // W2. Search backwards from each instance of a European number
    // until the first strong type (R, L, AL, or sor) is found. If an
    // AL is found, change the type of the European number to Arabic
    // number.
    // W3. Change all ALs to R.
    // (Left after this: L, R, EN, AN, ET, CS, NI)
    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
      let type = charType(line.charCodeAt(i));
      if (type == 512 /* T.NSM */) type = prev;else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */) type = 16 /* T.AN */;
      types$6[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
      if (type & 7 /* T.Strong */) prevStrong = type;
      prev = type;
    }
    // W5. A sequence of European terminators adjacent to European
    // numbers changes to all European numbers.
    // W6. Otherwise, separators and terminators change to Other
    // Neutral.
    // W7. Search backwards from each instance of a European number
    // until the first strong type (R, L, or sor) is found. If an L is
    // found, then change the type of the European number to L.
    // (Left after this: L, R, EN+AN, NI)
    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
      let type = types$6[i];
      if (type == 128 /* T.CS */) {
        if (i < len - 1 && prev == types$6[i + 1] && prev & 24 /* T.Num */) type = types$6[i] = prev;else types$6[i] = 256 /* T.NI */;
      } else if (type == 64 /* T.ET */) {
        let end = i + 1;
        while (end < len && types$6[end] == 64 /* T.ET */) end++;
        let replace = i && prev == 8 /* T.EN */ || end < len && types$6[end] == 8 /* T.EN */ ? prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */ : 256 /* T.NI */;
        for (let j = i; j < end; j++) types$6[j] = replace;
        i = end - 1;
      } else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
        types$6[i] = 1 /* T.L */;
      }

      prev = type;
      if (type & 7 /* T.Strong */) prevStrong = type;
    }
    // N0. Process bracket pairs in an isolating run sequence
    // sequentially in the logical order of the text positions of the
    // opening paired brackets using the logic given below. Within this
    // scope, bidirectional types EN and AN are treated as R.
    for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
      // Keeps [startIndex, type, strongSeen] triples for each open
      // bracket on BracketStack.
      if (br = Brackets[ch = line.charCodeAt(i)]) {
        if (br < 0) {
          // Closing bracket
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br) {
              let flags = BracketStack[sJ + 2];
              let type = flags & 2 /* Bracketed.EmbedInside */ ? outerType : !(flags & 4 /* Bracketed.OppositeInside */) ? 0 : flags & 1 /* Bracketed.OppositeBefore */ ? oppositeType : outerType;
              if (type) types$6[i] = types$6[BracketStack[sJ]] = type;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
          break;
        } else {
          BracketStack[sI++] = i;
          BracketStack[sI++] = ch;
          BracketStack[sI++] = context;
        }
      } else if ((type = types$6[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
        let embed = type == outerType;
        context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur = BracketStack[sJ + 2];
          if (cur & 2 /* Bracketed.EmbedInside */) break;
          if (embed) {
            BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
          } else {
            if (cur & 4 /* Bracketed.OppositeInside */) break;
            BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
          }
        }
      }
    }
    // N1. A sequence of neutrals takes the direction of the
    // surrounding strong text if the text on both sides has the same
    // direction. European and Arabic numbers act as if they were R in
    // terms of their influence on neutrals. Start-of-level-run (sor)
    // and end-of-level-run (eor) are used at level run boundaries.
    // N2. Any remaining neutrals take the embedding direction.
    // (Left after this: L, R, EN+AN)
    for (let i = 0; i < len; i++) {
      if (types$6[i] == 256 /* T.NI */) {
        let end = i + 1;
        while (end < len && types$6[end] == 256 /* T.NI */) end++;
        let beforeL = (i ? types$6[i - 1] : outerType) == 1 /* T.L */;
        let afterL = (end < len ? types$6[end] : outerType) == 1 /* T.L */;
        let replace = beforeL == afterL ? beforeL ? 1 /* T.L */ : 2 /* T.R */ : outerType;
        for (let j = i; j < end; j++) types$6[j] = replace;
        i = end - 1;
      }
    }
    // Here we depart from the documented algorithm, in order to avoid
    // building up an actual levels array. Since there are only three
    // levels (0, 1, 2) in an implementation that doesn't take
    // explicit embedding into account, we can build up the order on
    // the fly, without following the level-based algorithm.
    let order = [];
    if (outerType == 1 /* T.L */) {
      for (let i = 0; i < len;) {
        let start = i,
          rtl = types$6[i++] != 1 /* T.L */;
        while (i < len && rtl == (types$6[i] != 1 /* T.L */)) i++;
        if (rtl) {
          for (let j = i; j > start;) {
            let end = j,
              l = types$6[--j] != 2 /* T.R */;
            while (j > start && l == (types$6[j - 1] != 2 /* T.R */)) j--;
            order.push(new BidiSpan(j, end, l ? 2 : 1));
          }
        } else {
          order.push(new BidiSpan(start, i, 0));
        }
      }
    } else {
      for (let i = 0; i < len;) {
        let start = i,
          rtl = types$6[i++] == 2 /* T.R */;
        while (i < len && rtl == (types$6[i] == 2 /* T.R */)) i++;
        order.push(new BidiSpan(start, i, rtl ? 1 : 2));
      }
    }
    return order;
  }
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  let movedOver = "";
  function moveVisually(line, order, dir, start, forward) {
    var _a;
    let startIndex = start.head - line.from,
      spanI = -1;
    if (startIndex == 0) {
      if (!forward || !line.length) return null;
      if (order[0].level != dir) {
        startIndex = order[0].side(false, dir);
        spanI = 0;
      }
    } else if (startIndex == line.length) {
      if (forward) return null;
      let last = order[order.length - 1];
      if (last.level != dir) {
        startIndex = last.side(true, dir);
        spanI = order.length - 1;
      }
    }
    if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
    let span = order[spanI];
    // End of span. (But not end of line--that was checked for above.)
    if (startIndex == span.side(forward, dir)) {
      span = order[spanI += forward ? 1 : -1];
      startIndex = span.side(!forward, dir);
    }
    let indexForward = forward == (span.dir == dir);
    let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    if (nextIndex != span.side(forward, dir)) return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (!nextSpan && span.level != dir) return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
    if (nextSpan && nextSpan.level < span.level) return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
  }
  const LineBreakPlaceholder = "\uffff";
  class DOMReader {
    constructor(points, state) {
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    append(text) {
      this.text += text;
    }
    lineBreak() {
      this.text += LineBreakPlaceholder;
    }
    readRange(start, end) {
      if (!start) return this;
      let parent = start.parentNode;
      for (let cur = start;;) {
        this.findPointBefore(parent, cur);
        this.readNode(cur);
        let next = cur.nextSibling;
        if (next == end) break;
        let view = ContentView.get(cur),
          nextView = ContentView.get(next);
        if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)) this.lineBreak();
        cur = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
    readTextNode(node) {
      let text = node.nodeValue;
      for (let point of this.points) if (point.node == node) point.pos = this.text.length + Math.min(point.offset, text.length);
      for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
        let nextBreak = -1,
          breakSize = 1,
          m;
        if (this.lineSeparator) {
          nextBreak = text.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m = re.exec(text)) {
          nextBreak = m.index;
          breakSize = m[0].length;
        }
        this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
        if (nextBreak < 0) break;
        this.lineBreak();
        if (breakSize > 1) for (let point of this.points) if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;
        off = nextBreak + breakSize;
      }
    }
    readNode(node) {
      if (node.cmIgnore) return;
      let view = ContentView.get(node);
      let fromView = view && view.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node, fromView.length);
        for (let i = fromView.iter(); !i.next().done;) {
          if (i.lineBreak) this.lineBreak();else this.append(i.value);
        }
      } else if (node.nodeType == 3) {
        this.readTextNode(node);
      } else if (node.nodeName == "BR") {
        if (node.nextSibling) this.lineBreak();
      } else if (node.nodeType == 1) {
        this.readRange(node.firstChild, null);
      }
    }
    findPointBefore(node, next) {
      for (let point of this.points) if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
    }
    findPointInside(node, maxLen) {
      for (let point of this.points) if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + Math.min(maxLen, point.offset);
    }
  }
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  class DOMPoint {
    constructor(node, offset) {
      this.node = node;
      this.offset = offset;
      this.pos = -1;
    }
  }
  class DocView extends ContentView {
    constructor(view) {
      super();
      this.view = view;
      this.compositionDeco = Decoration.none;
      this.decorations = [];
      this.dynamicDecorationMap = [];
      // Track a minimum width for the editor. When measuring sizes in
      // measureVisibleLineHeights, this is updated to point at the width
      // of a given element and its extent in the document. When a change
      // happens in that range, these are reset. That way, once we've seen
      // a line/element of a given length, we keep the editor wide enough
      // to fit at least that element, until it is changed, at which point
      // we forget it again.
      this.minWidth = 0;
      this.minWidthFrom = 0;
      this.minWidthTo = 0;
      // Track whether the DOM selection was set in a lossy way, so that
      // we don't mess it up when reading it back it
      this.impreciseAnchor = null;
      this.impreciseHead = null;
      this.forceSelection = false;
      // Used by the resize observer to ignore resizes that we caused
      // ourselves
      this.lastUpdate = Date.now();
      this.setDOM(view.contentDOM);
      this.children = [new LineView()];
      this.children[0].setParent(this);
      this.updateDeco();
      this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
    }
    get editorView() {
      return this.view;
    }
    get length() {
      return this.view.state.doc.length;
    }
    // Update the document view to a given state. scrollIntoView can be
    // used as a hint to compute a new viewport that includes that
    // position, if we know the editor is going to scroll that position
    // into view.
    update(update) {
      let changedRanges = update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(({
          fromA,
          toA
        }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (update.transactions.length || this.dirty) this.compositionDeco = computeCompositionDeco(this.view, update.changes);
      // When the DOM nodes around the selection are moved to another
      // parent, Chrome sometimes reports a different selection through
      // getSelection than the one that it actually shows to the user.
      // This forces a selection update when lines are joined to work
      // around that. Issue #54
      if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update && update.state.doc.lines != update.startState.doc.lines) this.forceSelection = true;
      let prevDeco = this.decorations,
        deco = this.updateDeco();
      let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, update.startState.doc.length);
        if (update.transactions.length) this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
    updateInner(changes, oldLength) {
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength);
      let {
        observer
      } = this.view;
      observer.ignore(() => {
        // Lock the height during redrawing, since Chrome sometimes
        // messes with the scroll position during DOM mutation (though
        // no relayout is triggered and I cannot imagine how it can
        // recompute the scroll position without a layout)
        this.dom.style.height = this.view.viewState.contentHeight + "px";
        this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
        // Chrome will sometimes, when DOM mutations occur directly
        // around the selection, get confused and report a different
        // selection from the one it displays (issue #218). This tries
        // to detect that situation.
        let track = browser.chrome || browser.ios ? {
          node: observer.selectionRange.focusNode,
          written: false
        } : undefined;
        this.sync(track);
        this.dirty = 0 /* Dirty.Not */;
        if (track && (track.written || observer.selectionRange.focusNode != track.node)) this.forceSelection = true;
        this.dom.style.height = "";
      });
      let gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) for (let child of this.children) if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
      observer.updateGaps(gaps);
    }
    updateChildren(changes, oldLength) {
      let cursor = this.childCursor(oldLength);
      for (let i = changes.length - 1;; i--) {
        let next = i >= 0 ? changes[i] : null;
        if (!next) break;
        let {
          fromA,
          toA,
          fromB,
          toB
        } = next;
        let {
          content,
          breakAtStart,
          openStart,
          openEnd
        } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
        let {
          i: toI,
          off: toOff
        } = cursor.findPos(toA, 1);
        let {
          i: fromI,
          off: fromOff
        } = cursor.findPos(fromA, -1);
        replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
      }
    }
    // Sync the DOM selection to this.state.selection
    updateSelection(mustRead = false, fromPointer = false) {
      if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();
      if (!(fromPointer || this.mayControlSelection())) return;
      let force = this.forceSelection;
      this.forceSelection = false;
      let main = this.view.state.selection.main;
      // FIXME need to handle the case where the selection falls inside a block range
      let anchor = this.domAtPos(main.anchor);
      let head = main.empty ? anchor : this.domAtPos(main.head);
      // Always reset on Firefox when next to an uneditable node to
      // avoid invisible cursor bugs (#111)
      if (browser.gecko && main.empty && betweenUneditable(anchor)) {
        let dummy = document.createTextNode("");
        this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      let domSel = this.view.observer.selectionRange;
      // If the selection is already here, or in an equivalent position, don't touch it
      if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
        this.view.observer.ignore(() => {
          // Chrome Android will hide the virtual keyboard when tapping
          // inside an uneditable node, and not bring it back when we
          // move the cursor to its proper position. This tries to
          // restore the keyboard by cycling focus.
          if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
            this.dom.blur();
            this.dom.focus({
              preventScroll: true
            });
          }
          let rawSel = getSelection(this.view.root);
          if (!rawSel) ;else if (main.empty) {
            // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
            if (browser.gecko) {
              let nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                if (text) anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            rawSel.collapse(anchor.node, anchor.offset);
            // Safari will ignore the call above when the editor is
            // hidden, and then raise an error on the call to extend
            // (#940).
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_) {}
          } else {
            // Primitive (IE) way
            let range = document.createRange();
            if (main.anchor > main.head) [anchor, head] = [head, anchor];
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
    enforceCursorAssoc() {
      if (this.compositionDeco.size) return;
      let {
          view
        } = this,
        cursor = view.state.selection.main;
      let sel = getSelection(view.root);
      let {
        anchorNode,
        anchorOffset
      } = view.observer.selectionRange;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;
      let line = LineView.find(this, cursor.head);
      if (!line) return;
      let lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
      let before = this.coordsAt(cursor.head, -1),
        after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top) return;
      let dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      // This can go wrong in corner cases like single-character lines,
      // so check and reset if necessary.
      view.observer.readSelectionRange();
      let newRange = view.observer.selectionRange;
      if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);
    }
    mayControlSelection() {
      let active = this.view.root.activeElement;
      return active == this.dom || hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
    }
    nearest(dom) {
      for (let cur = dom; cur;) {
        let domView = ContentView.get(cur);
        if (domView && domView.rootView == this) return domView;
        cur = cur.parentNode;
      }
      return null;
    }
    posFromDOM(node, offset) {
      let view = this.nearest(node);
      if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node, offset) + view.posAtStart;
    }
    domAtPos(pos) {
      let {
        i,
        off
      } = this.childCursor().findPos(pos, -1);
      for (; i < this.children.length - 1;) {
        let child = this.children[i];
        if (off < child.length || child instanceof LineView) break;
        i++;
        off = 0;
      }
      return this.children[i].domAtPos(off);
    }
    coordsAt(pos, side) {
      for (let off = this.length, i = this.children.length - 1;; i--) {
        let child = this.children[i],
          start = off - child.breakAfter - child.length;
        if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
        off = start;
      }
    }
    measureVisibleLineHeights(viewport) {
      let result = [],
        {
          from,
          to
        } = viewport;
      let contentWidth = this.view.contentDOM.clientWidth;
      let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      let widest = -1,
        ltr = this.view.textDirection == Direction.LTR;
      for (let pos = 0, i = 0; i < this.children.length; i++) {
        let child = this.children[i],
          end = pos + child.length;
        if (end > to) break;
        if (pos >= from) {
          let childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            let last = child.dom.lastChild;
            let rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              let rect = rects[rects.length - 1];
              let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
    textDirectionAt(pos) {
      let {
        i
      } = this.childPos(pos, 1);
      return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
    measureTextSize() {
      for (let child of this.children) {
        if (child instanceof LineView) {
          let measure = child.measureTextSize();
          if (measure) return measure;
        }
      }
      // If no workable line exists, force a layout of a measurable element
      let dummy = document.createElement("div"),
        lineHeight,
        charWidth;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(() => {
        this.dom.appendChild(dummy);
        let rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        dummy.remove();
      });
      return {
        lineHeight,
        charWidth
      };
    }
    childCursor(pos = this.length) {
      // Move back to start of last element when possible, so that
      // `ChildCursor.findPos` doesn't have to deal with the edge case
      // of being after the last element.
      let i = this.children.length;
      if (i) pos -= this.children[--i].length;
      return new ChildCursor(this.children, pos, i);
    }
    computeBlockGapDeco() {
      let deco = [],
        vs = this.view.viewState;
      for (let pos = 0, i = 0;; i++) {
        let next = i == vs.viewports.length ? null : vs.viewports[i];
        let end = next ? next.from - 1 : this.length;
        if (end > pos) {
          let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next) break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
    updateDeco() {
      let allDeco = this.view.state.facet(decorations).map((d, i) => {
        let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
        return dynamic ? d(this.view) : d;
      });
      for (let i = allDeco.length; i < allDeco.length + 3; i++) this.dynamicDecorationMap[i] = false;
      return this.decorations = [...allDeco, this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco];
    }
    scrollIntoView(target) {
      let {
        range
      } = target;
      let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
        other;
      if (!rect) return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
      let mLeft = 0,
        mRight = 0,
        mTop = 0,
        mBottom = 0;
      for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view))) if (margins) {
        let {
          left,
          right,
          top,
          bottom
        } = margins;
        if (left != null) mLeft = Math.max(mLeft, left);
        if (right != null) mRight = Math.max(mRight, right);
        if (top != null) mTop = Math.max(mTop, top);
        if (bottom != null) mBottom = Math.max(mBottom, bottom);
      }
      let targetRect = {
        left: rect.left - mLeft,
        top: rect.top - mTop,
        right: rect.right + mRight,
        bottom: rect.bottom + mBottom
      };
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
    }
  }
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  class BlockGapWidget extends WidgetType {
    constructor(height) {
      super();
      this.height = height;
    }
    toDOM() {
      let elt = document.createElement("div");
      this.updateDOM(elt);
      return elt;
    }
    eq(other) {
      return other.height == this.height;
    }
    updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
    get estimatedHeight() {
      return this.height;
    }
  }
  function compositionSurroundingNode(view) {
    let sel = view.observer.selectionRange;
    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
    if (!textNode) return null;
    let cView = view.docView.nearest(textNode);
    if (!cView) return null;
    if (cView instanceof LineView) {
      let topNode = textNode;
      while (topNode.parentNode != cView.dom) topNode = topNode.parentNode;
      let prev = topNode.previousSibling;
      while (prev && !ContentView.get(prev)) prev = prev.previousSibling;
      let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
      return {
        from: pos,
        to: pos,
        node: topNode,
        text: textNode
      };
    } else {
      for (;;) {
        let {
          parent
        } = cView;
        if (!parent) return null;
        if (parent instanceof LineView) break;
        cView = parent;
      }
      let from = cView.posAtStart;
      return {
        from,
        to: from + cView.length,
        node: cView.dom,
        text: textNode
      };
    }
  }
  function computeCompositionDeco(view, changes) {
    let surrounding = compositionSurroundingNode(view);
    if (!surrounding) return Decoration.none;
    let {
      from,
      to,
      node,
      text: textNode
    } = surrounding;
    let newFrom = changes.mapPos(from, 1),
      newTo = Math.max(newFrom, changes.mapPos(to, -1));
    let {
        state
      } = view,
      text = node.nodeType == 3 ? node.nodeValue : new DOMReader([], state).readRange(node.firstChild, null).text;
    if (newTo - newFrom < text.length) {
      if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text) newTo = newFrom + text.length;else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text) newFrom = newTo - text.length;else return Decoration.none;
    } else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
      return Decoration.none;
    }
    let topView = ContentView.get(node);
    if (topView instanceof CompositionView) topView = topView.widget.topView;else if (topView) topView.parent = null;
    return Decoration.set(Decoration.replace({
      widget: new CompositionWidget(node, textNode, topView),
      inclusive: true
    }).range(newFrom, newTo));
  }
  class CompositionWidget extends WidgetType {
    constructor(top, text, topView) {
      super();
      this.top = top;
      this.text = text;
      this.topView = topView;
    }
    eq(other) {
      return this.top == other.top && this.text == other.text;
    }
    toDOM() {
      return this.top;
    }
    ignoreEvent() {
      return false;
    }
    get customView() {
      return CompositionView;
    }
  }
  function nearbyTextNode(node, offset, side) {
    for (;;) {
      if (node.nodeType == 3) return node;
      if (node.nodeType == 1 && offset > 0 && side <= 0) {
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
        node = node.childNodes[offset];
        offset = 0;
      } else {
        return null;
      }
    }
  }
  function nextToUneditable(node, offset) {
    if (node.nodeType != 1) return 0;
    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  class DecorationComparator$1 {
    constructor() {
      this.changes = [];
    }
    compareRange(from, to) {
      addRange(from, to, this.changes);
    }
    comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
  }
  function findChangedDeco(a, b, diff) {
    let comp = new DecorationComparator$1();
    RangeSet.compare(a, b, diff, comp);
    return comp.changes;
  }
  function inUneditable(node, inside) {
    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
      if (cur.nodeType == 1 && cur.contentEditable == 'false') {
        return true;
      }
    }
    return false;
  }
  function groupAt(state, pos, bias = 1) {
    let categorize = state.charCategorizer(pos);
    let line = state.doc.lineAt(pos),
      linePos = pos - line.from;
    if (line.length == 0) return EditorSelection.cursor(pos);
    if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
    let from = linePos,
      to = linePos;
    if (bias < 0) from = findClusterBreak(line.text, linePos, false);else to = findClusterBreak(line.text, linePos);
    let cat = categorize(line.text.slice(from, to));
    while (from > 0) {
      let prev = findClusterBreak(line.text, from, false);
      if (categorize(line.text.slice(prev, from)) != cat) break;
      from = prev;
    }
    while (to < line.length) {
      let next = findClusterBreak(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat) break;
      to = next;
    }
    return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
    return top < rect.top ? {
      top,
      left: rect.left,
      right: rect.right,
      bottom: rect.bottom
    } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? {
      top: rect.top,
      left: rect.left,
      right: rect.right,
      bottom
    } : rect;
  }
  function domPosAtCoords(parent, x, y) {
    let closest,
      closestRect,
      closestX,
      closestY,
      closestOverlap = false;
    let above, below, aboveRect, belowRect;
    for (let child = parent.firstChild; child; child = child.nextSibling) {
      let rects = clientRectsFor(child);
      for (let i = 0; i < rects.length; i++) {
        let rect = rects[i];
        if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        let dx = getdx(x, rect),
          dy = getdy(y, rect);
        if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          closestOverlap = !dx || (dx > 0 ? i < rects.length - 1 : i > 0);
        }
        if (dx == 0) {
          if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest) return {
      node: parent,
      offset: 0
    };
    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
    if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
    if (closestOverlap && closest.contentEditable != "false") return domPosAtCoords(closest, clipX, y);
    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return {
      node: parent,
      offset
    };
  }
  function domPosInText(node, x, y) {
    let len = node.nodeValue.length;
    let closestOffset = -1,
      closestDY = 1e9,
      generalSide = 0;
    for (let i = 0; i < len; i++) {
      let rects = textRange(node, i, i + 1).getClientRects();
      for (let j = 0; j < rects.length; j++) {
        let rect = rects[j];
        if (rect.top == rect.bottom) continue;
        if (!generalSide) generalSide = x - rect.left;
        let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
        if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
          let right = x >= (rect.left + rect.right) / 2,
            after = right;
          if (browser.chrome || browser.gecko) {
            // Check for RTL on browsers that support getting client
            // rects for empty ranges.
            let rectBefore = textRange(node, i).getBoundingClientRect();
            if (rectBefore.left == rect.right) after = !right;
          }
          if (dy <= 0) return {
            node,
            offset: i + (after ? 1 : 0)
          };
          closestOffset = i + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return {
      node,
      offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
    };
  }
  function posAtCoords(view, {
    x,
    y
  }, precise, bias = -1) {
    var _a;
    let content = view.contentDOM.getBoundingClientRect(),
      docTop = content.top + view.viewState.paddingTop;
    let block,
      {
        docHeight
      } = view.viewState;
    let yOffset = y - docTop;
    if (yOffset < 0) return 0;
    if (yOffset > docHeight) return view.state.doc.length;
    // Scan for a text block near the queried y position
    for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
      block = view.elementAtHeight(yOffset);
      if (block.type == BlockType.Text) break;
      for (;;) {
        // Move the y position out of this block
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight) break;
        // If the document consists entirely of replaced widgets, we
        // won't find a text block, so return 0
        if (bounced) return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y = docTop + yOffset;
    let lineStart = block.from;
    // If this is outside of the rendered viewport, we can't determine a position
    if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
    let doc = view.dom.ownerDocument;
    let root = view.root.elementFromPoint ? view.root : doc;
    let element = root.elementFromPoint(x, y);
    if (element && !view.contentDOM.contains(element)) element = null;
    // If the element is unexpected, clip x at the sides of the content area and try again
    if (!element) {
      x = Math.max(content.left + 1, Math.min(content.right - 1, x));
      element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element)) element = null;
    }
    // There's visible editor content under the point, so we can try
    // using caret(Position|Range)FromPoint as a shortcut
    let node,
      offset = -1;
    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
      if (doc.caretPositionFromPoint) {
        let pos = doc.caretPositionFromPoint(x, y);
        if (pos) ({
          offsetNode: node,
          offset
        } = pos);
      } else if (doc.caretRangeFromPoint) {
        let range = doc.caretRangeFromPoint(x, y);
        if (range) {
          ({
            startContainer: node,
            startOffset: offset
          } = range);
          if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;
        }
      }
    }
    // No luck, do our own (potentially expensive) search
    if (!node || !view.docView.dom.contains(node)) {
      let line = LineView.find(view.docView, lineStart);
      if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;
      ({
        node,
        offset
      } = domPosAtCoords(line.dom, x, y));
    }
    return view.docView.posFromDOM(node, offset);
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
      let line = Math.floor((y - block.top) / view.defaultLineHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    let content = view.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
    let len;
    if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
    for (let next = node.nextSibling; next; next = next.nextSibling) if (next.nodeType != 1 || next.nodeName != "BR") return false;
    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
    if (offset != 0) return false;
    for (let cur = node;;) {
      let parent = cur.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;
      if (parent.classList.contains("cm-line")) break;
      cur = parent;
    }
    let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x - rect.left > 5;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
    let line = view.state.doc.lineAt(start.head);
    let coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      let editorRect = view.dom.getBoundingClientRect();
      let direction = view.textDirectionAt(line.from);
      let pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null) return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    let lineView = LineView.find(view.docView, start.head);
    let end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
    return EditorSelection.cursor(end, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
    let line = view.state.doc.lineAt(start.head),
      spans = view.bidiSpans(line);
    let direction = view.textDirectionAt(line.from);
    for (let cur = start, check = null;;) {
      let next = moveVisually(line, spans, direction, cur, forward),
        char = movedOver;
      if (!next) {
        if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
        char = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next = EditorSelection.cursor(forward ? line.from : line.to);
      }
      if (!check) {
        if (!by) return next;
        check = by(char);
      } else if (!check(char)) {
        return cur;
      }
      cur = next;
    }
  }
  function byGroup(view, pos, start) {
    let categorize = view.state.charCategorizer(pos);
    let cat = categorize(start);
    return next => {
      let nextCat = categorize(next);
      if (cat == CharCategory.Space) cat = nextCat;
      return cat == nextCat;
    };
  }
  function moveVertically(view, start, forward, distance) {
    let startPos = start.head,
      dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0)) return EditorSelection.cursor(startPos, start.assoc);
    let goal = start.goalColumn,
      startY;
    let rect = view.contentDOM.getBoundingClientRect();
    let startCoords = view.coordsAtPos(startPos),
      docTop = view.documentTop;
    if (startCoords) {
      if (goal == null) goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      let line = view.viewState.lineBlockAt(startPos);
      if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    let resolvedGoal = rect.left + goal;
    let dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
    for (let extra = 0;; extra += 10) {
      let curY = startY + (dist + extra) * dir;
      let pos = posAtCoords(view, {
        x: resolvedGoal,
        y: curY
      }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return EditorSelection.cursor(pos, start.assoc, undefined, goal);
    }
  }
  function skipAtoms(view, oldPos, pos) {
    let atoms = view.state.facet(atomicRanges).map(f => f(view));
    for (;;) {
      let moved = false;
      for (let set of atoms) {
        set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
          if (pos.from > from && pos.from < to) {
            pos = oldPos.head > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
            moved = true;
          }
        });
      }
      if (!moved) return pos;
    }
  }

  // This will also be where dragging info and such goes
  class InputState {
    constructor(view) {
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      this.chromeScrollHack = -1;
      // On iOS, some keys need to have their default behavior happen
      // (after which we retroactively handle them and reset the DOM) to
      // avoid messing up the virtual keyboard state.
      this.pendingIOSKey = undefined;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastEscPress = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.registeredEvents = [];
      this.customHandlers = [];
      // -1 means not in a composition. Otherwise, this counts the number
      // of changes made during the composition. The count is used to
      // avoid treating the start state of the composition, before any
      // changes have been made, as part of the composition.
      this.composing = -1;
      // Tracks whether the next change should be marked as starting the
      // composition (null means no composition, true means next is the
      // first, false means first has already been marked for this
      // composition)
      this.compositionFirstChange = null;
      this.compositionEndedAt = 0;
      this.mouseSelection = null;
      let handleEvent = (handler, event) => {
        if (this.ignoreDuringComposition(event)) return;
        if (event.type == "keydown" && this.keydown(view, event)) return;
        if (this.mustFlushObserver(event)) view.observer.forceFlush();
        if (this.runCustomHandlers(event.type, view, event)) event.preventDefault();else handler(view, event);
      };
      for (let type in handlers) {
        let handler = handlers[type];
        view.contentDOM.addEventListener(type, event => {
          if (eventBelongsToEditor(view, event)) handleEvent(handler, event);
        }, handlerOptions[type]);
        this.registeredEvents.push(type);
      }
      view.scrollDOM.addEventListener("mousedown", event => {
        if (event.target == view.scrollDOM) handleEvent(handlers.mousedown, event);
      });
      if (browser.chrome && browser.chrome_version == 102) {
        // FIXME remove at some point
        // On Chrome 102, viewport updates somehow stop wheel-based
        // scrolling. Turning off pointer events during the scroll seems
        // to avoid the issue.
        view.scrollDOM.addEventListener("wheel", () => {
          if (this.chromeScrollHack < 0) view.contentDOM.style.pointerEvents = "none";else window.clearTimeout(this.chromeScrollHack);
          this.chromeScrollHack = setTimeout(() => {
            this.chromeScrollHack = -1;
            view.contentDOM.style.pointerEvents = "";
          }, 100);
        }, {
          passive: true
        });
      }
      this.notifiedFocused = view.hasFocus;
      // On Safari adding an input event handler somehow prevents an
      // issue where the composition vanishes when you press enter.
      if (browser.safari) view.contentDOM.addEventListener("input", () => null);
    }
    setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
    ensureHandlers(view, plugins) {
      var _a;
      let handlers;
      this.customHandlers = [];
      for (let plugin of plugins) if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
        this.customHandlers.push({
          plugin: plugin.value,
          handlers
        });
        for (let type in handlers) if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
          this.registeredEvents.push(type);
          view.contentDOM.addEventListener(type, event => {
            if (!eventBelongsToEditor(view, event)) return;
            if (this.runCustomHandlers(type, view, event)) event.preventDefault();
          });
        }
      }
    }
    runCustomHandlers(type, view, event) {
      for (let set of this.customHandlers) {
        let handler = set.handlers[type];
        if (handler) {
          try {
            if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;
          } catch (e) {
            logException(view.state, e);
          }
        }
      }
      return false;
    }
    runScrollHandlers(view, event) {
      this.lastScrollTop = view.scrollDOM.scrollTop;
      this.lastScrollLeft = view.scrollDOM.scrollLeft;
      for (let set of this.customHandlers) {
        let handler = set.handlers.scroll;
        if (handler) {
          try {
            handler.call(set.plugin, event, view);
          } catch (e) {
            logException(view.state, e);
          }
        }
      }
    }
    keydown(view, event) {
      // Must always run, even if a custom handler handled the event
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000) return true;
      // Chrome for Android usually doesn't fire proper key events, but
      // occasionally does, usually surrounded by a bunch of complicated
      // composition changes. When an enter or backspace key event is
      // seen, hold off on handling DOM events for a bit, and then
      // dispatch it.
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      // Prevent the default behavior of Enter on iOS makes the
      // virtual keyboard get stuck in the wrong (lowercase)
      // state. So we let it go through, and then, in
      // applyDOMChange, notify key handlers of it and reset to
      // the state they produce.
      let pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(() => this.flushIOSKey(view), 250);
        return true;
      }
      return false;
    }
    flushIOSKey(view) {
      let key = this.pendingIOSKey;
      if (!key) return false;
      this.pendingIOSKey = undefined;
      return dispatchKey(view.contentDOM, key.key, key.keyCode);
    }
    ignoreDuringComposition(event) {
      if (!/^key/.test(event.type)) return false;
      if (this.composing > 0) return true;
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On some input method editors (IMEs), the Enter key is used to
      // confirm character selection. On Safari, when Enter is pressed,
      // compositionend and keydown events are sometimes emitted in the
      // wrong order. The key event should still be ignored, even when
      // it happens after the compositionend event.
      if (browser.safari && !browser.ios && Date.now() - this.compositionEndedAt < 100) {
        this.compositionEndedAt = 0;
        return true;
      }
      return false;
    }
    mustFlushObserver(event) {
      return event.type == "keydown" && event.keyCode != 229;
    }
    startMouseSelection(mouseSelection) {
      if (this.mouseSelection) this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
    update(update) {
      if (this.mouseSelection) this.mouseSelection.update(update);
      if (update.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
    }
    destroy() {
      if (this.mouseSelection) this.mouseSelection.destroy();
    }
  }
  const PendingKeys = [{
    key: "Backspace",
    keyCode: 8,
    inputType: "deleteContentBackward"
  }, {
    key: "Enter",
    keyCode: 13,
    inputType: "insertParagraph"
  }, {
    key: "Delete",
    keyCode: 46,
    inputType: "deleteContentForward"
  }];
  const EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  function dragScrollSpeed(dist) {
    return dist * 0.7 + 8;
  }
  class MouseSelection {
    constructor(view, startEvent, style, mustSelect) {
      this.view = view;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = {
        x: 0,
        y: 0
      };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParent = scrollableParent(view.contentDOM);
      let doc = view.contentDOM.ownerDocument;
      doc.addEventListener("mousemove", this.move = this.move.bind(this));
      doc.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
      this.dragMove = dragMovesSelection(view, startEvent);
      this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      // When clicking outside of the selection, immediately apply the
      // effect of starting the selection
      if (this.dragging === false) {
        startEvent.preventDefault();
        this.select(startEvent);
      }
    }
    move(event) {
      var _a;
      if (event.buttons == 0) return this.destroy();
      if (this.dragging !== false) return;
      this.select(this.lastEvent = event);
      let sx = 0,
        sy = 0;
      let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {
        left: 0,
        top: 0,
        right: this.view.win.innerWidth,
        bottom: this.view.win.innerHeight
      };
      if (event.clientX <= rect.left) sx = -dragScrollSpeed(rect.left - event.clientX);else if (event.clientX >= rect.right) sx = dragScrollSpeed(event.clientX - rect.right);
      if (event.clientY <= rect.top) sy = -dragScrollSpeed(rect.top - event.clientY);else if (event.clientY >= rect.bottom) sy = dragScrollSpeed(event.clientY - rect.bottom);
      this.setScrollSpeed(sx, sy);
    }
    up(event) {
      if (this.dragging == null) this.select(this.lastEvent);
      if (!this.dragging) event.preventDefault();
      this.destroy();
    }
    destroy() {
      this.setScrollSpeed(0, 0);
      let doc = this.view.contentDOM.ownerDocument;
      doc.removeEventListener("mousemove", this.move);
      doc.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = null;
    }
    setScrollSpeed(sx, sy) {
      this.scrollSpeed = {
        x: sx,
        y: sy
      };
      if (sx || sy) {
        if (this.scrolling < 0) this.scrolling = setInterval(() => this.scroll(), 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
    scroll() {
      if (this.scrollParent) {
        this.scrollParent.scrollLeft += this.scrollSpeed.x;
        this.scrollParent.scrollTop += this.scrollSpeed.y;
      } else {
        this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
      }
      if (this.dragging === false) this.select(this.lastEvent);
    }
    select(event) {
      let selection = this.style.get(event, this.extend, this.multiple);
      if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
        selection,
        userEvent: "select.pointer"
      });
      this.mustSelect = false;
    }
    update(update) {
      if (update.docChanged && this.dragging) this.dragging = this.dragging.map(update.changes);
      if (this.style.update(update)) setTimeout(() => this.select(this.lastEvent), 20);
    }
  }
  function addsSelectionRange(view, event) {
    let facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    let facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    let {
      main
    } = view.state.selection;
    if (main.empty) return false;
    // On boundary clicks, check whether the coordinates are inside the
    // selection's client rectangles
    let sel = getSelection(view.root);
    if (!sel || sel.rangeCount == 0) return true;
    let rects = sel.getRangeAt(0).getClientRects();
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles) return true;
    if (event.defaultPrevented) return false;
    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode) if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
    return true;
  }
  const handlers = /*@__PURE__*/Object.create(null);
  const handlerOptions = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view) {
    let parent = view.dom.parentNode;
    if (!parent) return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(() => {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function doPaste(view, input) {
    let {
        state
      } = view,
      changes,
      i = 1,
      text = state.toText(input);
    let byLine = text.lines == state.selection.ranges.length;
    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
    if (linewise) {
      let lastLine = -1;
      changes = state.changeByRange(range => {
        let line = state.doc.lineAt(range.from);
        if (line.from == lastLine) return {
          range
        };
        lastLine = line.from;
        let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
        return {
          changes: {
            from: line.from,
            insert
          },
          range: EditorSelection.cursor(range.from + insert.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange(range => {
        let line = text.line(i++);
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: line.text
          },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  handlers.keydown = (view, event) => {
    view.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27) view.inputState.lastEscPress = Date.now();else if (modifierCodes.indexOf(event.keyCode) < 0) view.inputState.lastEscPress = 0;
  };
  handlers.touchstart = (view, e) => {
    view.inputState.lastTouchTime = Date.now();
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.touchmove = view => {
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlerOptions.touchstart = handlerOptions.touchmove = {
    passive: true
  };
  handlers.mousedown = (view, event) => {
    view.observer.flush();
    if (view.inputState.lastTouchTime > Date.now() - 2000) return; // Ignore touch interaction
    let style = null;
    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
      style = makeStyle(view, event);
      if (style) break;
    }
    if (!style && event.button == 0) style = basicMouseSelection(view, event);
    if (style) {
      let mustFocus = view.root.activeElement != view.contentDOM;
      if (mustFocus) view.observer.ignore(() => focusPreventScroll(view.contentDOM));
      view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    }
  };
  function rangeForClick(view, pos, bias, type) {
    if (type == 1) {
      // Single click
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      // Double click
      return groupAt(view.state, pos, bias);
    } else {
      // Triple click
      let visual = LineView.find(view.docView, pos),
        line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      let from = visual ? visual.posAtStart : line.from,
        to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to) to++;
      return EditorSelection.range(from, to);
    }
  }
  let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
  let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
    let line = LineView.find(view.docView, pos);
    if (!line) return 1;
    let off = pos - line.posAtStart;
    // Line boundaries point into the line
    if (off == 0) return 1;
    if (off == line.length) return -1;
    // Positions on top of an element point at that element
    let before = line.coordsAt(off, -1);
    if (before && inside(x, y, before)) return -1;
    let after = line.coordsAt(off, 1);
    if (after && inside(x, y, after)) return 1;
    // This is probably a line wrap point. Pick before if the point is
    // beside it.
    return before && insideY(y, before) ? -1 : 1;
  }
  function queryPos(view, event) {
    let pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    return {
      pos,
      bias: findPositionSide(view, pos, event.clientX, event.clientY)
    };
  }
  const BadMouseDetail = browser.ie && browser.ie_version <= 11;
  let lastMouseDown = null,
    lastMouseDownCount = 0,
    lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail) return event.detail;
    let last = lastMouseDown,
      lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    let start = queryPos(view, event),
      type = getClickType(event);
    let startSel = view.state.selection;
    return {
      update(update) {
        if (update.docChanged) {
          start.pos = update.changes.mapPos(start.pos);
          startSel = startSel.map(update.changes);
        }
      },
      get(event, extend, multiple) {
        let cur = queryPos(view, event);
        let range = rangeForClick(view, cur.pos, cur.bias, type);
        if (start.pos != cur.pos && !extend) {
          let startRange = rangeForClick(view, start.pos, start.bias, type);
          let from = Math.min(startRange.from, range.from),
            to = Math.max(startRange.to, range.to);
          range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
        }
        if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some(r => r.eq(range))) return removeRange(startSel, range);else if (multiple) return startSel.addRange(range);else return EditorSelection.create([range]);
      }
    };
  }
  function removeRange(sel, range) {
    for (let i = 0;; i++) {
      if (sel.ranges[i].eq(range)) return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
    }
  }
  handlers.dragstart = (view, event) => {
    let {
      selection: {
        main
      }
    } = view.state;
    let {
      mouseSelection
    } = view.inputState;
    if (mouseSelection) mouseSelection.dragging = main;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
      event.dataTransfer.effectAllowed = "copyMove";
    }
  };
  function dropText(view, event, text, direct) {
    if (!text) return;
    let dropPos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    }, false);
    event.preventDefault();
    let {
      mouseSelection
    } = view.inputState;
    let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
      from: mouseSelection.dragging.from,
      to: mouseSelection.dragging.to
    } : null;
    let ins = {
      from: dropPos,
      insert: text
    };
    let changes = view.state.changes(del ? [del, ins] : ins);
    view.focus();
    view.dispatch({
      changes,
      selection: {
        anchor: changes.mapPos(dropPos, -1),
        head: changes.mapPos(dropPos, 1)
      },
      userEvent: del ? "move.drop" : "input.drop"
    });
  }
  handlers.drop = (view, event) => {
    if (!event.dataTransfer) return;
    if (view.state.readOnly) return event.preventDefault();
    let files = event.dataTransfer.files;
    if (files && files.length) {
      // For a file drop, read the file's text.
      event.preventDefault();
      let text = Array(files.length),
        read = 0;
      let finishFile = () => {
        if (++read == files.length) dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
      };
      for (let i = 0; i < files.length; i++) {
        let reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = () => {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i]);
      }
    } else {
      dropText(view, event, event.dataTransfer.getData("Text"), true);
    }
  };
  handlers.paste = (view, event) => {
    if (view.state.readOnly) return event.preventDefault();
    view.observer.flush();
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view, data.getData("text/plain"));
      event.preventDefault();
    } else {
      capturePaste(view);
    }
  };
  function captureCopy(view, text) {
    // The extra wrapper is somehow necessary on IE/Edge to prevent the
    // content from being mangled when it is put onto the clipboard
    let parent = view.dom.parentNode;
    if (!parent) return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(() => {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    let content = [],
      ranges = [],
      linewise = false;
    for (let range of state.selection.ranges) if (!range.empty) {
      content.push(state.sliceDoc(range.from, range.to));
      ranges.push(range);
    }
    if (!content.length) {
      // Nothing selected, do a line-wise copy
      let upto = -1;
      for (let {
        from
      } of state.selection.ranges) {
        let line = state.doc.lineAt(from);
        if (line.number > upto) {
          content.push(line.text);
          ranges.push({
            from: line.from,
            to: Math.min(state.doc.length, line.to + 1)
          });
        }
        upto = line.number;
      }
      linewise = true;
    }
    return {
      text: content.join(state.lineBreak),
      ranges,
      linewise
    };
  }
  let lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
    let {
      text,
      ranges,
      linewise
    } = copiedRange(view.state);
    if (!text && !linewise) return;
    lastLinewiseCopy = linewise ? text : null;
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      event.preventDefault();
      data.clearData();
      data.setData("text/plain", text);
    } else {
      captureCopy(view, text);
    }
    if (event.type == "cut" && !view.state.readOnly) view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
  };
  function updateForFocusChange(view) {
    setTimeout(() => {
      if (view.hasFocus != view.inputState.notifiedFocused) view.update([]);
    }, 10);
  }
  handlers.focus = view => {
    view.inputState.lastFocusTime = Date.now();
    // When focusing reset the scroll position, move it back to where it was
    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
      view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
      view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
    }
    updateForFocusChange(view);
  };
  handlers.blur = view => {
    view.observer.clearSelectionRange();
    updateForFocusChange(view);
  };
  handlers.compositionstart = handlers.compositionupdate = view => {
    if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;
    if (view.inputState.composing < 0) {
      // FIXME possibly set a timeout to clear it again on Android
      view.inputState.composing = 0;
    }
  };
  handlers.compositionend = view => {
    view.inputState.composing = -1;
    view.inputState.compositionEndedAt = Date.now();
    view.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) view.observer.flushSoon();
    setTimeout(() => {
      // Force the composition state to be cleared if it hasn't already been
      if (view.inputState.composing < 0 && view.docView.compositionDeco.size) view.update([]);
    }, 50);
  };
  handlers.contextmenu = view => {
    view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
    var _a;
    // Because Chrome Android doesn't fire useful key events, use
    // beforeinput to detect backspace (and possibly enter and delete,
    // but those usually don't even seem to fire beforeinput events at
    // the moment) and fake a key event for it.
    //
    // (preventDefault on beforeinput, though supported in the spec,
    // seems to do nothing at all on Chrome).
    let pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
      view.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
        setTimeout(() => {
          var _a;
          // Backspacing near uneditable nodes on Chrome Android sometimes
          // closes the virtual keyboard. This tries to crudely detect
          // that and refocus to get it back.
          if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
            view.contentDOM.blur();
            view.focus();
          }
        }, 100);
      }
    }
  };
  const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  class HeightOracle {
    constructor(lineWrapping) {
      this.lineWrapping = lineWrapping;
      this.doc = Text$1.empty;
      this.heightSamples = {};
      this.lineHeight = 14;
      this.charWidth = 7;
      this.lineLength = 30;
      // Used to track, during updateHeight, if any actual heights changed
      this.heightChanged = false;
    }
    heightForGap(from, to) {
      let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping) lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
      return this.lineHeight * lines;
    }
    heightForLine(length) {
      if (!this.lineWrapping) return this.lineHeight;
      let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
    setDoc(doc) {
      this.doc = doc;
      return this;
    }
    mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
    mustRefreshForHeights(lineHeights) {
      let newHeight = false;
      for (let i = 0; i < lineHeights.length; i++) {
        let h = lineHeights[i];
        if (h < 0) {
          i++;
        } else if (!this.heightSamples[Math.floor(h * 10)]) {
          // Round to .1 pixels
          newHeight = true;
          this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return newHeight;
    }
    refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
      let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (let i = 0; i < knownHeights.length; i++) {
          let h = knownHeights[i];
          if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return changed;
    }
  }
  // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  class MeasuredHeights {
    constructor(from, heights) {
      this.from = from;
      this.heights = heights;
      this.index = 0;
    }
    get more() {
      return this.index < this.heights.length;
    }
  }
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  class BlockInfo {
    /**
    @internal
    */
    constructor(
    /**
    The start of the element in the document.
    */
    from,
    /**
    The length of the element.
    */
    length,
    /**
    The top position of the element (relative to the top of the
    document).
    */
    top,
    /**
    Its height.
    */
    height,
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    type) {
      this.from = from;
      this.length = length;
      this.top = top;
      this.height = height;
      this.type = type;
    }
    /**
    The end of the element as a document position.
    */
    get to() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
    get bottom() {
      return this.top + this.height;
    }
    /**
    @internal
    */
    join(other) {
      let detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
      return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
    }
  }
  var QueryType = /*@__PURE__*/function (QueryType) {
    QueryType[QueryType["ByPos"] = 0] = "ByPos";
    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType;
  }(QueryType || (QueryType = {}));
  const Epsilon = 1e-3;
  class HeightMap {
    constructor(length,
    // The number of characters covered
    height,
    // Height of this part of the document
    flags = 2 /* Flag.Outdated */) {
      this.length = length;
      this.height = height;
      this.flags = flags;
    }
    get outdated() {
      return (this.flags & 2 /* Flag.Outdated */) > 0;
    }
    set outdated(value) {
      this.flags = (value ? 2 /* Flag.Outdated */ : 0) | this.flags & ~2 /* Flag.Outdated */;
    }
    setHeight(oracle, height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
    replace(_from, _to, nodes) {
      return HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
    decomposeLeft(_to, result) {
      result.push(this);
    }
    decomposeRight(_from, result) {
      result.push(this);
    }
    applyChanges(decorations, oldDoc, oracle, changes) {
      let me = this;
      for (let i = changes.length - 1; i >= 0; i--) {
        let {
          fromA,
          toA,
          fromB,
          toB
        } = changes[i];
        let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i > 0 && start.from <= changes[i - 1].toA) {
          fromA = changes[i - 1].fromA;
          fromB = changes[i - 1].fromB;
          i--;
          if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
        me = me.replace(fromA, toA, nodes);
      }
      return me.updateHeight(oracle, 0);
    }
    static empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
    static of(nodes) {
      if (nodes.length == 1) return nodes[0];
      let i = 0,
        j = nodes.length,
        before = 0,
        after = 0;
      for (;;) {
        if (i == j) {
          if (before > after * 2) {
            let split = nodes[i - 1];
            if (split.break) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
            j += 1 + split.break;
            before -= split.size;
          } else if (after > before * 2) {
            let split = nodes[j];
            if (split.break) nodes.splice(j, 1, split.left, null, split.right);else nodes.splice(j, 1, split.left, split.right);
            j += 2 + split.break;
            after -= split.size;
          } else {
            break;
          }
        } else if (before < after) {
          let next = nodes[i++];
          if (next) before += next.size;
        } else {
          let next = nodes[--j];
          if (next) after += next.size;
        }
      }
      let brk = 0;
      if (nodes[i - 1] == null) {
        brk = 1;
        i--;
      } else if (nodes[i] == null) {
        brk = 1;
        j++;
      }
      return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
    }
  }
  HeightMap.prototype.size = 1;
  class HeightMapBlock extends HeightMap {
    constructor(length, height, type) {
      super(length, height);
      this.type = type;
    }
    blockAt(_height, _doc, top, offset) {
      return new BlockInfo(offset, this.length, top, this.height, this.type);
    }
    lineAt(_value, _type, doc, top, offset) {
      return this.blockAt(0, doc, top, offset);
    }
    forEachLine(from, to, doc, top, offset, f) {
      if (from <= offset + this.length && to >= offset) f(this.blockAt(0, doc, top, offset));
    }
    updateHeight(oracle, offset = 0, _force = false, measured) {
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
    toString() {
      return `block(${this.length})`;
    }
  }
  class HeightMapText extends HeightMapBlock {
    constructor(length, height) {
      super(length, height, BlockType.Text);
      this.collapsed = 0; // Amount of collapsed content in the line
      this.widgetHeight = 0; // Maximum inline widget height
    }

    replace(_from, _to, nodes) {
      let node = nodes[0];
      if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* Flag.SingleLine */) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
        if (!this.outdated) node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
      this.outdated = false;
      return this;
    }
    toString() {
      return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
    }
  }
  class HeightMapGap extends HeightMap {
    constructor(length) {
      super(length, 0);
    }
    lines(doc, offset) {
      let firstLine = doc.lineAt(offset).number,
        lastLine = doc.lineAt(offset + this.length).number;
      return {
        firstLine,
        lastLine,
        lineHeight: this.height / (lastLine - firstLine + 1)
      };
    }
    blockAt(height, doc, top, offset) {
      let {
        firstLine,
        lastLine,
        lineHeight
      } = this.lines(doc, offset);
      let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
      let {
        from,
        length
      } = doc.line(firstLine + line);
      return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
    }
    lineAt(value, type, doc, top, offset) {
      if (type == QueryType.ByHeight) return this.blockAt(value, doc, top, offset);
      if (type == QueryType.ByPosNoHeight) {
        let {
          from,
          to
        } = doc.lineAt(value);
        return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
      }
      let {
        firstLine,
        lineHeight
      } = this.lines(doc, offset);
      let {
        from,
        length,
        number
      } = doc.lineAt(value);
      return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
    }
    forEachLine(from, to, doc, top, offset, f) {
      let {
        firstLine,
        lineHeight
      } = this.lines(doc, offset);
      for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
        let line = doc.lineAt(pos);
        if (pos == from) top += lineHeight * (line.number - firstLine);
        f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
        top += lineHeight;
        pos = line.to + 1;
      }
    }
    replace(from, to, nodes) {
      let after = this.length - to;
      if (after > 0) {
        let last = nodes[nodes.length - 1];
        if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
      }
      if (from > 0) {
        let first = nodes[0];
        if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
    decomposeLeft(to, result) {
      result.push(new HeightMapGap(to - 1), null);
    }
    decomposeRight(from, result) {
      result.push(null, new HeightMapGap(this.length - from - 1));
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        // Fill in part of this gap with measured lines. We know there
        // can't be widgets or collapsed ranges in those lines, because
        // they would already have been added to the heightmap (gaps
        // only contain plain text).
        let nodes = [],
          pos = Math.max(offset, measured.from),
          singleHeight = -1;
        let wasChanged = oracle.heightChanged;
        if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          let len = oracle.doc.lineAt(pos).length;
          if (nodes.length) nodes.push(null);
          let height = measured.heights[measured.index++];
          if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
          let line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
        let result = HeightMap.of(nodes);
        oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
        return result;
      } else if (force || this.outdated) {
        this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
    toString() {
      return `gap(${this.length})`;
    }
  }
  class HeightMapBranch extends HeightMap {
    constructor(left, brk, right) {
      super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
      this.left = left;
      this.right = right;
      this.size = left.size + right.size;
    }
    get break() {
      return this.flags & 1 /* Flag.Break */;
    }
    blockAt(height, doc, top, offset) {
      let mid = top + this.left.height;
      return height < mid ? this.left.blockAt(height, doc, top, offset) : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
    }
    lineAt(value, type, doc, top, offset) {
      let rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this.break;
      let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
      let base = left ? this.left.lineAt(value, type, doc, top, offset) : this.right.lineAt(value, type, doc, rightTop, rightOffset);
      if (this.break || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
      let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left) return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
    }
    forEachLine(from, to, doc, top, offset, f) {
      let rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this.break;
      if (this.break) {
        if (from < rightOffset) this.left.forEachLine(from, to, doc, top, offset, f);
        if (to >= rightOffset) this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
      } else {
        let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
        if (from < mid.from) this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
        if (mid.to >= from && mid.from <= to) f(mid);
        if (to > mid.to) this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
      }
    }
    replace(from, to, nodes) {
      let rightStart = this.left.length + this.break;
      if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      let result = [];
      if (from > 0) this.decomposeLeft(from, result);
      let left = result.length;
      for (let node of nodes) result.push(node);
      if (from > 0) mergeGaps(result, left - 1);
      if (to < this.length) {
        let right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
    decomposeLeft(to, result) {
      let left = this.left.length;
      if (to <= left) return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this.break) {
        left++;
        if (to >= left) result.push(null);
      }
      if (to > left) this.right.decomposeLeft(to - left, result);
    }
    decomposeRight(from, result) {
      let left = this.left.length,
        right = left + this.break;
      if (from >= right) return this.right.decomposeRight(from - right, result);
      if (from < left) this.left.decomposeRight(from, result);
      if (this.break && from < right) result.push(null);
      result.push(this.right);
    }
    balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this.break ? [left, null, right] : [left, right]);
      this.left = left;
      this.right = right;
      this.height = left.height + right.height;
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this.break + right.length;
      return this;
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let {
          left,
          right
        } = this,
        rightStart = offset + left.length + this.break,
        rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
      if (rebalance) return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
    toString() {
      return this.left + (this.break ? " " : "-") + this.right;
    }
  }
  function mergeGaps(nodes, around) {
    let before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  const relevantWidgetHeight = 5;
  class NodeBuilder {
    constructor(pos, oracle) {
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    get isCovered() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
    span(_from, to) {
      if (this.lineStart > -1) {
        let end = Math.min(to, this.lineEnd),
          last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
    point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        let height = deco.widget ? deco.widget.estimatedHeight : 0;
        if (height < 0) height = this.oracle.lineHeight;
        let len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco.type));
        } else if (len || height >= relevantWidgetHeight) {
          this.addLineDeco(height, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
    enterLine() {
      if (this.lineStart > -1) return;
      let {
        from,
        to
      } = this.oracle.doc.lineAt(this.pos);
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
    blankContent(from, to) {
      let gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* Flag.SingleLine */;
      return gap;
    }
    ensureLine() {
      this.enterLine();
      let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText) return last;
      let line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
    addBlock(block) {
      this.enterLine();
      if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (block.type != BlockType.WidgetBefore) this.covering = block;
    }
    addLineDeco(height, length) {
      let line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      this.writtenTo = this.pos = this.pos + length;
    }
    finish(from) {
      let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      let pos = from;
      for (let node of this.nodes) {
        if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
        pos += node ? node.length : 1;
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
    static build(oracle, decorations, from, to) {
      let builder = new NodeBuilder(from, oracle);
      RangeSet.spans(decorations, from, to, builder, 0);
      return builder.finish(from);
    }
  }
  function heightRelevantDecoChanges(a, b, diff) {
    let comp = new DecorationComparator();
    RangeSet.compare(a, b, diff, comp, 0);
    return comp.changes;
  }
  class DecorationComparator {
    constructor() {
      this.changes = [];
    }
    compareRange() {}
    comparePoint(from, to, a, b) {
      if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
    }
  }
  function visiblePixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    let doc = dom.ownerDocument,
      win = doc.defaultView || window;
    let left = Math.max(0, rect.left),
      right = Math.min(win.innerWidth, rect.right);
    let top = Math.max(0, rect.top),
      bottom = Math.min(win.innerHeight, rect.bottom);
    for (let parent = dom.parentNode; parent && parent != doc.body;) {
      if (parent.nodeType == 1) {
        let elt = parent;
        let style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          let parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top = Math.max(top, parentRect.top);
          bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        // Shadow root
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top - (rect.top + paddingTop),
      bottom: Math.max(top, bottom) - (rect.top + paddingTop)
    };
  }
  function fullPixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  class LineGap {
    constructor(from, to, size) {
      this.from = from;
      this.to = to;
      this.size = size;
    }
    static same(a, b) {
      if (a.length != b.length) return false;
      for (let i = 0; i < a.length; i++) {
        let gA = a[i],
          gB = b[i];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
      }
      return true;
    }
    draw(wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.size, wrapping)
      }).range(this.from, this.to);
    }
  }
  class LineGapWidget extends WidgetType {
    constructor(size, vertical) {
      super();
      this.size = size;
      this.vertical = vertical;
    }
    eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
    toDOM() {
      let elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
    get estimatedHeight() {
      return this.vertical ? this.size : -1;
    }
  }
  class ViewState {
    constructor(state) {
      this.state = state;
      // These are contentDOM-local coordinates
      this.pixelViewport = {
        left: 0,
        right: window.innerWidth,
        top: 0,
        bottom: 0
      };
      this.inView = true;
      this.paddingTop = 0;
      this.paddingBottom = 0;
      this.contentDOMWidth = 0;
      this.contentDOMHeight = 0;
      this.editorHeight = 0;
      this.editorWidth = 0;
      // See VP.MaxDOMHeight
      this.scaler = IdScaler;
      this.scrollTarget = null;
      // Briefly set to true when printing, to disable viewport limiting
      this.printing = false;
      // Flag set when editor content was redrawn, so that the next
      // measure stage knows it must read DOM layout
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      // Cursor 'assoc' is only significant when the cursor is on a line
      // wrap point, where it must stick to the character that it is
      // associated with. Since browsers don't provide a reasonable
      // interface to set or query this, when a selection is set that
      // might cause this to be significant, this flag is set. The next
      // measure phase will check whether the cursor is on a line-wrapping
      // boundary and, if so, reset it to make sure it is positioned in
      // the right place.
      this.mustEnforceCursorAssoc = false;
      let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      this.viewport = this.getViewport(0, null);
      this.updateViewportLines();
      this.updateForViewport();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
      this.computeVisibleRanges();
    }
    updateForViewport() {
      let viewports = [this.viewport],
        {
          main
        } = this.state.selection;
      for (let i = 0; i <= 1; i++) {
        let pos = i ? main.head : main.anchor;
        if (!viewports.some(({
          from,
          to
        }) => pos >= from && pos <= to)) {
          let {
            from,
            to
          } = this.lineBlockAt(pos);
          viewports.push(new Viewport(from, to));
        }
      }
      this.viewports = viewports.sort((a, b) => a.from - b.from);
      this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
    }
    updateViewportLines() {
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
        this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
      });
    }
    update(update, scrollTarget = null) {
      this.state = update.state;
      let prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
      let contentChanges = update.changedRanges;
      let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
      let prevHeight = this.heightMap.height;
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight) update.flags |= 2 /* UpdateFlag.Height */;
      let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
      let updateLines = !update.changes.empty || update.flags & 2 /* UpdateFlag.Height */ || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
      this.viewport = viewport;
      this.updateForViewport();
      if (updateLines) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
      update.flags |= this.computeVisibleRanges();
      if (scrollTarget) this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;
    }
    measure(view) {
      let dom = view.contentDOM,
        style = window.getComputedStyle(dom);
      let oracle = this.heightOracle;
      let whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
      this.contentDOMHeight = dom.clientHeight;
      this.mustMeasureContent = false;
      let result = 0,
        bias = 0;
      // Vertical padding
      let paddingTop = parseInt(style.paddingTop) || 0,
        paddingBottom = parseInt(style.paddingBottom) || 0;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
      }

      if (this.editorWidth != view.scrollDOM.clientWidth) {
        if (oracle.lineWrapping) measureContent = true;
        this.editorWidth = view.scrollDOM.clientWidth;
        result |= 8 /* UpdateFlag.Geometry */;
      }
      // Pixel viewport
      let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      let dTop = pixelViewport.top - this.pixelViewport.top,
        dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView) measureContent = true;
      }
      if (!this.inView && !this.scrollTarget) return 0;
      let contentWidth = dom.clientWidth;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
        this.contentDOMWidth = contentWidth;
        this.editorHeight = view.scrollDOM.clientHeight;
        result |= 8 /* UpdateFlag.Geometry */;
      }

      if (measureContent) {
        let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          let {
            lineHeight,
            charWidth
          } = view.docView.measureTextSize();
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view.docView.minWidth = 0;
            result |= 8 /* UpdateFlag.Geometry */;
          }
        }

        if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
        oracle.heightChanged = false;
        for (let vp of this.viewports) {
          let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
          this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
        }
        if (oracle.heightChanged) result |= 2 /* UpdateFlag.Height */;
      }

      let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);
      this.updateForViewport();
      if (result & 2 /* UpdateFlag.Height */ || viewportChange) this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2000 /* LG.Margin */ << 1) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        // This is done in the read stage, because moving the selection
        // to a line end is going to trigger a layout anyway, so it
        // can't be a pure write. It should be rare that it does any
        // writing.
        view.docView.enforceCursorAssoc();
      }
      return result;
    }
    get visibleTop() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
    get visibleBottom() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
    getViewport(bias, scrollTarget) {
      // This will divide VP.Margin between the top and the
      // bottom, depending on the bias (the change in viewport position
      // since the last update). It'll hold a number between 0 and 1
      let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
      let map = this.heightMap,
        doc = this.state.doc,
        {
          visibleTop,
          visibleBottom
        } = this;
      let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, doc, 0, 0).to);
      // If scrollTarget is given, make sure the viewport includes that position
      if (scrollTarget) {
        let {
          head
        } = scrollTarget.range;
        if (head < viewport.from || head > viewport.to) {
          let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          let block = map.lineAt(head, QueryType.ByPos, doc, 0, 0),
            topPos;
          if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
          viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
        }
      }
      return viewport;
    }
    mapViewport(viewport, changes) {
      let from = changes.mapPos(viewport.from, -1),
        to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
    viewportIsAppropriate({
      from,
      to
    }, bias = 0) {
      if (!this.inView) return true;
      let {
        top
      } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
      let {
        bottom
      } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
      let {
        visibleTop,
        visibleBottom
      } = this;
      return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */;
    }

    mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty) return gaps;
      let mapped = [];
      for (let gap of gaps) if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
    ensureLineGaps(current, mayMeasure) {
      let wrapping = this.heightOracle.lineWrapping;
      let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */,
        halfMargin = margin >> 1,
        doubleMargin = margin << 1;
      // The non-wrapping logic won't work at all in predominantly right-to-left text.
      if (this.defaultTextDirection != Direction.LTR && !wrapping) return [];
      let gaps = [];
      let addGap = (from, to, line, structure) => {
        if (to - from < halfMargin) return;
        let sel = this.state.selection.main,
          avoid = [sel.from];
        if (!sel.empty) avoid.push(sel.to);
        for (let pos of avoid) {
          if (pos > from && pos < to) {
            addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
            addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
            return;
          }
        }
        let gap = find$1(current, gap => gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some(pos => gap.from < pos && gap.to > pos));
        if (!gap) {
          // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
            let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
            if (lineStart > from) to = lineStart;
          }
          gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
        }
        gaps.push(gap);
      };
      for (let line of this.viewportLines) {
        if (line.length < doubleMargin) continue;
        let structure = lineStructure(line.from, line.to, this.stateDeco);
        if (structure.total < doubleMargin) continue;
        let target = this.scrollTarget ? this.scrollTarget.range.head : null;
        let viewFrom, viewTo;
        if (wrapping) {
          let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
          let top, bot;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
            top = targetFrac - spaceFrac;
            bot = targetFrac + spaceFrac;
          } else {
            top = (this.visibleTop - line.top - marginHeight) / line.height;
            bot = (this.visibleBottom - line.top + marginHeight) / line.height;
          }
          viewFrom = findPosition(structure, top);
          viewTo = findPosition(structure, bot);
        } else {
          let totalWidth = structure.total * this.heightOracle.charWidth;
          let marginWidth = margin * this.heightOracle.charWidth;
          let left, right;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
            left = targetFrac - spaceFrac;
            right = targetFrac + spaceFrac;
          } else {
            left = (this.pixelViewport.left - marginWidth) / totalWidth;
            right = (this.pixelViewport.right + marginWidth) / totalWidth;
          }
          viewFrom = findPosition(structure, left);
          viewTo = findPosition(structure, right);
        }
        if (viewFrom > line.from) addGap(line.from, viewFrom, line, structure);
        if (viewTo < line.to) addGap(viewTo, line.to, line, structure);
      }
      return gaps;
    }
    gapSize(line, from, to, structure) {
      let fraction = findFraction(structure, to) - findFraction(structure, from);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
    updateLineGaps(gaps) {
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
      }
    }
    computeVisibleRanges() {
      let deco = this.stateDeco;
      if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
      let ranges = [];
      RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span(from, to) {
          ranges.push({
            from,
            to
          });
        },
        point() {}
      }, 20);
      let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
      this.visibleRanges = ranges;
      return changed ? 4 /* UpdateFlag.Viewport */ : 0;
    }
    lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, 0, 0), this.scaler);
    }
    lineBlockAtHeight(height) {
      return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);
    }
    elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
    }
    get docHeight() {
      return this.scaler.toDOM(this.heightMap.height);
    }
    get contentHeight() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  }
  class Viewport {
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  }
  function lineStructure(from, to, stateDeco) {
    let ranges = [],
      pos = from,
      total = 0;
    RangeSet.spans(stateDeco, from, to, {
      span() {},
      point(from, to) {
        if (from > pos) {
          ranges.push({
            from: pos,
            to: from
          });
          total += from - pos;
        }
        pos = to;
      }
    }, 20); // We're only interested in collapsed ranges of a significant size
    if (pos < to) {
      ranges.push({
        from: pos,
        to
      });
      total += to - pos;
    }
    return {
      total,
      ranges
    };
  }
  function findPosition({
    total,
    ranges
  }, ratio) {
    if (ratio <= 0) return ranges[0].from;
    if (ratio >= 1) return ranges[ranges.length - 1].to;
    let dist = Math.floor(total * ratio);
    for (let i = 0;; i++) {
      let {
          from,
          to
        } = ranges[i],
        size = to - from;
      if (dist <= size) return from + dist;
      dist -= size;
    }
  }
  function findFraction(structure, pos) {
    let counted = 0;
    for (let {
      from,
      to
    } of structure.ranges) {
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
    return counted / structure.total;
  }
  function find$1(array, f) {
    for (let val of array) if (f(val)) return val;
    return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  const IdScaler = {
    toDOM(n) {
      return n;
    },
    fromDOM(n) {
      return n;
    },
    scale: 1
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  class BigScaler {
    constructor(doc, heightMap, viewports) {
      let vpHeight = 0,
        base = 0,
        domBase = 0;
      this.viewports = viewports.map(({
        from,
        to
      }) => {
        let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
        let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
        vpHeight += bottom - top;
        return {
          from,
          to,
          top,
          bottom,
          domTop: 0,
          domBottom: 0
        };
      });
      this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
      for (let obj of this.viewports) {
        obj.domTop = domBase + (obj.top - base) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base = obj.bottom;
      }
    }
    toDOM(n) {
      for (let i = 0, base = 0, domBase = 0;; i++) {
        let vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.top) return domBase + (n - base) * this.scale;
        if (n <= vp.bottom) return vp.domTop + (n - vp.top);
        base = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    fromDOM(n) {
      for (let i = 0, base = 0, domBase = 0;; i++) {
        let vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.domTop) return base + (n - domBase) / this.scale;
        if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
        base = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1) return block;
    let bTop = scaler.toDOM(block.top),
      bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
  }
  const theme$1 = /*@__PURE__*/Facet.define({
    combine: strs => strs.join(" ")
  });
  const darkTheme = /*@__PURE__*/Facet.define({
    combine: values => values.indexOf(true) > -1
  });
  const baseThemeID = /*@__PURE__*/StyleModule.newName(),
    baseLightID = /*@__PURE__*/StyleModule.newName(),
    baseDarkID = /*@__PURE__*/StyleModule.newName();
  const lightDarkIDs = {
    "&light": "." + baseLightID,
    "&dark": "." + baseDarkID
  };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, m => {
          if (m == "&") return main;
          if (!scopes || !scopes[m]) throw new RangeError(`Unsupported selector: ${m}`);
          return scopes[m];
        }) : main + " " + sel;
      }
    });
  }
  const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
    "&.cm-editor": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      boxSizing: "border-box",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": {
      caretColor: "black"
    },
    "&dark .cm-content": {
      caretColor: "white"
    },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    "@keyframes cm-blink2": {
      "0%": {},
      "50%": {
        opacity: 0
      },
      "100%": {}
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#444"
    },
    "&.cm-focused .cm-cursor": {
      display: "block"
    },
    "&light .cm-activeLine": {
      backgroundColor: "#cceeff44"
    },
    "&dark .cm-activeLine": {
      backgroundColor: "#99eeff33"
    },
    "&light .cm-specialChar": {
      color: "red"
    },
    "&dark .cm-specialChar": {
      color: "#f78"
    },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      left: 0,
      zIndex: 200
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top"
    },
    ".cm-highlightSpace:before": {
      content: "attr(data-display)",
      position: "absolute",
      pointerEvents: "none",
      color: "#888"
    },
    ".cm-highlightTab": {
      backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  class DOMChange {
    constructor(view, start, end, typeOver) {
      this.typeOver = typeOver;
      this.bounds = null;
      this.text = "";
      let {
        impreciseHead: iHead,
        impreciseAnchor: iAnchor
      } = view.docView;
      if (view.state.readOnly && start > -1) {
        // Ignore changes when the editor is read-only
        this.newSel = null;
      } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
        let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
        let reader = new DOMReader(selPoints, view.state);
        reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
        this.text = reader.text;
        this.newSel = selectionFromPoints(selPoints, this.bounds.from);
      } else {
        let domSel = view.observer.selectionRange;
        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
        this.newSel = EditorSelection.single(anchor, head);
      }
    }
  }
  function applyDOMChange(view, domChange) {
    let change;
    let {
        newSel
      } = domChange,
      sel = view.state.selection.main;
    if (domChange.bounds) {
      let {
        from,
        to
      } = domChange.bounds;
      let preferredPos = sel.from,
        preferredSide = null;
      // Prefer anchoring to end when Backspace is pressed (or, on
      // Android, when something was deleted)
      if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && domChange.text.length < to - from) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
      if (diff) {
        // Chrome inserts two newlines when pressing shift-enter at the
        // end of a line. DomChange drops one of those.
        if (browser.chrome && view.inputState.lastKeyCode == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder) diff.toB--;
        change = {
          from: from + diff.from,
          to: from + diff.toA,
          insert: Text$1.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus || !view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel) return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      // Heuristic to notice typing over a selected character
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, sel.to)
      };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      // If the change is inside the selection and covers most of it,
      // assume it is a selection replace (with identical characters at
      // the start/end not included in the diff)
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString())) {
      // Detect insert-period-on-double-space Mac and Android behavior,
      // and transform it into a regular space insert.
      if (newSel && change.insert.length == 2) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: sel.from,
        to: sel.to,
        insert: Text$1.of([" "])
      };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      // In Chrome, if you insert a space at the start of a wrapped
      // line, it will actually insert a newline and a space, causing a
      // bogus new line to be created in CodeMirror (#968)
      if (newSel) newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = {
        from: sel.from,
        to: sel.to,
        insert: Text$1.of([" "])
      };
    }
    if (change) {
      let startState = view.state;
      if (browser.ios && view.inputState.flushIOSKey(view)) return true;
      // Android browsers don't fire reasonable key events for enter,
      // backspace, or delete. So this detects changes that look like
      // they're caused by those keys, and reinterprets them as key
      // events. (Some of these keys are also handled by beforeinput
      // events and the pendingAndroidKey mechanism, but that's not
      // reliable in all situations.)
      if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return true;
      let text = change.insert.toString();
      if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text))) return true;
      if (view.inputState.composing >= 0) view.inputState.composing++;
      let tr;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
        let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
        let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
        tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
      } else {
        let changes = startState.changes(change);
        let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? newSel.main : undefined;
        // Try to apply a composition change to all cursors
        if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
          let replaced = view.state.sliceDoc(change.from, change.to);
          let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
          let offset = sel.to - change.to,
            size = sel.to - sel.from;
          tr = startState.changeByRange(range => {
            if (range.from == sel.from && range.to == sel.to) return {
              changes,
              range: mainSel || range.map(changes)
            };
            let to = range.to - offset,
              from = to - replaced.length;
            if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
            // Unfortunately, there's no way to make multiple
            // changes in the same node work without aborting
            // composition, so cursors in the composition range are
            // ignored.
            compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to) return {
              range
            };
            let rangeChanges = startState.changes({
                from,
                to,
                insert: change.insert
              }),
              selOff = range.to - sel.to;
            return {
              changes: rangeChanges,
              range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
            };
          });
        } else {
          tr = {
            changes,
            selection: mainSel && startState.selection.replaceRange(mainSel)
          };
        }
      }
      let userEvent = "input.type";
      if (view.composing) {
        userEvent += ".compose";
        if (view.inputState.compositionFirstChange) {
          userEvent += ".start";
          view.inputState.compositionFirstChange = false;
        }
      }
      view.dispatch(tr, {
        scrollIntoView: true,
        userEvent
      });
      return true;
    } else if (newSel && !newSel.main.eq(sel)) {
      let scrollIntoView = false,
        userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select") scrollIntoView = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({
        selection: newSel,
        scrollIntoView,
        userEvent
      });
      return true;
    } else {
      return false;
    }
  }
  function findDiff(a, b, preferredPos, preferredSide) {
    let minLen = Math.min(a.length, b.length);
    let from = 0;
    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) from++;
    if (from == minLen && a.length == b.length) return null;
    let toA = a.length,
      toB = b.length;
    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      let adjust = Math.max(0, from - Math.min(toA, toB));
      preferredPos -= toA + adjust - from;
    }
    if (toA < from && a.length < b.length) {
      let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
      from -= move;
      toB = from + (toB - toA);
      toA = from;
    } else if (toB < from) {
      let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
      from -= move;
      toA = from + (toA - toB);
      toB = from;
    }
    return {
      from,
      toA,
      toB
    };
  }
  function selectionPoints(view) {
    let result = [];
    if (view.root.activeElement != view.contentDOM) return result;
    let {
      anchorNode,
      anchorOffset,
      focusNode,
      focusOffset
    } = view.observer.selectionRange;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base) {
    if (points.length == 0) return null;
    let anchor = points[0].pos,
      head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }
  const observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  const useCharData = browser.ie && browser.ie_version <= 11;
  class DOMObserver {
    constructor(view) {
      this.view = view;
      this.active = false;
      // The known selection. Kept in our own object, as opposed to just
      // directly accessing the selection because:
      //  - Safari doesn't report the right selection in shadow DOM
      //  - Reading from the selection forces a DOM layout
      //  - This way, we can ignore selectionchange events if we have
      //    already seen the 'new' selection
      this.selectionRange = new DOMSelectionState();
      // Set when a selection change is detected, cleared on flush
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.resizeContent = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      // Timeout for scheduling check of the parents that need scroll handlers
      this.parentCheck = -1;
      this.dom = view.contentDOM;
      this.observer = new MutationObserver(mutations => {
        for (let mut of mutations) this.queue.push(mut);
        // IE11 will sometimes (on typing over a selection or
        // backspacing out a single character text node) call the
        // observer callback before actually updating the DOM.
        //
        // Unrelatedly, iOS Safari will, when ending a composition,
        // sometimes first clear it, deliver the mutations, and then
        // reinsert the finished text. CodeMirror's handling of the
        // deletion will prevent the reinsertion from happening,
        // breaking composition.
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(m => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length)) this.flushSoon();else this.flush();
      });
      if (useCharData) this.onCharData = event => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(() => {
          var _a;
          if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) this.onResize();
        });
        this.resizeScroll.observe(view.scrollDOM);
        this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
        this.resizeContent.observe(view.contentDOM);
      }
      this.addWindowListeners(this.win = view.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver(entries => {
          if (this.parentCheck < 0) this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
            this.intersecting = !this.intersecting;
            if (this.intersecting != this.view.inView) this.onScrollChanged(document.createEvent("Event"));
          }
        }, {});
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver(entries => {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) this.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    onScrollChanged(e) {
      this.view.inputState.runScrollHandlers(this.view, e);
      if (this.intersecting) this.view.measure();
    }
    onScroll(e) {
      if (this.intersecting) this.flush(false);
      this.onScrollChanged(e);
    }
    onResize() {
      if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
    }
    onPrint() {
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(() => {
        this.view.viewState.printing = false;
        this.view.requestMeasure();
      }, 500);
    }
    updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
        this.gapIntersection.disconnect();
        for (let gap of gaps) this.gapIntersection.observe(gap);
        this.gaps = gaps;
      }
    }
    onSelectionChange(event) {
      let wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey) return;
      let {
          view
        } = this,
        sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
      let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) {
        if (!wasChanged) this.selectionChanged = false;
        return;
      }
      // Deletions on IE11 fire their events in the wrong order, giving
      // us a selection change event before the DOM changes are
      // reported.
      // Chrome Android has a similar issue when backspacing out a
      // selection (#645).
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
      // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
    }
    readSelectionRange() {
      let {
        view
      } = this;
      // The Selection object is broken in shadow roots in Safari. See
      // https://github.com/codemirror/dev/issues/414
      let range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
      if (!range || this.selectionRange.eq(range)) return false;
      let local = hasSelection(this.dom, range);
      // Detect the situation where the browser has, on focus, moved the
      // selection to the start of the content element. Reset it to the
      // position from the editor state.
      if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local) this.selectionChanged = true;
      return true;
    }
    setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
    clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
    listenForScroll() {
      this.parentCheck = -1;
      let i = 0,
        changed = null;
      for (let dom = this.dom; dom;) {
        if (dom.nodeType == 1) {
          if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
          if (changed) changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          // Shadow root
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
      if (changed) {
        for (let dom of this.scrollTargets) dom.removeEventListener("scroll", this.onScroll);
        for (let dom of this.scrollTargets = changed) dom.addEventListener("scroll", this.onScroll);
      }
    }
    ignore(f) {
      if (!this.active) return f();
      try {
        this.stop();
        return f();
      } finally {
        this.start();
        this.clear();
      }
    }
    start() {
      if (this.active) return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
    stop() {
      if (!this.active) return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
    clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
    delayAndroidKey(key, keyCode) {
      var _a;
      if (!this.delayedAndroidKey) {
        let flush = () => {
          let key = this.delayedAndroidKey;
          if (key) {
            this.clearDelayedAndroidKey();
            if (!this.flush() && key.force) dispatchKey(this.dom, key.key, key.keyCode);
          }
        };
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      // Since backspace beforeinput is sometimes signalled spuriously,
      // Enter always takes precedence.
      if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
        key,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
      };
    }
    clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
    flushSoon() {
      if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
    }
    forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
    processRecords() {
      let records = this.queue;
      for (let mut of this.observer.takeRecords()) records.push(mut);
      if (records.length) this.queue = [];
      let from = -1,
        to = -1,
        typeOver = false;
      for (let record of records) {
        let range = this.readMutation(record);
        if (!range) continue;
        if (range.typeOver) typeOver = true;
        if (from == -1) {
          ({
            from,
            to
          } = range);
        } else {
          from = Math.min(range.from, from);
          to = Math.max(range.to, to);
        }
      }
      return {
        from,
        to,
        typeOver
      };
    }
    readChange() {
      let {
        from,
        to,
        typeOver
      } = this.processRecords();
      let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from < 0 && !newSel) return null;
      if (from > -1) this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      return new DOMChange(this.view, from, to, typeOver);
    }
    // Apply pending changes, if any
    flush(readSelection = true) {
      // Completely hold off flushing when pending keys are set—the code
      // managing those will make sure processRecords is called and the
      // view is resynchronized after
      if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
      if (readSelection) this.readSelectionRange();
      let domChange = this.readChange();
      if (!domChange) return false;
      let startState = this.view.state;
      let handled = applyDOMChange(this.view, domChange);
      // The view wasn't updated
      if (this.view.state == startState) this.view.update([]);
      return handled;
    }
    readMutation(rec) {
      let cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec)) return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes") cView.dirty |= 4 /* Dirty.Attrs */;
      if (rec.type == "childList") {
        let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return {
          from: cView.posAtStart,
          to: cView.posAtEnd,
          typeOver: rec.target.nodeValue == rec.oldValue
        };
      } else {
        return null;
      }
    }
    setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
    addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
    removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
    destroy() {
      var _a, _b, _c, _d;
      this.stop();
      (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
      for (let dom of this.scrollTargets) dom.removeEventListener("scroll", this.onScroll);
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
    }
  }
  function findChild(cView, dom, dir) {
    while (dom) {
      let curView = ContentView.get(dom);
      if (curView && curView.parent == cView) return curView;
      let parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view) {
    let found = null;
    // Because Safari (at least in 2018-2021) doesn't provide regular
    // access to the selection inside a shadowroot, we have to perform a
    // ridiculous hack to get at it—using `execCommand` to trigger a
    // `beforeInput` event so that we can read the target range from the
    // event.
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    if (!found) return null;
    let anchorNode = found.startContainer,
      anchorOffset = found.startOffset;
    let focusNode = found.endContainer,
      focusOffset = found.endOffset;
    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    // Since such a range doesn't distinguish between anchor and head,
    // use a heuristic that flips it around if its end matches the
    // current anchor.
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return {
      anchorNode,
      anchorOffset,
      focusNode,
      focusOffset
    };
  }

  // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  class EditorView {
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    constructor(config = {}) {
      this.plugins = [];
      this.pluginMap = new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      /**
      @internal
      */
      this.updateState = 2 /* UpdateState.Updating */;
      /**
      @internal
      */
      this.measureScheduled = -1;
      /**
      @internal
      */
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.style.cssText = "position: fixed; top: -10000px";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      this._dispatch = config.dispatch || (tr => this.update([tr]));
      this.dispatch = this.dispatch.bind(this);
      this._root = config.root || getRoot(config.parent) || document;
      this.viewState = new ViewState(config.state || EditorState.create(config));
      this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
      for (let plugin of this.plugins) plugin.update(this);
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this, this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0 /* UpdateState.Idle */;
      this.requestMeasure();
      if (config.parent) config.parent.appendChild(this.dom);
    }
    /**
    The current editor state.
    */
    get state() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
    get viewport() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
    get visibleRanges() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
    get inView() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
    get composing() {
      return this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
    get compositionStarted() {
      return this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
    get root() {
      return this._root;
    }
    /**
    @internal
    */
    get win() {
      return this.dom.ownerDocument.defaultView || window;
    }
    dispatch(...input) {
      this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0] : this.state.update(...input));
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
    update(transactions) {
      if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      let redrawn = false,
        attrsChanged = false,
        update;
      let state = this.state;
      for (let tr of transactions) {
        if (tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
        state = tr.state;
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      // If there was a pending DOM change, eagerly read it and try to
      // apply it after the given transactions.
      let pendingKey = this.observer.delayedAndroidKey,
        domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        // Only try to apply DOM changes if the transactions didn't
        // change the doc or selection.
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;
      } else {
        this.observer.clear();
      }
      // When the phrases change, redraw the editor
      if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases)) return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      let scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2 /* UpdateState.Updating */;
        for (let tr of transactions) {
          if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);
          if (tr.scrollIntoView) {
            let {
              main
            } = tr.state.selection;
            scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
          }
          for (let e of tr.effects) if (e.is(scrollIntoView$2)) scrollTarget = e.value;
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
      }

      if (update.startState.facet(theme$1) != update.state.facet(theme$1)) this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();
      if (!update.empty) for (let listener of this.state.facet(updateListener)) listener(update);
      if (domChange) {
        if (!applyDOMChange(this, domChange) && pendingKey.force) dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
      }
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
    setState(newState) {
      if (this.updateState != 0 /* UpdateState.Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2 /* UpdateState.Updating */;
      let hadFocus = this.hasFocus;
      try {
        for (let plugin of this.plugins) plugin.destroy(this);
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
        this.pluginMap.clear();
        for (let plugin of this.plugins) plugin.update(this);
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this, this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
      }

      if (hadFocus) this.focus();
      this.requestMeasure();
    }
    updatePlugins(update) {
      let prevSpecs = update.startState.facet(viewPlugin),
        specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        let newPlugins = [];
        for (let spec of specs) {
          let found = prevSpecs.indexOf(spec);
          if (found < 0) {
            newPlugins.push(new PluginInstance(spec));
          } else {
            let plugin = this.plugins[found];
            plugin.mustUpdate = update;
            newPlugins.push(plugin);
          }
        }
        for (let plugin of this.plugins) if (plugin.mustUpdate != update) plugin.destroy(this);
        this.plugins = newPlugins;
        this.pluginMap.clear();
        this.inputState.ensureHandlers(this, this.plugins);
      } else {
        for (let p of this.plugins) p.mustUpdate = update;
      }
      for (let i = 0; i < this.plugins.length; i++) this.plugins[i].update(this);
    }
    /**
    @internal
    */
    measure(flush = true) {
      if (this.destroyed) return;
      if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
      this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
      if (flush) this.observer.forceFlush();
      let updated = null;
      let {
        scrollHeight,
        scrollTop,
        clientHeight
      } = this.scrollDOM;
      let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
      try {
        for (let i = 0;; i++) {
          this.updateState = 1 /* UpdateState.Measuring */;
          let oldViewport = this.viewport;
          let refBlock = this.viewState.lineBlockAtHeight(refHeight);
          let changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
          if (i > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          let measuring = [];
          // Only run measure requests in this cycle when the viewport didn't change
          if (!(changed & 4 /* UpdateFlag.Viewport */)) [this.measureRequests, measuring] = [measuring, this.measureRequests];
          let measured = measuring.map(m => {
            try {
              return m.read(this);
            } catch (e) {
              logException(this.state, e);
              return BadMeasure;
            }
          });
          let update = ViewUpdate.create(this, this.state, []),
            redrawn = false,
            scrolled = false;
          update.flags |= changed;
          if (!updated) updated = update;else updated.flags |= changed;
          this.updateState = 2 /* UpdateState.Updating */;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
          }
          for (let i = 0; i < measuring.length; i++) if (measured[i] != BadMeasure) {
            try {
              let m = measuring[i];
              if (m.write) m.write(measured[i], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrolled = true;
            } else {
              let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
              if (diff > 1 || diff < -1) {
                this.scrollDOM.scrollTop += diff;
                scrolled = true;
              }
            }
          }
          if (redrawn) this.docView.updateSelection(true);
          if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0) break;
        }
      } finally {
        this.updateState = 0 /* UpdateState.Idle */;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty) for (let listener of this.state.facet(updateListener)) listener(updated);
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
    get themeClasses() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme$1);
    }
    updateAttrs() {
      let editorAttrs = attrsFromFacet(this, editorAttributes, {
        class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      let contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        class: "cm-content",
        style: `${browser.tabSize}: ${this.state.tabSize}`,
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      let changed = this.observer.ignore(() => {
        let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
        let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
    showAnnouncements(trs) {
      let first = true;
      for (let tr of trs) for (let effect of tr.effects) if (effect.is(EditorView.announce)) {
        if (first) this.announceDOM.textContent = "";
        first = false;
        let div = this.announceDOM.appendChild(document.createElement("div"));
        div.textContent = effect.value;
      }
    }
    mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse());
    }
    readMeasured() {
      if (this.updateState == 2 /* UpdateState.Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1) this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
    requestMeasure(request) {
      if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
      if (request) {
        if (request.key != null) for (let i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
    plugin(plugin) {
      let known = this.pluginMap.get(plugin);
      if (known === undefined || known && known.spec != plugin) this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
    get documentTop() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
    get documentPadding() {
      return {
        top: this.viewState.paddingTop,
        bottom: this.viewState.paddingBottom
      };
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
    elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
    lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
    get viewportLineBlocks() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
    lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
    get contentHeight() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
    moveByChar(start, forward, by) {
      return skipAtoms(this, start, moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
    moveByGroup(start, forward) {
      return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
    moveToLineBoundary(start, forward, includeWrap = true) {
      return moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
    moveVertically(start, forward, distance) {
      return skipAtoms(this, start, moveVertically(this, start, forward, distance));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
    domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
    posAtDOM(node, offset = 0) {
      return this.docView.posFromDOM(node, offset);
    }
    posAtCoords(coords, precise = true) {
      this.readMeasured();
      return posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
    coordsAtPos(pos, side = 1) {
      this.readMeasured();
      let rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right) return rect;
      let line = this.state.doc.lineAt(pos),
        order = this.bidiSpans(line);
      let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
    get defaultCharacterWidth() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
    get defaultLineHeight() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
    get textDirection() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
    textDirectionAt(pos) {
      let perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
    get lineWrapping() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
    bidiSpans(line) {
      if (line.length > MaxBidiLine) return trivialOrder(line.length);
      let dir = this.textDirectionAt(line.from);
      for (let entry of this.bidiCache) if (entry.from == line.from && entry.dir == dir) return entry.order;
      let order = computeOrder(line.text, dir);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
    get hasFocus() {
      var _a;
      // Safari return false for hasFocus when the context menu is open
      // or closing, which leads us to ignore selection changes from the
      // context menu because it looks like the editor isn't focused.
      // This kludges around that.
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
    focus() {
      this.observer.ignore(() => {
        focusPreventScroll(this.contentDOM);
        this.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
    setRoot(root) {
      if (this._root != root) {
        this._root = root;
        this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
    destroy() {
      for (let plugin of this.plugins) plugin.destroy(this);
      this.plugins = [];
      this.inputState.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
    static scrollIntoView(pos, options = {}) {
      return scrollIntoView$2.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
    static domEventHandlers(handlers) {
      return ViewPlugin.define(() => ({}), {
        eventHandlers: handlers
      });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
    static theme(spec, options) {
      let prefix = StyleModule.newName();
      let result = [theme$1.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
      if (options && options.dark) result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
    static baseTheme(spec) {
      return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
    static findFromDOM(dom) {
      var _a;
      let content = dom.querySelector(".cm-content");
      let cView = content && ContentView.get(content) || ContentView.get(dom);
      return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
    }
  }
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme;
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
    "class": "cm-lineWrapping"
  });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  const MaxBidiLine = 4096;
  const BadMeasure = {};
  class CachedOrder {
    constructor(from, to, dir, order) {
      this.from = from;
      this.to = to;
      this.dir = dir;
      this.order = order;
    }
    static update(cache, changes) {
      if (changes.empty) return cache;
      let result = [],
        lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
      for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
        let entry = cache[i];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
      }
      return result;
    }
  }
  function attrsFromFacet(view, facet, base) {
    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
      let source = sources[i],
        value = typeof source == "function" ? source(view) : source;
      if (value) combineAttrs(value, base);
    }
    return base;
  }
  const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
    const parts = name.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result == "Space") result = " ";
    let alt, ctrl, shift, meta;
    for (let i = 0; i < parts.length - 1; ++i) {
      const mod = parts[i];
      if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
        if (platform == "mac") meta = true;else ctrl = true;
      } else throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt) result = "Alt-" + result;
    if (ctrl) result = "Ctrl-" + result;
    if (meta) result = "Meta-" + result;
    if (shift) result = "Shift-" + result;
    return result;
  }
  function modifiers(name, event, shift) {
    if (event.altKey) name = "Alt-" + name;
    if (event.ctrlKey) name = "Ctrl-" + name;
    if (event.metaKey) name = "Meta-" + name;
    if (shift !== false && event.shiftKey) name = "Shift-" + name;
    return name;
  }
  const handleKeyEvents = /*@__PURE__*/Prec.default( /*@__PURE__*/EditorView.domEventHandlers({
    keydown(event, view) {
      return runHandlers(getKeymap(view.state), event, view, "editor");
    }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  const keymap = /*@__PURE__*/Facet.define({
    enables: handleKeyEvents
  });
  const Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
    let bindings = state.facet(keymap);
    let map = Keymaps.get(bindings);
    if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
    return map;
  }
  let storedPrefix = null;
  const PrefixTimeout = 4000;
  function buildKeymap(bindings, platform = currentPlatform) {
    let bound = Object.create(null);
    let isPrefix = Object.create(null);
    let checkPrefix = (name, is) => {
      let current = isPrefix[name];
      if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
    };
    let add = (scope, key, command, preventDefault) => {
      var _a, _b;
      let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
      let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
      for (let i = 1; i < parts.length; i++) {
        let prefix = parts.slice(0, i).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix]) scopeObj[prefix] = {
          preventDefault: true,
          run: [view => {
            let ourObj = storedPrefix = {
              view,
              prefix,
              scope
            };
            setTimeout(() => {
              if (storedPrefix == ourObj) storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
      }
      let full = parts.join(" ");
      checkPrefix(full, false);
      let binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command) binding.run.push(command);
      if (preventDefault) binding.preventDefault = true;
    };
    for (let b of bindings) {
      let scopes = b.scope ? b.scope.split(" ") : ["editor"];
      if (b.any) for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
        if (!scopeObj._any) scopeObj._any = {
          preventDefault: false,
          run: []
        };
        for (let key in scopeObj) scopeObj[key].run.push(b.any);
      }
      let name = b[platform] || b.key;
      if (!name) continue;
      for (let scope of scopes) {
        add(scope, name, b.run, b.preventDefault);
        if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault);
      }
    }
    return bound;
  }
  function runHandlers(map, event, view, scope) {
    let name = keyName(event);
    let charCode = codePointAt(name, 0),
      isChar = codePointSize(charCode) == name.length && name != " ";
    let prefix = "",
      fallthrough = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
    }
    let ran = new Set();
    let runFor = binding => {
      if (binding) {
        for (let cmd of binding.run) if (!ran.has(cmd)) {
          ran.add(cmd);
          if (cmd(view, event)) return true;
        }
        if (binding.preventDefault) fallthrough = true;
      }
      return false;
    };
    let scopeObj = map[scope],
      baseName,
      shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;
      if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && (baseName = base[event.keyCode]) && baseName != name) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) return true;
      } else if (isChar && event.shiftKey) {
        if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
      }
      if (runFor(scopeObj._any)) return true;
    }
    return fallthrough;
  }
  const CanHidePrimary = !browser.ios; // FIXME test IE
  const themeSpec = {
    ".cm-line": {
      "& ::selection": {
        backgroundColor: "transparent !important"
      },
      "&::selection": {
        backgroundColor: "transparent !important"
      }
    }
  };
  if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";
  const Outside = "-10000px";
  class TooltipViewManager {
    constructor(view, facet, createTooltipView) {
      this.facet = facet;
      this.createTooltipView = createTooltipView;
      this.input = view.state.facet(facet);
      this.tooltips = this.input.filter(t => t);
      this.tooltipViews = this.tooltips.map(createTooltipView);
    }
    update(update) {
      var _a;
      let input = update.state.facet(this.facet);
      let tooltips = input.filter(x => x);
      if (input === this.input) {
        for (let t of this.tooltipViews) if (t.update) t.update(update);
        return false;
      }
      let tooltipViews = [];
      for (let i = 0; i < tooltips.length; i++) {
        let tip = tooltips[i],
          known = -1;
        if (!tip) continue;
        for (let i = 0; i < this.tooltips.length; i++) {
          let other = this.tooltips[i];
          if (other && other.create == tip.create) known = i;
        }
        if (known < 0) {
          tooltipViews[i] = this.createTooltipView(tip);
        } else {
          let tooltipView = tooltipViews[i] = this.tooltipViews[known];
          if (tooltipView.update) tooltipView.update(update);
        }
      }
      for (let t of this.tooltipViews) if (tooltipViews.indexOf(t) < 0) {
        t.dom.remove();
        (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
      }
      this.input = input;
      this.tooltips = tooltips;
      this.tooltipViews = tooltipViews;
      return true;
    }
  }
  /**
  Creates an extension that configures tooltip behavior.
  */
  function tooltips(config = {}) {
    return tooltipConfig.of(config);
  }
  function windowSpace(view) {
    let {
      win
    } = view;
    return {
      top: 0,
      left: 0,
      bottom: win.innerHeight,
      right: win.innerWidth
    };
  }
  const tooltipConfig = /*@__PURE__*/Facet.define({
    combine: values => {
      var _a, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
        parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }
  });
  const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.inView = true;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      let config = view.state.facet(tooltipConfig);
      this.position = config.position;
      this.parent = config.parent;
      this.classes = view.themeClasses;
      this.createContainer();
      this.measureReq = {
        read: this.readMeasure.bind(this),
        write: this.writeMeasure.bind(this),
        key: this
      };
      this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
        if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) this.measureSoon();
      }, {
        threshold: [1]
      }) : null;
      this.observeIntersection();
      view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
    observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        for (let tooltip of this.manager.tooltipViews) this.intersectionObserver.observe(tooltip.dom);
      }
    }
    measureSoon() {
      if (this.measureTimeout < 0) this.measureTimeout = setTimeout(() => {
        this.measureTimeout = -1;
        this.maybeMeasure();
      }, 50);
    }
    update(update) {
      if (update.transactions.length) this.lastTransaction = Date.now();
      let updated = this.manager.update(update);
      if (updated) this.observeIntersection();
      let shouldMeasure = updated || update.geometryChanged;
      let newConfig = update.state.facet(tooltipConfig);
      if (newConfig.position != this.position) {
        this.position = newConfig.position;
        for (let t of this.manager.tooltipViews) t.dom.style.position = this.position;
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent) this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        for (let t of this.manager.tooltipViews) this.container.appendChild(t.dom);
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure) this.maybeMeasure();
    }
    createTooltip(tooltip) {
      let tooltipView = tooltip.create(this.view);
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        let arrow = document.createElement("div");
        arrow.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      this.container.appendChild(tooltipView.dom);
      if (tooltipView.mount) tooltipView.mount(this.view);
      return tooltipView;
    }
    destroy() {
      var _a, _b;
      this.view.win.removeEventListener("resize", this.measureSoon);
      for (let tooltipView of this.manager.tooltipViews) {
        tooltipView.dom.remove();
        (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
      }
      (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      clearTimeout(this.measureTimeout);
    }
    readMeasure() {
      let editor = this.view.dom.getBoundingClientRect();
      return {
        editor,
        parent: this.parent ? this.container.getBoundingClientRect() : editor,
        pos: this.manager.tooltips.map((t, i) => {
          let tv = this.manager.tooltipViews[i];
          return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
        }),
        size: this.manager.tooltipViews.map(({
          dom
        }) => dom.getBoundingClientRect()),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
      };
    }
    writeMeasure(measured) {
      let {
        editor,
        space
      } = measured;
      let others = [];
      for (let i = 0; i < this.manager.tooltips.length; i++) {
        let tooltip = this.manager.tooltips[i],
          tView = this.manager.tooltipViews[i],
          {
            dom
          } = tView;
        let pos = measured.pos[i],
          size = measured.size[i];
        // Hide tooltips that are outside of the editor.
        if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {
          dom.style.top = Outside;
          continue;
        }
        let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
        let width = size.right - size.left,
          height = size.bottom - size.top;
        let offset = tView.offset || noOffset,
          ltr = this.view.textDirection == Direction.LTR;
        let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
        let above = !!tooltip.above;
        if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;
        let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          dom.style.height = (height = spaceVert) + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        let right = left + width;
        if (tView.overlap !== true) for (let r of others) if (r.left < right && r.right > left && r.top < top + height && r.bottom > top) top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
        if (this.position == "absolute") {
          dom.style.top = top - measured.parent.top + "px";
          dom.style.left = left - measured.parent.left + "px";
        } else {
          dom.style.top = top + "px";
          dom.style.left = left + "px";
        }
        if (arrow) arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */)}px`;
        if (tView.overlap !== true) others.push({
          left,
          top,
          right,
          bottom: top + height
        });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned) tView.positioned(measured.space);
      }
    }
    maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView) this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView) for (let tv of this.manager.tooltipViews) tv.dom.style.top = Outside;
        }
      }
    }
  }, {
    eventHandlers: {
      scroll() {
        this.maybeMeasure();
      }
    }
  });
  const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 100,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: `${7 /* Arrow.Size */}px`,
      width: `${7 /* Arrow.Size */ * 2}px`,
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
        borderRight: `${7 /* Arrow.Size */}px solid transparent`
      },
      ".cm-tooltip-above &": {
        bottom: `-${7 /* Arrow.Size */}px`,
        "&:before": {
          borderTop: `${7 /* Arrow.Size */}px solid #bbb`
        },
        "&:after": {
          borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: `-${7 /* Arrow.Size */}px`,
        "&:before": {
          borderBottom: `${7 /* Arrow.Size */}px solid #bbb`
        },
        "&:after": {
          borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  const noOffset = {
    x: 0,
    y: 0
  };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  const showTooltip = /*@__PURE__*/Facet.define({
    enables: [tooltipPlugin, baseTheme$4]
  });
  const showHoverTooltip = /*@__PURE__*/Facet.define();
  class HoverTooltipHost {
    constructor(view) {
      this.view = view;
      this.mounted = false;
      this.dom = document.createElement("div");
      this.dom.classList.add("cm-tooltip-hover");
      this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
    }
    // Needs to be static so that host tooltip instances always match
    static create(view) {
      return new HoverTooltipHost(view);
    }
    createHostedView(tooltip) {
      let hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.appendChild(hostedView.dom);
      if (this.mounted && hostedView.mount) hostedView.mount(this.view);
      return hostedView;
    }
    mount(view) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.mount) hostedView.mount(view);
      }
      this.mounted = true;
    }
    positioned(space) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.positioned) hostedView.positioned(space);
      }
    }
    update(update) {
      this.manager.update(update);
    }
  }
  const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
    let tooltips = state.facet(showHoverTooltip).filter(t => t);
    if (tooltips.length === 0) return null;
    return {
      pos: Math.min(...tooltips.map(t => t.pos)),
      end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
      create: HoverTooltipHost.create,
      above: tooltips[0].above,
      arrow: tooltips.some(t => t.arrow)
    };
  });
  class HoverPlugin {
    constructor(view, source, field, setHover, hoverTime) {
      this.view = view;
      this.source = source;
      this.field = field;
      this.setHover = setHover;
      this.hoverTime = hoverTime;
      this.hoverTimeout = -1;
      this.restartTimeout = -1;
      this.pending = null;
      this.lastMove = {
        x: 0,
        y: 0,
        target: view.dom,
        time: 0
      };
      this.checkHover = this.checkHover.bind(this);
      view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
      view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    update() {
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(() => this.startHover(), 20);
      }
    }
    get active() {
      return this.view.state.field(this.field);
    }
    checkHover() {
      this.hoverTimeout = -1;
      if (this.active) return;
      let hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
    }
    startHover() {
      clearTimeout(this.restartTimeout);
      let {
        lastMove
      } = this;
      let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
      if (pos == null) return;
      let posCoords = this.view.coordsAtPos(pos);
      if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;
      let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
      let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      let open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);
      if (open === null || open === void 0 ? void 0 : open.then) {
        let pending = this.pending = {
          pos
        };
        open.then(result => {
          if (this.pending == pending) {
            this.pending = null;
            if (result) this.view.dispatch({
              effects: this.setHover.of(result)
            });
          }
        }, e => logException(this.view.state, e, "hover tooltip"));
      } else if (open) {
        this.view.dispatch({
          effects: this.setHover.of(open)
        });
      }
    }
    mousemove(event) {
      var _a;
      this.lastMove = {
        x: event.clientX,
        y: event.clientY,
        target: event.target,
        time: Date.now()
      };
      if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      let tooltip = this.active;
      if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
        let {
            pos
          } = tooltip || this.pending,
          end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* Hover.MaxDist */)) {
          this.view.dispatch({
            effects: this.setHover.of(null)
          });
          this.pending = null;
        }
      }
    }
    mouseleave(e) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      if (this.active && !isInTooltip(e.relatedTarget)) this.view.dispatch({
        effects: this.setHover.of(null)
      });
    }
    destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  }
  function isInTooltip(elt) {
    for (let cur = elt; cur; cur = cur.parentNode) if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;
    return false;
  }
  function isOverRange(view, from, to, x, y, margin) {
    let range = document.createRange();
    let fromDOM = view.domAtPos(from),
      toDOM = view.domAtPos(to);
    range.setEnd(toDOM.node, toDOM.offset);
    range.setStart(fromDOM.node, fromDOM.offset);
    let rects = range.getClientRects();
    range.detach();
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
      if (dist <= margin) return true;
    }
    return false;
  }
  /**
  Set up a hover tooltip, which shows up when the pointer hovers
  over ranges of text. The callback is called when the mouse hovers
  over the document text. It should, if there is a tooltip
  associated with position `pos`, return the tooltip description
  (either directly or in a promise). The `side` argument indicates
  on which side of the position the pointer is—it will be -1 if the
  pointer is before the position, 1 if after the position.

  Note that all hover tooltips are hosted within a single tooltip
  container element. This allows multiple tooltips over the same
  range to be "merged" together without overlapping.
  */
  function hoverTooltip(source, options = {}) {
    let setHover = StateEffect.define();
    let hoverState = StateField.define({
      create() {
        return null;
      },
      update(value, tr) {
        if (value && (options.hideOnChange && (tr.docChanged || tr.selection) || options.hideOn && options.hideOn(tr, value))) return null;
        if (value && tr.docChanged) {
          let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
          if (newPos == null) return null;
          let copy = Object.assign(Object.create(null), value);
          copy.pos = newPos;
          if (value.end != null) copy.end = tr.changes.mapPos(value.end);
          value = copy;
        }
        for (let effect of tr.effects) {
          if (effect.is(setHover)) value = effect.value;
          if (effect.is(closeHoverTooltipEffect)) value = null;
        }
        return value;
      },
      provide: f => showHoverTooltip.from(f)
    });
    return [hoverState, ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)), showHoverTooltipHost];
  }
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
    let plugin = view.plugin(tooltipPlugin);
    if (!plugin) return null;
    let found = plugin.manager.tooltips.indexOf(tooltip);
    return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();
  const panelConfig = /*@__PURE__*/Facet.define({
    combine(configs) {
      let topContainer, bottomContainer;
      for (let c of configs) {
        topContainer = topContainer || c.topContainer;
        bottomContainer = bottomContainer || c.bottomContainer;
      }
      return {
        topContainer,
        bottomContainer
      };
    }
  });
  const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
    constructor(view) {
      this.input = view.state.facet(showPanel);
      this.specs = this.input.filter(s => s);
      this.panels = this.specs.map(spec => spec(view));
      let conf = view.state.facet(panelConfig);
      this.top = new PanelGroup(view, true, conf.topContainer);
      this.bottom = new PanelGroup(view, false, conf.bottomContainer);
      this.top.sync(this.panels.filter(p => p.top));
      this.bottom.sync(this.panels.filter(p => !p.top));
      for (let p of this.panels) {
        p.dom.classList.add("cm-panel");
        if (p.mount) p.mount();
      }
    }
    update(update) {
      let conf = update.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(update.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      let input = update.state.facet(showPanel);
      if (input != this.input) {
        let specs = input.filter(x => x);
        let panels = [],
          top = [],
          bottom = [],
          mount = [];
        for (let spec of specs) {
          let known = this.specs.indexOf(spec),
            panel;
          if (known < 0) {
            panel = spec(update.view);
            mount.push(panel);
          } else {
            panel = this.panels[known];
            if (panel.update) panel.update(update);
          }
          panels.push(panel);
          (panel.top ? top : bottom).push(panel);
        }
        this.specs = specs;
        this.panels = panels;
        this.top.sync(top);
        this.bottom.sync(bottom);
        for (let p of mount) {
          p.dom.classList.add("cm-panel");
          if (p.mount) p.mount();
        }
      } else {
        for (let p of this.panels) if (p.update) p.update(update);
      }
    }
    destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }, {
    provide: plugin => EditorView.scrollMargins.of(view => {
      let value = view.plugin(plugin);
      return value && {
        top: value.top.scrollMargin(),
        bottom: value.bottom.scrollMargin()
      };
    })
  });
  class PanelGroup {
    constructor(view, top, container) {
      this.view = view;
      this.top = top;
      this.container = container;
      this.dom = undefined;
      this.classes = "";
      this.panels = [];
      this.syncClasses();
    }
    sync(panels) {
      for (let p of this.panels) if (p.destroy && panels.indexOf(p) < 0) p.destroy();
      this.panels = panels;
      this.syncDOM();
    }
    syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = undefined;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        let parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      let curDOM = this.dom.firstChild;
      for (let panel of this.panels) {
        if (panel.dom.parentNode == this.dom) {
          while (curDOM != panel.dom) curDOM = rm(curDOM);
          curDOM = curDOM.nextSibling;
        } else {
          this.dom.insertBefore(panel.dom, curDOM);
        }
      }
      while (curDOM) curDOM = rm(curDOM);
    }
    scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
    syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses) return;
      for (let cls of this.classes.split(" ")) if (cls) this.container.classList.remove(cls);
      for (let cls of (this.classes = this.view.themeClasses).split(" ")) if (cls) this.container.classList.add(cls);
    }
  }
  function rm(node) {
    let next = node.nextSibling;
    node.remove();
    return next;
  }
  /**
  Opening a panel is done by providing a constructor function for
  the panel through this facet. (The panel is closed again when its
  constructor is no longer provided.) Values of `null` are ignored.
  */
  const showPanel = /*@__PURE__*/Facet.define({
    enables: panelPlugin
  });

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  class GutterMarker extends RangeValue {
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
    eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
    destroy(dom) {}
  }
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;

  // FIXME profile adding a per-Tree TreeNode cache, validating it by
  // parent pointer
  /// The default maximum length of a `TreeBuffer` node.
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  class Range {
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  }
  /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  /// can have metadata associated with it in props. Instances of this
  /// class represent prop names.
  class NodeProp {
    /// Create a new node prop type.
    constructor(config = {}) {
      this.id = nextPropID++;
      this.perNode = !!config.perNode;
      this.deserialize = config.deserialize || (() => {
        throw new Error("This node type doesn't define a deserialize function");
      });
    }
    /// This is meant to be used with
    /// [`NodeSet.extend`](#common.NodeSet.extend) or
    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
    /// prop values for each node type in the set. Takes a [match
    /// object](#common.NodeType^match) or function that returns undefined
    /// if the node type doesn't get this prop, and the prop's value if
    /// it does.
    add(match) {
      if (this.perNode) throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function") match = NodeType.match(match);
      return type => {
        let result = match(type);
        return result === undefined ? null : [this, result];
      };
    }
  }
  /// Prop that is used to describe matching delimiters. For opening
  /// delimiters, this holds an array of node names (written as a
  /// space-separated string when declaring this prop in a grammar)
  /// for the node types of closing delimiters that match it.
  NodeProp.closedBy = new NodeProp({
    deserialize: str => str.split(" ")
  });
  /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  /// attached to closing delimiters, holding an array of node names
  /// of types of matching opening delimiters.
  NodeProp.openedBy = new NodeProp({
    deserialize: str => str.split(" ")
  });
  /// Used to assign node types to groups (for example, all node
  /// types that represent an expression could be tagged with an
  /// `"Expression"` group).
  NodeProp.group = new NodeProp({
    deserialize: str => str.split(" ")
  });
  /// The hash of the [context](#lr.ContextTracker.constructor)
  /// that the node was parsed in, if any. Used to limit reuse of
  /// contextual nodes.
  NodeProp.contextHash = new NodeProp({
    perNode: true
  });
  /// The distance beyond the end of the node that the tokenizer
  /// looked ahead for any of the tokens inside the node. (The LR
  /// parser only stores this when it is larger than 25, for
  /// efficiency reasons.)
  NodeProp.lookAhead = new NodeProp({
    perNode: true
  });
  /// This per-node prop is used to replace a given node, or part of a
  /// node, with another tree. This is useful to include trees from
  /// different languages in mixed-language parsers.
  NodeProp.mounted = new NodeProp({
    perNode: true
  });
  const noProps = Object.create(null);
  /// Each node in a syntax tree has a node type associated with it.
  class NodeType {
    /// @internal
    constructor(
    /// The name of the node type. Not necessarily unique, but if the
    /// grammar was written properly, different node types with the
    /// same name within a node set should play the same semantic
    /// role.
    name,
    /// @internal
    props,
    /// The id of this node in its set. Corresponds to the term ids
    /// used in the parser.
    id,
    /// @internal
    flags = 0) {
      this.name = name;
      this.props = props;
      this.id = id;
      this.flags = flags;
    }
    /// Define a node type.
    static define(spec) {
      let props = spec.props && spec.props.length ? Object.create(null) : noProps;
      let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) | (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
      let type = new NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props) for (let src of spec.props) {
        if (!Array.isArray(src)) src = src(type);
        if (src) {
          if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
      return type;
    }
    /// Retrieves a node prop for this type. Will return `undefined` if
    /// the prop isn't present on this node.
    prop(prop) {
      return this.props[prop.id];
    }
    /// True when this is the top node of a grammar.
    get isTop() {
      return (this.flags & 1 /* NodeFlag.Top */) > 0;
    }
    /// True when this node is produced by a skip rule.
    get isSkipped() {
      return (this.flags & 2 /* NodeFlag.Skipped */) > 0;
    }
    /// Indicates whether this is an error node.
    get isError() {
      return (this.flags & 4 /* NodeFlag.Error */) > 0;
    }
    /// When true, this node type doesn't correspond to a user-declared
    /// named node, for example because it is used to cache repetition.
    get isAnonymous() {
      return (this.flags & 8 /* NodeFlag.Anonymous */) > 0;
    }
    /// Returns true when this node's name or one of its
    /// [groups](#common.NodeProp^group) matches the given string.
    is(name) {
      if (typeof name == 'string') {
        if (this.name == name) return true;
        let group = this.prop(NodeProp.group);
        return group ? group.indexOf(name) > -1 : false;
      }
      return this.id == name;
    }
    /// Create a function from node types to arbitrary values by
    /// specifying an object whose property names are node or
    /// [group](#common.NodeProp^group) names. Often useful with
    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    /// names, separated by spaces, in a single property name to map
    /// multiple node names to a single value.
    static match(map) {
      let direct = Object.create(null);
      for (let prop in map) for (let name of prop.split(" ")) direct[name] = map[prop];
      return node => {
        for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
          let found = direct[i < 0 ? node.name : groups[i]];
          if (found) return found;
        }
      };
    }
  }
  /// An empty dummy node type to use when no actual type is available.
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /// A node set holds a collection of node types. It is used to
  /// compactly represent trees by storing their type ids, rather than a
  /// full pointer to the type object, in a numeric array. Each parser
  /// [has](#lr.LRParser.nodeSet) a node set, and [tree
  /// buffers](#common.TreeBuffer) can only store collections of nodes
  /// from the same set. A set can have a maximum of 2**16 (65536) node
  /// types in it, so that the ids fit into 16-bit typed array slots.
  class NodeSet {
    /// Create a set with the given types. The `id` property of each
    /// type should correspond to its position within the array.
    constructor(
    /// The node types in this set, by id.
    types) {
      this.types = types;
      for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    /// Create a copy of this set with some node properties added. The
    /// arguments to this method can be created with
    /// [`NodeProp.add`](#common.NodeProp.add).
    extend(...props) {
      let newTypes = [];
      for (let type of this.types) {
        let newProps = null;
        for (let source of props) {
          let add = source(type);
          if (add) {
            if (!newProps) newProps = Object.assign({}, type.props);
            newProps[add[0].id] = add[1];
          }
        }
        newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
      }
      return new NodeSet(newTypes);
    }
  }
  const CachedNode = new WeakMap(),
    CachedInnerNode = new WeakMap();
  /// Options that control iteration. Can be combined with the `|`
  /// operator to enable multiple ones.
  var IterMode;
  (function (IterMode) {
    /// When enabled, iteration will only visit [`Tree`](#common.Tree)
    /// objects, not nodes packed into
    /// [`TreeBuffer`](#common.TreeBuffer)s.
    IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
    /// Enable this to make iteration include anonymous nodes (such as
    /// the nodes that wrap repeated grammar constructs into a balanced
    /// tree).
    IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
    /// By default, regular [mounted](#common.NodeProp^mounted) nodes
    /// replace their base node in iteration. Enable this to ignore them
    /// instead.
    IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
    /// This option only applies in
    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
    /// library to not enter mounted overlays if one covers the given
    /// position.
    IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /// A piece of syntax tree. There are two ways to approach these
  /// trees: the way they are actually stored in memory, and the
  /// convenient way.
  ///
  /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  /// objects. By packing detail information into `TreeBuffer` leaf
  /// nodes, the representation is made a lot more memory-efficient.
  ///
  /// However, when you want to actually work with tree nodes, this
  /// representation is very awkward, so most client code will want to
  /// use the [`TreeCursor`](#common.TreeCursor) or
  /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  /// a view on some part of this data structure, and can be used to
  /// move around to adjacent nodes.
  class Tree {
    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
    constructor(
    /// The type of the top node.
    type,
    /// This node's child nodes.
    children,
    /// The positions (offsets relative to the start of this tree) of
    /// the children.
    positions,
    /// The total length of this tree
    length,
    /// Per-node [node props](#common.NodeProp) to associate with this node.
    props) {
      this.type = type;
      this.children = children;
      this.positions = positions;
      this.length = length;
      /// @internal
      this.props = null;
      if (props && props.length) {
        this.props = Object.create(null);
        for (let [prop, value] of props) this.props[typeof prop == "number" ? prop : prop.id] = value;
      }
    }
    /// @internal
    toString() {
      let mounted = this.prop(NodeProp.mounted);
      if (mounted && !mounted.overlay) return mounted.tree.toString();
      let children = "";
      for (let ch of this.children) {
        let str = ch.toString();
        if (str) {
          if (children) children += ",";
          children += str;
        }
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
    /// the tree. Mode can be used to [control](#common.IterMode) which
    /// nodes the cursor visits.
    cursor(mode = 0) {
      return new TreeCursor(this.topNode, mode);
    }
    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
    /// at the given position and side (see
    /// [`moveTo`](#common.TreeCursor.moveTo).
    cursorAt(pos, side = 0, mode = 0) {
      let scope = CachedNode.get(this) || this.topNode;
      let cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /// Get a [syntax node](#common.SyntaxNode) object for the top of the
    /// tree.
    get topNode() {
      return new TreeNode(this, 0, 0, null);
    }
    /// Get the [syntax node](#common.SyntaxNode) at the given position.
    /// If `side` is -1, this will move into nodes that end at the
    /// position. If 1, it'll move into nodes that start at the
    /// position. With 0, it'll only enter nodes that cover the position
    /// from both sides.
    ///
    /// Note that this will not enter
    /// [overlays](#common.MountedTree.overlay), and you often want
    /// [`resolveInner`](#common.Tree.resolveInner) instead.
    resolve(pos, side = 0) {
      let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node);
      return node;
    }
    /// Like [`resolve`](#common.Tree.resolve), but will enter
    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    /// pointing into the innermost overlaid tree at the given position
    /// (with parent links going through all parent structure, including
    /// the host trees).
    resolveInner(pos, side = 0) {
      let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node);
      return node;
    }
    /// Iterate over the tree and its children, calling `enter` for any
    /// node that touches the `from`/`to` region (if given) before
    /// running over such a node's children, and `leave` (if given) when
    /// leaving the node. When `enter` returns `false`, that node will
    /// not have its children iterated over (or `leave` called).
    iterate(spec) {
      let {
        enter,
        leave,
        from = 0,
        to = this.length
      } = spec;
      for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
        let entered = false;
        if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
          if (c.firstChild()) continue;
          entered = true;
        }
        for (;;) {
          if (entered && leave && !c.type.isAnonymous) leave(c);
          if (c.nextSibling()) break;
          if (!c.parent()) return;
          entered = true;
        }
      }
    }
    /// Get the value of the given [node prop](#common.NodeProp) for this
    /// node. Works with both per-node and per-type props.
    prop(prop) {
      return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
    }
    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
    /// format that can be passed to the [`Tree`](#common.Tree)
    /// constructor.
    get propValues() {
      let result = [];
      if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);
      return result;
    }
    /// Balance the direct children of this tree, producing a copy of
    /// which may have children grouped into subtrees with type
    /// [`NodeType.none`](#common.NodeType^none).
    balance(config = {}) {
      return this.children.length <= 8 /* Balance.BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
    }
    /// Build a tree from a postfix-ordered buffer of node information,
    /// or a cursor over such a buffer.
    static build(data) {
      return buildTree(data);
    }
  }
  /// The empty tree
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
    constructor(buffer, index) {
      this.buffer = buffer;
      this.index = index;
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    get pos() {
      return this.index;
    }
    next() {
      this.index -= 4;
    }
    fork() {
      return new FlatBufferCursor(this.buffer, this.index);
    }
  }
  /// Tree buffers contain (type, start, end, endIndex) quads for each
  /// node. In such a buffer, nodes are stored in prefix order (parents
  /// before children, with the endIndex of the parent indicating which
  /// children belong to it).
  class TreeBuffer {
    /// Create a tree buffer.
    constructor(
    /// The buffer's content.
    buffer,
    /// The total length of the group of nodes in the buffer.
    length,
    /// The node set used in this buffer.
    set) {
      this.buffer = buffer;
      this.length = length;
      this.set = set;
    }
    /// @internal
    get type() {
      return NodeType.none;
    }
    /// @internal
    toString() {
      let result = [];
      for (let index = 0; index < this.buffer.length;) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /// @internal
    childString(index) {
      let id = this.buffer[index],
        endIndex = this.buffer[index + 3];
      let type = this.set.types[id],
        result = type.name;
      if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
      index += 4;
      if (endIndex == index) return result;
      let children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /// @internal
    findChild(startIndex, endIndex, dir, pos, side) {
      let {
          buffer
        } = this,
        pick = -1;
      for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
        if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
          pick = i;
          if (dir > 0) break;
        }
      }
      return pick;
    }
    /// @internal
    slice(startI, endI, from) {
      let b = this.buffer;
      let copy = new Uint16Array(endI - startI),
        len = 0;
      for (let i = startI, j = 0; i < endI;) {
        copy[j++] = b[i++];
        copy[j++] = b[i++] - from;
        let to = copy[j++] = b[i++] - from;
        copy[j++] = b[i++] - startI;
        len = Math.max(len, to);
      }
      return new TreeBuffer(copy, len, this.set);
    }
  }
  function checkSide(side, pos, from, to) {
    switch (side) {
      case -2 /* Side.Before */:
        return from < pos;
      case -1 /* Side.AtOrBefore */:
        return to >= pos && from < pos;
      case 0 /* Side.Around */:
        return from < pos && to > pos;
      case 1 /* Side.AtOrAfter */:
        return from <= pos && to > pos;
      case 2 /* Side.After */:
        return to > pos;
      case 4 /* Side.DontCare */:
        return true;
    }
  }
  function enterUnfinishedNodesBefore(node, pos) {
    let scan = node.childBefore(pos);
    while (scan) {
      let last = scan.lastChild;
      if (!last || last.to != scan.to) break;
      if (last.type.isError && last.from == last.to) {
        node = scan;
        scan = last.prevSibling;
      } else {
        scan = last;
      }
    }
    return node;
  }
  function resolveNode(node, pos, side, overlays) {
    var _a;
    // Move up to a node that actually holds the position, if possible
    while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
      let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
      if (!parent) return node;
      node = parent;
    }
    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
    // Must go up out of overlays when those do not overlap with pos
    if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;
    }
    for (;;) {
      let inner = node.enter(pos, side, mode);
      if (!inner) return node;
      node = inner;
    }
  }
  class TreeNode {
    constructor(_tree, from,
    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
    index, _parent) {
      this._tree = _tree;
      this.from = from;
      this.index = index;
      this._parent = _parent;
    }
    get type() {
      return this._tree.type;
    }
    get name() {
      return this._tree.type.name;
    }
    get to() {
      return this.from + this._tree.length;
    }
    nextChild(i, dir, pos, side, mode = 0) {
      for (let parent = this;;) {
        for (let {
            children,
            positions
          } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
          let next = children[i],
            start = positions[i] + parent.from;
          if (!checkSide(side, pos, start, start + next.length)) continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers) continue;
            let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
          } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {
            let mounted;
            if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
            let inner = new TreeNode(next, start, i, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;
        if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent) return null;
      }
    }
    get firstChild() {
      return this.nextChild(0, 1, 0, 4 /* Side.DontCare */);
    }
    get lastChild() {
      return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */);
    }
    childAfter(pos) {
      return this.nextChild(0, 1, pos, 2 /* Side.After */);
    }
    childBefore(pos) {
      return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */);
    }
    enter(pos, side, mode = 0) {
      let mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
        let rPos = pos - this.from;
        for (let {
          from,
          to
        } of mounted.overlay) {
          if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
    nextSignificantParent() {
      let val = this;
      while (val.type.isAnonymous && val._parent) val = val._parent;
      return val;
    }
    get parent() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
    get nextSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
    }
    get prevSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
    }
    cursor(mode = 0) {
      return new TreeCursor(this, mode);
    }
    get tree() {
      return this._tree;
    }
    toTree() {
      return this._tree;
    }
    resolve(pos, side = 0) {
      return resolveNode(this, pos, side, false);
    }
    resolveInner(pos, side = 0) {
      return resolveNode(this, pos, side, true);
    }
    enterUnfinishedNodesBefore(pos) {
      return enterUnfinishedNodesBefore(this, pos);
    }
    getChild(type, before = null, after = null) {
      let r = getChildren$2(this, type, before, after);
      return r.length ? r[0] : null;
    }
    getChildren(type, before = null, after = null) {
      return getChildren$2(this, type, before, after);
    }
    /// @internal
    toString() {
      return this._tree.toString();
    }
    get node() {
      return this;
    }
    matchContext(context) {
      return matchNodeContext(this, context);
    }
  }
  function getChildren$2(node, type, before, after) {
    let cur = node.cursor(),
      result = [];
    if (!cur.firstChild()) return result;
    if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;
    for (;;) {
      if (after != null && cur.type.is(after)) return result;
      if (cur.type.is(type)) result.push(cur.node);
      if (!cur.nextSibling()) return after == null ? result : [];
    }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
    for (let p = node.parent; i >= 0; p = p.parent) {
      if (!p) return false;
      if (!p.type.isAnonymous) {
        if (context[i] && context[i] != p.name) return false;
        i--;
      }
    }
    return true;
  }
  class BufferContext {
    constructor(parent, buffer, index, start) {
      this.parent = parent;
      this.buffer = buffer;
      this.index = index;
      this.start = start;
    }
  }
  class BufferNode {
    get name() {
      return this.type.name;
    }
    get from() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
    get to() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
    constructor(context, _parent, index) {
      this.context = context;
      this._parent = _parent;
      this.index = index;
      this.type = context.buffer.set.types[context.buffer.buffer[index]];
    }
    child(dir, pos, side) {
      let {
        buffer
      } = this.context;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
    get firstChild() {
      return this.child(1, 0, 4 /* Side.DontCare */);
    }
    get lastChild() {
      return this.child(-1, 0, 4 /* Side.DontCare */);
    }
    childAfter(pos) {
      return this.child(1, pos, 2 /* Side.After */);
    }
    childBefore(pos) {
      return this.child(-1, pos, -2 /* Side.Before */);
    }
    enter(pos, side, mode = 0) {
      if (mode & IterMode.ExcludeBuffers) return null;
      let {
        buffer
      } = this.context;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
    get parent() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
    externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
    }

    get nextSibling() {
      let {
        buffer
      } = this.context;
      let after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
    get prevSibling() {
      let {
        buffer
      } = this.context;
      let parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart) return this.externalSibling(-1);
      return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
    }

    cursor(mode = 0) {
      return new TreeCursor(this, mode);
    }
    get tree() {
      return null;
    }
    toTree() {
      let children = [],
        positions = [];
      let {
        buffer
      } = this.context;
      let startI = this.index + 4,
        endI = buffer.buffer[this.index + 3];
      if (endI > startI) {
        let from = buffer.buffer[this.index + 1];
        children.push(buffer.slice(startI, endI, from));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
    resolve(pos, side = 0) {
      return resolveNode(this, pos, side, false);
    }
    resolveInner(pos, side = 0) {
      return resolveNode(this, pos, side, true);
    }
    enterUnfinishedNodesBefore(pos) {
      return enterUnfinishedNodesBefore(this, pos);
    }
    /// @internal
    toString() {
      return this.context.buffer.childString(this.index);
    }
    getChild(type, before = null, after = null) {
      let r = getChildren$2(this, type, before, after);
      return r.length ? r[0] : null;
    }
    getChildren(type, before = null, after = null) {
      return getChildren$2(this, type, before, after);
    }
    get node() {
      return this;
    }
    matchContext(context) {
      return matchNodeContext(this, context);
    }
  }
  /// A tree cursor object focuses on a given node in a syntax tree, and
  /// allows you to move to adjacent nodes.
  class TreeCursor {
    /// Shorthand for `.type.name`.
    get name() {
      return this.type.name;
    }
    /// @internal
    constructor(node,
    /// @internal
    mode = 0) {
      this.mode = mode;
      /// @internal
      this.buffer = null;
      this.stack = [];
      /// @internal
      this.index = 0;
      this.bufferNode = null;
      if (node instanceof TreeNode) {
        this.yieldNode(node);
      } else {
        this._tree = node.context.parent;
        this.buffer = node.context;
        for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);
        this.bufferNode = node;
        this.yieldBuf(node.index);
      }
    }
    yieldNode(node) {
      if (!node) return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
    yieldBuf(index, type) {
      this.index = index;
      let {
        start,
        buffer
      } = this.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index]];
      this.from = start + buffer.buffer[index + 1];
      this.to = start + buffer.buffer[index + 2];
      return true;
    }
    yield(node) {
      if (!node) return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /// @internal
    toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /// @internal
    enterChild(dir, pos, side) {
      if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      let {
        buffer
      } = this.buffer;
      let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index < 0) return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /// Move the cursor to this node's first child. When this returns
    /// false, the node has no child, and the cursor has not been moved.
    firstChild() {
      return this.enterChild(1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to this node's last child.
    lastChild() {
      return this.enterChild(-1, 0, 4 /* Side.DontCare */);
    }
    /// Move the cursor to the first child that ends after `pos`.
    childAfter(pos) {
      return this.enterChild(1, pos, 2 /* Side.After */);
    }
    /// Move to the last child that starts before `pos`.
    childBefore(pos) {
      return this.enterChild(-1, pos, -2 /* Side.Before */);
    }
    /// Move the cursor to the child around `pos`. If side is -1 the
    /// child may end at that position, when 1 it may start there. This
    /// will also enter [overlaid](#common.MountedTree.overlay)
    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    /// set to false.
    enter(pos, side, mode = this.mode) {
      if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /// Move to the node's parent node, if this isn't the top node.
    parent() {
      if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length) return this.yieldBuf(this.stack.pop());
      let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /// @internal
    sibling(dir) {
      if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
      let {
          buffer
        } = this.buffer,
        d = this.stack.length - 1;
      if (dir < 0) {
        let parentStart = d < 0 ? 0 : this.stack[d] + 4;
        if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      } else {
        let after = buffer.buffer[this.index + 3];
        if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
      }
      return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
    }
    /// Move to this node's next sibling, if any.
    nextSibling() {
      return this.sibling(1);
    }
    /// Move to this node's previous sibling, if any.
    prevSibling() {
      return this.sibling(-1);
    }
    atLastNode(dir) {
      let index,
        parent,
        {
          buffer
        } = this;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length) return false;
        } else {
          for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;
        }
        ({
          index,
          parent
        } = buffer);
      } else {
        ({
          index,
          _parent: parent
        } = this._tree);
      }
      for (; parent; ({
        index,
        _parent: parent
      } = parent)) {
        if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
          let child = parent._tree.children[i];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
        }
      }
      return true;
    }
    move(dir, enter) {
      if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */)) return true;
      for (;;) {
        if (this.sibling(dir)) return true;
        if (this.atLastNode(dir) || !this.parent()) return false;
      }
    }
    /// Move to the next node in a
    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    /// traversal, going from a node to its first child or, if the
    /// current node is empty or `enter` is false, its next sibling or
    /// the next sibling of the first parent node that has one.
    next(enter = true) {
      return this.move(1, enter);
    }
    /// Move to the next node in a last-to-first pre-order traveral. A
    /// node is followed by its last child or, if it has none, its
    /// previous sibling or the previous sibling of the first parent
    /// node that has one.
    prev(enter = true) {
      return this.move(-1, enter);
    }
    /// Move the cursor to the innermost node that covers `pos`. If
    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    /// it will enter nodes that start at `pos`.
    moveTo(pos, side = 0) {
      // Move up to a node that actually holds the position, if possible
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;
      // Then scan down into child nodes as far as possible
      while (this.enterChild(1, pos, side)) {}
      return this;
    }
    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
    /// position.
    get node() {
      if (!this.buffer) return this._tree;
      let cache = this.bufferNode,
        result = null,
        depth = 0;
      if (cache && cache.context == this.buffer) {
        scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
          for (let c = cache; c; c = c._parent) if (c.index == index) {
            if (index == this.index) return c;
            result = c;
            depth = d + 1;
            break scan;
          }
          index = this.stack[--d];
        }
      }
      for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /// Get the [tree](#common.Tree) that represents the current node, if
    /// any. Will return null when the node is in a [tree
    /// buffer](#common.TreeBuffer).
    get tree() {
      return this.buffer ? null : this._tree._tree;
    }
    /// Iterate over the current node and all its descendants, calling
    /// `enter` when entering a node and `leave`, if given, when leaving
    /// one. When `enter` returns `false`, any children of that node are
    /// skipped, and `leave` isn't called for it.
    iterate(enter, leave) {
      for (let depth = 0;;) {
        let mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth++;
            continue;
          }
          if (!this.type.isAnonymous) mustLeave = true;
        }
        for (;;) {
          if (mustLeave && leave) leave(this);
          mustLeave = this.type.isAnonymous;
          if (this.nextSibling()) break;
          if (!depth) return;
          this.parent();
          depth--;
          mustLeave = true;
        }
      }
    }
    /// Test whether the current node matches a given context—a sequence
    /// of direct parent node names. Empty strings in the context array
    /// are treated as wildcards.
    matchContext(context) {
      if (!this.buffer) return matchNodeContext(this.node, context);
      let {
          buffer
        } = this.buffer,
        {
          types
        } = buffer.set;
      for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
        if (d < 0) return matchNodeContext(this.node, context, i);
        let type = types[buffer.buffer[this.stack[d]]];
        if (!type.isAnonymous) {
          if (context[i] && context[i] != type.name) return false;
          i--;
        }
      }
      return true;
    }
  }
  function hasChild(tree) {
    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
    var _a;
    let {
      buffer,
      nodeSet,
      maxBufferLength = DefaultBufferLength,
      reused = [],
      minRepeatType = nodeSet.types.length
    } = data;
    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
    let types = nodeSet.types;
    let contextHash = 0,
      lookAhead = 0;
    function takeNode(parentStart, minPos, children, positions, inRepeat) {
      let {
        id,
        start,
        end,
        size
      } = cursor;
      let lookAheadAtStart = lookAhead;
      while (size < 0) {
        cursor.next();
        if (size == -1 /* SpecialRecord.Reuse */) {
          let node = reused[id];
          children.push(node);
          positions.push(start - parentStart);
          return;
        } else if (size == -3 /* SpecialRecord.ContextChange */) {
          // Context change
          contextHash = id;
          return;
        } else if (size == -4 /* SpecialRecord.LookAhead */) {
          lookAhead = id;
          return;
        } else {
          throw new RangeError(`Unrecognized record size: ${size}`);
        }
      }
      let type = types[id],
        node,
        buffer;
      let startPos = start - parentStart;
      if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
        // Small enough for a buffer, and no reused nodes inside
        let data = new Uint16Array(buffer.size - buffer.skip);
        let endPos = cursor.pos - buffer.size,
          index = data.length;
        while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);
        node = new TreeBuffer(data, end - buffer.start, nodeSet);
        startPos = buffer.start - parentStart;
      } else {
        // Make it a node
        let endPos = cursor.pos - size;
        cursor.next();
        let localChildren = [],
          localPositions = [];
        let localInRepeat = id >= minRepeatType ? id : -1;
        let lastGroup = 0,
          lastEnd = end;
        while (cursor.pos > endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else {
            takeNode(start, endPos, localChildren, localPositions, localInRepeat);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          let make = makeBalanced(type);
          node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
        } else {
          node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
        }
      }
      children.push(node);
      positions.push(startPos);
    }
    function makeBalanced(type) {
      return (children, positions, length) => {
        let lookAhead = 0,
          lastI = children.length - 1,
          last,
          lookAheadProp;
        if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
          if (!lastI && last.type == type && last.length == length) return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type, children, positions, length, lookAhead);
      };
    }
    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
      let localChildren = [],
        localPositions = [];
      while (children.length > i) {
        localChildren.push(children.pop());
        localPositions.push(positions.pop() + base - from);
      }
      children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
      positions.push(from - base);
    }
    function makeTree(type, children, positions, length, lookAhead = 0, props) {
      if (contextHash) {
        let pair = [NodeProp.contextHash, contextHash];
        props = props ? [pair].concat(props) : [pair];
      }
      if (lookAhead > 25) {
        let pair = [NodeProp.lookAhead, lookAhead];
        props = props ? [pair].concat(props) : [pair];
      }
      return new Tree(type, children, positions, length, props);
    }
    function findBufferSize(maxSize, inRepeat) {
      // Scan through the buffer to find previous siblings that fit
      // together in a TreeBuffer, and don't contain any reused nodes
      // (which can't be stored in a buffer).
      // If `inRepeat` is > -1, ignore node boundaries of that type for
      // nesting, but make sure the end falls either at the start
      // (`maxSize`) or before such a node.
      let fork = cursor.fork();
      let size = 0,
        start = 0,
        skip = 0,
        minStart = fork.end - maxBufferLength;
      let result = {
        size: 0,
        start: 0,
        skip: 0
      };
      scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
        let nodeSize = fork.size;
        // Pretend nested repeat nodes of the same type don't exist
        if (fork.id == inRepeat && nodeSize >= 0) {
          // Except that we store the current state as a valid return
          // value.
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize;
        if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3 /* SpecialRecord.ContextChange */) localSkipped += 4;else break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart;
        size += nodeSize;
        skip += localSkipped;
      }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start;
        result.skip = skip;
      }
      return result.size > 4 ? result : undefined;
    }
    function copyToBuffer(bufferStart, buffer, index) {
      let {
        id,
        start,
        end,
        size
      } = cursor;
      cursor.next();
      if (size >= 0 && id < minRepeatType) {
        let startIndex = index;
        if (size > 4) {
          let endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);
        }
        buffer[--index] = startIndex;
        buffer[--index] = end - bufferStart;
        buffer[--index] = start - bufferStart;
        buffer[--index] = id;
      } else if (size == -3 /* SpecialRecord.ContextChange */) {
        contextHash = id;
      } else if (size == -4 /* SpecialRecord.LookAhead */) {
        lookAhead = id;
      }
      return index;
    }
    let children = [],
      positions = [];
    while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
    let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap();
  function nodeSize(balanceType, node) {
    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
    let size = nodeSizeCache.get(node);
    if (size == null) {
      size = 1;
      for (let child of node.children) {
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
      nodeSizeCache.set(node, size);
    }
    return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType,
  // The direct children and their positions
  children, positions,
  // The index range in children/positions to use
  from, to,
  // The start position of the nodes, relative to their parent.
  start,
  // Length of the outer node
  length,
  // Function to build the top node of the balanced tree
  mkTop,
  // Function to build internal nodes for the balanced tree
  mkTree) {
    let total = 0;
    for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);
    let maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */);
    let localChildren = [],
      localPositions = [];
    function divide(children, positions, from, to, offset) {
      for (let i = from; i < to;) {
        let groupFrom = i,
          groupStart = positions[i],
          groupSize = nodeSize(balanceType, children[i]);
        i++;
        for (; i < to; i++) {
          let nextSize = nodeSize(balanceType, children[i]);
          if (groupSize + nextSize >= maxChild) break;
          groupSize += nextSize;
        }
        if (i == groupFrom + 1) {
          if (groupSize > maxChild) {
            let only = children[groupFrom]; // Only trees can have a size > 1
            divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
            continue;
          }
          localChildren.push(children[groupFrom]);
        } else {
          let length = positions[i - 1] + children[i - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
        }
        localPositions.push(groupStart + offset - start);
      }
    }
    divide(children, positions, from, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length);
  }

  /// Tree fragments are used during [incremental
  /// parsing](#common.Parser.startParse) to track parts of old trees
  /// that can be reused in a new parse. An array of fragments is used
  /// to track regions of an old tree whose nodes might be reused in new
  /// parses. Use the static
  /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
  /// update fragments for document changes.
  class TreeFragment {
    /// Construct a tree fragment. You'll usually want to use
    /// [`addTree`](#common.TreeFragment^addTree) and
    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
    /// calling this directly.
    constructor(
    /// The start of the unchanged range pointed to by this fragment.
    /// This refers to an offset in the _updated_ document (as opposed
    /// to the original tree).
    from,
    /// The end of the unchanged range.
    to,
    /// The tree that this fragment is based on.
    tree,
    /// The offset between the fragment's tree and the document that
    /// this fragment can be used against. Add this when going from
    /// document to tree positions, subtract it to go from tree to
    /// document positions.
    offset, openStart = false, openEnd = false) {
      this.from = from;
      this.to = to;
      this.tree = tree;
      this.offset = offset;
      this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
    }
    /// Whether the start of the fragment represents the start of a
    /// parse, or the end of a change. (In the second case, it may not
    /// be safe to reuse some nodes at the start, depending on the
    /// parsing algorithm.)
    get openStart() {
      return (this.open & 1 /* Open.Start */) > 0;
    }
    /// Whether the end of the fragment represents the end of a
    /// full-document parse, or the start of a change.
    get openEnd() {
      return (this.open & 2 /* Open.End */) > 0;
    }
    /// Create a set of fragments from a freshly parsed tree, or update
    /// an existing set of fragments by replacing the ones that overlap
    /// with a tree with content from the new tree. When `partial` is
    /// true, the parse is treated as incomplete, and the resulting
    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    /// true.
    static addTree(tree, fragments = [], partial = false) {
      let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
      for (let f of fragments) if (f.to > tree.length) result.push(f);
      return result;
    }
    /// Apply a set of edits to an array of fragments, removing or
    /// splitting fragments as necessary to remove edited ranges, and
    /// adjusting offsets for fragments that moved.
    static applyChanges(fragments, changes, minGap = 128) {
      if (!changes.length) return fragments;
      let result = [];
      let fI = 1,
        nextF = fragments.length ? fragments[0] : null;
      for (let cI = 0, pos = 0, off = 0;; cI++) {
        let nextC = cI < changes.length ? changes[cI] : null;
        let nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            let fFrom = Math.max(cut.from, pos) - off,
              fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut) result.push(cut);
          if (nextF.to > nextPos) break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
        if (!nextC) break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  }
  /// A superclass that parsers should extend.
  class Parser$1 {
    /// Start a parse, returning a [partial parse](#common.PartialParse)
    /// object. [`fragments`](#common.TreeFragment) can be passed in to
    /// make the parse incremental.
    ///
    /// By default, the entire input is parsed. You can pass `ranges`,
    /// which should be a sorted array of non-empty, non-overlapping
    /// ranges, to parse only those ranges. The tree returned in that
    /// case will start at `ranges[0].from`.
    startParse(input, fragments, ranges) {
      if (typeof input == "string") input = new StringInput(input);
      ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /// Run a full parse, returning the resulting tree.
    parse(input, fragments, ranges) {
      let parse = this.startParse(input, fragments, ranges);
      for (;;) {
        let done = parse.advance();
        if (done) return done;
      }
    }
  }
  class StringInput {
    constructor(string) {
      this.string = string;
    }
    get length() {
      return this.string.length;
    }
    chunk(from) {
      return this.string.slice(from);
    }
    get lineChunks() {
      return false;
    }
    read(from, to) {
      return this.string.slice(from, to);
    }
  }
  new NodeProp({
    perNode: true
  });

  let nextTagID = 0;
  /// Highlighting tags are markers that denote a highlighting category.
  /// They are [associated](#highlight.styleTags) with parts of a syntax
  /// tree by a language mode, and then mapped to an actual CSS style by
  /// a [highlighter](#highlight.Highlighter).
  ///
  /// Because syntax tree node types and highlight styles have to be
  /// able to talk the same language, CodeMirror uses a mostly _closed_
  /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
  /// traditional open string-based systems, which make it hard for
  /// highlighting themes to cover all the tokens produced by the
  /// various languages).
  ///
  /// It _is_ possible to [define](#highlight.Tag^define) your own
  /// highlighting tags for system-internal use (where you control both
  /// the language package and the highlighter), but such tags will not
  /// be picked up by regular highlighters (though you can derive them
  /// from standard tags to allow highlighters to fall back to those).
  class Tag {
    /// @internal
    constructor(
    /// The set of this tag and all its parent tags, starting with
    /// this one itself and sorted in order of decreasing specificity.
    set,
    /// The base unmodified tag that this one is based on, if it's
    /// modified @internal
    base,
    /// The modifiers applied to this.base @internal
    modified) {
      this.set = set;
      this.base = base;
      this.modified = modified;
      /// @internal
      this.id = nextTagID++;
    }
    /// Define a new tag. If `parent` is given, the tag is treated as a
    /// sub-tag of that parent, and
    /// [highlighters](#highlight.tagHighlighter) that don't mention
    /// this tag will try to fall back to the parent tag (or grandparent
    /// tag, etc).
    static define(parent) {
      if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
      let tag = new Tag([], null, []);
      tag.set.push(tag);
      if (parent) for (let t of parent.set) tag.set.push(t);
      return tag;
    }
    /// Define a tag _modifier_, which is a function that, given a tag,
    /// will return a tag that is a subtag of the original. Applying the
    /// same modifier to a twice tag will return the same value (`m1(t1)
    /// == m1(t1)`) and applying multiple modifiers will, regardless or
    /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    ///
    /// When multiple modifiers are applied to a given base tag, each
    /// smaller set of modifiers is registered as a parent, so that for
    /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    /// `m1(m3(t1)`, and so on.
    static defineModifier() {
      let mod = new Modifier();
      return tag => {
        if (tag.modified.indexOf(mod) > -1) return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
      };
    }
  }
  let nextModifierID = 0;
  class Modifier {
    constructor() {
      this.instances = [];
      this.id = nextModifierID++;
    }
    static get(base, mods) {
      if (!mods.length) return base;
      let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
      if (exists) return exists;
      let set = [],
        tag = new Tag(set, base, mods);
      for (let m of mods) m.instances.push(tag);
      let configs = powerSet(mods);
      for (let parent of base.set) if (!parent.modified.length) for (let config of configs) set.push(Modifier.get(parent, config));
      return tag;
    }
  }
  function sameArray(a, b) {
    return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
    let sets = [[]];
    for (let i = 0; i < array.length; i++) {
      for (let j = 0, e = sets.length; j < e; j++) {
        sets.push(sets[j].concat(array[i]));
      }
    }
    return sets.sort((a, b) => b.length - a.length);
  }
  /// This function is used to add a set of tags to a language syntax
  /// via [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.LRParser.configure).
  ///
  /// The argument object maps node selectors to [highlighting
  /// tags](#highlight.Tag) or arrays of tags.
  ///
  /// Node selectors may hold one or more (space-separated) node paths.
  /// Such a path can be a [node name](#common.NodeType.name), or
  /// multiple node names (or `*` wildcards) separated by slash
  /// characters, as in `"Block/Declaration/VariableName"`. Such a path
  /// matches the final node but only if its direct parent nodes are the
  /// other nodes mentioned. A `*` in such a path matches any parent,
  /// but only a single level—wildcards that match multiple parents
  /// aren't supported, both for efficiency reasons and because Lezer
  /// trees make it rather hard to reason about what they would match.)
  ///
  /// A path can be ended with `/...` to indicate that the tag assigned
  /// to the node should also apply to all child nodes, even if they
  /// match their own style (by default, only the innermost style is
  /// used).
  ///
  /// When a path ends in `!`, as in `Attribute!`, no further matching
  /// happens for the node's child nodes, and the entire node gets the
  /// given style.
  ///
  /// In this notation, node names that contain `/`, `!`, `*`, or `...`
  /// must be quoted as JSON strings.
  ///
  /// For example:
  ///
  /// ```javascript
  /// parser.withProps(
  ///   styleTags({
  ///     // Style Number and BigNumber nodes
  ///     "Number BigNumber": tags.number,
  ///     // Style Escape nodes whose parent is String
  ///     "String/Escape": tags.escape,
  ///     // Style anything inside Attributes nodes
  ///     "Attributes!": tags.meta,
  ///     // Add a style to all content inside Italic nodes
  ///     "Italic/...": tags.emphasis,
  ///     // Style InvalidString nodes as both `string` and `invalid`
  ///     "InvalidString": [tags.string, tags.invalid],
  ///     // Style the node named "/" as punctuation
  ///     '"/"': tags.punctuation
  ///   })
  /// )
  /// ```
  function styleTags(spec) {
    let byName = Object.create(null);
    for (let prop in spec) {
      let tags = spec[prop];
      if (!Array.isArray(tags)) tags = [tags];
      for (let part of prop.split(" ")) if (part) {
        let pieces = [],
          mode = 2 /* Mode.Normal */,
          rest = part;
        for (let pos = 0;;) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1 /* Mode.Inherit */;
            break;
          }
          let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m) throw new RangeError("Invalid path: " + part);
          pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
          pos += m[0].length;
          if (pos == part.length) break;
          let next = part[pos++];
          if (pos == part.length && next == "!") {
            mode = 0 /* Mode.Opaque */;
            break;
          }
          if (next != "/") throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last = pieces.length - 1,
          inner = pieces[last];
        if (!inner) throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
    }
    return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  class Rule {
    constructor(tags, mode, context, next) {
      this.tags = tags;
      this.mode = mode;
      this.context = context;
      this.next = next;
    }
    get opaque() {
      return this.mode == 0 /* Mode.Opaque */;
    }
    get inherit() {
      return this.mode == 1 /* Mode.Inherit */;
    }
    sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
    get depth() {
      return this.context ? this.context.length : 0;
    }
  }
  Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
  /// Define a [highlighter](#highlight.Highlighter) from an array of
  /// tag/class pairs. Classes associated with more specific tags will
  /// take precedence.
  function tagHighlighter(tags, options) {
    let map = Object.create(null);
    for (let style of tags) {
      if (!Array.isArray(style.tag)) map[style.tag.id] = style.class;else for (let tag of style.tag) map[tag.id] = style.class;
    }
    let {
      scope,
      all = null
    } = options || {};
    return {
      style: tags => {
        let cls = all;
        for (let tag of tags) {
          for (let sub of tag.set) {
            let tagClass = map[sub.id];
            if (tagClass) {
              cls = cls ? cls + " " + tagClass : tagClass;
              break;
            }
          }
        }
        return cls;
      },
      scope
    };
  }
  function highlightTags(highlighters, tags) {
    let result = null;
    for (let highlighter of highlighters) {
      let value = highlighter.style(tags);
      if (value) result = result ? result + " " + value : value;
    }
    return result;
  }
  /// Highlight the given [tree](#common.Tree) with the given
  /// [highlighter](#highlight.Highlighter).
  function highlightTree(tree, highlighter,
  /// Assign styling to a region of the text. Will be called, in order
  /// of position, for any ranges where more than zero classes apply.
  /// `classes` is a space separated string of CSS classes.
  putStyle,
  /// The start of the range to highlight.
  from = 0,
  /// The end of the range.
  to = tree.length) {
    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
    builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
    builder.flush(to);
  }
  class HighlightBuilder {
    constructor(at, highlighters, span) {
      this.at = at;
      this.highlighters = highlighters;
      this.span = span;
      this.class = "";
    }
    startSpan(at, cls) {
      if (cls != this.class) {
        this.flush(at);
        if (at > this.at) this.at = at;
        this.class = cls;
      }
    }
    flush(to) {
      if (to > this.at && this.class) this.span(this.at, to, this.class);
    }
    highlightRange(cursor, from, to, inheritedClass, highlighters) {
      let {
        type,
        from: start,
        to: end
      } = cursor;
      if (start >= to || end <= from) return;
      if (type.isTop) highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
      let cls = inheritedClass;
      let rule = getStyleTags(cursor) || Rule.empty;
      let tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls) cls += " ";
        cls += tagCls;
        if (rule.mode == 1 /* Mode.Inherit */) inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(cursor.from, cls);
      if (rule.opaque) return;
      let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
      if (mounted && mounted.overlay) {
        let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
        let hasChild = cursor.firstChild();
        for (let i = 0, pos = start;; i++) {
          let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
          let nextPos = next ? next.from + start : end;
          let rangeFrom = Math.max(from, pos),
            rangeTo = Math.min(to, nextPos);
          if (rangeFrom < rangeTo && hasChild) {
            while (cursor.from < rangeTo) {
              this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling()) break;
            }
          }
          if (!next || nextPos > to) break;
          pos = next.to + start;
          if (pos > from) {
            this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
            this.startSpan(pos, cls);
          }
        }
        if (hasChild) cursor.parent();
      } else if (cursor.firstChild()) {
        do {
          if (cursor.to <= from) continue;
          if (cursor.from >= to) break;
          this.highlightRange(cursor, from, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  }
  /// Match a syntax node's [highlight rules](#highlight.styleTags). If
  /// there's a match, return its set of tags, and whether it is
  /// opaque (uses a `!`) or applies to all child nodes (`/...`).
  function getStyleTags(node) {
    let rule = node.type.prop(ruleNodeProp);
    while (rule && rule.context && !node.matchContext(rule.context)) rule = rule.next;
    return rule || null;
  }
  const t$3 = Tag.define;
  const comment = t$3(),
    name$5 = t$3(),
    typeName = t$3(name$5),
    propertyName = t$3(name$5),
    literal = t$3(),
    string = t$3(literal),
    number = t$3(literal),
    content = t$3(),
    heading = t$3(content),
    keyword = t$3(),
    operator = t$3(),
    punctuation = t$3(),
    bracket = t$3(punctuation),
    meta = t$3();
  /// The default set of highlighting [tags](#highlight.Tag).
  ///
  /// This collection is heavily biased towards programming languages,
  /// and necessarily incomplete. A full ontology of syntactic
  /// constructs would fill a stack of books, and be impractical to
  /// write themes for. So try to make do with this set. If all else
  /// fails, [open an
  /// issue](https://github.com/codemirror/codemirror.next) to propose a
  /// new tag, or [define](#highlight.Tag^define) a local custom tag for
  /// your use case.
  ///
  /// Note that it is not obligatory to always attach the most specific
  /// tag possible to an element—if your grammar can't easily
  /// distinguish a certain type of element (such as a local variable),
  /// it is okay to style it as its more general variant (a variable).
  /// 
  /// For tags that extend some parent tag, the documentation links to
  /// the parent.
  const tags$1 = {
    /// A comment.
    comment,
    /// A line [comment](#highlight.tags.comment).
    lineComment: t$3(comment),
    /// A block [comment](#highlight.tags.comment).
    blockComment: t$3(comment),
    /// A documentation [comment](#highlight.tags.comment).
    docComment: t$3(comment),
    /// Any kind of identifier.
    name: name$5,
    /// The [name](#highlight.tags.name) of a variable.
    variableName: t$3(name$5),
    /// A type [name](#highlight.tags.name).
    typeName: typeName,
    /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
    tagName: t$3(typeName),
    /// A property or field [name](#highlight.tags.name).
    propertyName: propertyName,
    /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
    attributeName: t$3(propertyName),
    /// The [name](#highlight.tags.name) of a class.
    className: t$3(name$5),
    /// A label [name](#highlight.tags.name).
    labelName: t$3(name$5),
    /// A namespace [name](#highlight.tags.name).
    namespace: t$3(name$5),
    /// The [name](#highlight.tags.name) of a macro.
    macroName: t$3(name$5),
    /// A literal value.
    literal,
    /// A string [literal](#highlight.tags.literal).
    string,
    /// A documentation [string](#highlight.tags.string).
    docString: t$3(string),
    /// A character literal (subtag of [string](#highlight.tags.string)).
    character: t$3(string),
    /// An attribute value (subtag of [string](#highlight.tags.string)).
    attributeValue: t$3(string),
    /// A number [literal](#highlight.tags.literal).
    number,
    /// An integer [number](#highlight.tags.number) literal.
    integer: t$3(number),
    /// A floating-point [number](#highlight.tags.number) literal.
    float: t$3(number),
    /// A boolean [literal](#highlight.tags.literal).
    bool: t$3(literal),
    /// Regular expression [literal](#highlight.tags.literal).
    regexp: t$3(literal),
    /// An escape [literal](#highlight.tags.literal), for example a
    /// backslash escape in a string.
    escape: t$3(literal),
    /// A color [literal](#highlight.tags.literal).
    color: t$3(literal),
    /// A URL [literal](#highlight.tags.literal).
    url: t$3(literal),
    /// A language keyword.
    keyword,
    /// The [keyword](#highlight.tags.keyword) for the self or this
    /// object.
    self: t$3(keyword),
    /// The [keyword](#highlight.tags.keyword) for null.
    null: t$3(keyword),
    /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
    atom: t$3(keyword),
    /// A [keyword](#highlight.tags.keyword) that represents a unit.
    unit: t$3(keyword),
    /// A modifier [keyword](#highlight.tags.keyword).
    modifier: t$3(keyword),
    /// A [keyword](#highlight.tags.keyword) that acts as an operator.
    operatorKeyword: t$3(keyword),
    /// A control-flow related [keyword](#highlight.tags.keyword).
    controlKeyword: t$3(keyword),
    /// A [keyword](#highlight.tags.keyword) that defines something.
    definitionKeyword: t$3(keyword),
    /// A [keyword](#highlight.tags.keyword) related to defining or
    /// interfacing with modules.
    moduleKeyword: t$3(keyword),
    /// An operator.
    operator,
    /// An [operator](#highlight.tags.operator) that dereferences something.
    derefOperator: t$3(operator),
    /// Arithmetic-related [operator](#highlight.tags.operator).
    arithmeticOperator: t$3(operator),
    /// Logical [operator](#highlight.tags.operator).
    logicOperator: t$3(operator),
    /// Bit [operator](#highlight.tags.operator).
    bitwiseOperator: t$3(operator),
    /// Comparison [operator](#highlight.tags.operator).
    compareOperator: t$3(operator),
    /// [Operator](#highlight.tags.operator) that updates its operand.
    updateOperator: t$3(operator),
    /// [Operator](#highlight.tags.operator) that defines something.
    definitionOperator: t$3(operator),
    /// Type-related [operator](#highlight.tags.operator).
    typeOperator: t$3(operator),
    /// Control-flow [operator](#highlight.tags.operator).
    controlOperator: t$3(operator),
    /// Program or markup punctuation.
    punctuation,
    /// [Punctuation](#highlight.tags.punctuation) that separates
    /// things.
    separator: t$3(punctuation),
    /// Bracket-style [punctuation](#highlight.tags.punctuation).
    bracket,
    /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
    /// tokens).
    angleBracket: t$3(bracket),
    /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
    /// tokens).
    squareBracket: t$3(bracket),
    /// Parentheses (usually `(` and `)` tokens). Subtag of
    /// [bracket](#highlight.tags.bracket).
    paren: t$3(bracket),
    /// Braces (usually `{` and `}` tokens). Subtag of
    /// [bracket](#highlight.tags.bracket).
    brace: t$3(bracket),
    /// Content, for example plain text in XML or markup documents.
    content,
    /// [Content](#highlight.tags.content) that represents a heading.
    heading,
    /// A level 1 [heading](#highlight.tags.heading).
    heading1: t$3(heading),
    /// A level 2 [heading](#highlight.tags.heading).
    heading2: t$3(heading),
    /// A level 3 [heading](#highlight.tags.heading).
    heading3: t$3(heading),
    /// A level 4 [heading](#highlight.tags.heading).
    heading4: t$3(heading),
    /// A level 5 [heading](#highlight.tags.heading).
    heading5: t$3(heading),
    /// A level 6 [heading](#highlight.tags.heading).
    heading6: t$3(heading),
    /// A prose separator (such as a horizontal rule).
    contentSeparator: t$3(content),
    /// [Content](#highlight.tags.content) that represents a list.
    list: t$3(content),
    /// [Content](#highlight.tags.content) that represents a quote.
    quote: t$3(content),
    /// [Content](#highlight.tags.content) that is emphasized.
    emphasis: t$3(content),
    /// [Content](#highlight.tags.content) that is styled strong.
    strong: t$3(content),
    /// [Content](#highlight.tags.content) that is part of a link.
    link: t$3(content),
    /// [Content](#highlight.tags.content) that is styled as code or
    /// monospace.
    monospace: t$3(content),
    /// [Content](#highlight.tags.content) that has a strike-through
    /// style.
    strikethrough: t$3(content),
    /// Inserted text in a change-tracking format.
    inserted: t$3(),
    /// Deleted text.
    deleted: t$3(),
    /// Changed text.
    changed: t$3(),
    /// An invalid or unsyntactic element.
    invalid: t$3(),
    /// Metadata or meta-instruction.
    meta,
    /// [Metadata](#highlight.tags.meta) that applies to the entire
    /// document.
    documentMeta: t$3(meta),
    /// [Metadata](#highlight.tags.meta) that annotates or adds
    /// attributes to a given syntactic element.
    annotation: t$3(meta),
    /// Processing instruction or preprocessor directive. Subtag of
    /// [meta](#highlight.tags.meta).
    processingInstruction: t$3(meta),
    /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
    /// given element is being defined. Expected to be used with the
    /// various [name](#highlight.tags.name) tags.
    definition: Tag.defineModifier(),
    /// [Modifier](#highlight.Tag^defineModifier) that indicates that
    /// something is constant. Mostly expected to be used with
    /// [variable names](#highlight.tags.variableName).
    constant: Tag.defineModifier(),
    /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
    /// a [variable](#highlight.tags.variableName) or [property
    /// name](#highlight.tags.propertyName) is being called or defined
    /// as a function.
    function: Tag.defineModifier(),
    /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
    /// [names](#highlight.tags.name) to indicate that they belong to
    /// the language's standard environment.
    standard: Tag.defineModifier(),
    /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
    /// [names](#highlight.tags.name) is local to some scope.
    local: Tag.defineModifier(),
    /// A generic variant [modifier](#highlight.Tag^defineModifier) that
    /// can be used to tag language-specific alternative variants of
    /// some common tag. It is recommended for themes to define special
    /// forms of at least the [string](#highlight.tags.string) and
    /// [variable name](#highlight.tags.variableName) tags, since those
    /// come up a lot.
    special: Tag.defineModifier()
  };
  /// This is a highlighter that adds stable, predictable classes to
  /// tokens, for styling with external CSS.
  ///
  /// The following tags are mapped to their name prefixed with `"tok-"`
  /// (for example `"tok-comment"`):
  ///
  /// * [`link`](#highlight.tags.link)
  /// * [`heading`](#highlight.tags.heading)
  /// * [`emphasis`](#highlight.tags.emphasis)
  /// * [`strong`](#highlight.tags.strong)
  /// * [`keyword`](#highlight.tags.keyword)
  /// * [`atom`](#highlight.tags.atom)
  /// * [`bool`](#highlight.tags.bool)
  /// * [`url`](#highlight.tags.url)
  /// * [`labelName`](#highlight.tags.labelName)
  /// * [`inserted`](#highlight.tags.inserted)
  /// * [`deleted`](#highlight.tags.deleted)
  /// * [`literal`](#highlight.tags.literal)
  /// * [`string`](#highlight.tags.string)
  /// * [`number`](#highlight.tags.number)
  /// * [`variableName`](#highlight.tags.variableName)
  /// * [`typeName`](#highlight.tags.typeName)
  /// * [`namespace`](#highlight.tags.namespace)
  /// * [`className`](#highlight.tags.className)
  /// * [`macroName`](#highlight.tags.macroName)
  /// * [`propertyName`](#highlight.tags.propertyName)
  /// * [`operator`](#highlight.tags.operator)
  /// * [`comment`](#highlight.tags.comment)
  /// * [`meta`](#highlight.tags.meta)
  /// * [`punctuation`](#highlight.tags.punctuation)
  /// * [`invalid`](#highlight.tags.invalid)
  ///
  /// In addition, these mappings are provided:
  ///
  /// * [`regexp`](#highlight.tags.regexp),
  ///   [`escape`](#highlight.tags.escape), and
  ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
  ///   are mapped to `"tok-string2"`
  /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName2"`
  /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName tok-local"`
  /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
  ///   to `"tok-variableName tok-definition"`
  /// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
  ///   to `"tok-propertyName tok-definition"`
  tagHighlighter([{
    tag: tags$1.link,
    class: "tok-link"
  }, {
    tag: tags$1.heading,
    class: "tok-heading"
  }, {
    tag: tags$1.emphasis,
    class: "tok-emphasis"
  }, {
    tag: tags$1.strong,
    class: "tok-strong"
  }, {
    tag: tags$1.keyword,
    class: "tok-keyword"
  }, {
    tag: tags$1.atom,
    class: "tok-atom"
  }, {
    tag: tags$1.bool,
    class: "tok-bool"
  }, {
    tag: tags$1.url,
    class: "tok-url"
  }, {
    tag: tags$1.labelName,
    class: "tok-labelName"
  }, {
    tag: tags$1.inserted,
    class: "tok-inserted"
  }, {
    tag: tags$1.deleted,
    class: "tok-deleted"
  }, {
    tag: tags$1.literal,
    class: "tok-literal"
  }, {
    tag: tags$1.string,
    class: "tok-string"
  }, {
    tag: tags$1.number,
    class: "tok-number"
  }, {
    tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)],
    class: "tok-string2"
  }, {
    tag: tags$1.variableName,
    class: "tok-variableName"
  }, {
    tag: tags$1.local(tags$1.variableName),
    class: "tok-variableName tok-local"
  }, {
    tag: tags$1.definition(tags$1.variableName),
    class: "tok-variableName tok-definition"
  }, {
    tag: tags$1.special(tags$1.variableName),
    class: "tok-variableName2"
  }, {
    tag: tags$1.definition(tags$1.propertyName),
    class: "tok-propertyName tok-definition"
  }, {
    tag: tags$1.typeName,
    class: "tok-typeName"
  }, {
    tag: tags$1.namespace,
    class: "tok-namespace"
  }, {
    tag: tags$1.className,
    class: "tok-className"
  }, {
    tag: tags$1.macroName,
    class: "tok-macroName"
  }, {
    tag: tags$1.propertyName,
    class: "tok-propertyName"
  }, {
    tag: tags$1.operator,
    class: "tok-operator"
  }, {
    tag: tags$1.comment,
    class: "tok-comment"
  }, {
    tag: tags$1.meta,
    class: "tok-meta"
  }, {
    tag: tags$1.invalid,
    class: "tok-invalid"
  }, {
    tag: tags$1.punctuation,
    class: "tok-punctuation"
  }]);

  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  const languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? values => values.concat(baseData) : undefined
    });
  }
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  class Language {
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    constructor(
    /**
    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
    used for this language.
    */
    data, parser, extraExtensions = [],
    /**
    A language name.
    */
    name = "") {
      this.data = data;
      this.name = name;
      // Kludge to define EditorState.tree as a debugging helper,
      // without the EditorState package actually knowing about
      // languages and lezer trees.
      if (!EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(EditorState.prototype, "tree", {
        get() {
          return syntaxTree(this);
        }
      });
      this.parser = parser;
      this.extension = [language$1.of(this), EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    isActiveAt(state, pos, side = -1) {
      return languageDataFacetAt(state, pos, side) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
    findRegions(state) {
      let lang = state.facet(language$1);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
        from: 0,
        to: state.doc.length
      }];
      if (!lang || !lang.allowsNesting) return [];
      let result = [];
      let explore = (tree, from) => {
        if (tree.prop(languageDataProp) == this.data) {
          result.push({
            from,
            to: from + tree.length
          });
          return;
        }
        let mount = tree.prop(NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == this.data) {
            if (mount.overlay) for (let r of mount.overlay) result.push({
              from: r.from + from,
              to: r.to + from
            });else result.push({
              from: from,
              to: from + tree.length
            });
            return;
          } else if (mount.overlay) {
            let size = result.length;
            explore(mount.tree, mount.overlay[0].from + from);
            if (result.length > size) return;
          }
        }
        for (let i = 0; i < tree.children.length; i++) {
          let ch = tree.children[i];
          if (ch instanceof Tree) explore(ch, tree.positions[i] + from);
        }
      };
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
    get allowsNesting() {
      return true;
    }
  }
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function languageDataFacetAt(state, pos, side) {
    let topLang = state.facet(language$1);
    if (!topLang) return null;
    let facet = topLang.data;
    if (topLang.allowsNesting) {
      for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) facet = node.type.prop(languageDataProp) || facet;
    }
    return facet;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  class LRLanguage extends Language {
    constructor(data, parser, name) {
      super(data, parser, [], name);
      this.parser = parser;
    }
    /**
    Define a language from a parser.
    */
    static define(spec) {
      let data = defineLanguageFacet(spec.languageData);
      return new LRLanguage(data, spec.parser.configure({
        props: [languageDataProp.add(type => type.isTop ? data : undefined)]
      }), spec.name);
    }
    /**
    Create a new instance of this language with a reconfigured
    version of its parser and optionally a new name.
    */
    configure(options, name) {
      return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
    }
    get allowsNesting() {
      return this.parser.hasWrappers();
    }
  }
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
    let field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  // Lezer-style Input object for a Text document.
  class DocInput {
    constructor(doc, length = doc.length) {
      this.doc = doc;
      this.length = length;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc.iter();
    }
    syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
    chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
    get lineChunks() {
      return true;
    }
    read(from, to) {
      let stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
    }
  }
  let currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  class ParseContext {
    constructor(parser,
    /**
    The current editor state.
    */
    state,
    /**
    Tree fragments that can be reused by incremental re-parses.
    */
    fragments = [],
    /**
    @internal
    */
    tree,
    /**
    @internal
    */
    treeLen,
    /**
    The current editor viewport (or some overapproximation
    thereof). Intended to be used for opportunistically avoiding
    work (in which case
    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
    should be called to make sure the parser is restarted when the
    skipped region becomes visible).
    */
    viewport,
    /**
    @internal
    */
    skipped,
    /**
    This is where skipping parsers can register a promise that,
    when resolved, will schedule a new parse. It is cleared when
    the parse worker picks up the promise. @internal
    */
    scheduleOn) {
      this.parser = parser;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      /**
      @internal
      */
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    static create(parser, state, viewport) {
      return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
    }
    startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
    work(until, upto) {
      if (upto != null && upto >= this.state.doc.length) upto = undefined;
      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(() => {
        var _a;
        if (typeof until == "number") {
          let endTime = Date.now() + until;
          until = () => Date.now() > endTime;
        }
        if (!this.parse) this.parse = this.startParse();
        if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length) this.parse.stopAt(upto);
        for (;;) {
          let done = this.parse.advance();
          if (done) {
            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
            this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
            this.tree = done;
            this.parse = null;
            if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length)) this.parse = this.startParse();else return true;
          }
          if (until()) return false;
        }
      });
    }
    /**
    @internal
    */
    takeTree() {
      let pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
        this.withContext(() => {
          while (!(tree = this.parse.advance())) {}
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
    withContext(f) {
      let prev = currentContext;
      currentContext = this;
      try {
        return f();
      } finally {
        currentContext = prev;
      }
    }
    withoutTempSkipped(fragments) {
      for (let r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);
      return fragments;
    }
    /**
    @internal
    */
    changes(changes, newState) {
      let {
        fragments,
        tree,
        treeLen,
        viewport,
        skipped
      } = this;
      this.takeTree();
      if (!changes.empty) {
        let ranges = [];
        changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({
          fromA,
          toA,
          fromB,
          toB
        }));
        fragments = TreeFragment.applyChanges(fragments, ranges);
        tree = Tree.empty;
        treeLen = 0;
        viewport = {
          from: changes.mapPos(viewport.from, -1),
          to: changes.mapPos(viewport.to, 1)
        };
        if (this.skipped.length) {
          skipped = [];
          for (let r of this.skipped) {
            let from = changes.mapPos(r.from, 1),
              to = changes.mapPos(r.to, -1);
            if (from < to) skipped.push({
              from,
              to
            });
          }
        }
      }
      return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
    updateViewport(viewport) {
      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
      this.viewport = viewport;
      let startLen = this.skipped.length;
      for (let i = 0; i < this.skipped.length; i++) {
        let {
          from,
          to
        } = this.skipped[i];
        if (from < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i--, 1);
        }
      }
      if (this.skipped.length >= startLen) return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
    reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
    skipUntilInView(from, to) {
      this.skipped.push({
        from,
        to
      });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
    static getSkippingParser(until) {
      return new class extends Parser$1 {
        createParse(input, fragments, ranges) {
          let from = ranges[0].from,
            to = ranges[ranges.length - 1].to;
          let parser = {
            parsedPos: from,
            advance() {
              let cx = currentContext;
              if (cx) {
                for (let r of ranges) cx.tempSkipped.push(r);
                if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
              }
              this.parsedPos = to;
              return new Tree(NodeType.none, [], [], to - from);
            },
            stoppedAt: null,
            stopAt() {}
          };
          return parser;
        }
      }();
    }
    /**
    @internal
    */
    isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      let frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
    static get() {
      return currentContext;
    }
  }
  function cutFragments(fragments, from, to) {
    return TreeFragment.applyChanges(fragments, [{
      fromA: from,
      toA: to,
      fromB: from,
      toB: to
    }]);
  }
  class LanguageState {
    constructor(
    // A mutable parse state that is used to preserve work done during
    // the lifetime of a state when moving to the next state.
    context) {
      this.context = context;
      this.tree = context.tree;
    }
    apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree) return this;
      let newCx = this.context.changes(tr.changes, tr.state);
      // If the previous parse wasn't done, go forward only up to its
      // end position or the end of the viewport, to avoid slowing down
      // state updates with parse work beyond the viewport.
      let upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();
      return new LanguageState(newCx);
    }
    static init(state) {
      let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
      let parseState = ParseContext.create(state.facet(language$1).parser, state, {
        from: 0,
        to: vpTo
      });
      if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();
      return new LanguageState(parseState);
    }
  }
  Language.state = /*@__PURE__*/StateField.define({
    create: LanguageState.init,
    update(value, tr) {
      for (let e of tr.effects) if (e.is(Language.setState)) return e.value;
      if (tr.startState.facet(language$1) != tr.state.facet(language$1)) return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  let requestIdle = callback => {
    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
    return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined") requestIdle = callback => {
    let idle = -1,
      timeout = setTimeout(() => {
        idle = requestIdleCallback(callback, {
          timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */
        });
      }, 100 /* Work.MinPause */);
    return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
  const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
  const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
    constructor(view) {
      this.view = view;
      this.working = null;
      this.workScheduled = 0;
      // End of the current time chunk
      this.chunkEnd = -1;
      // Milliseconds of budget left for this chunk
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    update(update) {
      let cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();
      if (update.docChanged) {
        if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
    scheduleWork() {
      if (this.working) return;
      let {
          state
        } = this.view,
        field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);
    }
    work(deadline) {
      this.working = null;
      let now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        // Start a new chunk
        this.chunkEnd = now + 30000 /* Work.ChunkTime */;
        this.chunkBudget = 3000 /* Work.ChunkBudget */;
      }

      if (this.chunkBudget <= 0) return; // No more budget
      let {
          state,
          viewport: {
            to: vpTo
          }
        } = this.view,
        field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;
      let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
      let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
      let done = field.context.work(() => {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({
          effects: Language.setState.of(new LanguageState(field.context))
        });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
    checkAsyncSchedule(cx) {
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(() => this.scheduleWork()).catch(err => logException(this.view.state, err)).then(() => this.workScheduled--);
        cx.scheduleOn = null;
      }
    }
    destroy() {
      if (this.working) this.working();
    }
    isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }, {
    eventHandlers: {
      focus() {
        this.scheduleWork();
      }
    }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  const language$1 = /*@__PURE__*/Facet.define({
    combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: language => [Language.state, parseWorker, EditorView.contentAttributes.compute([language], state => {
      let lang = state.facet(language);
      return lang && lang.name ? {
        "data-language": lang.name
      } : {};
    })]
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  class LanguageSupport {
    /**
    Create a language support object.
    */
    constructor(
    /**
    The language object.
    */
    language,
    /**
    An optional set of supporting extensions. When nesting a
    language in another language, the outer language is encouraged
    to include the supporting extensions for its inner languages
    in its own set of support extensions.
    */
    support = []) {
      this.language = language;
      this.support = support;
      this.extension = [language, support];
    }
  }

  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  const indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens.
  Should be a string consisting either entirely of spaces or
  entirely of tabs. When not set, this defaults to 2 spaces.
  */
  const indentUnit = /*@__PURE__*/Facet.define({
    combine: values => {
      if (!values.length) return "  ";
      if (!/^(?: +|\t+)$/.test(values[0])) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return values[0];
    }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
    let unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
    let result = "",
      ts = state.tabSize;
    if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {
      result += "\t";
      cols -= ts;
    }
    for (let i = 0; i < cols; i++) result += " ";
    return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
    if (context instanceof EditorState) context = new IndentContext(context);
    for (let service of context.state.facet(indentService)) {
      let result = service(context, pos);
      if (result !== undefined) return result;
    }
    let tree = syntaxTree(context.state);
    return tree ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  class IndentContext {
    /**
    Create an indent context.
    */
    constructor(
    /**
    The editor state.
    */
    state,
    /**
    @internal
    */
    options = {}) {
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    lineAt(pos, bias = 1) {
      let line = this.state.doc.lineAt(pos);
      let {
        simulateBreak,
        simulateDoubleBreak
      } = this.options;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos) return {
          text: "",
          from: pos
        };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
          text: line.text.slice(simulateBreak - line.from),
          from: simulateBreak
        };else return {
          text: line.text.slice(0, simulateBreak - line.from),
          from: line.from
        };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    textAfterPos(pos, bias = 1) {
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";
      let {
        text,
        from
      } = this.lineAt(pos, bias);
      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
    }
    /**
    Find the column for the given position.
    */
    column(pos, bias = 1) {
      let {
        text,
        from
      } = this.lineAt(pos, bias);
      let result = this.countColumn(text, pos - from);
      let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
      if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
    countColumn(line, pos = line.length) {
      return countColumn(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
    lineIndent(pos, bias = 1) {
      let {
        text,
        from
      } = this.lineAt(pos, bias);
      let override = this.options.overrideIndentation;
      if (override) {
        let overriden = override(from);
        if (overriden > -1) return overriden;
      }
      return this.countColumn(text, text.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
    get simulatedBreak() {
      return this.options.simulateBreak || null;
    }
  }
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  const indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
  }
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
    let strategy = tree.type.prop(indentNodeProp);
    if (strategy) return strategy;
    let first = tree.firstChild,
      close;
    if (first && (close = first.type.prop(NodeProp.closedBy))) {
      let last = tree.lastChild,
        closed = last && close.indexOf(last.name) > -1;
      return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
    }
    return tree.parent == null ? topIndent : null;
  }
  function indentFrom(node, pos, base) {
    for (; node; node = node.parent) {
      let strategy = indentStrategy(node);
      if (strategy) return strategy(TreeIndentContext.create(base, pos, node));
    }
    return null;
  }
  function topIndent() {
    return 0;
  }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  class TreeIndentContext extends IndentContext {
    constructor(base,
    /**
    The position at which indentation is being computed.
    */
    pos,
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    node) {
      super(base.state, base.options);
      this.base = base;
      this.pos = pos;
      this.node = node;
    }
    /**
    @internal
    */
    static create(base, pos, node) {
      return new TreeIndentContext(base, pos, node);
    }
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    get textAfter() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
    get baseIndent() {
      let line = this.state.doc.lineAt(this.node.from);
      // Skip line starts that are covered by a sibling (or cousin, etc)
      for (;;) {
        let atBreak = this.node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;
        if (isParent(atBreak, this.node)) break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
    continue() {
      let parent = this.node.parent;
      return parent ? indentFrom(parent, this.pos, this.base) : 0;
    }
  }
  function isParent(parent, of) {
    for (let cur = of; cur; cur = cur.parent) if (parent == cur) return true;
    return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
    let tree = context.node;
    let openToken = tree.childAfter(tree.from),
      last = tree.lastChild;
    if (!openToken) return null;
    let sim = context.options.simulateBreak;
    let openLine = context.state.doc.lineAt(openToken.from);
    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (let pos = openToken.to;;) {
      let next = tree.childAfter(pos);
      if (!next || next == last) return null;
      if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
      pos = next.to;
    }
  }
  /**
  An indentation strategy for delimited (usually bracketed) nodes.
  Will, by default, indent one unit more than the parent's base
  indent unless the line starts with a closing token. When `align`
  is true and there are non-skipped nodes on the node's opening
  line, the content of the node will be aligned with the end of the
  opening node, like this:

      foo(bar,
          baz)
  */
  function delimitedIndent({
    closing,
    align = true,
    units = 1
  }) {
    return context => delimitedStrategy(context, align, units, closing);
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
    let after = context.textAfter,
      space = after.match(/^\s*/)[0].length;
    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
    let aligned = align ? bracketedAligned(context) : null;
    if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent({
    except,
    units = 1
  } = {}) {
    return context => {
      let matchExcept = except && except.test(context.textAfter);
      return context.baseIndent + (matchExcept ? 0 : units * context.unit);
    };
  }
  const DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.

  To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
    return EditorState.transactionFilter.of(tr => {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete")) return tr;
      let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length) return tr;
      let doc = tr.newDoc,
        {
          head
        } = tr.newSelection.main,
        line = doc.lineAt(head);
      if (head > line.from + DontIndentBeyond) return tr;
      let lineStart = doc.sliceString(line.from, head);
      if (!rules.some(r => r.test(lineStart))) return tr;
      let {
          state
        } = tr,
        last = -1,
        changes = [];
      for (let {
        head
      } of state.selection.ranges) {
        let line = state.doc.lineAt(head);
        if (line.from == last) continue;
        last = line.from;
        let indent = getIndentation(state, line.from);
        if (indent == null) continue;
        let cur = /^\s*/.exec(line.text)[0];
        let norm = indentString(state, indent);
        if (cur != norm) changes.push({
          from: line.from,
          to: line.from + cur.length,
          insert: norm
        });
      }
      return changes.length ? [tr, {
        changes,
        sequential: true
      }] : tr;
    });
  }
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  const foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
    let first = node.firstChild,
      last = node.lastChild;
    return first && first.to < last.from ? {
      from: first.to,
      to: last.type.isError ? node.to : last.from
    } : null;
  }

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  class HighlightStyle {
    constructor(
    /**
    The tag styles used to create this highlight style.
    */
    specs, options) {
      this.specs = specs;
      let modSpec;
      function def(spec) {
        let cls = StyleModule.newName();
        (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
        return cls;
      }
      const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
      const scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? type => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? type => type == scopeOpt : undefined;
      this.style = tagHighlighter(specs.map(style => ({
        tag: style.tag,
        class: style.class || def(Object.assign({}, style, {
          tag: null
        }))
      })), {
        all
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    static define(specs, options) {
      return new HighlightStyle(specs, options || {});
    }
  }
  const highlighterFacet = /*@__PURE__*/Facet.define();
  const fallbackHighlighter = /*@__PURE__*/Facet.define({
    combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    let main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
    let ext = [treeHighlighter],
      themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));else ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  class TreeHighlighter {
    constructor(view) {
      this.markCache = Object.create(null);
      this.tree = syntaxTree(view.state);
      this.decorations = this.buildDeco(view, getHighlighters(view.state));
    }
    update(update) {
      let tree = syntaxTree(update.state),
        highlighters = getHighlighters(update.state);
      let styleChange = highlighters != getHighlighters(update.startState);
      if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
        this.decorations = this.decorations.map(update.changes);
      } else if (tree != this.tree || update.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(update.view, highlighters);
      }
    }
    buildDeco(view, highlighters) {
      if (!highlighters || !this.tree.length) return Decoration.none;
      let builder = new RangeSetBuilder();
      for (let {
        from,
        to
      } of view.visibleRanges) {
        highlightTree(this.tree, highlighters, (from, to, style) => {
          builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({
            class: style
          })));
        }, from, to);
      }
      return builder.finish();
    }
  }
  const treeHighlighter = /*@__PURE__*/Prec.high( /*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
    decorations: v => v.decorations
  }));
  const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": {
      backgroundColor: "#328c8252"
    },
    "&.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bb555544"
    }
  });
  const DefaultScanDist = 10000,
    DefaultBrackets = "()[]{}";
  const bracketMatchingConfig = /*@__PURE__*/Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  const matchingMark = /*@__PURE__*/Decoration.mark({
      class: "cm-matchingBracket"
    }),
    nonmatchingMark = /*@__PURE__*/Decoration.mark({
      class: "cm-nonmatchingBracket"
    });
  function defaultRenderMatch(match) {
    let decorations = [];
    let mark = match.matched ? matchingMark : nonmatchingMark;
    decorations.push(mark.range(match.start.from, match.start.to));
    if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
    return decorations;
  }
  const bracketMatchingState = /*@__PURE__*/StateField.define({
    create() {
      return Decoration.none;
    },
    update(deco, tr) {
      if (!tr.docChanged && !tr.selection) return deco;
      let decorations = [];
      let config = tr.state.facet(bracketMatchingConfig);
      for (let range of tr.state.selection.ranges) {
        if (!range.empty) continue;
        let match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
        if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));
      }
      return Decoration.set(decorations, true);
    },
    provide: f => EditorView.decorations.from(f)
  });
  const bracketMatchingUnique = [bracketMatchingState, baseTheme$3];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching(config = {}) {
    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  function matchingNodes(node, dir, brackets) {
    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp) return byProp;
    if (node.name.length == 1) {
      let index = brackets.indexOf(node.name);
      if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
    }
    return null;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir, config = {}) {
    let maxScanDistance = config.maxScanDistance || DefaultScanDist,
      brackets = config.brackets || DefaultBrackets;
    let tree = syntaxTree(state),
      node = tree.resolveInner(pos, dir);
    for (let cur = node; cur; cur = cur.parent) {
      let matches = matchingNodes(cur.type, dir, brackets);
      if (matches && cur.from < cur.to) return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
    }
    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
    let parent = token.parent,
      firstToken = {
        from: token.from,
        to: token.to
      };
    let depth = 0,
      cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
      if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          return {
            start: firstToken,
            end: {
              from: cursor.from,
              to: cursor.to
            },
            matched: true
          };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) return {
            start: firstToken,
            end: cursor.from == cursor.to ? undefined : {
              from: cursor.from,
              to: cursor.to
            },
            matched: false
          };
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return {
      start: firstToken,
      matched: false
    };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    let bracket = brackets.indexOf(startCh);
    if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
    let startToken = {
      from: dir < 0 ? pos - 1 : pos,
      to: dir > 0 ? pos + 1 : pos
    };
    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
      depth = 0;
    for (let distance = 0; !iter.next().done && distance <= maxScanDistance;) {
      let text = iter.value;
      if (dir < 0) distance += text.length;
      let basePos = pos + distance * dir;
      for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
        let found = brackets.indexOf(text[pos]);
        if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType) continue;
        if (found % 2 == 0 == dir > 0) {
          depth++;
        } else if (depth == 1) {
          // Closing
          return {
            start: startToken,
            end: {
              from: basePos + pos,
              to: basePos + pos + 1
            },
            matched: found >> 1 == bracket >> 1
          };
        } else {
          depth--;
        }
      }
      if (dir > 0) distance += text.length;
    }
    return iter.done ? {
      start: startToken,
      matched: false
    } : null;
  }
  const noTokens = /*@__PURE__*/Object.create(null);
  const typeArray = [NodeType.none];
  const warned = [];
  const defaultTable = /*@__PURE__*/Object.create(null);
  for (let [legacyName, name] of [["variable", "variableName"], ["variable-2", "variableName.special"], ["string-2", "string.special"], ["def", "variableName.definition"], ["tag", "tagName"], ["attribute", "attributeName"], ["type", "typeName"], ["builtin", "variableName.standard"], ["qualifier", "modifier"], ["error", "invalid"], ["header", "heading"], ["property", "propertyName"]]) defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1) return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    let tag = null;
    for (let part of tagStr.split(".")) {
      let value = extra[part] || tags$1[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!tag) warnForPart(part, `Modifier ${part} used at start of tag`);else tag = value(tag);
      } else {
        if (tag) warnForPart(part, `Tag ${part} used as modifier`);else tag = value;
      }
    }
    if (!tag) return 0;
    let name = tagStr.replace(/ /g, "_"),
      type = NodeType.define({
        id: typeArray.length,
        name,
        props: [styleTags({
          [name]: tag
        })]
      });
    typeArray.push(type);
    return type.id;
  }

  /**
  An instance of this is passed to completion source functions.
  */
  class CompletionContext {
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    constructor(
    /**
    The editor state that the completion happens in.
    */
    state,
    /**
    The position at which the completion is happening.
    */
    pos,
    /**
    Indicates whether completion was activated explicitly, or
    implicitly by typing. The usual way to respond to this is to
    only return completions when either there is part of a
    completable entity before the cursor, or `explicit` is true.
    */
    explicit) {
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      /**
      @internal
      */
      this.abortListeners = [];
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    tokenBefore(types) {
      let token = syntaxTree(this.state).resolveInner(this.pos, -1);
      while (token && types.indexOf(token.name) < 0) token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
    matchBefore(expr) {
      let line = this.state.doc.lineAt(this.pos);
      let start = Math.max(line.from, this.pos - 250);
      let str = line.text.slice(start - line.from, this.pos - line.from);
      let found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : {
        from: start + found,
        to: this.pos,
        text: str.slice(found)
      };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
    get aborted() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    */
    addEventListener(type, listener) {
      if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
    }
  }
  function toSet(chars) {
    let flat = Object.keys(chars).join("");
    let words = /\w/.test(flat);
    if (words) flat = flat.replace(/\w/g, "");
    return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
    let first = Object.create(null),
      rest = Object.create(null);
    for (let {
      label
    } of options) {
      first[label[0]] = true;
      for (let i = 1; i < label.length; i++) rest[label[i]] = true;
    }
    let source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
    let options = list.map(o => typeof o == "string" ? {
      label: o
    } : o);
    let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
    return context => {
      let token = context.matchBefore(match);
      return token || context.explicit ? {
        from: token ? token.from : context.pos,
        options,
        validFor
      } : null;
    };
  }
  class Option {
    constructor(completion, source, match) {
      this.completion = completion;
      this.source = source;
      this.match = match;
    }
  }
  function cur(state) {
    return state.selection.main.head;
  }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
    var _a;
    let {
      source
    } = expr;
    let addStart = start && source[0] != "^",
      addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd) return expr;
    return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  const pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
    return Object.assign(Object.assign({}, state.changeByRange(range => {
      if (range == state.selection.main) return {
        changes: {
          from: from,
          to: to,
          insert: text
        },
        range: EditorSelection.cursor(from + text.length)
      };
      let len = to - from;
      if (!range.empty || len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to)) return {
        range
      };
      return {
        changes: {
          from: range.from - len,
          to: range.from,
          insert: text
        },
        range: EditorSelection.cursor(range.from - len + text.length)
      };
    })), {
      userEvent: "input.complete"
    });
  }
  function applyCompletion(view, option) {
    const apply = option.completion.apply || option.completion.label;
    let result = option.source;
    if (typeof apply == "string") view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), {
      annotations: pickedCompletion.of(option.completion)
    }));else apply(view, option.completion, result.from, result.to);
  }
  const SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source)) return source;
    let known = SourceCache.get(source);
    if (!known) SourceCache.set(source, known = completeFromList(source));
    return known;
  }

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  class FuzzyMatcher {
    constructor(pattern) {
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      // Buffers reused by calls to `match` to track matched character
      // positions.
      this.any = [];
      this.precise = [];
      this.byWord = [];
      for (let p = 0; p < pattern.length;) {
        let char = codePointAt(pattern, p),
          size = codePointSize(char);
        this.chars.push(char);
        let part = pattern.slice(p, p + size),
          upper = part.toUpperCase();
        this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
        p += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    // Matches a given word (completion) against the pattern (input).
    // Will return null for no match, and otherwise an array that starts
    // with the match score, followed by any number of `from, to` pairs
    // indicating the matched parts of `word`.
    //
    // The score is a number that is more negative the worse the match
    // is. See `Penalty` above.
    match(word) {
      if (this.pattern.length == 0) return [0];
      if (word.length < this.pattern.length) return null;
      let {
        chars,
        folded,
        any,
        precise,
        byWord
      } = this;
      // For single-character queries, only match when they occur right
      // at the start
      if (chars.length == 1) {
        let first = codePointAt(word, 0);
        return first == chars[0] ? [0, 0, codePointSize(first)] : first == folded[0] ? [-200 /* Penalty.CaseFold */, 0, codePointSize(first)] : null;
      }
      let direct = word.indexOf(this.pattern);
      if (direct == 0) return [0, 0, this.pattern.length];
      let len = chars.length,
        anyTo = 0;
      if (direct < 0) {
        for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
          let next = codePointAt(word, i);
          if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
          i += codePointSize(next);
        }
        // No match, exit immediately
        if (anyTo < len) return null;
      }
      // This tracks the extent of the precise (non-folded, not
      // necessarily adjacent) match
      let preciseTo = 0;
      // Tracks whether there is a match that hits only characters that
      // appear to be starting words. `byWordFolded` is set to true when
      // a case folded character is encountered in such a match
      let byWordTo = 0,
        byWordFolded = false;
      // If we've found a partial adjacent match, these track its state
      let adjacentTo = 0,
        adjacentStart = -1,
        adjacentEnd = -1;
      let hasLower = /[a-z]/.test(word),
        wordAdjacent = true;
      // Go over the option's text, scanning for the various kinds of matches
      for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
        let next = codePointAt(word, i);
        if (direct < 0) {
          if (preciseTo < len && next == chars[preciseTo]) precise[preciseTo++] = i;
          if (adjacentTo < len) {
            if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
              if (adjacentTo == 0) adjacentStart = i;
              adjacentEnd = i + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        let ch,
          type = next < 0xff ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */ : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */;
        if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
          if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)) byWord[byWordTo++] = i;else if (byWord.length) wordAdjacent = false;
        }
        prevType = type;
        i += codePointSize(next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0) return [-200 /* Penalty.CaseFold */ - word.length, 0, adjacentEnd];
      if (direct > -1) return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];
      if (adjacentTo == len) return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];
      if (byWordTo == len) return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ + (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
    }
    result(score, positions, word) {
      let result = [score - word.length],
        i = 1;
      for (let pos of positions) {
        let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
        if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
          result[i++] = pos;
          result[i++] = to;
        }
      }
      return result;
    }
  }
  const completionConfig = /*@__PURE__*/Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: () => "",
        optionClass: () => "",
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        compareCompletions: (a, b) => a.label.localeCompare(b.label),
        interactionDelay: 75
      }, {
        defaultKeymap: (a, b) => a && b,
        closeOnBlur: (a, b) => a && b,
        icons: (a, b) => a && b,
        tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
        optionClass: (a, b) => c => joinClass(a(c), b(c)),
        addToOptions: (a, b) => a.concat(b)
      });
    }
  });
  function joinClass(a, b) {
    return a ? b ? a + " " + b : a : b;
  }
  function optionContent(config) {
    let content = config.addToOptions.slice();
    if (config.icons) content.push({
      render(completion) {
        let icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type) icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
    content.push({
      render(completion, _s, match) {
        let labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        let {
            label
          } = completion,
          off = 0;
        for (let j = 1; j < match.length;) {
          let from = match[j++],
            to = match[j++];
          if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
          let span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label.slice(from, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render(completion) {
        if (!completion.detail) return null;
        let detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content.sort((a, b) => a.position - b.position).map(a => a.render);
  }
  function rangeAroundSelected(total, selected, max) {
    if (total <= max) return {
      from: 0,
      to: total
    };
    if (selected < 0) selected = 0;
    if (selected <= total >> 1) {
      let off = Math.floor(selected / max);
      return {
        from: off * max,
        to: (off + 1) * max
      };
    }
    let off = Math.floor((total - selected) / max);
    return {
      from: total - (off + 1) * max,
      to: total - off * max
    };
  }
  class CompletionTooltip {
    constructor(view, stateField) {
      this.view = view;
      this.stateField = stateField;
      this.info = null;
      this.placeInfo = {
        read: () => this.measureInfo(),
        write: pos => this.positionInfo(pos),
        key: this
      };
      this.space = null;
      this.currentClass = "";
      let cState = view.state.field(stateField);
      let {
        options,
        selected
      } = cState.open;
      let config = view.state.facet(completionConfig);
      this.optionContent = optionContent(config);
      this.optionClass = config.optionClass;
      this.tooltipClass = config.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view.state);
      this.dom.addEventListener("mousedown", e => {
        for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
            applyCompletion(view, options[+match[1]]);
            e.preventDefault();
            return;
          }
        }
      });
      this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
      this.list.addEventListener("scroll", () => {
        if (this.info) this.view.requestMeasure(this.placeInfo);
      });
    }
    mount() {
      this.updateSel();
    }
    update(update) {
      var _a, _b, _c;
      let cState = update.state.field(this.stateField);
      let prevState = update.startState.field(this.stateField);
      this.updateTooltipClass(update.state);
      if (cState != prevState) {
        this.updateSel();
        if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled)) this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));
      }
    }
    updateTooltipClass(state) {
      let cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        for (let c of this.currentClass.split(" ")) if (c) this.dom.classList.remove(c);
        for (let c of cls.split(" ")) if (c) this.dom.classList.add(c);
        this.currentClass = cls;
      }
    }
    positioned(space) {
      this.space = space;
      if (this.info) this.view.requestMeasure(this.placeInfo);
    }
    updateSel() {
      let cState = this.view.state.field(this.stateField),
        open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
        this.list.addEventListener("scroll", () => {
          if (this.info) this.view.requestMeasure(this.placeInfo);
        });
      }
      if (this.updateSelectedOption(open.selected)) {
        if (this.info) {
          this.info.remove();
          this.info = null;
        }
        let {
          completion
        } = open.options[open.selected];
        let {
          info
        } = completion;
        if (!info) return;
        let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
        if (!infoResult) return;
        if ('then' in infoResult) {
          infoResult.then(node => {
            if (node && this.view.state.field(this.stateField, false) == cState) this.addInfoPane(node);
          }).catch(e => logException(this.view.state, e, "completion info"));
        } else {
          this.addInfoPane(infoResult);
        }
      }
    }
    addInfoPane(content) {
      let dom = this.info = document.createElement("div");
      dom.className = "cm-tooltip cm-completionInfo";
      dom.appendChild(content);
      this.dom.appendChild(dom);
      this.view.requestMeasure(this.placeInfo);
    }
    updateSelectedOption(selected) {
      let set = null;
      for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
        if (i == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
        }
      }
      if (set) scrollIntoView$1(this.list, set);
      return set;
    }
    measureInfo() {
      let sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info) return null;
      let listRect = this.dom.getBoundingClientRect();
      let infoRect = this.info.getBoundingClientRect();
      let selRect = sel.getBoundingClientRect();
      let space = this.space;
      if (!space) {
        let win = this.dom.ownerDocument.defaultView || window;
        space = {
          left: 0,
          top: 0,
          right: win.innerWidth,
          bottom: win.innerHeight
        };
      }
      if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;
      let rtl = this.view.textDirection == Direction.RTL,
        left = rtl,
        narrow = false,
        maxWidth;
      let top = "",
        bottom = "";
      let spaceLeft = listRect.left - space.left,
        spaceRight = space.right - listRect.right;
      if (left && spaceLeft < Math.min(infoRect.width, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft)) left = true;
      if (infoRect.width <= (left ? spaceLeft : spaceRight)) {
        top = Math.max(space.top, Math.min(selRect.top, space.bottom - infoRect.height)) - listRect.top + "px";
        maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight) + "px";
      } else {
        narrow = true;
        maxWidth = Math.min(400 /* Info.Width */, (rtl ? listRect.right : space.right - listRect.left) - 30 /* Info.Margin */) + "px";
        let spaceBelow = space.bottom - listRect.bottom;
        if (spaceBelow >= infoRect.height || spaceBelow > listRect.top)
          // Below the completion
          top = selRect.bottom - listRect.top + "px";else
          // Above it
          bottom = listRect.bottom - selRect.top + "px";
      }
      return {
        top,
        bottom,
        maxWidth,
        class: narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right"
      };
    }
    positionInfo(pos) {
      if (this.info) {
        if (pos) {
          this.info.style.top = pos.top;
          this.info.style.bottom = pos.bottom;
          this.info.style.maxWidth = pos.maxWidth;
          this.info.className = "cm-tooltip cm-completionInfo cm-completionInfo-" + pos.class;
        } else {
          this.info.style.top = "-1e6px";
        }
      }
    }
    createListBox(options, id, range) {
      const ul = document.createElement("ul");
      ul.id = id;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      for (let i = range.from; i < range.to; i++) {
        let {
          completion,
          match
        } = options[i];
        const li = ul.appendChild(document.createElement("li"));
        li.id = id + "-" + i;
        li.setAttribute("role", "option");
        let cls = this.optionClass(completion);
        if (cls) li.className = cls;
        for (let source of this.optionContent) {
          let node = source(completion, this.view.state, match);
          if (node) li.appendChild(node);
        }
      }
      if (range.from) ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
  }
  // We allocate a new function instance every time the completion
  // changes to force redrawing/repositioning of the tooltip
  function completionTooltip(stateField) {
    return view => new CompletionTooltip(view, stateField);
  }
  function scrollIntoView$1(container, element) {
    let parent = container.getBoundingClientRect();
    let self = element.getBoundingClientRect();
    if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
    let options = [],
      i = 0;
    for (let a of active) if (a.hasResult()) {
      if (a.result.filter === false) {
        let getMatch = a.result.getMatch;
        for (let option of a.result.options) {
          let match = [1e9 - i++];
          if (getMatch) for (let n of getMatch(option)) match.push(n);
          options.push(new Option(option, a, match));
        }
      } else {
        let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
          match;
        for (let option of a.result.options) if (match = matcher.match(option.label)) {
          if (option.boost != null) match[0] += option.boost;
          options.push(new Option(option, a, match));
        }
      }
    }
    let result = [],
      prev = null;
    let compare = state.facet(completionConfig).compareCompletions;
    for (let opt of options.sort((a, b) => b.match[0] - a.match[0] || compare(a.completion, b.completion))) {
      if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != null && opt.completion.type != null && prev.type != opt.completion.type || prev.apply != opt.completion.apply) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
      prev = opt.completion;
    }
    return result;
  }
  class CompletionDialog {
    constructor(options, attrs, tooltip, timestamp, selected, disabled) {
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    setSelected(selected, id) {
      return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
    static build(active, state, id, prev, conf) {
      let options = sortOptions(active, state);
      if (!options.length) {
        return prev && active.some(a => a.state == 1 /* State.Pending */) ? new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
      }
      let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        let selectedValue = prev.options[prev.selected].completion;
        for (let i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {
          selected = i;
          break;
        }
      }
      return new CompletionDialog(options, makeAttrs(id, selected), {
        pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
        create: completionTooltip(completionState),
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
    map(changes) {
      return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
        pos: changes.mapPos(this.tooltip.pos)
      }), this.timestamp, this.selected, this.disabled);
    }
  }
  class CompletionState {
    constructor(active, id, open) {
      this.active = active;
      this.id = id;
      this.open = open;
    }
    static start() {
      return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
    update(tr) {
      let {
          state
        } = tr,
        conf = state.facet(completionConfig);
      let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      let active = sources.map(source => {
        let value = this.active.find(s => s.source == source) || new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every((a, i) => a == this.active[i])) active = this.active;
      let open = this.open;
      if (open && tr.docChanged) open = open.map(tr.changes);
      if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active)) open = CompletionDialog.build(active, state, this.id, open, conf);else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */)) open = null;
      if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult())) active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
      for (let effect of tr.effects) if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
      return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
    }
    get tooltip() {
      return this.open ? this.open.tooltip : null;
    }
    get attrs() {
      return this.open ? this.open.attrs : baseAttrs;
    }
  }
  function sameResults(a, b) {
    if (a == b) return true;
    for (let iA = 0, iB = 0;;) {
      while (iA < a.length && !a[iA].hasResult) iA++;
      while (iB < b.length && !b[iB].hasResult) iB++;
      let endA = iA == a.length,
        endB = iB == b.length;
      if (endA || endB) return endA == endB;
      if (a[iA++].result != b[iB++].result) return false;
    }
  }
  const baseAttrs = {
    "aria-autocomplete": "list"
  };
  function makeAttrs(id, selected) {
    let result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id
    };
    if (selected > -1) result["aria-activedescendant"] = id + "-" + selected;
    return result;
  }
  const none = [];
  function getUserEvent(tr) {
    return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
  }
  class ActiveSource {
    constructor(source, state, explicitPos = -1) {
      this.source = source;
      this.state = state;
      this.explicitPos = explicitPos;
    }
    hasResult() {
      return false;
    }
    update(tr, conf) {
      let event = getUserEvent(tr),
        value = this;
      if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* State.Inactive */) value = new ActiveSource(value.source, 0 /* State.Inactive */);
      for (let effect of tr.effects) {
        if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* State.Inactive */);else if (effect.is(setActiveEffect)) for (let active of effect.value) if (active.source == value.source) value = active;
      }
      return value;
    }
    handleUserEvent(tr, type, conf) {
      return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
    }

    handleChange(tr) {
      return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
    map(changes) {
      return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
    }
  }
  class ActiveResult extends ActiveSource {
    constructor(source, explicitPos, result, from, to) {
      super(source, 2 /* State.Result */, explicitPos);
      this.result = result;
      this.from = from;
      this.to = to;
    }
    hasResult() {
      return true;
    }
    handleUserEvent(tr, type, conf) {
      var _a;
      let from = tr.changes.mapPos(this.from),
        to = tr.changes.mapPos(this.to, 1);
      let pos = cur(tr.state);
      if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == "delete" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
      let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos),
        updated;
      if (checkValid(this.result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, this.result, from, to);
      if (this.result.update && (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
      return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
    }
    handleChange(tr) {
      return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
    }
    map(mapping) {
      return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
  }
  function checkValid(validFor, state, from, to) {
    if (!validFor) return false;
    let text = state.sliceDoc(from, to);
    return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  const startCompletionEffect = /*@__PURE__*/StateEffect.define();
  const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
  const setActiveEffect = /*@__PURE__*/StateEffect.define({
    map(sources, mapping) {
      return sources.map(s => s.map(mapping));
    }
  });
  const setSelectedEffect = /*@__PURE__*/StateEffect.define();
  const completionState = /*@__PURE__*/StateField.define({
    create() {
      return CompletionState.start();
    },
    update(value, tr) {
      return value.update(tr);
    },
    provide: f => [showTooltip.from(f, val => val.tooltip), EditorView.contentAttributes.from(f, state => state.attrs)]
  });

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward, by = "option") {
    return view => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
      let step = 1,
        tooltip;
      if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      let {
        length
      } = cState.open.options;
      let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
      if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
      view.dispatch({
        effects: setSelectedEffect.of(selected)
      });
      return true;
    };
  }
  /**
  Accept the current completion.
  */
  const acceptCompletion = view => {
    let cState = view.state.field(completionState, false);
    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay) return false;
    if (!cState.open.disabled) applyCompletion(view, cState.open.options[cState.open.selected]);
    return true;
  };
  /**
  Explicitly start autocompletion.
  */
  const startCompletion = view => {
    let cState = view.state.field(completionState, false);
    if (!cState) return false;
    view.dispatch({
      effects: startCompletionEffect.of(true)
    });
    return true;
  };
  /**
  Close the currently active completion.
  */
  const closeCompletion = view => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */)) return false;
    view.dispatch({
      effects: closeCompletionEffect.of(null)
    });
    return true;
  };
  class RunningQuery {
    constructor(active, context) {
      this.active = active;
      this.context = context;
      this.time = Date.now();
      this.updates = [];
      // Note that 'undefined' means 'not done yet', whereas 'null' means
      // 'query returned null'.
      this.done = undefined;
    }
  }
  const DebounceTime = 50,
    MaxUpdateCount = 50,
    MinAbortTime = 1000;
  const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.composing = 0 /* CompositionState.None */;
      for (let active of view.state.field(completionState).active) if (active.state == 1 /* State.Pending */) this.startQuery(active);
    }
    update(update) {
      let cState = update.state.field(completionState);
      if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState) return;
      let doesReset = update.transactions.some(tr => {
        return (tr.selection || tr.docChanged) && !getUserEvent(tr);
      });
      for (let i = 0; i < this.running.length; i++) {
        let query = this.running[i];
        if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          for (let handler of query.context.abortListeners) {
            try {
              handler();
            } catch (e) {
              logException(this.view.state, e);
            }
          }
          query.context.abortListeners = null;
          this.running.splice(i--, 1);
        } else {
          query.updates.push(...update.transactions);
        }
      }
      if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
      this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
      if (this.composing != 0 /* CompositionState.None */) for (let tr of update.transactions) {
        if (getUserEvent(tr) == "input") this.composing = 2 /* CompositionState.Changed */;else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection) this.composing = 3 /* CompositionState.ChangedAndMoved */;
      }
    }

    startUpdate() {
      this.debounceUpdate = -1;
      let {
          state
        } = this.view,
        cState = state.field(completionState);
      for (let active of cState.active) {
        if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source)) this.startQuery(active);
      }
    }
    startQuery(active) {
      let {
          state
        } = this.view,
        pos = cur(state);
      let context = new CompletionContext(state, pos, active.explicitPos == pos);
      let pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then(result => {
        if (!pending.context.aborted) {
          pending.done = result || null;
          this.scheduleAccept();
        }
      }, err => {
        this.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
        logException(this.view.state, err);
      });
    }
    scheduleAccept() {
      if (this.running.every(q => q.done !== undefined)) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
    accept() {
      var _a;
      if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      let updated = [];
      let conf = this.view.state.facet(completionConfig);
      for (let i = 0; i < this.running.length; i++) {
        let query = this.running[i];
        if (query.done === undefined) continue;
        this.running.splice(i--, 1);
        if (query.done) {
          let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
          // Replay the transactions that happened since the start of
          // the request and see if that preserves the result
          for (let tr of query.updates) active = active.update(tr, conf);
          if (active.hasResult()) {
            updated.push(active);
            continue;
          }
        }
        let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
        if (current && current.state == 1 /* State.Pending */) {
          if (query.done == null) {
            // Explicitly failed. Should clear the pending status if it
            // hasn't been re-set in the meantime.
            let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
            for (let tr of query.updates) active = active.update(tr, conf);
            if (active.state != 1 /* State.Pending */) updated.push(active);
          } else {
            // Cleared by subsequent transactions. Restart.
            this.startQuery(current);
          }
        }
      }
      if (updated.length) this.view.dispatch({
        effects: setActiveEffect.of(updated)
      });
    }
  }, {
    eventHandlers: {
      blur() {
        let state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) this.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
      },
      compositionstart() {
        this.composing = 1 /* CompositionState.Started */;
      },

      compositionend() {
        if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
          // Safari fires compositionend events synchronously, possibly
          // from inside an update, so dispatch asynchronously to avoid reentrancy
          setTimeout(() => this.view.dispatch({
            effects: startCompletionEffect.of(false)
          }), 20);
        }
        this.composing = 0 /* CompositionState.None */;
      }
    }
  });

  const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer",
          padding: "1px 3px",
          lineHeight: 1.2
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"···"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: `${400 /* Info.Width */}px`,
      boxSizing: "border-box"
    },
    ".cm-completionInfo.cm-completionInfo-left": {
      right: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-right": {
      left: "100%"
    },
    ".cm-completionInfo.cm-completionInfo-left-narrow": {
      right: `${30 /* Info.Margin */}px`
    },
    ".cm-completionInfo.cm-completionInfo-right-narrow": {
      left: `${30 /* Info.Margin */}px`
    },
    "&light .cm-snippetField": {
      backgroundColor: "#00000022"
    },
    "&dark .cm-snippetField": {
      backgroundColor: "#ffffff22"
    },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": {
        content: "'ƒ'"
      }
    },
    ".cm-completionIcon-class": {
      "&:after": {
        content: "'○'"
      }
    },
    ".cm-completionIcon-interface": {
      "&:after": {
        content: "'◌'"
      }
    },
    ".cm-completionIcon-variable": {
      "&:after": {
        content: "'𝑥'"
      }
    },
    ".cm-completionIcon-constant": {
      "&:after": {
        content: "'𝐶'"
      }
    },
    ".cm-completionIcon-type": {
      "&:after": {
        content: "'𝑡'"
      }
    },
    ".cm-completionIcon-enum": {
      "&:after": {
        content: "'∪'"
      }
    },
    ".cm-completionIcon-property": {
      "&:after": {
        content: "'□'"
      }
    },
    ".cm-completionIcon-keyword": {
      "&:after": {
        content: "'🔑\uFE0E'"
      } // Disable emoji rendering
    },

    ".cm-completionIcon-namespace": {
      "&:after": {
        content: "'▢'"
      }
    },
    ".cm-completionIcon-text": {
      "&:after": {
        content: "'abc'",
        fontSize: "50%",
        verticalAlign: "middle"
      }
    }
  });
  class FieldPos {
    constructor(field, line, from, to) {
      this.field = field;
      this.line = line;
      this.from = from;
      this.to = to;
    }
  }
  class FieldRange {
    constructor(field, from, to) {
      this.field = field;
      this.from = from;
      this.to = to;
    }
    map(changes) {
      let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
      let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
      return from == null || to == null ? null : new FieldRange(this.field, from, to);
    }
  }
  class Snippet {
    constructor(lines, fieldPositions) {
      this.lines = lines;
      this.fieldPositions = fieldPositions;
    }
    instantiate(state, pos) {
      let text = [],
        lineStart = [pos];
      let lineObj = state.doc.lineAt(pos),
        baseIndent = /^\s*/.exec(lineObj.text)[0];
      for (let line of this.lines) {
        if (text.length) {
          let indent = baseIndent,
            tabs = /^\t*/.exec(line)[0].length;
          for (let i = 0; i < tabs; i++) indent += state.facet(indentUnit);
          lineStart.push(pos + indent.length - tabs);
          line = indent + line.slice(tabs);
        }
        text.push(line);
        pos += line.length + 1;
      }
      let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
      return {
        text,
        ranges
      };
    }
    static parse(template) {
      let fields = [];
      let lines = [],
        positions = [],
        m;
      for (let line of template.split(/\r\n?|\n/)) {
        while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
          let seq = m[1] ? +m[1] : null,
            name = m[2] || m[3] || "",
            found = -1;
          for (let i = 0; i < fields.length; i++) {
            if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;
          }
          if (found < 0) {
            let i = 0;
            while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq)) i++;
            fields.splice(i, 0, {
              seq,
              name
            });
            found = i;
            for (let pos of positions) if (pos.field >= found) pos.field++;
          }
          positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
          line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
        }
        for (let esc; esc = /\\([{}])/.exec(line);) {
          line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
          for (let pos of positions) if (pos.line == lines.length && pos.from > esc.index) {
            pos.from--;
            pos.to--;
          }
        }
        lines.push(line);
      }
      return new Snippet(lines, positions);
    }
  }
  let fieldMarker = /*@__PURE__*/Decoration.widget({
    widget: /*@__PURE__*/new class extends WidgetType {
      toDOM() {
        let span = document.createElement("span");
        span.className = "cm-snippetFieldPosition";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    }()
  });
  let fieldRange = /*@__PURE__*/Decoration.mark({
    class: "cm-snippetField"
  });
  class ActiveSnippet {
    constructor(ranges, active) {
      this.ranges = ranges;
      this.active = active;
      this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
    }
    map(changes) {
      let ranges = [];
      for (let r of this.ranges) {
        let mapped = r.map(changes);
        if (!mapped) return null;
        ranges.push(mapped);
      }
      return new ActiveSnippet(ranges, this.active);
    }
    selectionInsideField(sel) {
      return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
    }
  }
  const setActive = /*@__PURE__*/StateEffect.define({
    map(value, changes) {
      return value && value.map(changes);
    }
  });
  const moveToField = /*@__PURE__*/StateEffect.define();
  const snippetState = /*@__PURE__*/StateField.define({
    create() {
      return null;
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setActive)) return effect.value;
        if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
      }
      if (value && tr.docChanged) value = value.map(tr.changes);
      if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
      return value;
    },
    provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:

      "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

  Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.

  When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.

  On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.

  The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.

  To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
    let snippet = Snippet.parse(template);
    return (editor, _completion, from, to) => {
      let {
        text,
        ranges
      } = snippet.instantiate(editor.state, from);
      let spec = {
        changes: {
          from,
          to,
          insert: Text$1.of(text)
        },
        scrollIntoView: true
      };
      if (ranges.length) spec.selection = fieldSelection(ranges, 0);
      if (ranges.length > 1) {
        let active = new ActiveSnippet(ranges, 0);
        let effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === undefined) effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$2]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return ({
      state,
      dispatch
    }) => {
      let active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0) return false;
      let next = active.active + dir,
        last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
      }));
      return true;
    };
  }
  /**
  A command that clears the active snippet, if any.
  */
  const clearSnippet = ({
    state,
    dispatch
  }) => {
    let active = state.field(snippetState, false);
    if (!active) return false;
    dispatch(state.update({
      effects: setActive.of(null)
    }));
    return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  const nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  const prevSnippetField = /*@__PURE__*/moveField(-1);
  const defaultSnippetKeymap = [{
    key: "Tab",
    run: nextSnippetField,
    shift: prevSnippetField
  }, {
    key: "Escape",
    run: clearSnippet
  }];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  const snippetKeymap = /*@__PURE__*/Facet.define({
    combine(maps) {
      return maps.length ? maps[0] : defaultSnippetKeymap;
    }
  });
  const addSnippetKeymap = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), {
      apply: snippet(template)
    });
  }
  const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
    mousedown(event, view) {
      let active = view.state.field(snippetState, false),
        pos;
      if (!active || (pos = view.posAtCoords({
        x: event.clientX,
        y: event.clientY
      })) == null) return false;
      let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
      if (!match || match.field == active.active) return false;
      view.dispatch({
        selection: fieldSelection(active.ranges, match.field),
        effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
      });
      return true;
    }
  });
  const defaults = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  const closeBracketEffect = /*@__PURE__*/StateEffect.define({
    map(value, mapping) {
      let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? undefined : mapped;
    }
  });
  const skipBracketEffect = /*@__PURE__*/StateEffect.define({
    map(value, mapping) {
      return mapping.mapPos(value);
    }
  });
  const closedBracket = /*@__PURE__*/new class extends RangeValue {}();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  const bracketState = /*@__PURE__*/StateField.define({
    create() {
      return RangeSet.empty;
    },
    update(value, tr) {
      if (tr.selection) {
        let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
        let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
        if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = RangeSet.empty;
      }
      value = value.map(tr.changes);
      for (let effect of tr.effects) {
        if (effect.is(closeBracketEffect)) value = value.update({
          add: [closedBracket.range(effect.value, effect.value + 1)]
        });else if (effect.is(skipBracketEffect)) value = value.update({
          filter: from => from != effect.value
        });
      }
      return value;
    }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
    return [inputHandler, bracketState];
  }
  const definedClosing = "()[]{}<>";
  function closing(ch) {
    for (let i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  const android = typeof navigator == "object" && /*@__PURE__*/ /Android\b/.test(navigator.userAgent);
  const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;
    let sel = view.state.selection.main;
    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
    let tr = insertBracket(view.state, insert);
    if (!tr) return false;
    view.dispatch(tr);
    return true;
  });
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults.brackets;
    for (let tok of tokens) {
      let closed = closing(codePointAt(tok, 0));
      if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults.before);
      if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
    }
    return null;
  }
  function closedBracketAt(state, pos) {
    let found = false;
    state.field(bracketState).between(0, state.doc.length, from => {
      if (from == pos) found = true;
    });
    return found;
  }
  function nextChar(doc, pos) {
    let next = doc.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function handleOpen(state, open, close, closeBefore) {
    let dont = null,
      changes = state.changeByRange(range => {
        if (!range.empty) return {
          changes: [{
            insert: open,
            from: range.from
          }, {
            insert: close,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
        let next = nextChar(state.doc, range.head);
        if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
          changes: {
            insert: open + close,
            from: range.head
          },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleClose(state, _open, close) {
    let dont = null,
      moved = state.selection.ranges.map(range => {
        if (range.empty && nextChar(state.doc, range.head) == close) return EditorSelection.cursor(range.head + close.length);
        return dont = range;
      });
    return dont ? null : state.update({
      selection: EditorSelection.create(moved, state.selection.mainIndex),
      scrollIntoView: true,
      effects: state.selection.ranges.map(({
        from
      }) => skipBracketEffect.of(from))
    });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
    let dont = null,
      changes = state.changeByRange(range => {
        if (!range.empty) return {
          changes: [{
            insert: token,
            from: range.from
          }, {
            insert: token,
            from: range.to
          }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
        let pos = range.head,
          next = nextChar(state.doc, pos),
          start;
        if (next == token) {
          if (nodeStart(state, pos)) {
            return {
              changes: {
                insert: token + token,
                from: pos
              },
              effects: closeBracketEffect.of(pos + token.length),
              range: EditorSelection.cursor(pos + token.length)
            };
          } else if (closedBracketAt(state, pos)) {
            let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
            return {
              range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
              effects: skipBracketEffect.of(pos)
            };
          }
        } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
          return {
            changes: {
              insert: token + token + token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
          if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes)) return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        }
        return {
          range: dont = range
        };
      });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function nodeStart(state, pos) {
    let tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
    let node = syntaxTree(state).resolveInner(pos, -1);
    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
    for (let i = 0; i < 5; i++) {
      let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
      let quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        let first = node.firstChild;
        while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;
          first = first.firstChild;
        }
        return true;
      }
      let parent = node.to == pos && node.parent;
      if (!parent) break;
      node = parent;
    }
    return false;
  }
  function canStartStringAt(state, pos, prefixes) {
    let charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word) return pos;
    for (let prefix of prefixes) {
      let start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word) return start;
    }
    return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion$1(config = {}) {
    return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme$2];
  }
  /**
  Basic keybindings for autocompletion.

   - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  const completionKeymap = [{
    key: "Ctrl-Space",
    run: startCompletion
  }, {
    key: "Escape",
    run: closeCompletion
  }, {
    key: "ArrowDown",
    run: /*@__PURE__*/moveCompletionSelection(true)
  }, {
    key: "ArrowUp",
    run: /*@__PURE__*/moveCompletionSelection(false)
  }, {
    key: "PageDown",
    run: /*@__PURE__*/moveCompletionSelection(true, "page")
  }, {
    key: "PageUp",
    run: /*@__PURE__*/moveCompletionSelection(false, "page")
  }, {
    key: "Enter",
    run: acceptCompletion
  }];
  const completionKeymapExt = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  const toggleComment = target => {
    let config = getConfig(target.state);
    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
    return ({
      state,
      dispatch
    }) => {
      if (state.readOnly) return false;
      let tr = f(option, state);
      if (!tr) return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
  function getConfig(state, pos = state.selection.main.head) {
    let data = state.languageDataAt("commentTokens", pos);
    return data.length ? data[0] : {};
  }
  const SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, {
    open,
    close
  }, from, to) {
    let textBefore = state.sliceDoc(from - SearchMargin, from);
    let textAfter = state.sliceDoc(to, to + SearchMargin);
    let spaceBefore = /\s*$/.exec(textBefore)[0].length,
      spaceAfter = /^\s*/.exec(textAfter)[0].length;
    let beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
      return {
        open: {
          pos: from - spaceBefore,
          margin: spaceBefore && 1
        },
        close: {
          pos: to + spaceAfter,
          margin: spaceAfter && 1
        }
      };
    }
    let startText, endText;
    if (to - from <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from, to);
    } else {
      startText = state.sliceDoc(from, from + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    let startSpace = /^\s*/.exec(startText)[0].length,
      endSpace = /\s*$/.exec(endText)[0].length;
    let endOff = endText.length - endSpace - close.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
      return {
        open: {
          pos: from + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  function selectedLineRanges(state) {
    let ranges = [];
    for (let r of state.selection.ranges) {
      let fromLine = state.doc.lineAt(r.from);
      let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;else ranges.push({
        from: fromLine.from,
        to: toLine.to
      });
    }
    return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
    let tokens = ranges.map(r => getConfig(state, r.from).block);
    if (!tokens.every(c => c)) return null;
    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
      return {
        changes: state.changes(ranges.map((range, i) => {
          if (comments[i]) return [];
          return [{
            from: range.from,
            insert: tokens[i].open + " "
          }, {
            from: range.to,
            insert: " " + tokens[i].close
          }];
        }))
      };
    } else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
      let changes = [];
      for (let i = 0, comment; i < comments.length; i++) if (comment = comments[i]) {
        let token = tokens[i],
          {
            open,
            close
          } = comment;
        changes.push({
          from: open.pos - token.open.length,
          to: open.pos + open.margin
        }, {
          from: close.pos - close.margin,
          to: close.pos + token.close.length
        });
      }
      return {
        changes
      };
    }
    return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state, ranges = state.selection.ranges) {
    let lines = [];
    let prevLine = -1;
    for (let {
      from,
      to
    } of ranges) {
      let startI = lines.length,
        minIndent = 1e9;
      for (let pos = from; pos <= to;) {
        let line = state.doc.lineAt(pos);
        if (line.from > prevLine && (from == to || to > line.from)) {
          prevLine = line.from;
          let token = getConfig(state, pos).line;
          if (!token) continue;
          let indent = /^\s*/.exec(line.text)[0].length;
          let empty = indent == line.length;
          let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
          if (indent < line.text.length && indent < minIndent) minIndent = indent;
          lines.push({
            line,
            comment,
            token,
            indent,
            empty,
            single: false
          });
        }
        pos = line.to + 1;
      }
      if (minIndent < 1e9) for (let i = startI; i < lines.length; i++) if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
      if (lines.length == startI + 1) lines[startI].single = true;
    }
    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
      let changes = [];
      for (let {
        line,
        token,
        indent,
        empty,
        single
      } of lines) if (single || !empty) changes.push({
        from: line.from + indent,
        insert: token + " "
      });
      let changeSet = state.changes(changes);
      return {
        changes: changeSet,
        selection: state.selection.map(changeSet, 1)
      };
    } else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
      let changes = [];
      for (let {
        line,
        comment,
        token
      } of lines) if (comment >= 0) {
        let from = line.from + comment,
          to = from + token.length;
        if (line.text[to - line.from] == " ") to++;
        changes.push({
          from,
          to
        });
      }
      return {
        changes
      };
    }
    return null;
  }
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
    return state.update({
      selection,
      scrollIntoView: true,
      userEvent: "select"
    });
  }
  function moveSel({
    state,
    dispatch
  }, how) {
    let selection = updateSel(state.selection, how);
    if (selection.eq(state.selection)) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
  /**
  Move the selection one character to the right.
  */
  const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection one group to the right.
  */
  const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
  function interestingNode(state, node, bracketProp) {
    if (node.type.prop(bracketProp)) return true;
    let len = node.to - node.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
    let pos = syntaxTree(state).resolveInner(start.head);
    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    // Scan forward through child nodes to see if there's an interesting
    // node ahead.
    for (let at = start.head;;) {
      let next = forward ? pos.childAfter(at) : pos.childBefore(at);
      if (!next) break;
      if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
    }
    let bracket = pos.type.prop(bracketProp),
      match,
      newPos;
    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the cursor over the next syntactic element to the right.
  */
  const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
    return moveSel(view, range => {
      if (!range.empty) return rangeEnd(range, forward);
      let moved = view.moveVertically(range, forward);
      return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
    });
  }
  /**
  Move the selection one line up.
  */
  const cursorLineUp = view => cursorByLine(view, false);
  /**
  Move the selection one line down.
  */
  const cursorLineDown = view => cursorByLine(view, true);
  function pageHeight(view) {
    return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
  }
  function cursorByPage(view, forward) {
    let {
        state
      } = view,
      selection = updateSel(state.selection, range => {
        return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
      });
    if (selection.eq(state.selection)) return false;
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let effect;
    if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom && startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight) effect = EditorView.scrollIntoView(selection.main.head, {
      y: "start",
      yMargin: startPos.top - scrollRect.top
    });
    view.dispatch(setSel(state, selection), {
      effects: effect
    });
    return true;
  }
  /**
  Move the selection one page up.
  */
  const cursorPageUp = view => cursorByPage(view, false);
  /**
  Move the selection one page down.
  */
  const cursorPageDown = view => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
    let line = view.lineBlockAt(start.head),
      moved = view.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (space && start.head != line.from + space) moved = EditorSelection.cursor(line.from + space);
    }
    return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection one line wrap point to the left.
  */
  const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection one line wrap point to the right.
  */
  const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection to the start of the line.
  */
  const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  /**
  Move the selection to the end of the line.
  */
  const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend) {
    let found = false,
      selection = updateSel(state.selection, range => {
        let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
        if (!matching || !matching.end) return range;
        found = true;
        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
      });
    if (!found) return false;
    dispatch(setSel(state, selection));
    return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  const cursorMatchingBracket = ({
    state,
    dispatch
  }) => toMatchingBracket(state, dispatch, false);
  function extendSel(view, how) {
    let selection = updateSel(view.state.selection, range => {
      let head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn);
    });
    if (selection.eq(view.state.selection)) return false;
    view.dispatch(setSel(view.state, selection));
    return true;
  }
  function selectByChar(view, forward) {
    return extendSel(view, range => view.moveByChar(range, forward));
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
  /**
  Move the selection head one character to the right.
  */
  const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
    return extendSel(view, range => view.moveByGroup(range, forward));
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection head one group to the right.
  */
  const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
  /**
  Move the selection head over the next syntactic element to the left.
  */
  const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the selection head over the next syntactic element to the right.
  */
  const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
    return extendSel(view, range => view.moveVertically(range, forward));
  }
  /**
  Move the selection head one line up.
  */
  const selectLineUp = view => selectByLine(view, false);
  /**
  Move the selection head one line down.
  */
  const selectLineDown = view => selectByLine(view, true);
  function selectByPage(view, forward) {
    return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
  }
  /**
  Move the selection head one page up.
  */
  const selectPageUp = view => selectByPage(view, false);
  /**
  Move the selection head one page down.
  */
  const selectPageDown = view => selectByPage(view, true);
  /**
  Move the selection head to the next line boundary.
  */
  const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection head to the previous line boundary.
  */
  const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection head one line boundary to the left.
  */
  const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection head one line boundary to the right.
  */
  const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection head to the start of the line.
  */
  const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  /**
  Move the selection head to the end of the line.
  */
  const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  /**
  Move the selection to the start of the document.
  */
  const cursorDocStart = ({
    state,
    dispatch
  }) => {
    dispatch(setSel(state, {
      anchor: 0
    }));
    return true;
  };
  /**
  Move the selection to the end of the document.
  */
  const cursorDocEnd = ({
    state,
    dispatch
  }) => {
    dispatch(setSel(state, {
      anchor: state.doc.length
    }));
    return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  const selectDocStart = ({
    state,
    dispatch
  }) => {
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: 0
    }));
    return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  const selectDocEnd = ({
    state,
    dispatch
  }) => {
    dispatch(setSel(state, {
      anchor: state.selection.main.anchor,
      head: state.doc.length
    }));
    return true;
  };
  /**
  Select the entire document.
  */
  const selectAll = ({
    state,
    dispatch
  }) => {
    dispatch(state.update({
      selection: {
        anchor: 0,
        head: state.doc.length
      },
      userEvent: "select"
    }));
    return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  const selectLine = ({
    state,
    dispatch
  }) => {
    let ranges = selectedLineBlocks(state).map(({
      from,
      to
    }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
    dispatch(state.update({
      selection: EditorSelection.create(ranges),
      userEvent: "select"
    }));
    return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  const selectParentSyntax = ({
    state,
    dispatch
  }) => {
    let selection = updateSel(state.selection, range => {
      var _a;
      let context = syntaxTree(state).resolveInner(range.head, 1);
      while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) context = context.parent;
      return EditorSelection.range(context.to, context.from);
    });
    dispatch(setSel(state, selection));
    return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  const simplifySelection = ({
    state,
    dispatch
  }) => {
    let cur = state.selection,
      selection = null;
    if (cur.ranges.length > 1) selection = EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
    if (!selection) return false;
    dispatch(setSel(state, selection));
    return true;
  };
  function deleteBy(target, by) {
    if (target.state.readOnly) return false;
    let event = "delete.selection",
      {
        state
      } = target;
    let changes = state.changeByRange(range => {
      let {
        from,
        to
      } = range;
      if (from == to) {
        let towards = by(from);
        if (towards < from) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from = Math.min(from, towards);
        to = Math.max(to, towards);
      } else {
        from = skipAtomic(target, from, false);
        to = skipAtomic(target, to, true);
      }
      return from == to ? {
        range
      } : {
        changes: {
          from,
          to
        },
        range: EditorSelection.cursor(from)
      };
    });
    if (changes.changes.empty) return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
    }));
    return true;
  }
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView) for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target))) ranges.between(pos, pos, (from, to) => {
      if (from < pos && to > pos) pos = forward ? to : from;
    });
    return pos;
  }
  const deleteByChar = (target, forward) => deleteBy(target, pos => {
    let {
        state
      } = target,
      line = state.doc.lineAt(pos),
      before,
      targetPos;
    if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "\t") return pos - 1;
      let col = countColumn(before, state.tabSize),
        drop = col % getIndentUnit(state) || getIndentUnit(state);
      for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++) pos--;
      targetPos = pos;
    } else {
      targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
    }
    return targetPos;
  });
  /**
  Delete the selection, or, for cursor selections, the character
  before the cursor.
  */
  const deleteCharBackward = view => deleteByChar(view, false);
  /**
  Delete the selection or the character after the cursor.
  */
  const deleteCharForward = view => deleteByChar(view, true);
  const deleteByGroup = (target, forward) => deleteBy(target, start => {
    let pos = start,
      {
        state
      } = target,
      line = state.doc.lineAt(pos);
    let categorize = state.charCategorizer(pos);
    for (let cat = null;;) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
        break;
      }
      let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
      let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      let nextCat = categorize(nextChar);
      if (cat != null && nextCat != cat) break;
      if (nextChar != " " || pos != start) cat = nextCat;
      pos = next;
    }
    return pos;
  });
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  const deleteGroupBackward = target => deleteByGroup(target, false);
  /**
  Delete the selection or forward until the end of the next group.
  */
  const deleteGroupForward = target => deleteByGroup(target, true);
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  const deleteToLineEnd = view => deleteBy(view, pos => {
    let lineEnd = view.lineBlockAt(pos).to;
    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line. If the cursor is directly at the start of the
  line, delete the line break before it.
  */
  const deleteToLineStart = view => deleteBy(view, pos => {
    let lineStart = view.lineBlockAt(pos).from;
    return pos > lineStart ? lineStart : Math.max(0, pos - 1);
  });
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  const splitLine = ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    let changes = state.changeByRange(range => {
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: Text$1.of(["", ""])
        },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "input"
    }));
    return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  const transposeChars = ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    let changes = state.changeByRange(range => {
      if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
        range
      };
      let pos = range.from,
        line = state.doc.lineAt(pos);
      let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
      let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
      return {
        changes: {
          from,
          to,
          insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
        },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty) return false;
    dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: "move.character"
    }));
    return true;
  };
  function selectedLineBlocks(state) {
    let blocks = [],
      upto = -1;
    for (let range of state.selection.ranges) {
      let startLine = state.doc.lineAt(range.from),
        endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        let prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({
          from: startLine.from,
          to: endLine.to,
          ranges: [range]
        });
      }
      upto = endLine.number + 1;
    }
    return blocks;
  }
  function moveLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    let changes = [],
      ranges = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward ? block.to == state.doc.length : block.from == 0) continue;
      let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      let size = nextLine.length + 1;
      if (forward) {
        changes.push({
          from: block.to,
          to: nextLine.to
        }, {
          from: block.from,
          insert: nextLine.text + state.lineBreak
        });
        for (let r of block.ranges) ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
      } else {
        changes.push({
          from: nextLine.from,
          to: block.from
        }, {
          from: block.to,
          insert: state.lineBreak + nextLine.text
        });
        for (let r of block.ranges) ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
      }
    }
    if (!changes.length) return false;
    dispatch(state.update({
      changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  /**
  Move the selected lines up one line.
  */
  const moveLineUp = ({
    state,
    dispatch
  }) => moveLine(state, dispatch, false);
  /**
  Move the selected lines down one line.
  */
  const moveLineDown = ({
    state,
    dispatch
  }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
    if (state.readOnly) return false;
    let changes = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward) changes.push({
        from: block.from,
        insert: state.doc.slice(block.from, block.to) + state.lineBreak
      });else changes.push({
        from: block.to,
        insert: state.lineBreak + state.doc.slice(block.from, block.to)
      });
    }
    dispatch(state.update({
      changes,
      scrollIntoView: true,
      userEvent: "input.copyline"
    }));
    return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  const copyLineUp = ({
    state,
    dispatch
  }) => copyLine(state, dispatch, false);
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  const copyLineDown = ({
    state,
    dispatch
  }) => copyLine(state, dispatch, true);
  /**
  Delete selected lines.
  */
  const deleteLine = view => {
    if (view.state.readOnly) return false;
    let {
        state
      } = view,
      changes = state.changes(selectedLineBlocks(state).map(({
        from,
        to
      }) => {
        if (from > 0) from--;else if (to < state.doc.length) to++;
        return {
          from,
          to
        };
      }));
    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
    view.dispatch({
      changes,
      selection,
      scrollIntoView: true,
      userEvent: "delete.line"
    });
    return true;
  };
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
      from: pos,
      to: pos
    };
    let context = syntaxTree(state).resolveInner(pos);
    let before = context.childBefore(pos),
      after = context.childAfter(pos),
      closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
      from: before.to,
      to: after.from
    };
    return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return ({
      state,
      dispatch
    }) => {
      if (state.readOnly) return false;
      let changes = state.changeByRange(range => {
        let {
            from,
            to
          } = range,
          line = state.doc.lineAt(from);
        let explode = !atEof && from == to && isBetweenBrackets(state, from);
        if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        let cx = new IndentContext(state, {
          simulateBreak: from,
          simulateDoubleBreak: !!explode
        });
        let indent = getIndentation(cx, from);
        if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
        while (to < line.to && /\s/.test(line.text[to - line.from])) to++;
        if (explode) ({
          from,
          to
        } = explode);else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
        let insert = ["", indentString(state, indent)];
        if (explode) insert.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: {
            from,
            to,
            insert: Text$1.of(insert)
          },
          range: EditorSelection.cursor(from + 1 + insert[1].length)
        };
      });
      dispatch(state.update(changes, {
        scrollIntoView: true,
        userEvent: "input"
      }));
      return true;
    };
  }
  function changeBySelectedLine(state, f) {
    let atLine = -1;
    return state.changeByRange(range => {
      let changes = [];
      for (let pos = range.from; pos <= range.to;) {
        let line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      let changeSet = state.changes(changes);
      return {
        changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  const indentSelection = ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    let updated = Object.create(null);
    let context = new IndentContext(state, {
      overrideIndentation: start => {
        let found = updated[start];
        return found == null ? -1 : found;
      }
    });
    let changes = changeBySelectedLine(state, (line, changes, range) => {
      let indent = getIndentation(context, line.from);
      if (indent == null) return;
      if (!/\S/.test(line.text)) indent = 0;
      let cur = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent);
      if (cur != norm || range.from < line.from + cur.length) {
        updated[line.from] = indent;
        changes.push({
          from: line.from,
          to: line.from + cur.length,
          insert: norm
        });
      }
    });
    if (!changes.changes.empty) dispatch(state.update(changes, {
      userEvent: "indent"
    }));
    return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  const indentMore = ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      changes.push({
        from: line.from,
        insert: state.facet(indentUnit)
      });
    }), {
      userEvent: "input.indent"
    }));
    return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  const indentLess = ({
    state,
    dispatch
  }) => {
    if (state.readOnly) return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      let space = /^\s*/.exec(line.text)[0];
      if (!space) return;
      let col = countColumn(space, state.tabSize),
        keep = 0;
      let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) keep++;
      changes.push({
        from: line.from + keep,
        to: line.from + space.length,
        insert: insert.slice(keep)
      });
    }), {
      userEvent: "delete.dedent"
    }));
    return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.

   - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  const emacsStyleKeymap = [{
    key: "Ctrl-b",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Ctrl-f",
    run: cursorCharRight,
    shift: selectCharRight
  }, {
    key: "Ctrl-p",
    run: cursorLineUp,
    shift: selectLineUp
  }, {
    key: "Ctrl-n",
    run: cursorLineDown,
    shift: selectLineDown
  }, {
    key: "Ctrl-a",
    run: cursorLineStart,
    shift: selectLineStart
  }, {
    key: "Ctrl-e",
    run: cursorLineEnd,
    shift: selectLineEnd
  }, {
    key: "Ctrl-d",
    run: deleteCharForward
  }, {
    key: "Ctrl-h",
    run: deleteCharBackward
  }, {
    key: "Ctrl-k",
    run: deleteToLineEnd
  }, {
    key: "Ctrl-Alt-h",
    run: deleteGroupBackward
  }, {
    key: "Ctrl-o",
    run: splitLine
  }, {
    key: "Ctrl-t",
    run: transposeChars
  }, {
    key: "Ctrl-v",
    run: cursorPageDown
  }];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)

   - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
   - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
  */
  const standardKeymap = /*@__PURE__*/[{
    key: "ArrowLeft",
    run: cursorCharLeft,
    shift: selectCharLeft,
    preventDefault: true
  }, {
    key: "Mod-ArrowLeft",
    mac: "Alt-ArrowLeft",
    run: cursorGroupLeft,
    shift: selectGroupLeft,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowLeft",
    run: cursorLineBoundaryLeft,
    shift: selectLineBoundaryLeft,
    preventDefault: true
  }, {
    key: "ArrowRight",
    run: cursorCharRight,
    shift: selectCharRight,
    preventDefault: true
  }, {
    key: "Mod-ArrowRight",
    mac: "Alt-ArrowRight",
    run: cursorGroupRight,
    shift: selectGroupRight,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowRight",
    run: cursorLineBoundaryRight,
    shift: selectLineBoundaryRight,
    preventDefault: true
  }, {
    key: "ArrowUp",
    run: cursorLineUp,
    shift: selectLineUp,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowUp",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    mac: "Ctrl-ArrowUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "ArrowDown",
    run: cursorLineDown,
    shift: selectLineDown,
    preventDefault: true
  }, {
    mac: "Cmd-ArrowDown",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    mac: "Ctrl-ArrowDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "PageUp",
    run: cursorPageUp,
    shift: selectPageUp
  }, {
    key: "PageDown",
    run: cursorPageDown,
    shift: selectPageDown
  }, {
    key: "Home",
    run: cursorLineBoundaryBackward,
    shift: selectLineBoundaryBackward,
    preventDefault: true
  }, {
    key: "Mod-Home",
    run: cursorDocStart,
    shift: selectDocStart
  }, {
    key: "End",
    run: cursorLineBoundaryForward,
    shift: selectLineBoundaryForward,
    preventDefault: true
  }, {
    key: "Mod-End",
    run: cursorDocEnd,
    shift: selectDocEnd
  }, {
    key: "Enter",
    run: insertNewlineAndIndent
  }, {
    key: "Mod-a",
    run: selectAll
  }, {
    key: "Backspace",
    run: deleteCharBackward,
    shift: deleteCharBackward
  }, {
    key: "Delete",
    run: deleteCharForward
  }, {
    key: "Mod-Backspace",
    mac: "Alt-Backspace",
    run: deleteGroupBackward
  }, {
    key: "Mod-Delete",
    mac: "Alt-Delete",
    run: deleteGroupForward
  }, {
    mac: "Mod-Backspace",
    run: deleteToLineStart
  }, {
    mac: "Mod-Delete",
    run: deleteToLineEnd
  }].concat( /*@__PURE__*/emacsStyleKeymap.map(b => ({
    mac: b.key,
    run: b.run,
    shift: b.shift
  })));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  */
  const defaultKeymap = /*@__PURE__*/[{
    key: "Alt-ArrowLeft",
    mac: "Ctrl-ArrowLeft",
    run: cursorSyntaxLeft,
    shift: selectSyntaxLeft
  }, {
    key: "Alt-ArrowRight",
    mac: "Ctrl-ArrowRight",
    run: cursorSyntaxRight,
    shift: selectSyntaxRight
  }, {
    key: "Alt-ArrowUp",
    run: moveLineUp
  }, {
    key: "Shift-Alt-ArrowUp",
    run: copyLineUp
  }, {
    key: "Alt-ArrowDown",
    run: moveLineDown
  }, {
    key: "Shift-Alt-ArrowDown",
    run: copyLineDown
  }, {
    key: "Escape",
    run: simplifySelection
  }, {
    key: "Mod-Enter",
    run: insertBlankLine
  }, {
    key: "Alt-l",
    mac: "Ctrl-l",
    run: selectLine
  }, {
    key: "Mod-i",
    run: selectParentSyntax,
    preventDefault: true
  }, {
    key: "Mod-[",
    run: indentLess
  }, {
    key: "Mod-]",
    run: indentMore
  }, {
    key: "Mod-Alt-\\",
    run: indentSelection
  }, {
    key: "Shift-Mod-k",
    run: deleteLine
  }, {
    key: "Shift-Mod-\\",
    run: cursorMatchingBracket
  }, {
    key: "Mod-/",
    run: toggleComment
  }, {
    key: "Alt-A",
    run: toggleBlockComment
  }].concat(standardKeymap);

  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1,
      next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add$3(elt, arguments[i]);
    return elt;
  }
  function add$3(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) ; else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add$3(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child);
    }
  }

  class SelectedDiagnostic {
    constructor(from, to, diagnostic) {
      this.from = from;
      this.to = to;
      this.diagnostic = diagnostic;
    }
  }
  class LintState {
    constructor(diagnostics, panel, selected) {
      this.diagnostics = diagnostics;
      this.panel = panel;
      this.selected = selected;
    }
    static init(diagnostics, panel, state) {
      // Filter the list of diagnostics for which to create markers
      let markedDiagnostics = diagnostics;
      let diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics);
      let ranges = Decoration.set(markedDiagnostics.map(d => {
        // For zero-length ranges or ranges covering only a line break, create a widget
        return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? Decoration.widget({
          widget: new DiagnosticWidget(d),
          diagnostic: d
        }).range(d.from) : Decoration.mark({
          attributes: {
            class: "cm-lintRange cm-lintRange-" + d.severity
          },
          diagnostic: d
        }).range(d.from, d.to);
      }), true);
      return new LintState(ranges, panel, findDiagnostic(ranges));
    }
  }
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
    let found = null;
    diagnostics.between(after, 1e9, (from, to, {
      spec
    }) => {
      if (diagnostic && spec.diagnostic != diagnostic) return;
      found = new SelectedDiagnostic(from, to, spec.diagnostic);
      return false;
    });
    return found;
  }
  function hideTooltip(tr, tooltip) {
    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
  }
  function maybeEnableLint(state, effects) {
    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([lintState, EditorView.decorations.compute([lintState], state => {
      let {
        selected,
        panel
      } = state.field(lintState);
      return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([activeMark.range(selected.from, selected.to)]);
    }), hoverTooltip(lintTooltip, {
      hideOn: hideTooltip
    }), baseTheme$1]));
  }
  /**
  Returns a transaction spec which updates the current set of
  diagnostics, and enables the lint extension if if wasn't already
  active.
  */
  function setDiagnostics(state, diagnostics) {
    return {
      effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
    };
  }
  /**
  The state effect that updates the set of active diagnostics. Can
  be useful when writing an extension that needs to track these.
  */
  const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
  const togglePanel = /*@__PURE__*/StateEffect.define();
  const movePanelSelection = /*@__PURE__*/StateEffect.define();
  const lintState = /*@__PURE__*/StateField.define({
    create() {
      return new LintState(Decoration.none, null, null);
    },
    update(value, tr) {
      if (tr.docChanged) {
        let mapped = value.diagnostics.map(tr.changes),
          selected = null;
        if (value.selected) {
          let selPos = tr.changes.mapPos(value.selected.from, 1);
          selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
        }
        value = new LintState(mapped, value.panel, selected);
      }
      for (let effect of tr.effects) {
        if (effect.is(setDiagnosticsEffect)) {
          value = LintState.init(effect.value, value.panel, tr.state);
        } else if (effect.is(togglePanel)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
      return value;
    },
    provide: f => [showPanel.from(f, val => val.panel), EditorView.decorations.from(f, s => s.diagnostics)]
  });
  const activeMark = /*@__PURE__*/Decoration.mark({
    class: "cm-lintRange cm-lintRange-active"
  });
  function lintTooltip(view, pos, side) {
    let {
      diagnostics
    } = view.state.field(lintState);
    let found = [],
      stackStart = 2e8,
      stackEnd = 0;
    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, {
      spec
    }) => {
      if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
        found.push(spec.diagnostic);
        stackStart = Math.min(from, stackStart);
        stackEnd = Math.max(to, stackEnd);
      }
    });
    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
    if (diagnosticFilter) found = diagnosticFilter(found);
    if (!found.length) return null;
    return {
      pos: stackStart,
      end: stackEnd,
      above: view.state.doc.lineAt(stackStart).to < stackEnd,
      create() {
        return {
          dom: diagnosticsTooltip(view, found)
        };
      }
    };
  }
  function diagnosticsTooltip(view, diagnostics) {
    return crelt("ul", {
      class: "cm-tooltip-lint"
    }, diagnostics.map(d => renderDiagnostic(view, d, false)));
  }
  /**
  Command to close the lint panel, when open.
  */
  const closeLintPanel = view => {
    let field = view.state.field(lintState, false);
    if (!field || !field.panel) return false;
    view.dispatch({
      effects: togglePanel.of(false)
    });
    return true;
  };
  const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.timeout = -1;
      this.set = true;
      let {
        delay
      } = view.state.facet(lintConfig);
      this.lintTime = Date.now() + delay;
      this.run = this.run.bind(this);
      this.timeout = setTimeout(this.run, delay);
    }
    run() {
      let now = Date.now();
      if (now < this.lintTime - 10) {
        setTimeout(this.run, this.lintTime - now);
      } else {
        this.set = false;
        let {
            state
          } = this.view,
          {
            sources
          } = state.facet(lintConfig);
        Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
          let all = annotations.reduce((a, b) => a.concat(b));
          if (this.view.state.doc == state.doc) this.view.dispatch(setDiagnostics(this.view.state, all));
        }, error => {
          logException(this.view.state, error);
        });
      }
    }
    update(update) {
      let config = update.state.facet(lintConfig);
      if (update.docChanged || config != update.startState.facet(lintConfig)) {
        this.lintTime = Date.now() + config.delay;
        if (!this.set) {
          this.set = true;
          this.timeout = setTimeout(this.run, config.delay);
        }
      }
    }
    force() {
      if (this.set) {
        this.lintTime = Date.now();
        this.run();
      }
    }
    destroy() {
      clearTimeout(this.timeout);
    }
  });
  const lintConfig = /*@__PURE__*/Facet.define({
    combine(input) {
      return Object.assign({
        sources: input.map(i => i.source)
      }, combineConfig(input.map(i => i.config), {
        delay: 750,
        markerFilter: null,
        tooltipFilter: null
      }));
    },
    enables: lintPlugin
  });
  /**
  Given a diagnostic source, this function returns an extension that
  enables linting with that source. It will be called whenever the
  editor is idle (after its content changed).
  */
  function linter$1(source, config = {}) {
    return lintConfig.of({
      source,
      config
    });
  }
  function assignKeys(actions) {
    let assigned = [];
    if (actions) actions: for (let {
      name
    } of actions) {
      for (let i = 0; i < name.length; i++) {
        let ch = name[i];
        if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
          assigned.push(ch);
          continue actions;
        }
      }
      assigned.push("");
    }
    return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
    var _a;
    let keys = inPanel ? assignKeys(diagnostic.actions) : [];
    return crelt("li", {
      class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity
    }, crelt("span", {
      class: "cm-diagnosticText"
    }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
      let click = e => {
        e.preventDefault();
        let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
        if (found) action.apply(view, found.from, found.to);
      };
      let {
          name
        } = action,
        keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
      let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), crelt("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
      return crelt("button", {
        type: "button",
        class: "cm-diagnosticAction",
        onclick: click,
        onmousedown: click,
        "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
      }, nameElt);
    }), diagnostic.source && crelt("div", {
      class: "cm-diagnosticSource"
    }, diagnostic.source));
  }
  class DiagnosticWidget extends WidgetType {
    constructor(diagnostic) {
      super();
      this.diagnostic = diagnostic;
    }
    eq(other) {
      return other.diagnostic == this.diagnostic;
    }
    toDOM() {
      return crelt("span", {
        class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
      });
    }
  }
  class PanelItem {
    constructor(view, diagnostic) {
      this.diagnostic = diagnostic;
      this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
      this.dom = renderDiagnostic(view, diagnostic, true);
      this.dom.id = this.id;
      this.dom.setAttribute("role", "option");
    }
  }
  class LintPanel {
    constructor(view) {
      this.view = view;
      this.items = [];
      let onkeydown = event => {
        if (event.keyCode == 27) {
          // Escape
          closeLintPanel(this.view);
          this.view.focus();
        } else if (event.keyCode == 38 || event.keyCode == 33) {
          // ArrowUp, PageUp
          this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
        } else if (event.keyCode == 40 || event.keyCode == 34) {
          // ArrowDown, PageDown
          this.moveSelection((this.selectedIndex + 1) % this.items.length);
        } else if (event.keyCode == 36) {
          // Home
          this.moveSelection(0);
        } else if (event.keyCode == 35) {
          // End
          this.moveSelection(this.items.length - 1);
        } else if (event.keyCode == 13) {
          // Enter
          this.view.focus();
        } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
          // A-Z
          let {
              diagnostic
            } = this.items[this.selectedIndex],
            keys = assignKeys(diagnostic.actions);
          for (let i = 0; i < keys.length; i++) if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
            if (found) diagnostic.actions[i].apply(view, found.from, found.to);
          }
        } else {
          return;
        }
        event.preventDefault();
      };
      let onclick = event => {
        for (let i = 0; i < this.items.length; i++) {
          if (this.items[i].dom.contains(event.target)) this.moveSelection(i);
        }
      };
      this.list = crelt("ul", {
        tabIndex: 0,
        role: "listbox",
        "aria-label": this.view.state.phrase("Diagnostics"),
        onkeydown,
        onclick
      });
      this.dom = crelt("div", {
        class: "cm-panel-lint"
      }, this.list, crelt("button", {
        type: "button",
        name: "close",
        "aria-label": this.view.state.phrase("close"),
        onclick: () => closeLintPanel(this.view)
      }, "×"));
      this.update();
    }
    get selectedIndex() {
      let selected = this.view.state.field(lintState).selected;
      if (!selected) return -1;
      for (let i = 0; i < this.items.length; i++) if (this.items[i].diagnostic == selected.diagnostic) return i;
      return -1;
    }
    update() {
      let {
        diagnostics,
        selected
      } = this.view.state.field(lintState);
      let i = 0,
        needsSync = false,
        newSelectedItem = null;
      diagnostics.between(0, this.view.state.doc.length, (_start, _end, {
        spec
      }) => {
        let found = -1,
          item;
        for (let j = i; j < this.items.length; j++) if (this.items[j].diagnostic == spec.diagnostic) {
          found = j;
          break;
        }
        if (found < 0) {
          item = new PanelItem(this.view, spec.diagnostic);
          this.items.splice(i, 0, item);
          needsSync = true;
        } else {
          item = this.items[found];
          if (found > i) {
            this.items.splice(i, found - i);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i++;
      });
      while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: () => ({
            sel: newSelectedItem.dom.getBoundingClientRect(),
            panel: this.list.getBoundingClientRect()
          }),
          write: ({
            sel,
            panel
          }) => {
            if (sel.top < panel.top) this.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) this.list.scrollTop += sel.bottom - panel.bottom;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync) this.sync();
    }
    sync() {
      let domPos = this.list.firstChild;
      function rm() {
        let prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      for (let item of this.items) {
        if (item.dom.parentNode == this.list) {
          while (domPos != item.dom) rm();
          domPos = item.dom.nextSibling;
        } else {
          this.list.insertBefore(item.dom, domPos);
        }
      }
      while (domPos) rm();
    }
    moveSelection(selectedIndex) {
      if (this.selectedIndex < 0) return;
      let field = this.view.state.field(lintState);
      let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection) return;
      this.view.dispatch({
        selection: {
          anchor: selection.from,
          head: selection.to
        },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
    static open(view) {
      return new LintPanel(view);
    }
  }
  function svg(content, attrs = `viewBox="0 0 40 40"`) {
    return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
  }
  function underline(color) {
    return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
    ".cm-diagnostic": {
      padding: "3px 6px 3px 8px",
      marginLeft: "-1px",
      display: "block",
      whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": {
      borderLeft: "5px solid #d11"
    },
    ".cm-diagnostic-warning": {
      borderLeft: "5px solid orange"
    },
    ".cm-diagnostic-info": {
      borderLeft: "5px solid #999"
    },
    ".cm-diagnosticAction": {
      font: "inherit",
      border: "none",
      padding: "2px 4px",
      backgroundColor: "#444",
      color: "white",
      borderRadius: "3px",
      marginLeft: "8px"
    },
    ".cm-diagnosticSource": {
      fontSize: "70%",
      opacity: .7
    },
    ".cm-lintRange": {
      backgroundPosition: "left bottom",
      backgroundRepeat: "repeat-x",
      paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": {
      backgroundImage: /*@__PURE__*/underline("#d11")
    },
    ".cm-lintRange-warning": {
      backgroundImage: /*@__PURE__*/underline("orange")
    },
    ".cm-lintRange-info": {
      backgroundImage: /*@__PURE__*/underline("#999")
    },
    ".cm-lintRange-active": {
      backgroundColor: "#ffdd9980"
    },
    ".cm-tooltip-lint": {
      padding: 0,
      margin: 0
    },
    ".cm-lintPoint": {
      position: "relative",
      "&:after": {
        content: '""',
        position: "absolute",
        bottom: 0,
        left: "-2px",
        borderLeft: "3px solid transparent",
        borderRight: "3px solid transparent",
        borderBottom: "4px solid #d11"
      }
    },
    ".cm-lintPoint-warning": {
      "&:after": {
        borderBottomColor: "orange"
      }
    },
    ".cm-lintPoint-info": {
      "&:after": {
        borderBottomColor: "#999"
      }
    },
    ".cm-panel.cm-panel-lint": {
      position: "relative",
      "& ul": {
        maxHeight: "100px",
        overflowY: "auto",
        "& [aria-selected]": {
          backgroundColor: "#ddd",
          "& u": {
            textDecoration: "underline"
          }
        },
        "&:focus [aria-selected]": {
          background_fallback: "#bdf",
          backgroundColor: "Highlight",
          color_fallback: "white",
          color: "HighlightText"
        },
        "& u": {
          textDecoration: "none"
        },
        padding: 0,
        margin: 0
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "2px",
        background: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      }
    }
  });

  /// A parse stack. These are used internally by the parser to track
  /// parsing progress. They also provide some properties and methods
  /// that external code such as a tokenizer can use to get information
  /// about the parse state.
  class Stack {
    /// @internal
    constructor(
    /// The parse that this stack is part of @internal
    p,
    /// Holds state, input pos, buffer index triplets for all but the
    /// top state @internal
    stack,
    /// The current parse state @internal
    state,
    // The position at which the next reduce should take place. This
    // can be less than `this.pos` when skipped expressions have been
    // added to the stack (which should be moved outside of the next
    // reduction)
    /// @internal
    reducePos,
    /// The input position up to which this stack has parsed.
    pos,
    /// The dynamic score of the stack, including dynamic precedence
    /// and error-recovery penalties
    /// @internal
    score,
    // The output buffer. Holds (type, start, end, size) quads
    // representing nodes created by the parser, where `size` is
    // amount of buffer array entries covered by this node.
    /// @internal
    buffer,
    // The base offset of the buffer. When stacks are split, the split
    // instance shared the buffer history with its parent up to
    // `bufferBase`, which is the absolute offset (including the
    // offset of previous splits) into the buffer at which this stack
    // starts writing.
    /// @internal
    bufferBase,
    /// @internal
    curContext,
    /// @internal
    lookAhead = 0,
    // A parent stack from which this was split off, if any. This is
    // set up so that it always points to a stack that has some
    // additional buffer content, never to a stack with an equal
    // `bufferBase`.
    /// @internal
    parent) {
      this.p = p;
      this.stack = stack;
      this.state = state;
      this.reducePos = reducePos;
      this.pos = pos;
      this.score = score;
      this.buffer = buffer;
      this.bufferBase = bufferBase;
      this.curContext = curContext;
      this.lookAhead = lookAhead;
      this.parent = parent;
    }
    /// @internal
    toString() {
      return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
    }
    // Start an empty stack
    /// @internal
    static start(p, state, pos = 0) {
      let cx = p.parser.context;
      return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
    }
    /// The stack's current [context](#lr.ContextTracker) value, if
    /// any. Its type will depend on the context tracker's type
    /// parameter, or it will be `null` if there is no context
    /// tracker.
    get context() {
      return this.curContext ? this.curContext.context : null;
    }
    // Push a state onto the stack, tracking its start position as well
    // as the buffer base at that point.
    /// @internal
    pushState(state, start) {
      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
      this.state = state;
    }
    // Apply a reduce action
    /// @internal
    reduce(action) {
      let depth = action >> 19 /* ReduceDepthShift */,
        type = action & 65535 /* ValueMask */;
      let {
        parser
      } = this.p;
      let dPrec = parser.dynamicPrecedence(type);
      if (dPrec) this.score += dPrec;
      if (depth == 0) {
        this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
        // Zero-depth reductions are a special case—they add stuff to
        // the stack without popping anything off.
        if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);
        this.reduceContext(type, this.reducePos);
        return;
      }
      // Find the base index into `this.stack`, content after which will
      // be dropped. Note that with `StayFlag` reductions we need to
      // consume two extra frames (the dummy parent node for the skipped
      // expression and the state that we'll be staying in, which should
      // be moved to `this.state`).
      let base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* StayFlag */ ? 6 : 0);
      let start = this.stack[base - 2];
      let bufferBase = this.stack[base - 1],
        count = this.bufferBase + this.buffer.length - bufferBase;
      // Store normal terms or `R -> R R` repeat reductions
      if (type < parser.minRepeatTerm || action & 131072 /* RepeatFlag */) {
        let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
        this.storeNode(type, start, pos, count + 4, true);
      }
      if (action & 262144 /* StayFlag */) {
        this.state = this.stack[base];
      } else {
        let baseStateID = this.stack[base - 3];
        this.state = parser.getGoto(baseStateID, type, true);
      }
      while (this.stack.length > base) this.stack.pop();
      this.reduceContext(type, start);
    }
    // Shift a value into the buffer
    /// @internal
    storeNode(term, start, end, size = 4, isReduce = false) {
      if (term == 0 /* Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
        // Try to omit/merge adjacent error nodes
        let cur = this,
          top = this.buffer.length;
        if (top == 0 && cur.parent) {
          top = cur.bufferBase - cur.parent.bufferBase;
          cur = cur.parent;
        }
        if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
          if (start == end) return;
          if (cur.buffer[top - 2] >= start) {
            cur.buffer[top - 2] = end;
            return;
          }
        }
      }
      if (!isReduce || this.pos == end) {
        // Simple case, just append
        this.buffer.push(term, start, end, size);
      } else {
        // There may be skipped nodes that have to be moved forward
        let index = this.buffer.length;
        if (index > 0 && this.buffer[index - 4] != 0 /* Err */) while (index > 0 && this.buffer[index - 2] > end) {
          // Move this record forward
          this.buffer[index] = this.buffer[index - 4];
          this.buffer[index + 1] = this.buffer[index - 3];
          this.buffer[index + 2] = this.buffer[index - 2];
          this.buffer[index + 3] = this.buffer[index - 1];
          index -= 4;
          if (size > 4) size -= 4;
        }
        this.buffer[index] = term;
        this.buffer[index + 1] = start;
        this.buffer[index + 2] = end;
        this.buffer[index + 3] = size;
      }
    }
    // Apply a shift action
    /// @internal
    shift(action, next, nextEnd) {
      let start = this.pos;
      if (action & 131072 /* GotoFlag */) {
        this.pushState(action & 65535 /* ValueMask */, this.pos);
      } else if ((action & 262144 /* StayFlag */) == 0) {
        // Regular shift
        let nextState = action,
          {
            parser
          } = this.p;
        if (nextEnd > this.pos || next <= parser.maxNode) {
          this.pos = nextEnd;
          if (!parser.stateFlag(nextState, 1 /* Skipped */)) this.reducePos = nextEnd;
        }
        this.pushState(nextState, start);
        this.shiftContext(next, start);
        if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
      } else {
        // Shift-and-stay, which means this is a skipped token
        this.pos = nextEnd;
        this.shiftContext(next, start);
        if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
      }
    }
    // Apply an action
    /// @internal
    apply(action, next, nextEnd) {
      if (action & 65536 /* ReduceFlag */) this.reduce(action);else this.shift(action, next, nextEnd);
    }
    // Add a prebuilt (reused) node into the buffer.
    /// @internal
    useNode(value, next) {
      let index = this.p.reused.length - 1;
      if (index < 0 || this.p.reused[index] != value) {
        this.p.reused.push(value);
        index++;
      }
      let start = this.pos;
      this.reducePos = this.pos = start + value.length;
      this.pushState(next, start);
      this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
      if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
    }
    // Split the stack. Due to the buffer sharing and the fact
    // that `this.stack` tends to stay quite shallow, this isn't very
    // expensive.
    /// @internal
    split() {
      let parent = this;
      let off = parent.buffer.length;
      // Because the top of the buffer (after this.pos) may be mutated
      // to reorder reductions and skipped tokens, and shared buffers
      // should be immutable, this copies any outstanding skipped tokens
      // to the new buffer, and puts the base pointer before them.
      while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;
      let buffer = parent.buffer.slice(off),
        base = parent.bufferBase + off;
      // Make sure parent points to an actual parent with content, if there is such a parent.
      while (parent && base == parent.bufferBase) parent = parent.parent;
      return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
    }
    // Try to recover from an error by 'deleting' (ignoring) one token.
    /// @internal
    recoverByDelete(next, nextEnd) {
      let isNode = next <= this.p.parser.maxNode;
      if (isNode) this.storeNode(next, this.pos, nextEnd, 4);
      this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
      this.pos = this.reducePos = nextEnd;
      this.score -= 190 /* Delete */;
    }
    /// Check if the given term would be able to be shifted (optionally
    /// after some reductions) on this stack. This can be useful for
    /// external tokenizers that want to make sure they only provide a
    /// given token when it applies.
    canShift(term) {
      for (let sim = new SimulatedStack(this);;) {
        let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
        if (action == 0) return false;
        if ((action & 65536 /* ReduceFlag */) == 0) return true;
        sim.reduce(action);
      }
    }
    // Apply up to Recover.MaxNext recovery actions that conceptually
    // inserts some missing token or rule.
    /// @internal
    recoverByInsert(next) {
      if (this.stack.length >= 300 /* MaxInsertStackDepth */) return [];
      let nextStates = this.p.parser.nextStates(this.state);
      if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
        let best = [];
        for (let i = 0, s; i < nextStates.length; i += 2) {
          if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);
        }
        if (this.stack.length < 120 /* DampenInsertStackDepth */) for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
          let s = nextStates[i + 1];
          if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);
        }
        nextStates = best;
      }
      let result = [];
      for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
        let s = nextStates[i + 1];
        if (s == this.state) continue;
        let stack = this.split();
        stack.pushState(s, this.pos);
        stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
        stack.shiftContext(nextStates[i], this.pos);
        stack.score -= 200 /* Insert */;
        result.push(stack);
      }
      return result;
    }
    // Force a reduce, if possible. Return false if that can't
    // be done.
    /// @internal
    forceReduce() {
      let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
      if ((reduce & 65536 /* ReduceFlag */) == 0) return false;
      let {
        parser
      } = this.p;
      if (!parser.validAction(this.state, reduce)) {
        let depth = reduce >> 19 /* ReduceDepthShift */,
          term = reduce & 65535 /* ValueMask */;
        let target = this.stack.length - depth * 3;
        if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;
        this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
        this.score -= 100 /* Reduce */;
      }

      this.reducePos = this.pos;
      this.reduce(reduce);
      return true;
    }
    /// @internal
    forceAll() {
      while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {
        if (!this.forceReduce()) {
          this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);
          break;
        }
      }
      return this;
    }
    /// Check whether this state has no further actions (assumed to be a direct descendant of the
    /// top state, since any other states must be able to continue
    /// somehow). @internal
    get deadEnd() {
      if (this.stack.length != 3) return false;
      let {
        parser
      } = this.p;
      return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ && !parser.stateSlot(this.state, 4 /* DefaultReduce */);
    }
    /// Restart the stack (put it back in its start state). Only safe
    /// when this.stack.length == 3 (state is directly below the top
    /// state). @internal
    restart() {
      this.state = this.stack[0];
      this.stack.length = 0;
    }
    /// @internal
    sameState(other) {
      if (this.state != other.state || this.stack.length != other.stack.length) return false;
      for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;
      return true;
    }
    /// Get the parser used by this stack.
    get parser() {
      return this.p.parser;
    }
    /// Test whether a given dialect (by numeric ID, as exported from
    /// the terms file) is enabled.
    dialectEnabled(dialectID) {
      return this.p.parser.dialect.flags[dialectID];
    }
    shiftContext(term, start) {
      if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    reduceContext(term, start) {
      if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    /// @internal
    emitContext() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
    }
    /// @internal
    emitLookAhead() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
    }
    updateContext(context) {
      if (context != this.curContext.context) {
        let newCx = new StackContext(this.curContext.tracker, context);
        if (newCx.hash != this.curContext.hash) this.emitContext();
        this.curContext = newCx;
      }
    }
    /// @internal
    setLookAhead(lookAhead) {
      if (lookAhead > this.lookAhead) {
        this.emitLookAhead();
        this.lookAhead = lookAhead;
      }
    }
    /// @internal
    close() {
      if (this.curContext && this.curContext.tracker.strict) this.emitContext();
      if (this.lookAhead > 0) this.emitLookAhead();
    }
  }
  class StackContext {
    constructor(tracker, context) {
      this.tracker = tracker;
      this.context = context;
      this.hash = tracker.strict ? tracker.hash(context) : 0;
    }
  }
  var Recover;
  (function (Recover) {
    Recover[Recover["Insert"] = 200] = "Insert";
    Recover[Recover["Delete"] = 190] = "Delete";
    Recover[Recover["Reduce"] = 100] = "Reduce";
    Recover[Recover["MaxNext"] = 4] = "MaxNext";
    Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
    Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
  })(Recover || (Recover = {}));
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
    constructor(start) {
      this.start = start;
      this.state = start.state;
      this.stack = start.stack;
      this.base = this.stack.length;
    }
    reduce(action) {
      let term = action & 65535 /* ValueMask */,
        depth = action >> 19 /* ReduceDepthShift */;
      if (depth == 0) {
        if (this.stack == this.start.stack) this.stack = this.stack.slice();
        this.stack.push(this.state, 0, 0);
        this.base += 3;
      } else {
        this.base -= (depth - 1) * 3;
      }
      let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
      this.state = goto;
    }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
    constructor(stack, pos, index) {
      this.stack = stack;
      this.pos = pos;
      this.index = index;
      this.buffer = stack.buffer;
      if (this.index == 0) this.maybeNext();
    }
    static create(stack, pos = stack.bufferBase + stack.buffer.length) {
      return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
    }
    maybeNext() {
      let next = this.stack.parent;
      if (next != null) {
        this.index = this.stack.bufferBase - next.bufferBase;
        this.stack = next;
        this.buffer = next.buffer;
      }
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    next() {
      this.index -= 4;
      this.pos -= 4;
      if (this.index == 0) this.maybeNext();
    }
    fork() {
      return new StackBufferCursor(this.stack, this.pos, this.index);
    }
  }
  class CachedToken {
    constructor() {
      this.start = -1;
      this.value = -1;
      this.end = -1;
      this.extended = -1;
      this.lookAhead = 0;
      this.mask = 0;
      this.context = 0;
    }
  }
  const nullToken = new CachedToken();
  /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
  /// through this interface. It presents the input as a stream of
  /// characters, tracking lookahead and hiding the complexity of
  /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
  class InputStream {
    /// @internal
    constructor(
    /// @internal
    input,
    /// @internal
    ranges) {
      this.input = input;
      this.ranges = ranges;
      /// @internal
      this.chunk = "";
      /// @internal
      this.chunkOff = 0;
      /// Backup chunk
      this.chunk2 = "";
      this.chunk2Pos = 0;
      /// The character code of the next code unit in the input, or -1
      /// when the stream is at the end of the input.
      this.next = -1;
      /// @internal
      this.token = nullToken;
      this.rangeIndex = 0;
      this.pos = this.chunkPos = ranges[0].from;
      this.range = ranges[0];
      this.end = ranges[ranges.length - 1].to;
      this.readNext();
    }
    /// @internal
    resolveOffset(offset, assoc) {
      let range = this.range,
        index = this.rangeIndex;
      let pos = this.pos + offset;
      while (pos < range.from) {
        if (!index) return null;
        let next = this.ranges[--index];
        pos -= range.from - next.to;
        range = next;
      }
      while (assoc < 0 ? pos > range.to : pos >= range.to) {
        if (index == this.ranges.length - 1) return null;
        let next = this.ranges[++index];
        pos += next.from - range.to;
        range = next;
      }
      return pos;
    }
    /// @internal
    clipPos(pos) {
      if (pos >= this.range.from && pos < this.range.to) return pos;
      for (let range of this.ranges) if (range.to > pos) return Math.max(pos, range.from);
      return this.end;
    }
    /// Look at a code unit near the stream position. `.peek(0)` equals
    /// `.next`, `.peek(-1)` gives you the previous character, and so
    /// on.
    ///
    /// Note that looking around during tokenizing creates dependencies
    /// on potentially far-away content, which may reduce the
    /// effectiveness incremental parsing—when looking forward—or even
    /// cause invalid reparses when looking backward more than 25 code
    /// units, since the library does not track lookbehind.
    peek(offset) {
      let idx = this.chunkOff + offset,
        pos,
        result;
      if (idx >= 0 && idx < this.chunk.length) {
        pos = this.pos + offset;
        result = this.chunk.charCodeAt(idx);
      } else {
        let resolved = this.resolveOffset(offset, 1);
        if (resolved == null) return -1;
        pos = resolved;
        if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
          result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
        } else {
          let i = this.rangeIndex,
            range = this.range;
          while (range.to <= pos) range = this.ranges[++i];
          this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
          if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);
          result = this.chunk2.charCodeAt(0);
        }
      }
      if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;
      return result;
    }
    /// Accept a token. By default, the end of the token is set to the
    /// current stream position, but you can pass an offset (relative to
    /// the stream position) to change that.
    acceptToken(token, endOffset = 0) {
      let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
      if (end == null || end < this.token.start) throw new RangeError("Token end out of bounds");
      this.token.value = token;
      this.token.end = end;
    }
    getChunk() {
      if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
        let {
          chunk,
          chunkPos
        } = this;
        this.chunk = this.chunk2;
        this.chunkPos = this.chunk2Pos;
        this.chunk2 = chunk;
        this.chunk2Pos = chunkPos;
        this.chunkOff = this.pos - this.chunkPos;
      } else {
        this.chunk2 = this.chunk;
        this.chunk2Pos = this.chunkPos;
        let nextChunk = this.input.chunk(this.pos);
        let end = this.pos + nextChunk.length;
        this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
        this.chunkPos = this.pos;
        this.chunkOff = 0;
      }
    }
    readNext() {
      if (this.chunkOff >= this.chunk.length) {
        this.getChunk();
        if (this.chunkOff == this.chunk.length) return this.next = -1;
      }
      return this.next = this.chunk.charCodeAt(this.chunkOff);
    }
    /// Move the stream forward N (defaults to 1) code units. Returns
    /// the new value of [`next`](#lr.InputStream.next).
    advance(n = 1) {
      this.chunkOff += n;
      while (this.pos + n >= this.range.to) {
        if (this.rangeIndex == this.ranges.length - 1) return this.setDone();
        n -= this.range.to - this.pos;
        this.range = this.ranges[++this.rangeIndex];
        this.pos = this.range.from;
      }
      this.pos += n;
      if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;
      return this.readNext();
    }
    setDone() {
      this.pos = this.chunkPos = this.end;
      this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
      this.chunk = "";
      return this.next = -1;
    }
    /// @internal
    reset(pos, token) {
      if (token) {
        this.token = token;
        token.start = pos;
        token.lookAhead = pos + 1;
        token.value = token.extended = -1;
      } else {
        this.token = nullToken;
      }
      if (this.pos != pos) {
        this.pos = pos;
        if (pos == this.end) {
          this.setDone();
          return this;
        }
        while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];
        while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];
        if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
          this.chunkOff = pos - this.chunkPos;
        } else {
          this.chunk = "";
          this.chunkOff = 0;
        }
        this.readNext();
      }
      return this;
    }
    /// @internal
    read(from, to) {
      if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
      if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
      if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);
      let result = "";
      for (let r of this.ranges) {
        if (r.from >= to) break;
        if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
      }
      return result;
    }
  }
  /// @internal
  class TokenGroup {
    constructor(data, id) {
      this.data = data;
      this.id = id;
    }
    token(input, stack) {
      readToken(this.data, input, stack, this.id);
    }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /// `@external tokens` declarations in the grammar should resolve to
  /// an instance of this class.
  class ExternalTokenizer {
    /// Create a tokenizer. The first argument is the function that,
    /// given an input stream, scans for the types of tokens it
    /// recognizes at the stream's position, and calls
    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
    /// one.
    constructor(
    /// @internal
    token, options = {}) {
      this.token = token;
      this.contextual = !!options.contextual;
      this.fallback = !!options.fallback;
      this.extend = !!options.extend;
    }
  }
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group) {
    let state = 0,
      groupMask = 1 << group,
      {
        parser
      } = stack.p,
      {
        dialect
      } = parser;
    scan: for (;;) {
      if ((groupMask & data[state]) == 0) break;
      let accEnd = data[state + 1];
      // Check whether this state can lead to a token in the current group
      // Accept tokens in this state, possibly overwriting
      // lower-precedence / shorter tokens
      for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {
        let term = data[i];
        if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
          input.acceptToken(term);
          break;
        }
      }
      let next = input.next,
        low = 0,
        high = data[state + 2];
      // Special case for EOF
      if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */ && data[accEnd + high * 3 - 3] == 65535 /* End */) {
        state = data[accEnd + high * 3 - 1];
        continue scan;
      }
      // Do a binary search on the state's edges
      for (; low < high;) {
        let mid = low + high >> 1;
        let index = accEnd + mid + (mid << 1);
        let from = data[index],
          to = data[index + 1] || 0x10000;
        if (next < from) high = mid;else if (next >= to) low = mid + 1;else {
          state = data[index + 2];
          input.advance();
          continue scan;
        }
      }
      break;
    }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
    if (typeof input != "string") return input;
    let array = null;
    for (let pos = 0, out = 0; pos < input.length;) {
      let value = 0;
      for (;;) {
        let next = input.charCodeAt(pos++),
          stop = false;
        if (next == 126 /* BigValCode */) {
          value = 65535 /* BigVal */;
          break;
        }
        if (next >= 92 /* Gap2 */) next--;
        if (next >= 34 /* Gap1 */) next--;
        let digit = next - 32 /* Start */;
        if (digit >= 46 /* Base */) {
          digit -= 46 /* Base */;
          stop = true;
        }
        value += digit;
        if (stop) break;
        value *= 46 /* Base */;
      }

      if (array) array[out++] = value;else array = new Type(value);
    }
    return array;
  }

  // Environment variable used to control console output
  const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  let stackIDs = null;
  var Safety;
  (function (Safety) {
    Safety[Safety["Margin"] = 25] = "Margin";
  })(Safety || (Safety = {}));
  function cutAt(tree, pos, side) {
    let cursor = tree.cursor(IterMode.IncludeAnonymous);
    cursor.moveTo(pos);
    for (;;) {
      if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {
        if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
        if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;
        if (!cursor.parent()) return side < 0 ? 0 : tree.length;
      }
    }
  }
  class FragmentCursor {
    constructor(fragments, nodeSet) {
      this.fragments = fragments;
      this.nodeSet = nodeSet;
      this.i = 0;
      this.fragment = null;
      this.safeFrom = -1;
      this.safeTo = -1;
      this.trees = [];
      this.start = [];
      this.index = [];
      this.nextFragment();
    }
    nextFragment() {
      let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
      if (fr) {
        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
        while (this.trees.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
        }
        this.trees.push(fr.tree);
        this.start.push(-fr.offset);
        this.index.push(0);
        this.nextStart = this.safeFrom;
      } else {
        this.nextStart = 1e9;
      }
    }
    // `pos` must be >= any previously given `pos` for this cursor
    nodeAt(pos) {
      if (pos < this.nextStart) return null;
      while (this.fragment && this.safeTo <= pos) this.nextFragment();
      if (!this.fragment) return null;
      for (;;) {
        let last = this.trees.length - 1;
        if (last < 0) {
          // End of tree
          this.nextFragment();
          return null;
        }
        let top = this.trees[last],
          index = this.index[last];
        if (index == top.children.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
          continue;
        }
        let next = top.children[index];
        let start = this.start[last] + top.positions[index];
        if (start > pos) {
          this.nextStart = start;
          return null;
        }
        if (next instanceof Tree) {
          if (start == pos) {
            if (start < this.safeFrom) return null;
            let end = start + next.length;
            if (end <= this.safeTo) {
              let lookAhead = next.prop(NodeProp.lookAhead);
              if (!lookAhead || end + lookAhead < this.fragment.to) return next;
            }
          }
          this.index[last]++;
          if (start + next.length >= Math.max(this.safeFrom, pos)) {
            // Enter this node
            this.trees.push(next);
            this.start.push(start);
            this.index.push(0);
          }
        } else {
          this.index[last]++;
          this.nextStart = start + next.length;
        }
      }
    }
  }
  class TokenCache {
    constructor(parser, stream) {
      this.stream = stream;
      this.tokens = [];
      this.mainToken = null;
      this.actions = [];
      this.tokens = parser.tokenizers.map(_ => new CachedToken());
    }
    getActions(stack) {
      let actionIndex = 0;
      let main = null;
      let {
          parser
        } = stack.p,
        {
          tokenizers
        } = parser;
      let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
      let context = stack.curContext ? stack.curContext.hash : 0;
      let lookAhead = 0;
      for (let i = 0; i < tokenizers.length; i++) {
        if ((1 << i & mask) == 0) continue;
        let tokenizer = tokenizers[i],
          token = this.tokens[i];
        if (main && !tokenizer.fallback) continue;
        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
          this.updateCachedToken(token, tokenizer, stack);
          token.mask = mask;
          token.context = context;
        }
        if (token.lookAhead > token.end + 25 /* Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);
        if (token.value != 0 /* Err */) {
          let startIndex = actionIndex;
          if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
          actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
          if (!tokenizer.extend) {
            main = token;
            if (actionIndex > startIndex) break;
          }
        }
      }
      while (this.actions.length > actionIndex) this.actions.pop();
      if (lookAhead) stack.setLookAhead(lookAhead);
      if (!main && stack.pos == this.stream.end) {
        main = new CachedToken();
        main.value = stack.p.parser.eofTerm;
        main.start = main.end = stack.pos;
        actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
      }
      this.mainToken = main;
      return this.actions;
    }
    getMainToken(stack) {
      if (this.mainToken) return this.mainToken;
      let main = new CachedToken(),
        {
          pos,
          p
        } = stack;
      main.start = pos;
      main.end = Math.min(pos + 1, p.stream.end);
      main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
      return main;
    }
    updateCachedToken(token, tokenizer, stack) {
      let start = this.stream.clipPos(stack.pos);
      tokenizer.token(this.stream.reset(start, token), stack);
      if (token.value > -1) {
        let {
          parser
        } = stack.p;
        for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {
          let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0 /* Specialize */) token.value = result >> 1;else token.extended = result >> 1;
            break;
          }
        }
      } else {
        token.value = 0 /* Err */;
        token.end = this.stream.clipPos(start + 1);
      }
    }
    putAction(action, token, end, index) {
      // Don't add duplicate actions
      for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;
      this.actions[index++] = action;
      this.actions[index++] = token;
      this.actions[index++] = end;
      return index;
    }
    addActions(stack, token, end, index) {
      let {
          state
        } = stack,
        {
          parser
        } = stack.p,
        {
          data
        } = parser;
      for (let set = 0; set < 2; set++) {
        for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
          if (data[i] == 65535 /* End */) {
            if (data[i + 1] == 1 /* Next */) {
              i = pair(data, i + 2);
            } else {
              if (index == 0 && data[i + 1] == 2 /* Other */) index = this.putAction(pair(data, i + 2), token, end, index);
              break;
            }
          }
          if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);
        }
      }
      return index;
    }
  }
  var Rec;
  (function (Rec) {
    Rec[Rec["Distance"] = 5] = "Distance";
    Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
    // When two stacks have been running independently long enough to
    // add this many elements to their buffers, prune one.
    Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
    Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
    // Once a stack reaches this depth (in .stack.length) force-reduce
    // it back to CutTo to avoid creating trees that overflow the stack
    // on recursive traversal.
    Rec[Rec["CutDepth"] = 15000] = "CutDepth";
    Rec[Rec["CutTo"] = 9000] = "CutTo";
  })(Rec || (Rec = {}));
  class Parse {
    constructor(parser, input, fragments, ranges) {
      this.parser = parser;
      this.input = input;
      this.ranges = ranges;
      this.recovering = 0;
      this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
      this.minStackPos = 0;
      this.reused = [];
      this.stoppedAt = null;
      this.stream = new InputStream(input, ranges);
      this.tokens = new TokenCache(parser, this.stream);
      this.topTerm = parser.top[1];
      let {
        from
      } = ranges[0];
      this.stacks = [Stack.start(this, parser.top[0], from)];
      this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
    }
    get parsedPos() {
      return this.minStackPos;
    }
    // Move the parser forward. This will process all parse stacks at
    // `this.pos` and try to advance them to a further position. If no
    // stack for such a position is found, it'll start error-recovery.
    //
    // When the parse is finished, this will return a syntax tree. When
    // not, it returns `null`.
    advance() {
      let stacks = this.stacks,
        pos = this.minStackPos;
      // This will hold stacks beyond `pos`.
      let newStacks = this.stacks = [];
      let stopped, stoppedTokens;
      // Keep advancing any stacks at `pos` until they either move
      // forward or can't be advanced. Gather stacks that can't be
      // advanced further in `stopped`.
      for (let i = 0; i < stacks.length; i++) {
        let stack = stacks[i];
        for (;;) {
          this.tokens.mainToken = null;
          if (stack.pos > pos) {
            newStacks.push(stack);
          } else if (this.advanceStack(stack, newStacks, stacks)) {
            continue;
          } else {
            if (!stopped) {
              stopped = [];
              stoppedTokens = [];
            }
            stopped.push(stack);
            let tok = this.tokens.getMainToken(stack);
            stoppedTokens.push(tok.value, tok.end);
          }
          break;
        }
      }
      if (!newStacks.length) {
        let finished = stopped && findFinished(stopped);
        if (finished) return this.stackToTree(finished);
        if (this.parser.strict) {
          if (verbose && stopped) console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
          throw new SyntaxError("No parse at " + pos);
        }
        if (!this.recovering) this.recovering = 5 /* Distance */;
      }

      if (this.recovering && stopped) {
        let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
        if (finished) return this.stackToTree(finished.forceAll());
      }
      if (this.recovering) {
        let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
        if (newStacks.length > maxRemaining) {
          newStacks.sort((a, b) => b.score - a.score);
          while (newStacks.length > maxRemaining) newStacks.pop();
        }
        if (newStacks.some(s => s.reducePos > pos)) this.recovering--;
      } else if (newStacks.length > 1) {
        // Prune stacks that are in the same state, or that have been
        // running without splitting for a while, to avoid getting stuck
        // with multiple successful stacks running endlessly on.
        outer: for (let i = 0; i < newStacks.length - 1; i++) {
          let stack = newStacks[i];
          for (let j = i + 1; j < newStacks.length; j++) {
            let other = newStacks[j];
            if (stack.sameState(other) || stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {
              if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                newStacks.splice(j--, 1);
              } else {
                newStacks.splice(i--, 1);
                continue outer;
              }
            }
          }
        }
      }
      this.minStackPos = newStacks[0].pos;
      for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;
      return null;
    }
    stopAt(pos) {
      if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
      this.stoppedAt = pos;
    }
    // Returns an updated version of the given stack, or null if the
    // stack can't advance normally. When `split` and `stacks` are
    // given, stacks split off by ambiguous operations will be pushed to
    // `split`, or added to `stacks` if they move `pos` forward.
    advanceStack(stack, stacks, split) {
      let start = stack.pos,
        {
          parser
        } = this;
      let base = verbose ? this.stackID(stack) + " -> " : "";
      if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;
      if (this.fragments) {
        let strictCx = stack.curContext && stack.curContext.tracker.strict,
          cxHash = strictCx ? stack.curContext.hash : 0;
        for (let cached = this.fragments.nodeAt(start); cached;) {
          let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
          if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
            stack.useNode(cached, match);
            if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
            return true;
          }
          if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;
          let inner = cached.children[0];
          if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;
        }
      }
      let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
      if (defaultReduce > 0) {
        stack.reduce(defaultReduce);
        if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
        return true;
      }
      if (stack.stack.length >= 15000 /* CutDepth */) {
        while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) {}
      }
      let actions = this.tokens.getActions(stack);
      for (let i = 0; i < actions.length;) {
        let action = actions[i++],
          term = actions[i++],
          end = actions[i++];
        let last = i == actions.length || !split;
        let localStack = last ? stack : stack.split();
        localStack.apply(action, term, end);
        if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift" : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
        if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);
      }
      return false;
    }
    // Advance a given stack forward as far as it will go. Returns the
    // (possibly updated) stack if it got stuck, or null if it moved
    // forward and was given to `pushStackDedup`.
    advanceFully(stack, newStacks) {
      let pos = stack.pos;
      for (;;) {
        if (!this.advanceStack(stack, null, null)) return false;
        if (stack.pos > pos) {
          pushStackDedup(stack, newStacks);
          return true;
        }
      }
    }
    runRecovery(stacks, tokens, newStacks) {
      let finished = null,
        restarted = false;
      for (let i = 0; i < stacks.length; i++) {
        let stack = stacks[i],
          token = tokens[i << 1],
          tokenEnd = tokens[(i << 1) + 1];
        let base = verbose ? this.stackID(stack) + " -> " : "";
        if (stack.deadEnd) {
          if (restarted) continue;
          restarted = true;
          stack.restart();
          if (verbose) console.log(base + this.stackID(stack) + " (restarted)");
          let done = this.advanceFully(stack, newStacks);
          if (done) continue;
        }
        let force = stack.split(),
          forceBase = base;
        for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
          if (verbose) console.log(forceBase + this.stackID(force) + " (via force-reduce)");
          let done = this.advanceFully(force, newStacks);
          if (done) break;
          if (verbose) forceBase = this.stackID(force) + " -> ";
        }
        for (let insert of stack.recoverByInsert(token)) {
          if (verbose) console.log(base + this.stackID(insert) + " (via recover-insert)");
          this.advanceFully(insert, newStacks);
        }
        if (this.stream.end > stack.pos) {
          if (tokenEnd == stack.pos) {
            tokenEnd++;
            token = 0 /* Err */;
          }

          stack.recoverByDelete(token, tokenEnd);
          if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
          pushStackDedup(stack, newStacks);
        } else if (!finished || finished.score < stack.score) {
          finished = stack;
        }
      }
      return finished;
    }
    // Convert the stack's buffer to a syntax tree.
    stackToTree(stack) {
      stack.close();
      return Tree.build({
        buffer: StackBufferCursor.create(stack),
        nodeSet: this.parser.nodeSet,
        topID: this.topTerm,
        maxBufferLength: this.parser.bufferLength,
        reused: this.reused,
        start: this.ranges[0].from,
        length: stack.pos - this.ranges[0].from,
        minRepeatType: this.parser.minRepeatTerm
      });
    }
    stackID(stack) {
      let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);
      if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
      return id + stack;
    }
  }
  function pushStackDedup(stack, newStacks) {
    for (let i = 0; i < newStacks.length; i++) {
      let other = newStacks[i];
      if (other.pos == stack.pos && other.sameState(stack)) {
        if (newStacks[i].score < stack.score) newStacks[i] = stack;
        return;
      }
    }
    newStacks.push(stack);
  }
  class Dialect {
    constructor(source, flags, disabled) {
      this.source = source;
      this.flags = flags;
      this.disabled = disabled;
    }
    allows(term) {
      return !this.disabled || this.disabled[term] == 0;
    }
  }
  const id = x => x;
  /// Context trackers are used to track stateful context (such as
  /// indentation in the Python grammar, or parent elements in the XML
  /// grammar) needed by external tokenizers. You declare them in a
  /// grammar file as `@context exportName from "module"`.
  ///
  /// Context values should be immutable, and can be updated (replaced)
  /// on shift or reduce actions.
  ///
  /// The export used in a `@context` declaration should be of this
  /// type.
  class ContextTracker {
    /// Define a context tracker.
    constructor(spec) {
      this.start = spec.start;
      this.shift = spec.shift || id;
      this.reduce = spec.reduce || id;
      this.reuse = spec.reuse || id;
      this.hash = spec.hash || (() => 0);
      this.strict = spec.strict !== false;
    }
  }
  /// Holds the parse tables for a given grammar, as generated by
  /// `lezer-generator`, and provides [methods](#common.Parser) to parse
  /// content with.
  class LRParser extends Parser$1 {
    /// @internal
    constructor(spec) {
      super();
      /// @internal
      this.wrappers = [];
      if (spec.version != 14 /* Version */) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);
      let nodeNames = spec.nodeNames.split(" ");
      this.minRepeatTerm = nodeNames.length;
      for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push("");
      let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
      let nodeProps = [];
      for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);
      function setProp(nodeID, prop, value) {
        nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
      }
      if (spec.nodeProps) for (let propSpec of spec.nodeProps) {
        let prop = propSpec[0];
        if (typeof prop == "string") prop = NodeProp[prop];
        for (let i = 1; i < propSpec.length;) {
          let next = propSpec[i++];
          if (next >= 0) {
            setProp(next, prop, propSpec[i++]);
          } else {
            let value = propSpec[i + -next];
            for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);
            i++;
          }
        }
      }
      this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
        name: i >= this.minRepeatTerm ? undefined : name,
        id: i,
        props: nodeProps[i],
        top: topTerms.indexOf(i) > -1,
        error: i == 0,
        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
      })));
      if (spec.propSources) this.nodeSet = this.nodeSet.extend(...spec.propSources);
      this.strict = false;
      this.bufferLength = DefaultBufferLength;
      let tokenArray = decodeArray(spec.tokenData);
      this.context = spec.context;
      this.specializerSpecs = spec.specialized || [];
      this.specialized = new Uint16Array(this.specializerSpecs.length);
      for (let i = 0; i < this.specializerSpecs.length; i++) this.specialized[i] = this.specializerSpecs[i].term;
      this.specializers = this.specializerSpecs.map(getSpecializer);
      this.states = decodeArray(spec.states, Uint32Array);
      this.data = decodeArray(spec.stateData);
      this.goto = decodeArray(spec.goto);
      this.maxTerm = spec.maxTerm;
      this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
      this.topRules = spec.topRules;
      this.dialects = spec.dialects || {};
      this.dynamicPrecedences = spec.dynamicPrecedences || null;
      this.tokenPrecTable = spec.tokenPrec;
      this.termNames = spec.termNames || null;
      this.maxNode = this.nodeSet.types.length - 1;
      this.dialect = this.parseDialect();
      this.top = this.topRules[Object.keys(this.topRules)[0]];
    }
    createParse(input, fragments, ranges) {
      let parse = new Parse(this, input, fragments, ranges);
      for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);
      return parse;
    }
    /// Get a goto table entry @internal
    getGoto(state, term, loose = false) {
      let table = this.goto;
      if (term >= table[0]) return -1;
      for (let pos = table[term + 1];;) {
        let groupTag = table[pos++],
          last = groupTag & 1;
        let target = table[pos++];
        if (last && loose) return target;
        for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;
        if (last) return -1;
      }
    }
    /// Check if this state has an action for a given terminal @internal
    hasAction(state, terminal) {
      let data = this.data;
      for (let set = 0; set < 2; set++) {
        for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
          if ((next = data[i]) == 65535 /* End */) {
            if (data[i + 1] == 1 /* Next */) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2 /* Other */) return pair(data, i + 2);else break;
          }
          if (next == terminal || next == 0 /* Err */) return pair(data, i + 1);
        }
      }
      return 0;
    }
    /// @internal
    stateSlot(state, slot) {
      return this.states[state * 6 /* Size */ + slot];
    }
    /// @internal
    stateFlag(state, flag) {
      return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
    }
    /// @internal
    validAction(state, action) {
      if (action == this.stateSlot(state, 4 /* DefaultReduce */)) return true;
      for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
        if (this.data[i] == 65535 /* End */) {
          if (this.data[i + 1] == 1 /* Next */) i = pair(this.data, i + 2);else return false;
        }
        if (action == pair(this.data, i + 1)) return true;
      }
    }
    /// Get the states that can follow this one through shift actions or
    /// goto jumps. @internal
    nextStates(state) {
      let result = [];
      for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
        if (this.data[i] == 65535 /* End */) {
          if (this.data[i + 1] == 1 /* Next */) i = pair(this.data, i + 2);else break;
        }
        if ((this.data[i + 2] & 65536 /* ReduceFlag */ >> 16) == 0) {
          let value = this.data[i + 1];
          if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);
        }
      }
      return result;
    }
    /// @internal
    overrides(token, prev) {
      let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
      return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
    }
    /// Configure the parser. Returns a new parser instance that has the
    /// given settings modified. Settings not provided in `config` are
    /// kept from the original parser.
    configure(config) {
      // Hideous reflection-based kludge to make it easy to create a
      // slightly modified copy of a parser.
      let copy = Object.assign(Object.create(LRParser.prototype), this);
      if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);
      if (config.top) {
        let info = this.topRules[config.top];
        if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);
        copy.top = info;
      }
      if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {
        let found = config.tokenizers.find(r => r.from == t);
        return found ? found.to : t;
      });
      if (config.specializers) {
        copy.specializers = this.specializers.slice();
        copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
          let found = config.specializers.find(r => r.from == s.external);
          if (!found) return s;
          let spec = Object.assign(Object.assign({}, s), {
            external: found.to
          });
          copy.specializers[i] = getSpecializer(spec);
          return spec;
        });
      }
      if (config.contextTracker) copy.context = config.contextTracker;
      if (config.dialect) copy.dialect = this.parseDialect(config.dialect);
      if (config.strict != null) copy.strict = config.strict;
      if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);
      if (config.bufferLength != null) copy.bufferLength = config.bufferLength;
      return copy;
    }
    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
    /// are registered for this parser.
    hasWrappers() {
      return this.wrappers.length > 0;
    }
    /// Returns the name associated with a given term. This will only
    /// work for all terms when the parser was generated with the
    /// `--names` option. By default, only the names of tagged terms are
    /// stored.
    getName(term) {
      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
    }
    /// The eof term id is always allocated directly after the node
    /// types. @internal
    get eofTerm() {
      return this.maxNode + 1;
    }
    /// The type of top node produced by the parser.
    get topNode() {
      return this.nodeSet.types[this.top[1]];
    }
    /// @internal
    dynamicPrecedence(term) {
      let prec = this.dynamicPrecedences;
      return prec == null ? 0 : prec[term] || 0;
    }
    /// @internal
    parseDialect(dialect) {
      let values = Object.keys(this.dialects),
        flags = values.map(() => false);
      if (dialect) for (let part of dialect.split(" ")) {
        let id = values.indexOf(part);
        if (id >= 0) flags[id] = true;
      }
      let disabled = null;
      for (let i = 0; i < values.length; i++) if (!flags[i]) {
        for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
      }
      return new Dialect(dialect, flags, disabled);
    }
    /// Used by the output of the parser generator. Not available to
    /// user code.
    static deserialize(spec) {
      return new LRParser(spec);
    }
  }
  function pair(data, off) {
    return data[off] | data[off + 1] << 16;
  }
  function findOffset(data, start, term) {
    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++) if (next == term) return i - start;
    return -1;
  }
  function findFinished(stacks) {
    let best = null;
    for (let stack of stacks) {
      let stopped = stack.p.stoppedAt;
      if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) && (!best || best.score < stack.score)) best = stack;
    }
    return best;
  }
  function getSpecializer(spec) {
    if (spec.external) {
      let mask = spec.extend ? 1 /* Extend */ : 0 /* Specialize */;
      return (value, stack) => spec.external(value, stack) << 1 | mask;
    }
    return spec.get;
  }

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const propertyIdentifier = 119,
    identifier = 120,
    nameIdentifier = 121,
    insertSemi = 122,
    expression0 = 126,
    ForExpression = 4,
    forExpressionStart = 129,
    ForInExpression = 7,
    Name$1 = 8,
    Identifier = 9,
    AdditionalIdentifier = 10,
    forExpressionBodyStart = 137,
    IfExpression = 18,
    ifExpressionStart = 138,
    QuantifiedExpression = 22,
    quantifiedExpressionStart = 139,
    QuantifiedInExpression = 26,
    PositiveUnaryTest = 36,
    ArithmeticExpression = 40,
    arithmeticPlusStart = 143,
    arithmeticTimesStart = 144,
    arithmeticExpStart = 145,
    arithmeticUnaryStart = 146,
    VariableName = 47,
    PathExpression = 67,
    pathExpressionStart = 151,
    FilterExpression = 69,
    filterExpressionStart = 152,
    FunctionInvocation = 71,
    functionInvocationStart = 153,
    ParameterName = 75,
    nil = 158,
    NumericLiteral = 78,
    StringLiteral = 79,
    BooleanLiteral = 80,
    FunctionDefinition = 89,
    functionDefinitionStart = 165,
    Context$1 = 96,
    contextStart = 167,
    ContextEntry = 97,
    PropertyName = 99,
    PropertyIdentifier = 100;

  /* global console,process */

  const LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
  const LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);
  const LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);
  const spaceChars = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
  const newlineChars = chars('\n\r');
  const additionalNameChars = chars("'./-+*");

  /**
   * @param { string } str
   * @return { number[] }
   */
  function chars(str) {
    return Array.from(str).map(s => s.charCodeAt(0));
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isStartChar(ch) {
    return ch === 63 // ?
    || ch === 95 // _
    || ch >= 65 && ch <= 90 // A-Z
    || ch >= 97 && ch <= 122 // a-z
    || ch >= 161 && !isPartChar(ch) && !isSpace$1(ch);
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isAdditional(ch) {
    return additionalNameChars.includes(ch);
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isPartChar(ch) {
    return ch >= 48 && ch <= 57 // 0-9
    || ch === 0xB7 || ch >= 0x0300 && ch <= 0x036F || ch >= 0x203F && ch <= 0x2040;
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isSpace$1(ch) {
    return spaceChars.includes(ch);
  }

  // eslint-disable-next-line
  function indent(str, spaces) {
    return spaces.concat(str.split(/\n/g).join('\n' + spaces));
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } [offset]
   * @param { boolean } [includeOperators]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseAdditionalSymbol(input, offset = 0) {
    const next = input.peek(offset);
    if (isAdditional(next)) {
      return {
        offset: 1,
        token: String.fromCharCode(next)
      };
    }
    return null;
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param { number } [offset]
   * @param { boolean } [namePart]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseIdentifier(input, offset = 0, namePart = false) {
    for (let inside = false, chars = [], i = 0;; i++) {
      const next = input.peek(offset + i);
      if (isStartChar(next) || (inside || namePart) && isPartChar(next)) {
        if (!inside) {
          inside = true;
        }
        chars.push(next);
      } else {
        if (chars.length) {
          return {
            token: String.fromCharCode(...chars),
            offset: i
          };
        }
        return null;
      }
    }
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } offset
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseSpaces(input, offset) {
    for (let inside = false, i = 0;; i++) {
      let next = input.peek(offset + i);
      if (isSpace$1(next)) {
        if (!inside) {
          inside = true;
        }
      } else {
        if (inside) {
          return {
            token: ' ',
            offset: i
          };
        }
        return null;
      }
    }
  }

  /**
   * Parse a name from the input and return the first match, if any.
   *
   * @param { import('@lezer/lr').InputStream } input
   * @param { Variables } variables
   *
   * @return { { token: string, offset: number, term: number } | null }
   */
  function parseName$1(input, variables) {
    const contextKeys = variables.contextKeys();
    const start = variables.tokens;
    for (let i = 0, tokens = [], nextMatch = null;;) {
      const namePart = start.length + tokens.length > 0;
      const maybeSpace = tokens.length > 0;
      const match = parseIdentifier(input, i, namePart) || namePart && parseAdditionalSymbol(input, i) || maybeSpace && parseSpaces(input, i);

      // match is required
      if (!match) {
        return nextMatch;
      }
      const {
        token,
        offset
      } = match;
      i += offset;
      if (token === ' ') {
        continue;
      }
      tokens = [...tokens, token];
      const name = [...start, ...tokens].join(' ');
      if (contextKeys.some(el => el === name)) {
        const token = tokens[0];
        nextMatch = {
          token,
          offset: token.length,
          term: nameIdentifier
        };
      }
      if (dateTimeIdentifiers.some(el => el === name)) {
        const token = tokens[0];

        // parse date time identifiers as normal
        // identifiers to allow specialization to kick in
        //
        // cf. https://github.com/nikku/lezer-feel/issues/8
        nextMatch = {
          token,
          offset: token.length,
          term: identifier
        };
      }
      if (!contextKeys.some(el => el.startsWith(name)) && !dateTimeIdentifiers.some(el => el.startsWith(name))) {
        return nextMatch;
      }
    }
  }
  const identifiersMap = {
    [identifier]: 'identifier',
    [nameIdentifier]: 'nameIdentifier'
  };
  const identifiers = new ExternalTokenizer((input, stack) => {
    LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);
    const nameMatch = parseName$1(input, stack.context);
    const start = stack.context.tokens;
    const match = nameMatch || parseIdentifier(input, 0, start.length > 0);
    if (match) {
      input.advance(match.offset);
      input.acceptToken(nameMatch ? nameMatch.term : identifier);
      LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
    }
  }, {
    contextual: true
  });
  const propertyIdentifiers = new ExternalTokenizer((input, stack) => {
    LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);
    const start = stack.context.tokens;
    const match = parseIdentifier(input, 0, start.length > 0);
    if (match) {
      input.advance(match.offset);
      input.acceptToken(propertyIdentifier);
      LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
    }
  });
  const insertSemicolon = new ExternalTokenizer((input, stack) => {
    LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);
    let offset;
    let insert = false;
    for (offset = 0;; offset++) {
      const char = input.peek(offset);
      if (spaceChars.includes(char)) {
        continue;
      }
      if (newlineChars.includes(char)) {
        insert = true;
      }
      break;
    }
    if (insert) {
      const identifier = parseIdentifier(input, offset + 1);
      const spaces = parseSpaces(input, offset + 1);
      if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
        return;
      }
      LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
      input.acceptToken(insertSemi);
    }
  });
  const prefixedContextStarts = {
    [functionInvocationStart]: 'FunctionInvocation',
    [filterExpressionStart]: 'FilterExpression',
    [pathExpressionStart]: 'PathExpression'
  };
  const contextStarts = {
    [contextStart]: 'Context',
    [functionDefinitionStart]: 'FunctionDefinition',
    [forExpressionStart]: 'ForExpression',
    [ifExpressionStart]: 'IfExpression',
    [quantifiedExpressionStart]: 'QuantifiedExpression'
  };
  const contextEnds = {
    [Context$1]: 'Context',
    [FunctionDefinition]: 'FunctionDefinition',
    [ForExpression]: 'ForExpression',
    [IfExpression]: 'IfExpression',
    [QuantifiedExpression]: 'QuantifiedExpression',
    [PathExpression]: 'PathExpression',
    [FunctionInvocation]: 'FunctionInvocation',
    [FilterExpression]: 'FilterExpression',
    [ArithmeticExpression]: 'ArithmeticExpression'
  };
  class ValueProducer {
    /**
     * @param { Function } fn
     */
    constructor(fn) {
      this.fn = fn;
    }
    get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function }
     *
     * @return { ValueProducer }
     */
    static of(fn) {
      return new ValueProducer(fn);
    }
  }
  const dateTimeLiterals = {
    'date and time': 1,
    'date': 1,
    'time': 1,
    'duration': 1
  };
  const dateTimeIdentifiers = Object.keys(dateTimeLiterals);
  class Variables {
    constructor({
      name = 'Expressions',
      tokens = [],
      children = [],
      parent = null,
      context = {},
      value,
      raw
    } = {}) {
      this.name = name;
      this.tokens = tokens;
      this.children = children;
      this.parent = parent;
      this.context = context;
      this.value = value;
      this.raw = raw;
    }
    enterScope(name) {
      const childScope = this.of({
        name,
        parent: this
      });
      LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);
      return childScope;
    }
    exitScope(str) {
      if (!this.parent) {
        LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));
        return this;
      }
      LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));
      return this.parent.pushChild(this);
    }
    token(part) {
      LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);
      return this.assign({
        tokens: [...this.tokens, part]
      });
    }
    literal(value) {
      LOG_VARS && console.log('[%s] literal %o', this.path, value);
      return this.pushChild(this.of({
        name: 'Literal',
        value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
    computedValue() {
      for (let scope = this;; scope = scope.children.slice(-1)[0]) {
        if (!scope) {
          return null;
        }
        if (scope.value) {
          return scope.value;
        }
      }
    }
    contextKeys() {
      return Object.keys(this.context).map(normalizeContextKey);
    }
    get path() {
      return this.parent?.path?.concat(' > ', this.name) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
    get(variable) {
      const names = [variable, variable && normalizeContextKey(variable)];
      const contextKey = Object.keys(this.context).find(key => names.includes(normalizeContextKey(key)));
      if (typeof contextKey === 'undefined') {
        return undefined;
      }
      const val = this.context[contextKey];
      if (val instanceof ValueProducer) {
        return val.get(this);
      } else {
        return val;
      }
    }
    resolveName() {
      const variable = this.tokens.join(' ');
      const tokens = [];
      const parentScope = this.assign({
        tokens
      });
      const variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });
      LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));
      return parentScope.pushChild(variableScope);
    }
    pushChild(child) {
      if (!child) {
        return this;
      }
      const parent = this.assign({
        children: [...this.children, child]
      });
      child.parent = parent;
      return parent;
    }
    pushChildren(children) {
      let parent = this;
      for (const child of children) {
        parent = parent.pushChild(child);
      }
      return parent;
    }
    declareName() {
      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }
      const variableName = this.tokens.join(' ');
      LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);
      return this.assign({
        tokens: []
      }).pushChild(this.of({
        name: 'Name',
        value: variableName
      }));
    }
    define(name, value) {
      if (typeof name !== 'string') {
        LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);
        return this;
      }
      LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);
      const context = {
        ...this.context,
        [name]: value
      };
      return this.assign({
        context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    assign(options = {}) {
      return Variables.of({
        ...this,
        ...options
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    of(options = {}) {
      const defaultOptions = {
        context: this.context,
        parent: this.parent
      };
      return Variables.of({
        ...defaultOptions,
        ...options
      });
    }
    static of(options) {
      const {
        name,
        tokens = [],
        children = [],
        parent = null,
        context = {},
        value,
        raw
      } = options;
      return new Variables({
        name,
        tokens: [...tokens],
        children: [...children],
        context: {
          ...context
        },
        parent,
        value,
        raw
      });
    }
  }

  /**
   * @param { string } name
   *
   * @return { string } normalizedName
   */
  function normalizeContextKey(name) {
    return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
  }

  /**
   * Wrap children of variables under the given named child.
   *
   * @param { Variables } variables
   * @param { string } name
   * @param { string } code
   * @return { Variables }
   */
  function wrap(variables, scopeName, code) {
    const parts = variables.children.filter(c => c.name !== scopeName);
    const children = variables.children.filter(c => c.name === scopeName);
    const namePart = parts[0];
    const valuePart = parts[Math.max(1, parts.length - 1)];
    const name = namePart.computedValue();
    const value = valuePart?.computedValue() || null;
    return variables.assign({
      children
    }).enterScope(scopeName).pushChildren(parts).exitScope(code).define(name, value);
  }

  /**
   * @param { any } context
   *
   * @return { ContextTracker<Variables> }
   */
  function trackVariables(context = {}) {
    const start = Variables.of({
      context
    });
    return new ContextTracker({
      start,
      reduce(variables, term, stack, input) {
        if (term === Context$1) {
          variables = variables.assign({
            value: variables.context
          });
        }
        if (term === IfExpression) {
          const [thenPart, elsePart] = variables.children.slice(-2);
          variables = variables.assign({
            value: {
              ...thenPart?.computedValue(),
              ...elsePart?.computedValue()
            }
          });
        }
        if (term === FilterExpression) {
          const [sourcePart, _] = variables.children.slice(-2);
          variables = variables.assign({
            value: sourcePart?.computedValue()
          });
        }
        if (term === FunctionInvocation) {
          const [name, ...args] = variables.children;

          // preserve type information through `get value(context, key)` utility
          if (name?.raw === 'get value') {
            variables = getContextValue(variables, args);
          }
        }
        const start = contextStarts[term];
        if (start) {
          return variables.enterScope(start);
        }
        const prefixedStart = prefixedContextStarts[term];

        // pull <expression> into new <prefixedStart> context
        if (prefixedStart) {
          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];
          return variables.assign({
            children
          }).enterScope(prefixedStart).pushChild(lastChild).assign({
            context: {
              ...variables.context,
              ...lastChild?.computedValue()
            }
          });
        }
        const code = input.read(input.pos, stack.pos);
        const end = contextEnds[term];
        if (end) {
          return variables.exitScope(code);
        }
        if (term === ContextEntry) {
          return wrap(variables, 'ContextEntry', code);
        }
        if (term === ForInExpression || term === QuantifiedInExpression) {
          return wrap(variables, 'InExpression', code);
        }

        // define <partial> within ForExpression body
        if (term === forExpressionBodyStart) {
          return variables.define('partial', ValueProducer.of(variables => {
            return variables.children[variables.children.length - 1]?.computedValue();
          }));
        }
        if (term === ParameterName) {
          const [left] = variables.children.slice(-1);
          const name = left.computedValue();

          // TODO: attach type information
          return variables.define(name, 1);
        }

        // pull <expression> into ArithmeticExpression child
        if (term === arithmeticPlusStart || term === arithmeticTimesStart || term === arithmeticExpStart) {
          const children = variables.children.slice(0, -1);
          const lastChild = variables.children.slice(-1)[0];
          return variables.assign({
            children
          }).enterScope('ArithmeticExpression').pushChild(lastChild);
        }
        if (term === arithmeticUnaryStart) {
          return variables.enterScope('ArithmeticExpression');
        }
        if (term === Identifier || term === AdditionalIdentifier || term === PropertyIdentifier) {
          return variables.token(code);
        }
        if (term === StringLiteral) {
          return variables.literal(code.replace(/^"|"$/g, ''));
        }
        if (term === BooleanLiteral) {
          return variables.literal(code === 'true' ? true : false);
        }
        if (term === NumericLiteral) {
          return variables.literal(parseFloat(code));
        }
        if (term === nil) {
          return variables.literal(null);
        }
        if (term === VariableName) {
          return variables.resolveName();
        }
        if (term === Name$1 || term === PropertyName) {
          return variables.declareName();
        }
        if (term === expression0 || term === PositiveUnaryTest) {
          if (variables.tokens.length > 0) {
            throw new Error('uncleared name');
          }
        }
        if (term === expression0) {
          let parent = variables;
          while (parent.parent) {
            parent = parent.exitScope(code);
          }
          return parent;
        }
        return variables;
      }
    });
  }
  const variableTracker = trackVariables({});

  // helpers //////////////

  function getContextValue(variables, args) {
    if (!args.length) {
      return variables.assign({
        value: null
      });
    }
    if (args[0].name === 'Name') {
      args = extractNamedArgs(args, ['m', 'key']);
    }
    if (args.length !== 2) {
      return variables.assign({
        value: null
      });
    }
    const [context, key] = args;
    const keyValue = key?.computedValue();
    const contextValue = context?.computedValue();
    if (!contextValue || typeof contextValue !== 'object' || typeof keyValue !== 'string') {
      return variables.assign({
        value: null
      });
    }
    return variables.assign({
      value: [normalizeContextKey(keyValue), keyValue].reduce((value, keyValue) => {
        if (keyValue in contextValue) {
          return contextValue[keyValue];
        }
        return value;
      }, null)
    });
  }
  function extractNamedArgs(args, argNames) {
    const context = {};
    for (let i = 0; i < args.length; i += 2) {
      const [name, value] = args.slice(i, i + 2);
      context[name.value] = value;
    }
    return argNames.map(name => context[name]);
  }
  const feelHighlighting = styleTags({
    StringLiteral: tags$1.string,
    NumericLiteral: tags$1.number,
    BooleanLiteral: tags$1.bool,
    'AtLiteral!': tags$1.special(tags$1.string),
    CompareOp: tags$1.compareOperator,
    ArithOp: tags$1.arithmeticOperator,
    'for if then else some every satisfies between return': tags$1.controlKeyword,
    'in instance of and or': tags$1.operatorKeyword,
    function: tags$1.definitionKeyword,
    as: tags$1.keyword,
    'Type/...': tags$1.typeName,
    Wildcard: tags$1.special,
    null: tags$1.null,
    LineComment: tags$1.lineComment,
    BlockComment: tags$1.blockComment,
    'VariableName! "?"': tags$1.variableName,
    'DateTimeConstructor! SpecialFunctionName!': tags$1.function(tags$1.special(tags$1.variableName)),
    'List Interval': tags$1.list,
    Context: tags$1.definition(tags$1.literal),
    'Name!': tags$1.definition(tags$1.variableName),
    'Key/Name! ContextEntryType/Name!': tags$1.definition(tags$1.propertyName),
    'PathExpression/VariableName!': tags$1.function(tags$1.propertyName),
    'FormalParameter/ParameterName!': tags$1.function(tags$1.definition(tags$1.variableName)),
    '( )': tags$1.paren,
    '[ ]': tags$1.squareBracket,
    '{ }': tags$1.brace,
    '.': tags$1.derefOperator,
    ', ;': tags$1.separator,
    '..': tags$1.punctuation
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier = {
    __proto__: null,
    for: 10,
    in: 30,
    return: 34,
    if: 38,
    then: 40,
    else: 42,
    some: 46,
    every: 48,
    satisfies: 55,
    or: 58,
    and: 62,
    between: 70,
    instance: 86,
    of: 89,
    days: 99,
    time: 101,
    duration: 103,
    years: 105,
    months: 107,
    date: 109,
    list: 115,
    context: 121,
    function: 128,
    null: 154,
    true: 324,
    false: 324,
    "?": 168,
    external: 184,
    not: 207
  };
  const parser = LRParser.deserialize({
    version: 14,
    states: "!%SO`QYOOO$gQYOOOOQU'#Ce'#CeO$qQYO'#C`O%zQ^O'#FOOOQQ'#Fd'#FdO'dQYO'#FdO`QYO'#DUOOQU'#Em'#EmO)QQ^O'#D]OOQO'#Fk'#FkO,PQWO'#DuOOQU'#D|'#D|OOQU'#D}'#D}OOQU'#EO'#EOO,UOWO'#ERO,PQWO'#EPOOQU'#EP'#EPOOQU'#Fq'#FqOOQU'#Fo'#FoOOQU'#ET'#ETO,ZQYO'#EVOOQU'#FQ'#FQO-oQ^O'#FQO/RQYO'#EWO/]QWO'#EXOOQP'#Fy'#FyO/bQXO'#E`OOQU'#Fv'#FvOOQU'#FP'#FPOOQQ'#Eh'#EhQ`QYOOOOQQ'#FR'#FROOQQ'#F['#F[O,ZQYO'#CnOOQQ'#F]'#F]O$qQYO'#CrO/mQYO'#DvOOQU'#Fp'#FpO/rQYO'#EQOOQO'#EQ'#EQO,ZQYO'#EUO`QYO'#ETOOQO'#Fw'#FwO1UQYO'#DQO1lQWO'#F`OOQO'#DS'#DSO1wQYO'#FdQOQWOOO2OQWOOO2rQYO'#CdO3PQYO'#FTOOQQ'#Cc'#CcO3UQYO'#FSOOQQ'#Cb'#CbO3^QYO,58zO`QYO,59hOOQQ'#Fa'#FaOOQQ'#Fb'#FbOOQQ'#Fc'#FcO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#Fi'#FiO$qQYO,5:]OOQQ'#Fj'#FjO,ZQYO,5:_OOQQ,5;j,5;jO`QYO,59dO`QYO,59fO,ZQYO,59hO4|QYO,59hO5TQYO,59rOOQU,5:h,5:hO5YQ^O,59pOOQU-E8k-E8kO8XQYO'#FlOOQU,5:a,5:aOOQU,5:m,5:mOOQU,5:k,5:kO8cQYO,5:qOOQU,5;l,5;lO:nQYO,5:pO:xQWO,5:rO:}QYO,5:sOOQP'#Ed'#EdO;qQXO'#EcOOQO'#Eb'#EbO;xQWO'#EaO;}QWO'#FzO<VQWO,5:zOOQQ-E8f-E8fO=]QYO,59YO3PQYO'#F_OOQQ'#Cv'#CvO=dQYO'#F^OOQQ'#Cu'#CuO=lQYO,59^O=qQYO,5:bO=vQYO,5:lO9jQYO,5:pO={Q^O,5:oO,ZQYO'#ElO?eQWO,5;zO,ZQYOOOOQR'#Cf'#CfOOQQ'#Ei'#EiO@[QYO,59OO,ZQYO,5;oOOQQ'#FW'#FWO$qQYO'#EjO@lQYO,5;nO`QYO1G.fOOQQ'#FZ'#FZO@tQ^O1G/SOCZQ^O1G/[OEpQ^O1G/[OJlQ^O1G/[OOQU1G/w1G/wOKYQYO1G/yOMgQ^O1G/OO!!TQ^O1G/QO!#cQYO1G/SO,ZQYO1G/SOOQU1G/S1G/SO!#jQYO1G/^O!$UQ^O'#CdO!%hQYO'#FnOOQO'#Dy'#DyO!%rQWO'#DxO!%wQWO'#FmOOQO'#Dw'#DwOOQO'#Dz'#DzO!&PQWO,5<WOOQU1G0]1G0]O,ZQYO1G0[O,ZQYO'#ErO!&UQWO,5<YOOQU1G0^1G0^O!&aQWO'#EZO!&lQWO'#FxOOQO'#EY'#EYO!&tQWO1G0_OOQP'#Et'#EtO!&yQXO,5:}O,ZQYO,5:{O!'QQXO'#EuO!'YQWO,5<fOOQU1G0f1G0fO!'bQYO1G.tO,ZQYO,5;yO$qQYO'#EkO!)OQYO,5;xO`QYO1G.xO!)WQYO1G/|OOQO1G0W1G0WOOQO,5;W,5;WOOQO-E8j-E8jO!)]QWOOOOQQ-E8g-E8gO!)bQYO'#ClOOQQ1G1Z1G1ZOOQQ,5;U,5;UOOQQ-E8h-E8hO!)oQ^O7+$QOOQU7+%e7+%eO`QYO7+$nO!+XQYO,5:qO!+`QWO7+$nO!+eQ^O'#D[OOQU'#DZ'#DZO!.dQYO'#D^O!.iQYO'#D^O!.nQYO'#D^O!.sQ`O'#DfO!.xQ`O'#DiO!.}Q`O'#DmOOQU7+$x7+$xO,ZQYO,5:dO$qQYO'#EqO!/SQWO,5<XOOQU1G1r1G1rO!0YQYO7+%vO!0gQYO,5;^OOQO-E8p-E8pO!#jQYO,5:uO$qQYO'#EsO!0tQWO,5<dO!0|QYO7+%yOOQP-E8r-E8rO!1TQYO1G0gOOQO,5;a,5;aOOQO-E8s-E8sO!3tQ^O7+$`O!3{QYO1G1eOOQQ,5;V,5;VOOQQ-E8i-E8iO!4VQ^O7+$dOOQO7+%h7+%hO,ZQYO,59WO!5oQ^O<<HYOOQU<<HY<<HYO$qQYO'#EnO!8UQ^O,59vO!;TQYO,59xO!;YQYO,59xO!;_QYO,59xO!;dQYO,5:QO$qQYO,5:TO!<OQbO,5:XO!<VQYO1G0OOOQO,5;],5;]OOQO-E8o-E8oO!<aQ^O<<IbOOQU<<Ib<<IbOOQO1G0a1G0aOOQO,5;_,5;_OOQO-E8q-E8qO!?`Q^O'#E]OOQU<<Ie<<IeO`QYO<<IeO`QYO<<GzO!@xQYO1G.rOOQU,5;Y,5;YOOQU-E8l-E8lO!ASQYO1G/dOOQU1G/d1G/dO!AXQbO'#D]O!AjQ`O'#D[O!AuQ`O1G/lO!AzQWO'#DlO!BPQ`O'#FeOOQO'#Dk'#DkO!BXQ`O1G/oOOQO'#Dp'#DpO!B^Q`O'#FgOOQO'#Do'#DoO!BfQ`O1G/sOOQUAN?PAN?PO!BkQ^OAN=fOOQU7+%O7+%OO!DTQ`O,59vOOQU7+%W7+%WO!;dQYO,5:WO$qQYO'#EoO!D`Q`O,5<POOQU7+%Z7+%ZO!;dQYO'#EpO!DhQ`O,5<RO!DpQ`O7+%_OOQO1G/r1G/rOOQO,5;Z,5;ZOOQO-E8m-E8mOOQO,5;[,5;[OOQO-E8n-E8nO!#jQYO<<HyOOQUAN>eAN>eO!DuQ^O'#FQO,ZQYO'#ETO,ZQYO,59hO,ZQYO,59pO,ZQYO,59pO,ZQYO,59pO,ZQYO,59dO,ZQYO,59fO!FyQYO,59hO!GQQYO,5:oO,ZQYO1G.fO!GqQYO1G/SO!I_QYO1G/[O!J{QYO1G/[O!MvQYO1G/OO# kQYO1G/QO# {QYO1G.tO,ZQYO1G.xO##iQYO7+$QO,ZQYO7+$nO#$YQYO7+%yO#&QQYO7+$`O#&XQYO7+$`O#&`Q^O7+$`O#&gQYO7+$dO#'WQYO<<HYO$qQYO'#EnO#(tQYO'#E]O,ZQYO<<IeO,ZQYO<<GzO#)eQYOAN=fO!;dQYO<<HyO,ZQYO'#DUO#*UQ^O'#DQO3^QYO,58zO#+nQYO,59YO#+uQYO,59^O#+zQYO1G/SO#,RQWO1G0_O!'bQYO1G.tO#,WQ`O7+%_O# {QYO1G.tO$qQYO'#C`O,ZQYO'#CnO$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#,]QYO,59YO#,dQ`O1G/sO#,iQYO,59YO#,pQWO'#EXO,ZQYO'#CnO!'bQYO'#ETO!'bQYO,59hO!'bQYO,59pO!'bQYO,59pO!'bQYO,59pO!'bQYO,59dO!'bQYO,59fO#.`QYO,59hO#/hQ^O,5:oO!'bQYO1G.fO#1TQ^O1G/SO#1[Q^O1G/[O#1cQ^O1G/[O#1jQ^O1G/OO#2QQ^O1G/QO!'bQYO1G.xO#2eQ^O7+$QO!'bQYO7+$nO#4QQYO7+%yO#4XQ^O7+$dO#5tQ^O<<HYO!<OQbO,5:XO#5{Q^O'#E]O!'bQYO<<IeP!'bQYO<<GzP#7hQ^OAN=fO#8kQ^O'#DQO,ZQYO'#CnO!'bQYO'#DUO3^QYO,58zO#:WQYO,59^O#:]QYO1G/SO#:dQWO1G0_O#:iQ`O'#DmO# {QYO'#ETO# {QYO,59hO# {QYO,59pO# {QYO,59pO# {QYO,59pO# {QYO,59dO# {QYO,59fO#<XQYO,59hO#=aQYO,5:oO# {QYO1G.fO#>TQYO1G/SO#>[QYO1G/[O#>cQYO1G/[O#>jQYO1G/OO#?QQYO1G/QO# {QYO1G.xO#?eQYO7+$QO# {QYO7+$nO#@XQYO7+%yO#@`QYO7+$dO#ASQYO<<HYO#AZQYO'#E]O# {QYO<<IeP# {QYO<<GzP#A}QYOAN=fO# {QYO'#DUO3^QYO,58zO#CQQYO,59^O#CVQYO1G/SO#C^QWO1G0_O$qQYO'#C`O$qQYO'#CrO,ZQYO,59hO:}QYO,5:sO#CcQWO'#EXO$qQYO'#C`O$qQYO'#CrO#ChQYO'#DQO,ZQYO,59hO:}QYO,5:sO#DRQWO'#EX",
    stateData: "#DW~O#pOS#qOSPOSQOS~OTpOZUO[TOcqOgsOhsOrzOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OTpO[TOcqOgsOhsOr&lOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~OZ!PO#Z!RO~P!|O#lQO#mQO~OZ!ZO[!ZO]![O^![O_!iOm!fOo!gOq!YOr!YOs!hOy!]O{!jO!h!cO#x!aOu$_X~O#n!eO$o!eOT#rXc#rXg#rXh#rX!S#rX!T#rX!U#rX!W#rX!b#rX!f#rX!o#rX!v#rX#R#rX#j#rX#l#rX#m#rX$f#rX$g#rX$h#rX$i#rX~P$yO$f!kOT$WXZ$WX[$WXc$WXg$WXh$WXr$WXu$WX!S$WX!T$WX!U$WX!W$WX!b$WX!f$WX!h$WX!o$WX!v$WX#R$WX#l$WX#m$WX$g$WX$h$WX$i$WX~O#lQO#mQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!b!PX!f!PX!h!PX!o!PX!v!PX#R!PX#j!PX#n!PX#x!PX$f!PX$g!PX$h!PX$i!PX$o!PX#|!PXw!PX#{!PXd!PXa!PX#Q!PXe!PXk!PX~Ou!nO~O$g]O~OZUO~P!|O#n!sOZ#tX[#tX]#tX^#tX_#tXm#tXo#tXq#tXr#tXs#tXu#tXy#tX{#tX!f#tX!h#tX#j#tX#x#tXe#tX~OT#tXc#tXg#tXh#tX!S#tX!T#tX!U#tX!W#tX!b#tX!o#tX!v#tX#R#tX#l#tX#m#tX#n#tX$f#tX$g#tX$h#tX$i#tX$o#tX~P,bOZUO!f$bP~P!|Ou!vO~O#k!wO$g]O#Q$nP~Oo#UO~Oo#VOu!tX~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOu$_X#jtX#|tXwtX#{tX!ftXdtXatX#QtXktX~O_&sOm&qOo&rOq&mOr&mOs'jO~P/zO#|#YO#j$SXw$SX~O#j#YX~P'dOu#[O~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O$YWX~O_WXwWX#|WX~P2TO_#aO~O#|#bOa#vX~Oa#eO~OTpOZUO[TOcqOgsOhsOrzO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P3cO|#qO~O{!jO!h!cO#x!aOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau$_Xyxa!Sxa!Txa!Uxa!Wxa!bxa!fxa!oxa!vxa#Rxa#jxa#lxa#mxa#nxa$fxa$gxa$hxa$ixa$oxa#|xawxa#{xadxaaxa#Qxaexakxa~OZUOw$bP~P!|OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOw#zOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aO#{#{Ou$_X~O#|#|O!f$bX~P9jO!f$OO~O#lQO#mQOw$lP~OZ#]O[#]O]#]O^#]O#k!wO#x#]O#y#]O~O$Y#VX~P;YO$Y$VO~O#|$WO#Q$nX~O#Q$YO~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Od$ZO~P<[O#|$]Ok$QX~Ok$_O~O!V$`O~O!S$aO~OT!wac!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P$yO#|#YO#j$Saw$Sa~OZ#]O[#]O]#]O^#]O#lQO#mQO#x#]O#y#]O~O_Wa$YWawWa#|Wa~P?pO#|#bOa#va~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpi_picpigpihpimpiopiqpirpispiu$_X!Spi!Tpi!Upi!Wpi!bpi!fpi!opi!vpi#Rpi#jpi#lpi#mpi#npi$fpi$gpi$hpi$ipi$opi~O]![O^![Oy!]O{!jO!h!cO#x!aOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~Oy!]O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxi~O{!jO!h!cO#x!aOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$oxiexi~Oyxi#|xiwxi#{xidxiaxi#Qxikxi~PHVO!f$kO~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTlicliglihlimliu$_X!Sli!Tli!Uli!Wli!bli!fli!oli!vli#Rli#jli#lli#mli#nli$fli$gli$hli$ili$oli~O_!iOo!gOq!YOr!YOs!hO~PKaOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTnicnignihnimnioniu$_X!Sni!Tni!Uni!Wni!bni!fni!oni!vni#Rni#jni#lni#mni#nni$fni$gni$hni$ini$oni~O_!iOq!YOr!YOs!hO~PMzOZ!ZO[!ZO]![O^![O_&sOm&qOq&mOr&mOs'jOy!]O{!jO!h!cO#x!aOu$_X~Oo$lO~P!!eO!R$qO!U$rO!W$sO!Z$tO!^$uO!b$vO#lQO#mQO~OZ#aX[#aX]#aX^#aX_#aXm#aXo#aXq#aXr#aXs#aXu#aXw#aXy#aX{#aX!h#aX#l#aX#m#aX#n#aX#x#aX#|#aX~P2TO#|#|Ow$bX~P<[O$Y$xO~O#|$yOw$aX~Ow${O~O#|#|O!f$baw$ba~O$Y%POw!}X#|!}X~O#|%QOw$lX~Ow%SO~O$Y#Va~P;YO#k!wO$g]O~O#|$WO#Q$na~OTpOZUO[TOcqOgsOhsOr'qOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#|$]Ok$Qa~O!T%^O~Ow!QO~O#{%_Oa`X#|`X~P<[OTSqcSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P$yO#|tX~P8cOw%aO~O#x%bOT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!b!OX!f!OX!h!OX!o!OX!v!OX#R!OX#j!OX#l!OX#m!OX#n!OX$f!OX$g!OX$h!OX$i!OX$o!OX#|!OXw!OX#{!OXd!OXa!OX#Q!OXe!OXk!OX~Oo%dO~Oo%eO~Oo%fO~O![%gO~O![%hO~O![%iO~O#|$yOw$aa~OZ!ZO[!ZO]![O^![O_&sOm&qOo&rOq&mOr&mOs'jOy!]O{!jO#x!aOu$_X~Ow%nO!f%nO!h%mO~P!/[O!f#fa#|#faw#fa~P<[O#|%QOw$la~O#O%tO~P`O#Q#Ti#|#Ti~P<[OZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOTbqcbqgbqhbqu$_X!Sbq!Tbq!Ubq!Wbq!bbq!fbq!obq!vbq#Rbq#jbq#lbq#mbq#nbq$fbq$gbq$hbq$ibq$obq~Oe%uO~P!1_Ok$Ri#|$Ri~P<[OTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P$yOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOTpy_pycpygpyhpympyopyqpyrpyspyu$_X!Spy!Tpy!Upy!Wpy!bpy!fpy!opy!vpy#Rpy#jpy#lpy#mpy#npy$fpy$gpy$hpy$ipy$opy~O#x%bOT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!b!Oa!f!Oa!h!Oa!o!Oa!v!Oa#R!Oa#j!Oa#l!Oa#m!Oa#n!Oa$f!Oa$g!Oa$h!Oa$i!Oa$o!Oa#|!Oaw!Oa#{!Oad!Oaa!Oa#Q!Oae!Oak!Oa~O!S%yO~O!V%yO~O!S%zO~O!R$qO!U$rO!W$sO!Z$tO!^$uO!b(dO#lQO#mQO~O!X$ZP~P!;dOw!li#|!li~P<[OT$^XZ$^X[$^X]!xy^!xy_!xyc$^Xg$^Xh$^Xm!xyo!xyq!xyr$^Xs!xyu$^Xy!xy{!xy!S$^X!T$^X!U$^X!W$^X!b$^X!f$^X!h$^X!o$^X!v$^X#R$^X#j!xy#l$^X#m$^X#n!xy#x!xy$f$^X$g$^X$h$^X$i$^X$o!xy#|!xyw!xy#{!xyd!xya!xy#Q!xye!xyk!xy~OT#PXc#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P$yOa`i#|`i~P<[O!T&YO~O#lQO#mQO!X!PX#x!PX#|!PX~O#x'VO!X!OX#|!OX~O!X&[O~O$Y&]O~O#|&^O!X$XX~O!X&`O~O#|&aO!X$ZX~O!X&cO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!bb!R!fb!R!ob!R!vb!R#Rb!R#jb!R#lb!R#mb!R#nb!R$fb!R$gb!R$hb!R$ib!R$ob!R~P$yO#x'VO!X!Oa#|!Oa~O#|&^O!X$Xa~O#|&aO!X$Za~O$[&iO~O#|#tXw#tX#{#tXd#tXa#tX#Q#tXk#tX~P,bOTpOZUO[TOcqOgsOhsOr&lO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P!E`O#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pimpiopiqpirpispiu$_X#jpi#|piwpi#{pi!fpidpiapi#Qpikpi~O]![O^![Oy!]O{!jO!h!cO#x!aOZxi[xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~Oy!]O{!jO!h!cO#x!aOZxi[xi]xi^xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi#{xi!fxidxiaxi#Qxikxi~OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmliu$_X#jli#|liwli#{li!flidliali#Qlikli~O_&sOo&rOq&mOr&mOs'jO~P!LiOZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aOmnioniu$_X#jni#|niwni#{ni!fnidniani#Qnikni~O_&sOq&mOr&mOs'jO~P!NZOTpOZUO[TOcqOgsOhsOr(eOueO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~O#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P<[OZUO#O'XO~P!|OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X#jbq#|bqwbq#{bq!fbqdbqabq#Qbqkbq~Oe'YO~P#$dOebq~P#$dOebq~P!1_O#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P<[OZ!ZO[!ZO]![O^![Oy!]O{!jO!h!cO#x!aO_pympyopyqpyrpyspyu$_X#jpy#|pywpy#{py!fpydpyapy#Qpykpy~O#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P<[O#jb!R#|b!Rwb!R#{b!R!fb!Rdb!Rab!R#Qb!Rkb!R~P<[OTtXctXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P$yOd&{O~P<[Ok&|O~Oo'OO~P!!eOw'PO~O$['[O~Od'dO~P<[O!X'eO~Od'fO~P<[Ou'kO~OTpOZUO[TOcqOgsOhsOr'qO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#,uOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~OT!wac!wae!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$o!wa~P#.gOepi~P@tOexi~PCZOexi~PEpO_'xOo'wOq'rOr'rOs)]Oeli~PKaO_'xOq'rOr'rOs)]Oeni~PMzOTSqcSqeSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$oSq~P#.gO#O(YO~P!'bOTfqcfqefqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ofq~P#.gOepy~P!5oOT#PXc#PXe#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$o#PX~P#.gOZ!ZO[!ZO]![O^![O_'xOm'vOo'wOq'rOr'rOs)]Oy!]O{!jO!h!cO#x!aOu$_X~Qb!RTtXctXetXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$otX~P#.gOk(QO~Oo(SO~P!!eOw(TO~O![(WO~OTpOZUO[TOcqOgsOhsOr(eO!SxO!TxO!UuO!WwO!b{O!fyO!hhO!ovO!vfO#RjO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#oO~P#:nOZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Oe!wa#j!wa#|!waw!wa#{!wa!f!wad!waa!wa#Q!wak!wa~P#<`Oepi~P!GqOexi~P!I_Oexi~P!J{O_(lOo(kOq(fOr(fOs)VOeli~P!LiO_(lOq(fOr(fOs)VOeni~P!NZOeSq#jSq#|SqwSq#{Sq!fSqdSqaSq#QSqkSq~P#<`O#O({O~P# {Oefq#jfq#|fqwfq#{fq!ffqdfqafq#Qfqkfq~P#<`Oepy~P#'WOe#PX#j#PX#|#PXw#PX#{#PX!f#PXd#PXa#PX#Q#PXk#PX~P#<`OZ!ZO[!ZO]![O^![O_(lOm(jOo(kOq(fOr(fOs)VOy!]O{!jO!h!cO#x!aOu$_X~Qb!Rk(tO~Oo(vO~P!!eOw(wO~Ou)WO~O_(lOm(jOo(kOq(fOr(fOs)VOetX~P/zOu)^O~O",
    goto: "!7p$oPPPP$pP&p&|'V'r*mPPPPP*vP$pPPP$pPP*y+VP$pP$pP$pPPP+`P+nP$pP$pPP+w,^,i,^PPPPPPP,^PP,^P/P/S,^P/Y/`$pP$pP$p/g1g1j1p1gP1{3{1{1{6S8SP$p:S$p<S<S>S>`P>iPP<S>u>{6O?PP?XP?[?b?i?o?u?{B_BiBoBuB{CSCYC`PPPPPPPPCfCjHvJvL|MSPPMZPPMaMm! s!#y!$P!$W!$]!%y!'k!)a!+gP!+jP!+n!-`!/Q!1Q!1W!1Z$p!1a!1aPPPPHv!3a!5g!5m!7m${fOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!XRQ'_'gQ(`)YR)P)TW!VR'g)T)YR$h#bY!TR#b'g)T)YY#Pt$]'i)U)Z^#t!n!v$y%Q'k)W)^T&O%h&^%fWOPVXehoryz!Y!^!_!`!b!d!f!g!h!i#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%g%i%t%u%{&]&a&i&l&m&n&o&p&q&r&s&u&{&|'O'P'V'X'Y'[']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(W(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]t!SRt!v#b$]$y%Q%h&^'g'i'k)T)U)W)Y)Z)^U#^!S#_#rR#r!nU#^!S#_#rT$T!x$UR$g#`Q#TtQ'a'iQ(a)ZR)Q)UW#Rt'i)U)ZR%Z$]U}P#[#oW#p!i&s'x(lR$b#YQ!QPQ$d#[R$n#oQ$w#qQ%o%PQ%}%gU&S%i&a(WQ&d&]T&j&i'[c$p#q%P%g%i&]&a&i'[(W!fgOVoz!Y!^!_!`!f!g!i#d$Z$_$l%S%t%u'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_Q#j!bU$o#q%P&iS%w%b'V[%|%g%i&]&a'[(W#e&kPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'f'h'j'p(^(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R&R%hQ&P%hR&e&^Q&V%iR'm(WS&T%i(WR&g&a${YOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R#y!nQ#v!nR%k$yS#u!n$yZ$P!v%Q'k)W)^${bOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]$zbOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!p_T!yk$W${`OPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${aOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${dOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]${lOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q$S!vQ'c'kQ(c)^R)S)WW$Q!v'k)W)^R%p%QW%s%S'P(T(wX&W%t'X(Y({Q!{kR%V$WT!zk$WS!xk$WT$T!x$UR!QPQoOR!}oS#_!S#rR$e#_Q#c!VR$i#cQ$^#RR%[$^Q#Z}R$c#Z%UXOPVehoryz!Y!^!_!`!b!d!f!g!h!i!n#Y#[#`#d#o#q#{#|$V$Z$[$_$l$x%P%S%_%b%t%u&i&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]S!mX%{_%{%g%i&]&a'V'[(WQ%c$oS%x%c&ZR&Z%|Q&_&PR&f&_Q&b&TR&h&bQ$z#vR%l$zS#}!t#sR%O#}Q%R$QR%q%RQ$U!xR%T$UQ$X!{R%W$XTnOoSSOoW|P#Y#[&sW!lV'](_)OQ!reQ!thQ#OrQ#WyQ#XzQ#f!YQ#g!^Q#h!_W#i!`&p'u(iQ#k!dQ#l!fQ#m!gQ#n!hQ#s!nQ$f#`Q$j#dQ$m#oQ$|#{Q$}#|Q%U$VQ%X$ZQ%Y$[Q%]$_Q%`$lQ%j$xS%r%S%tQ%v%_Q&X%uQ&t&lQ&v&mQ&w&nQ&x&oQ&y&qQ&z&rQ&}&uQ'Q&{Q'R'fQ'S'dQ'T&|Q'U'OS'W'P'XQ'Z'YQ'^!iQ'`'hQ'b'jQ'l'pQ'n(^Q'y'qQ'{'rQ'|'sQ'}'tQ(O'vQ(P'wQ(R'zQ(U(QQ(V(SS(X(T(YQ([(ZQ(]'xQ(b)]Q(m(eQ(o(fQ(p(gQ(q(hQ(r(jQ(s(kQ(u(nQ(x(tQ(y(vS(z(w({Q(}(|Q)R)VR)[(l${mOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]rROVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'gPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)T&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Y$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X!WR'g)T)YZ!UR#b'g)T)YQ#`!TR$[#PQ#d!XQ&u'_Q'z(`R(n)PrrOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'hPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r'p$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s(^&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OrtOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'iPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)U&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)Z$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X#St'i)U)ZZ#Qt$]'i)U)ZV!OP#[#of!^S#X#f#l#m$j%]%`%r&X'^!`&n|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&y&z&}'T'U'W'Z'`'b'l'n(b)Rh's%X'S'y'{(O(P(R(U(V(X([(]i(g'Q'R(m(o(r(s(u(x(y(z(})[h!_S#X#f#g#l#m$j%]%`%r&X'^!b&o|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&y&z&}'T'U'W'Z'`'b'l'n(b)Rj't%X'S'y'{'|(O(P(R(U(V(X([(]k(h'Q'R(m(o(p(r(s(u(x(y(z(})[j!`S#X#f#g#h#l#m$j%]%`%r&X'^!d&p|!r!t#O#W#k#n#s$f$m$|$}%U%Y%j%v&t&v&w&x&y&z&}'T'U'W'Z'`'b'l'n(b)Rl'u%X'S'y'{'|'}(O(P(R(U(V(X([(]m(i'Q'R(m(o(p(q(r(s(u(x(y(z(})[rVOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p']Pehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r(_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_s)O&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)OR&Q%hT&U%i(W$_!bS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[$_!dS|!l!r!t#O#W#X#f#g#h#i#k#l#m#n#s$f$j$m$|$}%U%X%Y%]%`%j%r%v&X&t&v&w&x&y&z&}'Q'R'S'T'U'W'Z'^'`'b'l'n'y'{'|'}(O(P(R(U(V(X([(](b(m(o(p(q(r(s(u(x(y(z(})R)[${ZOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]Q!oZR!q`R#w!nQ!uhR#x!n${cOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]riOVoz!Y!^!_!`!f!g!i#d$_$l%S%t%u!p'oPehry!d!h!n#Y#[#`#o#{#|$V$[$x%_&l&m&n&o&p&q&r&s&u&|'O'P'X'Y']'h'j'p(^)V)]r)X&{'f(e(f(g(h(i(j(k(l(n(t(v(w({(|)Os)_$Z'd'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(_X$R!v'k)W)^${kOPVehoryz!Y!^!_!`!d!f!g!h!i!n#Y#[#`#d#o#{#|$V$Z$[$_$l$x%S%_%t%u&l&m&n&o&p&q&r&s&u&{&|'O'P'X'Y']'d'f'h'j'p'q'r's't'u'v'w'x'z(Q(S(T(Y(Z(^(_(e(f(g(h(i(j(k(l(n(t(v(w({(|)O)V)]R!|k",
    nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
    maxTerm: 169,
    context: variableTracker,
    nodeProps: [["group", -17, 4, 18, 22, 28, 30, 32, 40, 42, 67, 69, 71, 84, 85, 87, 88, 89, 96, "Expression", 47, "Expression Expression", -5, 77, 78, 79, 80, 81, "Expression Literal"], ["closedBy", 37, ")", 70, "]", 95, "}"], ["openedBy", 39, "(", 68, "[", 94, "{"]],
    propSources: [feelHighlighting],
    skippedNodes: [0, 1, 2],
    repeatNodeCount: 14,
    tokenData: "+l~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx&cxy&hyz&mz{&r{|'P|}'U}!O'Z!O!P'h!P!Q(Q!Q![){![!]*^!]!^*c!^!_*h!_!`$f!`!a*w!b!c+R!}#O+W#P#Q+]#Q#R&z#o#p+b#q#r+g$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY#p~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O#q~~$cP!_!`$f~$kOq~~$pW$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&]<%lO$k~%_O$g~~%bRO;'S$k;'S;=`%k;=`O$k~%pX$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&];=`<%l$k<%lO$k~&`P;=`<%l$k~&hO#y~~&mOu~~&rOw~~&wP^~z{&z~'POy~~'UO[~~'ZO#|~R'`PZP!`!a'cQ'hO$[Q~'mQ#x~!O!P's!Q!['x~'xO#{~~'}P$f~!Q!['x~(VQ]~z{(]!P!Q)d~(`TOz(]z{(o{;'S(];'S;=`)^<%lO(]~(rVOz(]z{(o{!P(]!P!Q)X!Q;'S(];'S;=`)^<%lO(]~)^OQ~~)aP;=`<%l(]~)iSP~OY)dZ;'S)d;'S;=`)u<%lO)d~)xP;=`<%l)d~*QQ$f~!O!P*W!Q![){~*ZP!Q!['x~*cO$Y~~*hO$o~R*oP![QrP!_!`*rP*wOrPR+OP!XQrP!_!`*r~+WO$i~~+]O!h~~+bO!f~~+gO#R~~+lO#Q~",
    tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
    topRules: {
      "Expressions": [0, 3],
      "UnaryTests": [1, 101]
    },
    dynamicPrecedences: {
      "30": -1,
      "71": -1,
      "73": -1,
      "126": -1
    },
    specialized: [{
      term: 120,
      get: value => spec_identifier[value] || -1
    }],
    tokenPrec: 0
  });

  // / A collection of FEEL-related
  // / [snippets](#autocomplete.snippet).
  const snippets = [/*@__PURE__*/snippetCompletion('function(${params}) ${body}', {
    label: 'function',
    detail: 'definition',
    type: 'keyword'
  }), /*@__PURE__*/snippetCompletion('for ${var} in ${collection} return ${value}', {
    label: 'for',
    detail: 'expression',
    type: 'keyword'
  }), /*@__PURE__*/snippetCompletion('every ${var} in ${collection} satisfies ${condition}', {
    label: 'every',
    detail: 'quantified expression',
    type: 'keyword'
  }), /*@__PURE__*/snippetCompletion('some ${var} in ${collection} satisfies ${condition}', {
    label: 'some',
    detail: 'quantified expression',
    type: 'keyword'
  }), /*@__PURE__*/snippetCompletion('if ${condition} then ${value}', {
    label: 'if',
    detail: 'block',
    type: 'keyword'
  }), /*@__PURE__*/snippetCompletion('if ${condition} then ${value} else ${other value}', {
    label: 'if',
    detail: '/ else block',
    type: 'keyword'
  })];

  // / A language provider based on the [Lezer FEEL
  // / parser](https://github.com/nikku/lezer-feel), extended with
  // / highlighting and indentation information.
  const feelLanguage = /*@__PURE__*/LRLanguage.define({
    parser: /*@__PURE__*/parser.configure({
      props: [/*@__PURE__*/indentNodeProp.add({
        'Context': /*@__PURE__*/delimitedIndent({
          closing: '}'
        }),
        'List FilterExpression': /*@__PURE__*/delimitedIndent({
          closing: ']'
        }),
        'ParenthesizedExpression FunctionInvocation': /*@__PURE__*/delimitedIndent({
          closing: ')'
        }),
        'ForExpression QuantifiedExpression IfExpression': /*@__PURE__*/continuedIndent({
          except: /^\s*(then|else|return|satisfies)\b/
        }),
        'FunctionDefinition': /*@__PURE__*/continuedIndent({
          except: /^\s*(\(|\))/
        })
      }), /*@__PURE__*/foldNodeProp.add({
        Context: foldInside,
        List: foldInside,
        FunctionDefinition(node) {
          const last = node.getChild(')');
          if (!last) return null;
          return {
            from: last.to,
            to: node.to
          };
        }
      })]
    }),
    languageData: {
      indentOnInput: /^\s*(\)|\}|\]|then|else|return|satisfies)$/,
      commentTokens: {
        line: '//',
        block: {
          open: '/*',
          close: '*/'
        }
      }
    }
  });

  /**
   * Create an array of syntax errors in the given tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of syntax errors
   */
  function lintSyntax(syntaxTree) {
    const lintMessages = [];
    syntaxTree.iterate({
      enter: node => {
        if (node.type.isError) {
          const error = node.toString();

          /* The error has the pattern [⚠ || ⚠(NodeType)]. The regex extracts the node type from inside the brackets */
          const match = /\((.*?)\)/.exec(error);
          const nodeType = match && match[1];
          let message;
          if (nodeType) {
            message = 'unexpected ' + nodeType;
          } else {
            message = 'expression expected';
          }
          lintMessages.push({
            from: node.from,
            to: node.to,
            severity: 'error',
            message: message,
            type: 'syntaxError'
          });
        }
      }
    });
    return lintMessages;
  }

  /**
   * Generates lint messages for the given syntax tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of all lint messages
   */
  function lintAll(syntaxTree) {
    const lintMessages = [...lintSyntax(syntaxTree)];
    return lintMessages;
  }

  /**
   * CodeMirror extension that provides linting for FEEL expressions.
   *
   * @param {EditorView} editorView
   * @returns {Source} CodeMirror linting source
   */
  const cmFeelLinter = () => editorView => {
    // don't lint if the Editor is empty
    if (editorView.state.doc.length === 0) {
      return [];
    }
    const tree = syntaxTree(editorView.state);
    const messages = lintAll(tree);
    return messages.map(message => ({
      ...message,
      source: 'syntaxError'
    }));
  };

  // helpers ///////////////////////////////

  function isNodeEmpty(node) {
    return node.from === node.to;
  }
  function isPathExpression(node) {
    if (!node) {
      return false;
    }
    if (node.name === 'PathExpression') {
      return true;
    }
    return isPathExpression(node.parent);
  }
  var tags = [{
    name: "not()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>negand</code>: boolean</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">not(true)\n// false\n</code></pre>\n"
  }, {
    name: "is defined()",
    description: "<p>Checks if a given value is defined. A value is defined if it exists, and it is an instance of one of the FEEL data types including <code>null</code>.</p>\n<p>The function can be used to check if a variable or a context entry (e.g. a property of a variable) exists. It allows differentiating between a <code>null</code> variable and a value that doesn&#39;t exist.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">is defined(1)\n// true\n\nis defined(null)\n// true\n\nis defined(x)\n// false - if no variable &quot;x&quot; exists\n\nis defined(x.y)\n// false - if no variable &quot;x&quot; exists or it doesn&#39;t have a property &quot;y&quot;\n</code></pre>\n"
  }, {
    name: "get value()",
    description: "<p>Returns the value of the context entry with the given key.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n</ul>\n</li>\n<li>result: any</li>\n</ul>\n<pre><code class=\"language-feel\">get value({foo: 123}, &quot;foo&quot;)\n// 123\n</code></pre>\n"
  }, {
    name: "get entries()",
    description: "<p>Returns the entries of the context as a list of key-value-pairs.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n</ul>\n</li>\n<li>result: list of context which contains two entries for &quot;key&quot; and &quot;value&quot;</li>\n</ul>\n<pre><code class=\"language-feel\">get entries({foo: 123})\n// [{key: &quot;foo&quot;, value: 123}]\n</code></pre>\n"
  }, {
    name: "put()",
    description: "<p>Add the given key and value to a context. Returns a new context that includes the entry. It might override an existing entry of the context.</p>\n<p>Returns <code>null</code> if the value is not defined.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put({x:1}, &quot;y&quot;, 2)\n// {x:1, y:2}\n</code></pre>\n"
  }, {
    name: "put all()",
    description: "<p>Union the given contexts (two or more). Returns a new context that includes all entries of the given contexts. It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts are passed in the method.</p>\n<p>Returns <code>null</code> if one of the values is not a context.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>contexts</code>: contexts as varargs</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put all({x:1}, {y:2})\n// {x:1, y:2}\n</code></pre>\n"
  }, {
    name: "date()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>year</code>, <code>month</code>, <code>day</code>: number</li>\n</ul>\n</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">date(birthday)\n// date(&quot;2018-04-29&quot;)\n\ndate(date and time(&quot;2012-12-25T11:00:00&quot;))\n// date(&quot;2012-12-25&quot;)\n\ndate(2012, 12, 25)\n// date(&quot;2012-12-25&quot;)\n</code></pre>\n"
  }, {
    name: "time()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>hour</code>, <code>minute</code>, <code>second</code>: number<ul>\n<li>(optional) <code>offset</code>: day-time-duration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>result: time</li>\n</ul>\n<pre><code class=\"language-feel\">time(lunchTime)\n// time(&quot;12:00:00&quot;)\n\ntime(date and time(&quot;2012-12-25T11:00:00&quot;))\n// time(&quot;11:00:00&quot;)\n\ntime(23, 59, 0)\n// time(&quot;23:59:00&quot;)\n\ntime(14, 30, 0, duration(&quot;PT1H&quot;))\n// time(&quot;15:30:00&quot;)\n</code></pre>\n"
  }, {
    name: "date and time()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date / date-time</li>\n<li><code>time</code>: time</li>\n<li>or <code>from</code>: string</li>\n</ul>\n</li>\n<li>result: date-time</li>\n</ul>\n<pre><code class=\"language-feel\">date and time(date(&quot;2012-12-24&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-24T23:59:00&quot;)\n\ndate and time(date and time(&quot;2012-12-25T11:00:00&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-25T23:59:00&quot;)\n\ndate and time(birthday)\n// date and time(&quot;2018-04-29T009:30:00&quot;)\n</code></pre>\n"
  }, {
    name: "duration()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: day-time-duration or year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">duration(weekDays)\n// duration(&quot;P5D&quot;)\n\nduration(age)\n// duration(&quot;P32Y&quot;)\n</code></pre>\n"
  }, {
    name: "years and months duration()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: date</li>\n<li><code>to</code>: date</li>\n</ul>\n</li>\n<li>result: year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">years and months duration(date(&quot;2011-12-22&quot;), date(&quot;2013-08-24&quot;))\n// duration(&quot;P1Y8M&quot;)\n</code></pre>\n"
  }, {
    name: "number()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">number(&quot;1500.5&quot;)\n// 1500.5\n</code></pre>\n"
  }, {
    name: "string()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: any</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">string(1.1)\n// &quot;1.1&quot;\n\nstring(date(&quot;2012-12-25&quot;))\n// &quot;2012-12-25&quot;\n</code></pre>\n"
  }, {
    name: "context()",
    description: "<p>Constructs a context of the given list of key-value pairs. It is the reverse function to <a href=\"feel-built-in-functions-context.md#get-entries\">get entries()</a>.</p>\n<p>Each key-value pair must be a context with two entries: <code>key</code> and <code>value</code>. The entry with name <code>key</code> must have a value of the type <code>string</code>.</p>\n<p>It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts in the given list.</p>\n<p>Returns <code>null</code> if one of the entries is not a context or if a context doesn&#39;t contain the required entries.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>entries</code>: list of contexts</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">context([{&quot;key&quot;:&quot;a&quot;, &quot;value&quot;:1}, {&quot;key&quot;:&quot;b&quot;, &quot;value&quot;:2}])\n// {a:1, b:2}\n</code></pre>\n"
  }, {
    name: "list contains()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>element</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">list contains([1,2,3], 2)\n// true\n</code></pre>\n"
  }, {
    name: "count()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">count([1,2,3])\n// 3\n</code></pre>\n"
  }, {
    name: "min()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">min([1,2,3])\n// 1\n\nmin(1,2,3)\n// 1\n</code></pre>\n"
  }, {
    name: "max()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">max([1,2,3])\n// 3\n\nmax(1,2,3)\n// 3\n</code></pre>\n"
  }, {
    name: "sum()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sum([1,2,3])\n// 6\n\nsum(1,2,3)\n// 6\n</code></pre>\n"
  }, {
    name: "product()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">product([2, 3, 4])\n// 24\n\nproduct(2, 3, 4)\n// 24\n</code></pre>\n"
  }, {
    name: "mean()",
    description: "<p>Returns the arithmetic mean (i.e. average).</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">mean([1,2,3])\n// 2\n\nmean(1,2,3)\n// 2\n</code></pre>\n"
  }, {
    name: "median()",
    description: "<p>Returns the median element of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">median(8, 2, 5, 3, 4)\n// 4\n\nmedian([6, 1, 2, 3])\n// 2.5\n</code></pre>\n"
  }, {
    name: "stddev()",
    description: "<p>Returns the standard deviation.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">stddev(2, 4, 7, 5)\n// 2.0816659994661326\n\nstddev([2, 4, 7, 5])\n// 2.0816659994661326\n</code></pre>\n"
  }, {
    name: "mode()",
    description: "<p>Returns the mode of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">mode(6, 3, 9, 6, 6)\n// [6]\n\nmode([6, 1, 9, 6, 1])\n// [1, 6]\n</code></pre>\n"
  }, {
    name: "and()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  }, {
    name: "all()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  }, {
    name: "or()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  }, {
    name: "any()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  }, {
    name: "sublist()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sublist([1,2,3], 2)\n// [2,3]\n\nsublist([1,2,3], 1, 2)\n// [1,2]\n</code></pre>\n"
  }, {
    name: "append()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>items</code>: elements as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">append([1], 2, 3)\n// [1,2,3]\n</code></pre>\n"
  }, {
    name: "concatenate()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">concatenate([1,2],[3])\n// [1,2,3]\n\nconcatenate([1],[2],[3])\n// [1,2,3]\n</code></pre>\n"
  }, {
    name: "insert before()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n<li><code>newItem</code>: any</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">insert before([1,3],1,2)\n// [1,2,3]\n</code></pre>\n"
  }, {
    name: "remove()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">remove([1,2,3], 2)\n// [1,3]\n</code></pre>\n"
  }, {
    name: "reverse()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">reverse([1,2,3])\n// [3,2,1]\n</code></pre>\n"
  }, {
    name: "index of()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>match</code>: any</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">index of([1,2,3,2],2)\n// [2,4]\n</code></pre>\n"
  }, {
    name: "union()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">union([1,2],[2,3])\n// [1,2,3]\n</code></pre>\n"
  }, {
    name: "distinct values()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">distinct values([1,2,3,2,1])\n// [1,2,3]\n</code></pre>\n"
  }, {
    name: "flatten()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">flatten([[1,2],[[3]], 4])\n// [1,2,3,4]\n</code></pre>\n"
  }, {
    name: "sort()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>precedes</code>: function with two arguments and boolean result</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sort(list: [3,1,4,5,2], precedes: function(x,y) x &lt; y)\n// [1,2,3,4,5]\n</code></pre>\n"
  }, {
    name: "string join()",
    description: "<p>This joins a list of strings into a single string. This is similar to\nJava&#39;s <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)\">joining</a>\nfunction.</p>\n<p>If an item of the list is <code>null</code>, the item is ignored for the result string. If an item is\nneither a string nor <code>null</code>, the function returns <code>null</code> instead of a string.</p>\n<ul>\n<li>Parameters:<ul>\n<li><code>list</code>: The list of strings to join</li>\n<li><code>delimiter</code>: (Optional) The string used between each element (default: empty string)</li>\n<li><code>prefix</code>: (Optional) The string used at the beginning of the joined result (default:\nempty string)</li>\n<li><code>suffix</code>: (Optional) The string used at the end of the joined result (default: empty\nstring)</li>\n</ul>\n</li>\n<li>Result: The joined list as a string</li>\n</ul>\n<pre><code class=\"language-feel\">string join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])\n// &quot;abc&quot;\nstring join([&quot;a&quot;], &quot;X&quot;)\n// &quot;a&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;)\n// &quot;a, b, c&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;, &quot;[&quot;, &quot;]&quot;)\n// &quot;[a, b, c]&quot;\nstring join([&quot;a&quot;,null,&quot;c&quot;])\n// &quot;ac&quot;\nstring join([])\n// &quot;&quot;\n</code></pre>\n"
  }, {
    name: "decimal()",
    description: "<p>Round the given number at the given scale using the given rounding mode. If no rounding mode is passed in, it uses <code>HALF_EVEN</code> as default.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n<li><code>scale</code>: number</li>\n<li>(optional) <code>mode</code>: string - one of <code>UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY</code> (default: <code>HALF_EVEN</code>)</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">decimal(1/3, 2)\n// .33\n\ndecimal(1.5, 0)\n// 2\n\ndecimal(2.5, 0, &quot;half_up&quot;)\n// 3\n</code></pre>\n"
  }, {
    name: "floor()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">floor(1.5)\n// 1\n\nfloor(-1.5)\n// -2\n</code></pre>\n"
  }, {
    name: "ceiling()",
    description: "<p>Round the given number at the given scale using the ceiling rounding mode.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">ceiling(1.5)\n// 2\n\nceiling(-1.5)\n// -1\n</code></pre>\n"
  }, {
    name: "abs()",
    description: "<p>Returns the absolute value of the given numeric value.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">abs(10)\n// 10\n\nabs(-10)\n// 10\n</code></pre>\n"
  }, {
    name: "modulo()",
    description: "<p>Returns the remainder of the division of dividend by divisor.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>dividend</code>: number</li>\n<li><code>divisor</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">modulo(12, 5)\n// 2\n</code></pre>\n"
  }, {
    name: "sqrt()",
    description: "<p>Returns the square root.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sqrt(16)\n// 4\n</code></pre>\n"
  }, {
    name: "log()",
    description: "<p>Returns the natural logarithm (base e) of the number.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">log(10)\n// 2.302585092994046\n</code></pre>\n"
  }, {
    name: "exp()",
    description: "<p>Returns the Euler’s number e raised to the power of number .</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">exp(5)\n// 148.4131591025766\n</code></pre>\n"
  }, {
    name: "odd()",
    description: "<p>Returns <code>true</code> if the given numeric value is odd. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">odd(5)\n// true\n\nodd(2)\n// false\n</code></pre>\n"
  }, {
    name: "even()",
    description: "<p>Returns <code>true</code> if the given numeric value is even. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">even(5)\n// false\n\neven(2)\n// true\n</code></pre>\n"
  }, {
    name: "before()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">before(1, 10)\n// true\n\nbefore(10, 1)\n// false\n\nbefore(1, [2..5])\n// true\n\nbefore([1..5], 10)\n// true\n\nbefore([1..5], [6..10])\n// true\n\nbefore([1..5),[5..10])\n// true\n</code></pre>\n"
  }, {
    name: "after()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">after(10, 1)\n// true\n\nafter(1, 10)\n// false\n\nafter(12, [2..5])\n// true\n\n([1..5], 10)\n// false\n\nbefore([6..10], [1..5])\n// true\n\nbefore([5..10], [1..5))\n// true\n</code></pre>\n"
  }, {
    name: "meets()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">meets([1..5], [5..10])\n// true\n\nmeets([1..3], [4..6])\n// false\n\nmeets([1..3], [3..5])\n// true\n\nmeets([1..5], (5..8])\n// false\n</code></pre>\n"
  }, {
    name: "met by()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">met by([5..10], [1..5])\n// true\n\nmet by([3..4], [1..2])\n// false\n\nmet by([3..5], [1..3])\n// true\n\nmet by((5..8], [1..5))\n// false\n\nmet by([5..10], [1..5))\n// false\n</code></pre>\n"
  }, {
    name: "overlaps()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps([5..10], [1..6])\n// true\n\noverlaps((3..7], [1..4])\n// true\n\noverlaps([1..3], (3..6])\n// false\n\noverlaps((5..8], [1..5))\n// false\n\noverlaps([4..10], [1..5))\n// treu\n</code></pre>\n"
  }, {
    name: "overlaps before()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps before([1..5], [4..10])\n// true\n\noverlaps before([3..4], [1..2])\n// false\n\noverlaps before([1..3], (3..5])\n// false\n\noverlaps before([1..5), (3..8])\n// true\n\noverlaps before([1..5), [5..10])\n// false\n</code></pre>\n"
  }, {
    name: "overlaps after()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps after([4..10], [1..5])\n// true\n\noverlaps after([3..4], [1..2])\n// false\n\noverlaps after([3..5], [1..3))\n// false\n\noverlaps after((5..8], [1..5))\n// false\n\noverlaps after([4..10], [1..5))\n// true\n</code></pre>\n"
  }, {
    name: "finishes()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes(5, [1..5])\n// true\n\nfinishes(10, [1..7])\n// false\n\nfinishes([3..5], [1..5])\n// true\n\nfinishes((1..5], [1..5))\n// false\n\nfinishes([5..10], [1..10))\n// false\n</code></pre>\n"
  }, {
    name: "finished by()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes by([5..10], 10)\n// true\n\nfinishes by([3..4], 2)\n// false\n\nfinishes by([3..5], [1..5])\n// true\n\nfinishes by((5..8], [1..5))\n// false\n\nfinishes by([5..10], (1..10))\n// true\n</code></pre>\n"
  }, {
    name: "includes()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">includes([5..10], 6)\n// true\n\nincludes([3..4], 5)\n// false\n\nincludes([1..10], [4..6])\n// true\n\nincludes((5..8], [1..5))\n// false\n\nincludes([1..10], [1..5))\n// true\n</code></pre>\n"
  }, {
    name: "during()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">during(5, [1..10])\n// true\n\nduring(12, [1..10])\n// false\n\nduring(1, (1..10])\n// false\n\nduring([4..6], [1..10))\n// true\n\nduring((1..5], (1..10])\n// true\n</code></pre>\n"
  }, {
    name: "starts()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts(1, [1..5])\n// true\n\nstarts(1, (1..8])\n// false\n\nstarts((1..5], [1..5])\n// false\n\nstarts([1..10], [1..10])\n// true\n\nstarts((1..10), (1..10))\n// true\n</code></pre>\n"
  }, {
    name: "started by()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">started by([1..10], 1)\n// true\n\nstarted by((1..10], 1)\n// false\n\nstarted by([1..10], [1..5])\n// true\n\nstarted by((1..10], [1..5))\n// false\n\nstarted by([1..10], [1..10))\n// true\n</code></pre>\n"
  }, {
    name: "coincides()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">coincides(5, 5)\n// true\n\ncoincides(3, 4)\n// false\n\ncoincides([1..5], [1..5])\n// true\n\ncoincides((1..5], [1..5))\n// false\n\ncoincides([1..5], [2..6])\n// false\n</code></pre>\n"
  }, {
    name: "substring()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring(&quot;foobar&quot;,3)\n// &quot;obar&quot;\n\nsubstring(&quot;foobar&quot;,3,3)\n// &quot;oba&quot;\n</code></pre>\n"
  }, {
    name: "string length()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">string length(&quot;foo&quot;)\n// 3\n</code></pre>\n"
  }, {
    name: "upper case()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">upper case(&quot;aBc4&quot;)\n// &quot;ABC4&quot;\n</code></pre>\n"
  }, {
    name: "lower case()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">lower case(&quot;aBc4&quot;)\n// &quot;abc4&quot;\n</code></pre>\n"
  }, {
    name: "substring before()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring before(&quot;foobar&quot;, &quot;bar&quot;)\n// &quot;foo&quot;\n</code></pre>\n"
  }, {
    name: "substring after()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring after(&quot;foobar&quot;, &quot;ob&quot;)\n// &quot;ar&quot;\n</code></pre>\n"
  }, {
    name: "contains()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">contains(&quot;foobar&quot;, &quot;of&quot;)\n// false\n</code></pre>\n"
  }, {
    name: "starts with()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts with(&quot;foobar&quot;, &quot;fo&quot;)\n// true\n</code></pre>\n"
  }, {
    name: "ends with()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">ends with(&quot;foobar&quot;, &quot;r&quot;)\n// true\n</code></pre>\n"
  }, {
    name: "matches()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">matches(&quot;foobar&quot;, &quot;^fo*bar&quot;)\n// true\n</code></pre>\n"
  }, {
    name: "replace()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n<li><code>replacement</code>: string (e.g. <code>$1</code> returns the first match group)</li>\n<li>(optional) <code>flags</code>: string (&quot;s&quot;, &quot;m&quot;, &quot;i&quot;, &quot;x&quot;)</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">replace(&quot;abcd&quot;, &quot;(ab)|(a)&quot;, &quot;[1=$1][2=$2]&quot;)\n// &quot;[1=ab][2=]cd&quot;\n\nreplace(&quot;0123456789&quot;, &quot;(\\d{3})(\\d{3})(\\d{4})&quot;, &quot;($1) $2-$3&quot;)\n// &quot;(012) 345-6789&quot;\n</code></pre>\n"
  }, {
    name: "split()",
    description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>delimiter</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">split(&quot;John Doe&quot;, &quot;\\s&quot; )\n// [&quot;John&quot;, &quot;Doe&quot;]\n\nsplit(&quot;a;b;c;;&quot;, &quot;;&quot;)\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;&quot;]\n</code></pre>\n"
  }, {
    name: "extract()",
    description: "<p>Returns all matches of the pattern in the given string. Returns an empty list if the pattern doesn&#39;t\nmatch.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">extract(&quot;references are 1234, 1256, 1378&quot;, &quot;12[0-9]*&quot;)\n// [&quot;1234&quot;,&quot;1256&quot;]\n</code></pre>\n"
  }, {
    name: "now()",
    description: "<p>Returns the current date and time including the timezone.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date-time with timezone</li>\n</ul>\n<pre><code class=\"language-feel\">now()\n// date and time(&quot;2020-07-31T14:27:30@Europe/Berlin&quot;)\n</code></pre>\n"
  }, {
    name: "today()",
    description: "<p>Returns the current date.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">today()\n// date(&quot;2020-07-31&quot;)\n</code></pre>\n"
  }, {
    name: "day of week()",
    description: "<p>Returns the day of the week according to the Gregorian calendar. Note that it always returns the English name of the day.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">day of week(date(&quot;2019-09-17&quot;))\n// &quot;Tuesday&quot;\n</code></pre>\n"
  }, {
    name: "day of year()",
    description: "<p>Returns the Gregorian number of the day within the year.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">day of year(date(&quot;2019-09-17&quot;))\n// 260\n</code></pre>\n"
  }, {
    name: "week of year()",
    description: "<p>Returns the Gregorian number of the week within the year, according to ISO 8601.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">week of year(date(&quot;2019-09-17&quot;))\n// 38\n</code></pre>\n"
  }, {
    name: "month of year()",
    description: "<p>Returns the month of the week according to the Gregorian calendar. Note that it always returns the English name of the month.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">month of year(date(&quot;2019-09-17&quot;))\n// &quot;September&quot;\n</code></pre>\n"
  }, {
    name: "abs()",
    description: "<p>Returns the absolute value of a given duration.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: days-time-duration/years-months-duration</li>\n</ul>\n</li>\n<li>result: duration</li>\n</ul>\n<pre><code class=\"language-feel\">abs(duration(&quot;-PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;-P2M&quot;))\n// duration(&quot;P2M&quot;)\n</code></pre>\n"
  }];
  const options$1 = tags.map(tag => snippetCompletion(tag.name.replace('()', '(#{1})'), {
    label: tag.name,
    type: 'function',
    info: () => {
      const html = domify$1(`<div class="description">${tag.description}<div>`);
      return html;
    },
    boost: -1
  }));
  var builtins = context => {
    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode = isNodeEmpty(nodeBefore) || nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);
    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options$1
      } : null;
    }

    // Don't auto-complete on path expressions/context keys/...
    if (nodeBefore.parent && nodeBefore.parent.name !== 'VariableName' || isPathExpression(nodeBefore)) {
      return null;
    }
    return {
      from: nodeBefore.from,
      options: options$1
    };
  };

  /**
   * @type {Facet<import('..').Variable[]>} Variable
   */
  const variablesFacet = Facet.define();
  var pathExpression = context => {
    const variables = context.state.facet(variablesFacet)[0];
    const nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);
    if (!isPathExpression(nodeBefore)) {
      return;
    }
    const expression = findPathExpression(nodeBefore);

    // if the cursor is directly after the `.`, variable starts at the cursor position
    const from = nodeBefore === expression ? context.pos : nodeBefore.from;
    const path = getPath(expression, context);
    let options = variables;
    for (var i = 0; i < path.length - 1; i++) {
      var childVar = options.find(val => val.name === path[i].name);
      if (!childVar) {
        return null;
      }

      // only suggest if variable type matches
      if (childVar.isList !== 'optional' && !!childVar.isList !== path[i].isList) {
        return;
      }
      options = childVar.entries;
    }
    if (!options) return;
    options = options.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));
    const result = {
      from: from,
      options: options
    };
    return result;
  };
  function findPathExpression(node) {
    while (node) {
      if (node.name === 'PathExpression') {
        return node;
      }
      node = node.parent;
    }
  }

  // parses the path expression into a list of variable names with type information
  // e.g. foo[0].bar => [ { name: 'foo', isList: true }, { name: 'bar', isList: false } ]
  function getPath(node, context) {
    let path = [];
    for (let child = node.firstChild; child; child = child.nextSibling) {
      if (child.name === 'PathExpression') {
        path.push(...getPath(child, context));
      } else if (child.name === 'FilterExpression') {
        path.push(...getFilter(child, context));
      } else {
        path.push({
          name: getNodeContent(child, context),
          isList: false
        });
      }
    }
    return path;
  }
  function getFilter(node, context) {
    const list = node.firstChild;
    if (list.name === 'PathExpression') {
      const path = getPath(list, context);
      const last = path[path.length - 1];
      last.isList = true;
      return path;
    }
    return [{
      name: getNodeContent(list, context),
      isList: true
    }];
  }
  function getNodeContent(node, context) {
    return context.state.sliceDoc(node.from, node.to);
  }

  /**
   * @type {import('@codemirror/autocomplete').CompletionSource}
   */
  var variables = context => {
    const variables = context.state.facet(variablesFacet)[0];
    const options = variables.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));

    // In most cases, use what is typed before the cursor
    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode = isNodeEmpty(nodeBefore) || nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);
    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options
      } : null;
    }
    const result = {
      from: nodeBefore.from,
      options: options
    };

    // Only auto-complete variables
    if (nodeBefore.parent && nodeBefore.parent.name !== 'VariableName' || isPathExpression(nodeBefore)) {
      return null;
    }
    return result;
  };
  function autocompletion() {
    return [autocompletion$1({
      override: [variables, builtins, completeFromList(snippets.map(s => ({
        ...s,
        boost: -1
      }))), pathExpression]
    })];
  }
  function language() {
    return new LanguageSupport(feelLanguage, []);
  }
  var linter = [linter$1(cmFeelLinter())];
  const baseTheme = EditorView.theme({
    '& .cm-content': {
      padding: '0px'
    },
    '& .cm-line': {
      padding: '0px'
    },
    '&.cm-editor.cm-focused': {
      outline: 'none'
    },
    '& .cm-completionInfo ul': {
      margin: 0,
      paddingLeft: '15px'
    },
    '& .cm-completionInfo pre': {
      marginBottom: 0,
      whiteSpace: 'pre-wrap'
    },
    '& .cm-completionInfo p': {
      marginTop: 0
    },
    '& .cm-completionInfo p:not(:last-of-type)': {
      marginBottom: 0
    }
  });
  const highlightTheme = EditorView.baseTheme({
    '& .variableName': {
      color: '#10f'
    },
    '& .number': {
      color: '#164'
    },
    '& .string': {
      color: '#a11'
    },
    '& .bool': {
      color: '#219'
    },
    '& .function': {
      color: '#aa3731',
      fontWeight: 'bold'
    },
    '& .control': {
      color: '#708'
    }
  });
  const syntaxClasses = syntaxHighlighting(HighlightStyle.define([{
    tag: tags$1.variableName,
    class: 'variableName'
  }, {
    tag: tags$1.name,
    class: 'variableName'
  }, {
    tag: tags$1.number,
    class: 'number'
  }, {
    tag: tags$1.string,
    class: 'string'
  }, {
    tag: tags$1.bool,
    class: 'bool'
  }, {
    tag: tags$1.function(tags$1.variableName),
    class: 'function'
  }, {
    tag: tags$1.function(tags$1.special(tags$1.variableName)),
    class: 'function'
  }, {
    tag: tags$1.controlKeyword,
    class: 'control'
  }, {
    tag: tags$1.operatorKeyword,
    class: 'control'
  }]));
  var theme = [baseTheme, highlightTheme, syntaxClasses];

  /**
   * @typedef {object} Variable
   * @property {string} name name or key of the variable
   * @property {string} [info] short information about the variable, e.g. type
   * @property {string} [detail] longer description of the variable content
   * @property {boolean} [isList] whether the variable is a list
   * @property {array<Variable>} [schema] array of child variables if the variable is a context or list
   */

  const autocompletionConf = new Compartment();

  /**
   * Creates a FEEL editor in the supplied container
   *
   * @param {Object} config
   * @param {DOMNode} config.container
   * @param {DOMNode|String} [config.tooltipContainer]
   * @param {Function} [config.onChange]
   * @param {Function} [config.onKeyDown]
   * @param {Function} [config.onLint]
   * @param {Boolean} [config.readOnly]
   * @param {String} [config.value]
   * @param {Variable[]} [config.variables]
   *
   * @returns {Object} editor
   */
  function FeelEditor({
    container,
    tooltipContainer,
    onChange = () => {},
    onKeyDown = () => {},
    onLint = () => {},
    readOnly = false,
    value = '',
    variables = []
  }) {
    const changeHandler = EditorView.updateListener.of(update => {
      if (update.docChanged) {
        onChange(update.state.doc.toString());
      }
    });
    const lintHandler = EditorView.updateListener.of(update => {
      const diagnosticEffects = update.transactions.flatMap(t => t.effects).filter(effect => effect.is(setDiagnosticsEffect));
      if (!diagnosticEffects.length) {
        return;
      }
      const messages = diagnosticEffects.flatMap(effect => effect.value);
      onLint(messages);
    });
    const keyHandler = EditorView.domEventHandlers({
      keydown: onKeyDown
    });
    if (typeof tooltipContainer === 'string') {
      tooltipContainer = document.querySelector(tooltipContainer);
    }
    const tooltipLayout = tooltipContainer ? tooltips({
      tooltipSpace: function () {
        return tooltipContainer.getBoundingClientRect();
      }
    }) : [];
    const extensions = [autocompletionConf.of(variablesFacet.of(variables)), autocompletion(), bracketMatching(), changeHandler, closeBrackets(), indentOnInput(), keyHandler, keymap.of([...defaultKeymap]), language(), linter, lintHandler, tooltipLayout, theme];
    if (readOnly) {
      extensions.push(EditorView.editable.of(false));
    }
    this._cmEditor = new EditorView({
      state: EditorState.create({
        doc: value,
        extensions: extensions
      }),
      parent: container
    });
    return this;
  }

  /**
   * Replaces the content of the Editor
   *
   * @param {String} value
   */
  FeelEditor.prototype.setValue = function (value) {
    this._cmEditor.dispatch({
      changes: {
        from: 0,
        to: this._cmEditor.state.doc.length,
        insert: value
      }
    });
  };

  /**
   * Sets the focus in the editor.
   */
  FeelEditor.prototype.focus = function (position) {
    const cmEditor = this._cmEditor;

    // the Codemirror `focus` method always calls `focus` with `preventScroll`,
    // so we have to focus + scroll manually
    cmEditor.contentDOM.focus();
    cmEditor.focus();
    if (typeof position === 'number') {
      const end = cmEditor.state.doc.length;
      cmEditor.dispatch({
        selection: {
          anchor: position <= end ? position : end
        }
      });
    }
  };

  /**
   * Returns the current selection ranges. If no text is selected, a single
   * range with the start and end index at the cursor position will be returned.
   *
   * @returns {Object} selection
   * @returns {Array} selection.ranges
   */
  FeelEditor.prototype.getSelection = function () {
    return this._cmEditor.state.selection;
  };

  /**
   * Set variables to be used for autocompletion.
   * @param {Variable[]} variables
   * @returns {void}
   */
  FeelEditor.prototype.setVariables = function (variables) {
    this._cmEditor.dispatch({
      effects: autocompletionConf.reconfigure(variablesFacet.of(variables))
    });
  };

  var ArrowIcon = function ArrowIcon(props) {
    return o$2("svg", {
      ...props,
      children: o$2("path", {
        fillRule: "evenodd",
        d: "m11.657 8-4.95 4.95a1 1 0 0 1-1.414-1.414L8.828 8 5.293 4.464A1 1 0 1 1 6.707 3.05L11.657 8Z"
      })
    });
  };
  ArrowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var ExternalLinkIcon = function ExternalLinkIcon(props) {
    return o$2("svg", {
      ...props,
      children: o$2("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12.637 12.637v-4.72h1.362v4.721c0 .36-.137.676-.411.95-.275.275-.591.412-.95.412H3.362c-.38 0-.703-.132-.967-.396A1.315 1.315 0 0 1 2 12.638V3.362c0-.38.132-.703.396-.967S2.982 2 3.363 2h4.553v1.363H3.363v9.274h9.274ZM14 2H9.28l-.001 1.362h2.408L5.065 9.984l.95.95 6.622-6.622v2.409H14V2Z",
        fill: "#818798"
      })
    });
  };
  ExternalLinkIcon.defaultProps = {
    width: "16",
    height: "16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  function Header(props) {
    const {
      element,
      headerProvider
    } = props;
    const {
      getElementIcon,
      getDocumentationRef,
      getElementLabel,
      getTypeLabel
    } = headerProvider;
    const label = getElementLabel(element);
    const type = getTypeLabel(element);
    const documentationRef = getDocumentationRef && getDocumentationRef(element);
    const ElementIcon = getElementIcon(element);
    return o$2("div", {
      class: "bio-properties-panel-header",
      children: [o$2("div", {
        class: "bio-properties-panel-header-icon",
        children: ElementIcon && o$2(ElementIcon, {
          width: "32",
          height: "32",
          viewBox: "0 0 32 32"
        })
      }), o$2("div", {
        class: "bio-properties-panel-header-labels",
        children: [o$2("div", {
          title: type,
          class: "bio-properties-panel-header-type",
          children: type
        }), label ? o$2("div", {
          title: label,
          class: "bio-properties-panel-header-label",
          children: label
        }) : null]
      }), o$2("div", {
        class: "bio-properties-panel-header-actions",
        children: documentationRef ? o$2("a", {
          rel: "noopener",
          class: "bio-properties-panel-header-link",
          href: documentationRef,
          title: "Open documentation",
          target: "_blank",
          children: o$2(ExternalLinkIcon, {})
        }) : null
      })]
    });
  }
  const DescriptionContext = q$1({
    description: {},
    getDescriptionForId: () => {}
  });
  const ErrorsContext = q$1({
    errors: {}
  });

  /**
   * @typedef {Function} <propertiesPanel.showEntry> callback
   *
   * @example
   *
   * useEvent('propertiesPanel.showEntry', ({ focus = false, ...rest }) => {
   *   // ...
   * });
   *
   * @param {Object} context
   * @param {boolean} [context.focus]
   *
   * @returns void
   */
  const EventContext = q$1({
    eventBus: null
  });
  const LayoutContext = q$1({
    layout: {},
    setLayout: () => {},
    getLayoutForKey: () => {},
    setLayoutForKey: () => {}
  });

  /**
   * Accesses the global DescriptionContext and returns a description for a given id and element.
   *
   * @example
   * ```jsx
   * function TextField(props) {
   *   const description = useDescriptionContext('input1', element);
   * }
   * ```
   *
   * @param {string} id
   * @param {object} element
   *
   * @returns {string}
   */
  function useDescriptionContext(id, element) {
    const {
      getDescriptionForId
    } = F$2(DescriptionContext);
    return getDescriptionForId(id, element);
  }
  function useError(id) {
    const {
      errors
    } = F$2(ErrorsContext);
    return errors[id];
  }

  /**
   * Subscribe to an event immediately. Update subscription after inputs changed.
   *
   * @param {string} event
   * @param {Function} callback
   */
  function useEvent(event, callback, eventBus) {
    const eventContext = F$2(EventContext);
    if (!eventBus) {
      ({
        eventBus
      } = eventContext);
    }
    const didMount = s$2(false);

    // (1) subscribe immediately
    if (eventBus && !didMount.current) {
      eventBus.on(event, callback);
    }

    // (2) update subscription after inputs changed
    y$1(() => {
      if (eventBus && didMount.current) {
        eventBus.on(event, callback);
      }
      didMount.current = true;
      return () => {
        if (eventBus) {
          eventBus.off(event, callback);
        }
      };
    }, [callback, event, eventBus]);
  }

  /**
   * Creates a state that persists in the global LayoutContext.
   *
   * @example
   * ```jsx
   * function Group(props) {
   *   const [ open, setOpen ] = useLayoutState([ 'groups', 'foo', 'open' ], false);
   * }
   * ```
   *
   * @param {(string|number)[]} path
   * @param {any} [defaultValue]
   *
   * @returns {[ any, Function ]}
   */
  function useLayoutState(path, defaultValue) {
    const {
      getLayoutForKey,
      setLayoutForKey
    } = F$2(LayoutContext);
    const layoutForKey = getLayoutForKey(path, defaultValue);
    const [value, set] = l$2(layoutForKey);
    const setState = newValue => {
      // (1) set component state
      set(newValue);

      // (2) set context
      setLayoutForKey(path, newValue);
    };
    return [value, setState];
  }

  /**
   * @pinussilvestrus: we need to introduce our own hook to persist the previous
   * state on updates.
   *
   * cf. https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
   */

  function usePrevious(value) {
    const ref = s$2();
    y$1(() => {
      ref.current = value;
    });
    return ref.current;
  }

  /**
   * Subscribe to `propertiesPanel.showEntry`.
   *
   * @param {string} id
   *
   * @returns {import('preact').Ref}
   */
  function useShowEntryEvent(id) {
    const {
      onShow
    } = F$2(LayoutContext);
    const ref = s$2();
    const focus = s$2(false);
    const onShowEntry = A$2(event => {
      if (event.id === id) {
        onShow();
        if (!focus.current) {
          focus.current = true;
        }
      }
    }, [id]);
    y$1(() => {
      if (focus.current && ref.current) {
        if (isFunction$2(ref.current.focus)) {
          ref.current.focus();
        }
        if (isFunction$2(ref.current.select)) {
          ref.current.select();
        }
        focus.current = false;
      }
    });
    useEvent('propertiesPanel.showEntry', onShowEntry);
    return ref;
  }

  /**
   * @callback setSticky
   * @param {boolean} value
   */

  /**
   * Use IntersectionObserver to identify when DOM element is in sticky mode.
   * If sticky is observered setSticky(true) will be called.
   * If sticky mode is left, setSticky(false) will be called.
   *
   *
   * @param {Object} ref
   * @param {string} scrollContainerSelector
   * @param {setSticky} setSticky
   */
  function useStickyIntersectionObserver(ref, scrollContainerSelector, setSticky) {
    y$1(() => {
      const Observer = IntersectionObserver;

      // return early if IntersectionObserver is not available
      if (!Observer) {
        return;
      }
      let observer;
      if (ref.current) {
        const scrollContainer = query(scrollContainerSelector);
        observer = new Observer(entries => {
          entries.forEach(entry => {
            if (entry.intersectionRatio < 1) {
              setSticky(true);
            } else if (entry.intersectionRatio === 1) {
              setSticky(false);
            }
          });
        }, {
          root: scrollContainer,
          rootMargin: '0px 0px 999999% 0px',
          // Use bottom margin to avoid stickyness when scrolling out to bottom
          threshold: [1]
        });
        observer.observe(ref.current);
      }

      // Unobserve if unmounted
      return () => {
        if (ref.current && observer) {
          observer.unobserve(ref.current);
        }
      };
    }, [ref, scrollContainerSelector, setSticky]);
  }

  /**
   * Creates a static function reference with changing body.
   * This is necessary when external libraries require a callback function
   * that has references to state variables.
   *
   * Usage:
   * const callback = useStaticCallback((val) => {val === currentState});
   *
   * The `callback` reference is static and can be safely used in external
   * libraries or as a prop that does not cause rerendering of children.
   *
   * @param {Function} callback function with changing reference
   * @returns {Function} static function reference
   */
  function useStaticCallback(callback) {
    const callbackRef = s$2(callback);
    callbackRef.current = callback;
    return A$2((...args) => callbackRef.current(...args), []);
  }
  function Group(props) {
    const {
      element,
      entries = [],
      id,
      label,
      shouldOpen = false
    } = props;
    const groupRef = s$2(null);
    const [open, setOpen] = useLayoutState(['groups', id, 'open'], shouldOpen);
    const onShow = A$2(() => setOpen(true), [setOpen]);
    const toggleOpen = () => setOpen(!open);
    const [edited, setEdited] = l$2(false);
    const [sticky, setSticky] = l$2(false);

    // set edited state depending on all entries
    y$1(() => {
      const hasOneEditedEntry = entries.find(entry => {
        const {
          id,
          isEdited
        } = entry;
        const entryNode = query(`[data-entry-id="${id}"]`);
        if (!isFunction$2(isEdited) || !entryNode) {
          return false;
        }
        const inputNode = query('.bio-properties-panel-input', entryNode);
        return isEdited(inputNode);
      });
      setEdited(hasOneEditedEntry);
    }, [entries]);

    // set css class when group is sticky to top
    useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
    const propertiesPanelContext = {
      ...F$2(LayoutContext),
      onShow
    };
    return o$2("div", {
      class: "bio-properties-panel-group",
      "data-group-id": 'group-' + id,
      ref: groupRef,
      children: [o$2("div", {
        class: classnames('bio-properties-panel-group-header', edited ? '' : 'empty', open ? 'open' : '', sticky && open ? 'sticky' : ''),
        onClick: toggleOpen,
        children: [o$2("div", {
          title: label,
          class: "bio-properties-panel-group-header-title",
          children: label
        }), o$2("div", {
          class: "bio-properties-panel-group-header-buttons",
          children: [edited && o$2(DataMarker, {}), o$2("button", {
            title: "Toggle section",
            class: "bio-properties-panel-group-header-button bio-properties-panel-arrow",
            children: o$2(ArrowIcon, {
              class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
            })
          })]
        })]
      }), o$2("div", {
        class: classnames('bio-properties-panel-group-entries', open ? 'open' : ''),
        children: o$2(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: entries.map(entry => {
            const {
              component: Component,
              id
            } = entry;
            return a$3(Component, {
              ...entry,
              element: element,
              key: id
            });
          })
        })
      })]
    });
  }
  function DataMarker() {
    return o$2("div", {
      title: "Section contains data",
      class: "bio-properties-panel-dot"
    });
  }

  /**
   * @typedef { {
   *  text: (element: object) => string,
   *  icon?: (element: Object) => import('preact').Component
   * } } PlaceholderDefinition
   *
   * @param { PlaceholderDefinition } props
   */
  function Placeholder(props) {
    const {
      text,
      icon: Icon
    } = props;
    return o$2("div", {
      class: "bio-properties-panel open",
      children: o$2("section", {
        class: "bio-properties-panel-placeholder",
        children: [Icon && o$2(Icon, {
          class: "bio-properties-panel-placeholder-icon"
        }), o$2("p", {
          class: "bio-properties-panel-placeholder-text",
          children: text
        })]
      })
    });
  }
  const DEFAULT_LAYOUT = {
    open: true
  };
  const DEFAULT_DESCRIPTION = {};

  /**
   * @typedef { {
   *    component: import('preact').Component,
   *    id: String,
   *    isEdited?: Function
   * } } EntryDefinition
   *
   * @typedef { {
   *    autoFocusEntry: String,
   *    autoOpen?: Boolean,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    remove: (event: MouseEvent) => void
   * } } ListItemDefinition
   *
   * @typedef { {
   *    add: (event: MouseEvent) => void,
   *    component: import('preact').Component,
   *    element: Object,
   *    id: String,
   *    items: Array<ListItemDefinition>,
   *    label: String,
   *    shouldSort?: Boolean,
   *    shouldOpen?: Boolean
   * } } ListGroupDefinition
   *
   * @typedef { {
   *    component?: import('preact').Component,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    shouldOpen?: Boolean
   * } } GroupDefinition
   *
   *  @typedef { {
   *    [id: String]: GetDescriptionFunction
   * } } DescriptionConfig
   *
   * @callback { {
   * @param {string} id
   * @param {Object} element
   * @returns {string}
   * } } GetDescriptionFunction
   *
   * @typedef { {
   *  getEmpty: (element: object) => import('./components/Placeholder').PlaceholderDefinition,
   *  getMultiple: (element: Object) => import('./components/Placeholder').PlaceholderDefinition
   * } } PlaceholderProvider
   *
   */

  /**
   * A basic properties panel component. Describes *how* content will be rendered, accepts
   * data from implementor to describe *what* will be rendered.
   *
   * @param {Object} props
   * @param {Object|Array} props.element
   * @param {import('./components/Header').HeaderProvider} props.headerProvider
   * @param {PlaceholderProvider} [props.placeholderProvider]
   * @param {Array<GroupDefinition|ListGroupDefinition>} props.groups
   * @param {Object} [props.layoutConfig]
   * @param {Function} [props.layoutChanged]
   * @param {DescriptionConfig} [props.descriptionConfig]
   * @param {Function} [props.descriptionLoaded]
   * @param {Object} [props.eventBus]
   */
  function PropertiesPanel(props) {
    const {
      element,
      headerProvider,
      placeholderProvider,
      groups,
      layoutConfig = {},
      layoutChanged,
      descriptionConfig = {},
      descriptionLoaded,
      eventBus
    } = props;

    // set-up layout context
    const [layout, setLayout] = l$2(createLayout(layoutConfig));
    y$1(() => {
      if (typeof layoutChanged === 'function') {
        layoutChanged(layout);
      }
    }, [layout, layoutChanged]);
    const getLayoutForKey = (key, defaultValue) => {
      return get$2(layout, key, defaultValue);
    };
    const setLayoutForKey = (key, config) => {
      const newLayout = assign$4({}, layout);
      set$2(newLayout, key, config);
      setLayout(newLayout);
    };
    const layoutContext = {
      layout,
      setLayout,
      getLayoutForKey,
      setLayoutForKey
    };

    // set-up description context
    const description = createDescriptionContext(descriptionConfig);
    if (typeof descriptionLoaded === 'function') {
      descriptionLoaded(description);
    }
    const getDescriptionForId = (id, element) => {
      return description[id] && description[id](element);
    };
    const descriptionContext = {
      description,
      getDescriptionForId
    };
    const [errors, setErrors] = l$2({});
    const onSetErrors = ({
      errors
    }) => setErrors(errors);
    useEvent('propertiesPanel.setErrors', onSetErrors, eventBus);
    const errorsContext = {
      errors
    };
    const eventContext = {
      eventBus
    };
    const propertiesPanelContext = {
      element
    };

    // empty state
    if (placeholderProvider && !element) {
      return o$2(Placeholder, {
        ...placeholderProvider.getEmpty()
      });
    }

    // multiple state
    if (placeholderProvider && isArray$6(element)) {
      return o$2(Placeholder, {
        ...placeholderProvider.getMultiple()
      });
    }
    return o$2(LayoutContext.Provider, {
      value: propertiesPanelContext,
      children: o$2(ErrorsContext.Provider, {
        value: errorsContext,
        children: o$2(DescriptionContext.Provider, {
          value: descriptionContext,
          children: o$2(LayoutContext.Provider, {
            value: layoutContext,
            children: o$2(EventContext.Provider, {
              value: eventContext,
              children: o$2("div", {
                class: classnames('bio-properties-panel', layout.open ? 'open' : ''),
                children: [o$2(Header, {
                  element: element,
                  headerProvider: headerProvider
                }), o$2("div", {
                  class: "bio-properties-panel-scroll-container",
                  children: groups.map(group => {
                    const {
                      component: Component = Group,
                      id
                    } = group;
                    return a$3(Component, {
                      ...group,
                      key: id,
                      element: element
                    });
                  })
                })]
              })
            })
          })
        })
      })
    });
  }

  // helpers //////////////////

  function createLayout(overrides) {
    return {
      ...DEFAULT_LAYOUT,
      ...overrides
    };
  }
  function createDescriptionContext(overrides) {
    return {
      ...DEFAULT_DESCRIPTION,
      ...overrides
    };
  }
  function Description$1(props) {
    const {
      element,
      forId,
      value
    } = props;
    const contextDescription = useDescriptionContext(forId, element);
    const description = value || contextDescription;
    if (description) {
      return o$2("div", {
        class: "bio-properties-panel-description",
        children: description
      });
    }
  }
  const useBufferedFocus = function (editor, ref) {
    const [buffer, setBuffer] = l$2(undefined);
    ref.current = d$2(() => ({
      focus: offset => {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    }), [editor]);
    y$1(() => {
      if (typeof buffer !== 'undefined' && editor) {
        editor.focus(buffer);
        setBuffer(false);
      }
    }, [editor, buffer]);
  };
  x((props, ref) => {
    const {
      value,
      onInput,
      onFeelToggle,
      onLint = () => {},
      disabled,
      tooltipContainer,
      variables
    } = props;
    const inputRef = s$2();
    const [editor, setEditor] = l$2();
    const [localValue, setLocalValue] = l$2(value || '');
    useBufferedFocus(editor, ref);
    const handleInput = useStaticCallback(newValue => {
      onInput(newValue);
      setLocalValue(newValue);
    });
    y$1(() => {
      let editor;

      /* Trigger FEEL toggle when
       *
       * - `backspace` is pressed
       * - AND the cursor is at the beginning of the input
       */
      const onKeyDown = e => {
        if (e.key !== 'Backspace' || !editor) {
          return;
        }
        const selection = editor.getSelection();
        const range = selection.ranges[selection.mainIndex];
        if (range.from === 0 && range.to === 0) {
          onFeelToggle();
        }
      };
      editor = new FeelEditor({
        container: inputRef.current,
        onChange: handleInput,
        onKeyDown: onKeyDown,
        onLint: onLint,
        tooltipContainer: tooltipContainer,
        value: localValue,
        variables: variables
      });
      setEditor(editor);
      return () => {
        onLint([]);
        inputRef.current.innerHTML = '';
        setEditor(null);
      };
    }, []);
    y$1(() => {
      if (!editor) {
        return;
      }
      if (value === localValue) {
        return;
      }
      editor.setValue(value);
      setLocalValue(value);
    }, [value]);
    y$1(() => {
      if (!editor) {
        return;
      }
      editor.setVariables(variables);
    }, [variables]);
    const handleClick = () => {
      ref.current.focus();
    };
    return o$2("div", {
      class: classnames('bio-properties-panel-feel-editor-container', disabled ? 'disabled' : null),
      children: o$2("div", {
        name: props.name,
        class: classnames('bio-properties-panel-input', localValue ? 'edited' : null),
        ref: inputRef,
        onClick: handleClick
      })
    });
  });
  x((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = s$2();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: position => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        if (typeof position === 'number') {
          if (position > value.length) {
            position = value.length;
          }
          input.setSelectionRange(position, position);
        }
      }
    };
    return o$2("input", {
      id: prefixId$6(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || ''
    });
  });
  x((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = s$2();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: () => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        input.setSelectionRange(0, 0);
      }
    };
    return o$2("textarea", {
      id: prefixId$6(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || '',
      "data-gramm": "false"
    });
  });

  // helpers /////////////////

  function prefixId$6(id) {
    return `bio-properties-panel-${id}`;
  }
  function Textfield(props) {
    const {
      debounce,
      disabled = false,
      id,
      label,
      onInput,
      onFocus,
      onBlur,
      value = ''
    } = props;
    const [localValue, setLocalValue] = l$2(value || '');
    const ref = useShowEntryEvent(id);
    const handleInputCallback = d$2(() => {
      return debounce(({
        target
      }) => onInput(target.value.length ? target.value : undefined));
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y$1(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return o$2("div", {
      class: "bio-properties-panel-textfield",
      children: [o$2("label", {
        for: prefixId$1(id),
        class: "bio-properties-panel-label",
        children: label
      }), o$2("input", {
        ref: ref,
        id: prefixId$1(id),
        type: "text",
        name: id,
        spellCheck: "false",
        autoComplete: "off",
        disabled: disabled,
        class: "bio-properties-panel-input",
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: localValue
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {Boolean} props.debounce
   * @param {Boolean} props.disabled
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {Function} props.validate
   */
  function TextfieldEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      disabled,
      label,
      getValue,
      setValue,
      validate,
      onFocus,
      onBlur
    } = props;
    const [cachedInvalidValue, setCachedInvalidValue] = l$2(null);
    const globalError = useError(id);
    const [localError, setLocalError] = l$2(null);
    let value = getValue(element);
    const previousValue = usePrevious(value);
    y$1(() => {
      if (isFunction$2(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onInput = newValue => {
      let newValidationError = null;
      if (isFunction$2(validate)) {
        newValidationError = validate(newValue) || null;
      }
      if (newValidationError) {
        setCachedInvalidValue(newValue);
      } else {
        setValue(newValue);
      }
      setLocalError(newValidationError);
    };
    if (previousValue === value && localError) {
      value = cachedInvalidValue;
    }
    const error = globalError || localError;
    return o$2("div", {
      class: classnames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [o$2(Textfield, {
        debounce: debounce,
        disabled: disabled,
        id: id,
        label: label,
        onInput: onInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: value
      }, element), error && o$2("div", {
        class: "bio-properties-panel-error",
        children: error
      }), o$2(Description$1, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$1(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$1(id) {
    return `bio-properties-panel-${id}`;
  }
  const DEFAULT_DEBOUNCE_TIME$1 = 300;
  function debounceInput$1(debounceDelay) {
    return function _debounceInput(fn) {
      if (debounceDelay !== false) {
        var debounceTime = isNumber$3(debounceDelay) ? debounceDelay : DEFAULT_DEBOUNCE_TIME$1;
        return debounce(fn, debounceTime);
      } else {
        return fn;
      }
    };
  }
  debounceInput$1.$inject = ['config.debounceInput'];
  var index$3 = {
    debounceInput: ['factory', debounceInput$1]
  };

  var KEYS_COPY = ['c', 'C', 'KeyC'];
  var KEYS_PASTE = ['v', 'V', 'KeyV'];
  var KEYS_REDO = ['y', 'Y', 'KeyY'];
  var KEYS_UNDO = ['z', 'Z', 'KeyZ'];

  /**
   * Returns true if event was triggered with any modifier
   * @param {KeyboardEvent} event
   */
  function hasModifier(event) {
    return event.ctrlKey || event.metaKey || event.shiftKey || event.altKey;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isCmd$4(event) {
    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (event.altKey) {
      return false;
    }
    return event.ctrlKey || event.metaKey;
  }

  /**
   * Checks if key pressed is one of provided keys.
   *
   * @param {string|Array<string>} keys
   * @param {KeyboardEvent} event
   */
  function isKey(keys, event) {
    keys = isArray$6(keys) ? keys : [keys];
    return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isShift$2(event) {
    return event.shiftKey;
  }
  function isCopy(event) {
    return isCmd$4(event) && isKey(KEYS_COPY, event);
  }
  function isPaste(event) {
    return isCmd$4(event) && isKey(KEYS_PASTE, event);
  }
  function isUndo(event) {
    return isCmd$4(event) && !isShift$2(event) && isKey(KEYS_UNDO, event);
  }
  function isRedo(event) {
    return isCmd$4(event) && (isKey(KEYS_REDO, event) || isKey(KEYS_UNDO, event) && isShift$2(event));
  }

  const DmnPropertiesPanelContext = q$1({
    selectedElement: null,
    injector: null,
    getService: () => null
  });

  /**
   * Is an element of the given DMN type?
   *
   * @param  {tjs.model.Base|ModdleElement} element
   * @param  {string} type
   *
   * @return {boolean}
   */

  function is$1(element, type) {
    var bo = getBusinessObject$1(element);
    return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);
  }
  /**
   * Return the business object for a given element.
   *
   * @param  {tjs.model.Base|ModdleElement} element
   *
   * @return {ModdleElement}
   */

  function getBusinessObject$1(element) {
    return element && element.businessObject || element;
  }
  /**
   * Return true if element has any of the given types.
   *
   * @param {djs.model.Base} element
   * @param {Array<string>} types
   *
   * @return {boolean}
   */

  function isAny$1(element, types) {
    return some(types, function (t) {
      return is$1(element, t);
    });
  }
  function getLabelAttr$1(semantic) {
    if (is$1(semantic, 'dmn:Decision') || is$1(semantic, 'dmn:BusinessKnowledgeModel') || is$1(semantic, 'dmn:InputData') || is$1(semantic, 'dmn:KnowledgeSource')) {
      return 'name';
    }
    if (is$1(semantic, 'dmn:TextAnnotation')) {
      return 'text';
    }
  }
  function getLabel$1(element) {
    var semantic = element.businessObject,
      attr = getLabelAttr$1(semantic);
    if (attr) {
      return semantic[attr] || '';
    }
  }
  function _extends$9() {
    _extends$9 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$9.apply(this, arguments);
  }
  var AssociationIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$9({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    stroke: "#000",
    strokeWidth: "2",
    fill: "none",
    strokeDasharray: "3.3,6",
    strokeLinecap: "square",
    d: "M1.5 30.5l29-29"
  }));
  function _extends$8() {
    _extends$8 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$8.apply(this, arguments);
  }
  var AuthorityRequirementIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$8({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M6.364 24.235l1.414 1.414-6.364 6.364L0 30.598l6.364-6.363zm8-8l1.414 1.414-6.364 6.364L8 22.598l6.364-6.363zm8-8l1.414 1.414-6.364 6.364L16 14.598l6.364-6.363zM28 0a4 4 0 110 8 4 4 0 010-8z",
    fillRule: "evenodd"
  }));
  function _extends$7() {
    _extends$7 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$7.apply(this, arguments);
  }
  var BusinessKnowledgeIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$7({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M6.258 8L0 15.358l.001.325.028 8.259h25.977L32 16.518V8H6.258zm.812 1.756h23.174v6.142l-5.077 6.288H1.779L1.759 16l5.31-6.245z"
  }));
  function _extends$6() {
    _extends$6 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$6.apply(this, arguments);
  }
  var DecisionIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$6({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M0 6v20.711h32V6H0zm1.697 1.697h28.606v17.317H1.697V7.697z",
    fillRule: "evenodd"
  }));
  function _extends$5() {
    _extends$5 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$5.apply(this, arguments);
  }
  var DRDIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$5({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M3.563 0A3.554 3.554 0 00.01 3.552L0 28.446A3.554 3.554 0 003.555 32h24.882a3.554 3.554 0 003.554-3.552L32 3.554A3.554 3.554 0 0028.445 0H3.563zM14 14l15 .016V20l-15-.016V14zm0-11l15 .022V11l-15-.022V3zm-3 16.992L3 20v-5.992L11 14v5.992zm0-9.003L3 11V3.01L11 3v7.99zM3 23.008L11 23v5.992L3 29v-5.992zm11 5.984V23l15 .016V29l-15-.008z"
  }));
  function _extends$4() {
    _extends$4 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$4.apply(this, arguments);
  }
  var InformationRequirementIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$4({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M32 .06S20.33 6.015 14.403 8.8c1.27 1.16 2.451 2.41 3.676 3.615L0 30.734 1.325 32l18.08-18.32c1.227 1.223 2.448 2.453 3.676 3.676C26.247 11.121 32 .06 32 .06z"
  }));
  function _extends$3() {
    _extends$3 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$3.apply(this, arguments);
  }
  var InputDataIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$3({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M6.384 8c-1.825 0-3.458.945-4.587 2.382C.667 11.82 0 13.756 0 15.88c0 2.125.667 4.062 1.797 5.499 1.13 1.437 2.762 2.382 4.587 2.382h19.232c1.825 0 3.458-.945 4.587-2.382C31.333 19.942 32 18.005 32 15.88c0-2.124-.667-4.06-1.797-5.498C29.073 8.945 27.441 8 25.616 8H6.384zm0 1.763h19.232c1.223 0 2.342.616 3.201 1.709.86 1.093 1.42 2.656 1.42 4.408 0 1.753-.56 3.316-1.42 4.409-.86 1.093-1.978 1.708-3.2 1.708H6.383c-1.223 0-2.342-.615-3.201-1.708-.86-1.093-1.42-2.656-1.42-4.409 0-1.752.56-3.315 1.42-4.408.86-1.093 1.978-1.709 3.2-1.709z"
  }));
  function _extends$2$1() {
    _extends$2$1 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$2$1.apply(this, arguments);
  }
  var KnowledgeRequirementIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$2$1({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M6.364 24.235l1.414 1.414-6.364 6.364L0 30.598l6.364-6.363zm8-8l1.414 1.414-6.364 6.364L8 22.598l6.364-6.363zm8-8l1.414 1.414-6.364 6.364L16 14.598l6.364-6.363zM32 12.06h-2V3.426l-4.586 4.587L24 6.598l4.537-4.538H20v-2h12v12z",
    fillRule: "evenodd"
  }));
  function _extends$1$1() {
    _extends$1$1 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$1$1.apply(this, arguments);
  }
  var KnowledgeSourceIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$1$1({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M0 5V23.376l.348.23c4.812 3.182 8.946 2.865 12.41 1.63 3.464-1.235 6.366-3.239 8.999-3.589l.02-.003.021-.003c3.576-.675 5.681.439 9.126 1.88l1.076.45V5.064L0 5zm1.553 1.557l28.894.059v15.016c-2.89-1.22-5.358-2.187-8.918-1.521-3.199.433-6.1 2.523-9.293 3.662C9.12 24.884 5.83 25.23 1.553 22.535V6.557z"
  }));
  function _extends$a() {
    _extends$a = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$a.apply(this, arguments);
  }
  var TextAnnotationIcon = ({
    styles = {},
    ...props
  }) => /*#__PURE__*/React.createElement("svg", _extends$a({
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M22.087 0v31.647H32v-1.788h-8.125V1.788H32V0h-9.913zm-2.924 13.999l-2.737 2.167 2.167 2.738 2.738-2.167-2.168-2.738zm-5.475 4.335L10.95 20.5l2.168 2.738 2.737-2.168-2.167-2.737zm-5.475 4.335l-2.738 2.167 2.168 2.738 2.737-2.168-2.167-2.737zm-5.476 4.335L0 29.17l2.167 2.738 2.738-2.168-2.168-2.737z"
  }));
  var iconsByType = {
    'Association': AssociationIcon,
    'AuthorityRequirement': AuthorityRequirementIcon,
    'BusinessKnowledgeModel': BusinessKnowledgeIcon,
    'Decision': DecisionIcon,
    'DecisionTable': DRDIcon,
    'Definitions': DRDIcon,
    'DRD': DRDIcon,
    'InformationRequirement': InformationRequirementIcon,
    'InputData': InputDataIcon,
    'KnowledgeRequirement': KnowledgeRequirementIcon,
    'KnowledgeSource': KnowledgeSourceIcon,
    'TextAnnotation': TextAnnotationIcon
  };
  function getConcreteType(element) {
    const {
      type: elementType
    } = element;
    return getRawType(elementType);
  }
  const PanelHeaderProvider = {
    getElementLabel: element => {
      if (is$1(element, 'dmn:Definitions')) return getBusinessObject$1(element).get('name');
      return getLabel$1(element);
    },
    getElementIcon: element => {
      const concreteType = getConcreteType(element);
      return iconsByType[concreteType];
    },
    getTypeLabel: element => {
      const concreteType = getConcreteType(element);
      return concreteType.replace(/(\B[A-Z])/g, ' $1').replace(/(\bNon Interrupting)/g, '($1)');
    }
  };

  // helpers ///////////////////////

  function getRawType(type) {
    return type.split(':')[1];
  }
  const PanelPlaceholderProvider = {
    getEmpty: () => {
      return {
        text: 'Select an element to edit its properties.',
        // todo(pinussilvestrus): add icon
        icon: null
      };
    },
    getMultiple: () => {
      return {
        text: 'Multiple elements are selected. Select a single element to edit its properties.',
        // todo(pinussilvestrus): add icon
        icon: null
      };
    }
  };
  function DmnPropertiesPanel(props) {
    const {
      element,
      injector,
      getProviders,
      layoutConfig,
      descriptionConfig
    } = props;
    const canvas = injector.get('canvas');
    const elementRegistry = injector.get('elementRegistry');
    const eventBus = injector.get('eventBus');
    const [state, setState] = l$2({
      selectedElement: element
    });
    const selectedElement = state.selectedElement;

    /**
     * @param {djs.model.Base | Array<djs.model.Base>} element
     */
    const _update = element => {
      if (!element) {
        return;
      }
      let newSelectedElement = element;

      // handle labels
      if (newSelectedElement && newSelectedElement.type === 'label') {
        newSelectedElement = newSelectedElement.labelTarget;
      }
      setState({
        ...state,
        selectedElement: newSelectedElement
      });

      // notify interested parties on property panel updates
      eventBus.fire('propertiesPanel.updated', {
        element: newSelectedElement
      });
    };

    // (2) react on element changes

    // (2a) selection changed
    y$1(() => {
      const onSelectionChanged = e => {
        const {
          newSelection = []
        } = e;
        if (newSelection.length > 1) {
          return _update(newSelection);
        }
        const newElement = newSelection[0];
        const rootElement = canvas.getRootElement();
        if (isImplicitRoot$1(rootElement)) {
          return;
        }
        _update(newElement || rootElement);
      };
      eventBus.on('selection.changed', onSelectionChanged);
      return () => {
        eventBus.off('selection.changed', onSelectionChanged);
      };
    }, []);

    // (2b) selected element changed
    y$1(() => {
      const onElementsChanged = e => {
        const elements = e.elements;
        const updatedElement = findElement(elements, selectedElement);
        if (updatedElement && elementExists(updatedElement, elementRegistry)) {
          _update(updatedElement);
        }
      };
      eventBus.on('elements.changed', onElementsChanged);
      return () => {
        eventBus.off('elements.changed', onElementsChanged);
      };
    }, [selectedElement]);

    // (2c) root element changed
    y$1(() => {
      const onRootAdded = e => {
        const element = e.element;
        if (isImplicitRoot$1(element)) {
          return;
        }
        _update(element);
      };
      eventBus.on('root.added', onRootAdded);
      return () => {
        eventBus.off('root.added', onRootAdded);
      };
    }, [selectedElement]);

    // (2d) provided entries changed
    y$1(() => {
      const onProvidersChanged = () => {
        _update(selectedElement);
      };
      eventBus.on('propertiesPanel.providersChanged', onProvidersChanged);
      return () => {
        eventBus.off('propertiesPanel.providersChanged', onProvidersChanged);
      };
    }, [selectedElement]);

    // (3) create properties panel context
    const dmnPropertiesPanelContext = {
      selectedElement,
      injector,
      getService(type, strict) {
        return injector.get(type, strict);
      }
    };

    // (4) retrieve groups for selected element
    const providers = getProviders(selectedElement);
    const groups = d$2(() => {
      return reduce(providers, function (groups, provider) {
        // do not collect groups for multi element state
        if (isArray$6(selectedElement)) {
          return [];
        }
        const updater = provider.getGroups(selectedElement);
        return updater(groups);
      }, []);
    }, [providers, selectedElement]);

    // (5) notify layout changes
    const onLayoutChanged = layout => {
      eventBus.fire('propertiesPanel.layoutChanged', {
        layout
      });
    };

    // (6) notify description changes
    const onDescriptionLoaded = description => {
      eventBus.fire('propertiesPanel.descriptionLoaded', {
        description
      });
    };
    return o$2(DmnPropertiesPanelContext.Provider, {
      value: dmnPropertiesPanelContext,
      children: o$2(PropertiesPanel, {
        element: selectedElement,
        headerProvider: PanelHeaderProvider,
        placeholderProvider: PanelPlaceholderProvider,
        groups: groups,
        layoutConfig: layoutConfig,
        layoutChanged: onLayoutChanged,
        descriptionConfig: descriptionConfig,
        descriptionLoaded: onDescriptionLoaded
      })
    });
  }

  // helpers //////////////////////////

  function isImplicitRoot$1(element) {
    // Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
    return element && (element.isImplicit || element.id === '__implicitroot');
  }
  function findElement(elements, element) {
    return find$2(elements, e => e === element);
  }
  function elementExists(element, elementRegistry) {
    return element && elementRegistry.get(element.id);
  }
  const DEFAULT_PRIORITY$8 = 1000;

  /**
   * @typedef { import('@bpmn-io/properties-panel').GroupDefinition } GroupDefinition
   * @typedef { import('@bpmn-io/properties-panel').ListGroupDefinition } ListGroupDefinition
   * @typedef { { getGroups: (ModdleElement) => (Array{GroupDefinition|ListGroupDefinition}) => Array{GroupDefinition|ListGroupDefinition}) } PropertiesProvider
   */

  class DmnPropertiesPanelRenderer {
    constructor(config, injector, eventBus, dmnjs) {
      const {
        parent,
        layout: layoutConfig,
        description: descriptionConfig
      } = config || {};
      this._eventBus = eventBus;
      this._injector = injector;
      this._layoutConfig = layoutConfig;
      this._descriptionConfig = descriptionConfig;
      this._container = domify$1('<div style="height: 100%" class="bio-properties-panel-container"></div>');
      var commandStack = injector.get('commandStack', false);
      commandStack && setupKeyboard(this._container, eventBus, commandStack);
      eventBus.on('diagram.destroy', () => {
        this.detach();
      });
      eventBus.on('import.done', event => {
        const {
          element
        } = event;
        if (parent) {
          this.attachTo(parent);
        }
        this._render(element);
      });
      eventBus.on('detach', event => {
        this.detach();
      });
      dmnjs.on('detach', () => {
        this.detach();
      });
    }

    /**
     * Attach the properties panel to a parent node.
     *
     * @param {HTMLElement} container
     */
    attachTo(container) {
      if (!container) {
        throw new Error('container required');
      }

      // unwrap jQuery if provided
      if (container.get && container.constructor.prototype.jquery) {
        container = container.get(0);
      }
      if (typeof container === 'string') {
        container = query(container);
      }

      // (1) detach from old parent
      this.detach();

      // (2) append to parent container
      container.appendChild(this._container);

      // (3) notify interested parties
      this._eventBus.fire('propertiesPanel.attach');
    }

    /**
     * Detach the properties panel from its parent node.
     */
    detach() {
      const parentNode = this._container.parentNode;
      if (parentNode) {
        parentNode.removeChild(this._container);
        this._eventBus.fire('propertiesPanel.detach');
      }
    }

    /**
     * Register a new properties provider to the properties panel.
     *
     * @param {Number} [priority]
     * @param {PropertiesProvider} provider
     */
    registerProvider(priority, provider) {
      if (!provider) {
        provider = priority;
        priority = DEFAULT_PRIORITY$8;
      }
      if (typeof provider.getGroups !== 'function') {
        console.error('Properties provider does not implement #getGroups(element) API');
        return;
      }
      this._eventBus.on('propertiesPanel.getProviders', priority, function (event) {
        event.providers.push(provider);
      });
      this._eventBus.fire('propertiesPanel.providersChanged');
    }
    _getProviders() {
      const event = this._eventBus.createEvent({
        type: 'propertiesPanel.getProviders',
        providers: []
      });
      this._eventBus.fire(event);
      return event.providers;
    }
    _render(element) {
      const canvas = this._injector.get('canvas');
      if (!element) {
        element = canvas.getRootElement();
      }
      if (isImplicitRoot(element)) {
        return;
      }
      N$2(o$2(DmnPropertiesPanel, {
        element: element,
        injector: this._injector,
        getProviders: this._getProviders.bind(this),
        layoutConfig: this._layoutConfig,
        descriptionConfig: this._descriptionConfig
      }), this._container);
      this._eventBus.fire('propertiesPanel.rendered');
    }
    _destroy() {
      if (this._container) {
        N$2(null, this._container);
        this._eventBus.fire('propertiesPanel.destroyed');
      }
    }
  }
  DmnPropertiesPanelRenderer.$inject = ['config.propertiesPanel', 'injector', 'eventBus', '_parent'];

  // helpers ///////////////////////

  function isImplicitRoot(element) {
    // Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
    return element && (element.isImplicit || element.id === '__implicitroot');
  }

  /**
   * Setup keyboard bindings (undo, redo) on the given container.
   *
   * @param {Element} container
   * @param {EventBus} eventBus
   * @param {CommandStack} commandStack
   */
  function setupKeyboard(container, eventBus, commandStack) {
    function cancel(event) {
      event.preventDefault();
      event.stopPropagation();
    }
    function handleKeys(event) {
      if (isUndo(event)) {
        commandStack.undo();
        return cancel(event);
      }
      if (isRedo(event)) {
        commandStack.redo();
        return cancel(event);
      }
    }
    eventBus.on('keyboard.bind', function () {
      event.bind(container, 'keydown', handleKeys);
    });
    eventBus.on('keyboard.unbind', function () {
      event.unbind(container, 'keydown', handleKeys);
    });
  }
  var index$2 = {
    __depends__: [index$3],
    __init__: ['propertiesPanel'],
    propertiesPanel: ['type', DmnPropertiesPanelRenderer]
  };
  function useService(type, strict) {
    const {
      getService
    } = F$2(DmnPropertiesPanelContext);
    return getService(type, strict);
  }
  const SPACE_REGEX$1 = /\s/;

  // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
  const QNAME_REGEX$1 = /^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;

  // for ID validation as per BPMN Schema (QName - Namespace)
  const ID_REGEX$1 = /^[a-z_][\w-.]*$/i;

  /**
   * checks whether the id value is valid
   *
   * @param {ModdleElement} element
   * @param {String} idValue
   * @param {Function} translate
   *
   * @return {String} error message
   */
  function isIdValid(element, idValue, translate) {
    const assigned = element.$model.ids.assigned(idValue);
    const idAlreadyExists = assigned && assigned !== element;
    if (!idValue) {
      return translate('ID must not be empty.');
    }
    if (idAlreadyExists) {
      return translate('ID must be unique.');
    }
    return validateId$1(idValue, translate);
  }
  function validateId$1(idValue, translate) {
    if (containsSpace$1(idValue)) {
      return translate('ID must not contain spaces.');
    }
    if (!ID_REGEX$1.test(idValue)) {
      if (QNAME_REGEX$1.test(idValue)) {
        return translate('ID must not contain prefix.');
      }
      return translate('ID must be a valid QName.');
    }
  }
  function containsSpace$1(value) {
    return SPACE_REGEX$1.test(value);
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function IdProps$1(props) {
    const {
      element
    } = props;
    return [{
      id: 'id',
      component: Id$1,
      element,
      isEdited: isEdited$1
    }];
  }
  function Id$1(props) {
    const {
      element,
      id
    } = props;
    const modeling = useService('modeling');
    const debounce = useService('debounceInput');
    const translate = useService('translate');
    const getValue = element => {
      return getBusinessObject$1(element).get('id');
    };
    const setValue = value => {
      modeling.updateProperties(element, {
        id: value
      });
    };
    const validate = value => {
      const businessObject = getBusinessObject$1(element);
      return isIdValid(businessObject, value, translate);
    };
    return TextfieldEntry({
      element,
      id,
      label: translate('ID'),
      getValue,
      setValue,
      debounce,
      validate
    });
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function NameProps(props) {
    const {
      element
    } = props;
    if (!isAny$1(element, ['dmn:DRGElement', 'dmn:Definitions', 'dmn:TextAnnotation'])) {
      return [];
    }
    return [{
      id: 'name',
      component: Name,
      element,
      isEdited: isEdited$1
    }];
  }
  function Name(props) {
    const {
      element,
      id
    } = props;
    const modeling = useService('modeling');
    const debounce = useService('debounceInput');
    const translate = useService('translate');

    // (1) default: name
    let options = {
      element,
      id,
      label: translate('Name'),
      debounce,
      getValue: element => {
        return getBusinessObject$1(element).get('name');
      },
      setValue: value => {
        modeling.updateProperties(element, {
          name: value
        });
      }
    };

    // (2) text annotation
    if (is$1(element, 'dmn:TextAnnotation')) {
      options = {
        ...options,
        getValue: element => {
          return getBusinessObject$1(element).get('text');
        },
        setValue: value => {
          modeling.updateProperties(element, {
            text: value
          });
        }
      };
    }
    return TextfieldEntry(options);
  }
  function GeneralGroup(element) {
    const entries = [...NameProps({
      element
    }), ...IdProps$1({
      element
    })];
    return {
      id: 'general',
      label: 'General',
      entries,
      component: Group
    };
  }
  function getGroups(element) {
    const groups = [GeneralGroup(element)];

    // contract: if a group returns null, it should not be displayed at all
    return groups.filter(group => group !== null);
  }
  class DmnPropertiesProvider {
    constructor(propertiesPanel) {
      propertiesPanel.registerProvider(this);
    }
    getGroups(element) {
      return groups => {
        return [...groups, ...getGroups(element)];
      };
    }
  }
  DmnPropertiesProvider.$inject = ['propertiesPanel'];
  var index$1 = {
    __init__: ['dmnPropertiesProvider'],
    dmnPropertiesProvider: ['type', DmnPropertiesProvider]
  };
  function VersionTagProps(props) {
    const {
      element
    } = props;
    if (!is$1(element, 'dmn:Decision')) {
      return [];
    }
    return [{
      id: 'versionTag',
      component: VersionTag,
      element,
      isEdited: isEdited$1
    }];
  }
  function VersionTag(props) {
    const {
      element,
      id
    } = props;
    const modeling = useService('modeling');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const getValue = () => {
      return getBusinessObject$1(element).get('camunda:versionTag');
    };
    const setValue = value => {
      modeling.updateProperties(element, {
        'camunda:versionTag': value
      });
    };
    return TextfieldEntry({
      element,
      id,
      label: translate('Version tag'),
      getValue,
      setValue,
      debounce
    });
  }
  function HistoryCleanupProps(props) {
    const {
      element
    } = props;
    if (!is$1(element, 'dmn:Decision')) {
      return [];
    }
    return [{
      id: 'historyTimeToLive',
      component: HistoryTimeToLive,
      element,
      isEdited: isEdited$1
    }];
  }
  function HistoryTimeToLive(props) {
    const {
      element,
      id
    } = props;
    const modeling = useService('modeling');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const getValue = () => {
      return getBusinessObject$1(element).get('camunda:historyTimeToLive');
    };
    const setValue = value => {
      modeling.updateProperties(element, {
        'camunda:historyTimeToLive': value
      });
    };
    return TextfieldEntry({
      element,
      id,
      label: translate('Time to live'),
      getValue,
      setValue,
      debounce
    });
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function IdProps(props) {
    const {
      element
    } = props;
    return [{
      id: 'id',
      component: Id,
      element,
      isEdited: isEdited$1
    }];
  }
  function Id(props) {
    const {
      element,
      id
    } = props;
    const modeling = useService('modeling');
    const debounce = useService('debounceInput');
    const translate = useService('translate');
    const getValue = element => {
      return getBusinessObject$1(element).get('id');
    };
    const setValue = value => {
      modeling.updateProperties(element, {
        id: value
      });
    };
    const validate = value => {
      const businessObject = getBusinessObject$1(element);
      return isIdValid(businessObject, value, translate);
    };
    const description = is$1(element, 'dmn:Decision') ? translate('This maps to the decision definition key.') : null;
    return TextfieldEntry({
      element,
      id,
      label: translate('ID'),
      getValue,
      setValue,
      debounce,
      validate,
      description
    });
  }
  const LOW_PRIORITY$n = 500;
  const CAMUNDA_PLATFORM_GROUPS = [HistoryCleanupGroup];

  /**
   * Provides `camunda` namespace properties.
   *
   * @example
   * ```javascript
   * import DmnModeler from 'dmn-js/lib/Modeler';
   * import {
   *   DmnPropertiesPanelModule,
   *   DmnPropertiesProviderModule,
   *   CamundaPlatformPropertiesProviderModule
   * } from 'dmn-js-properties-panel';
   *
   * const modeler = new DmnModeler({
   *   container: '#canvas',
   *   propertiesPanel: {
   *     parent: '#properties'
   *   },
   *   additionalModules: [
   *     DmnPropertiesPanelModule,
   *     DmnPropertiesProviderModule,
   *     CamundaPlatformPropertiesProviderModule
   *   ]
   * });
   * ```
   */
  class CamundaPropertiesProvider {
    constructor(propertiesPanel, injector) {
      propertiesPanel.registerProvider(LOW_PRIORITY$n, this);
      this._injector = injector;
    }
    getGroups(element) {
      return groups => {
        // (1) add Camunda Platform specific groups
        groups = groups.concat(this._getGroups(element));

        // (2) update existing groups with Camunda Platform specific properties
        updateGeneralGroup(groups, element);
        return groups;
      };
    }
    _getGroups(element) {
      const groups = CAMUNDA_PLATFORM_GROUPS.map(createGroup => createGroup(element, this._injector));

      // contract: if a group returns null, it should not be displayed at all
      return groups.filter(group => group !== null);
    }
  }
  CamundaPropertiesProvider.$inject = ['propertiesPanel', 'injector'];

  /**
   * This ensures the <Implementation> group always locates after <Documentation>
   */

  function updateGeneralGroup(groups, element) {
    const generalGroup = findGroup(groups, 'general');
    if (!generalGroup) {
      return;
    }
    const {
      entries
    } = generalGroup;

    // (1) replace id with camunda id
    const idIndex = findIndex$1(entries, entry => entry.id === 'id');
    entries.splice(idIndex, 1, ...IdProps({
      element
    }));

    // (2) add version tag after id
    entries.splice(idIndex + 1, 0, ...VersionTagProps({
      element
    }));
  }
  function HistoryCleanupGroup(element) {
    const group = {
      label: 'History cleanup',
      id: 'Camunda__HistoryCleanup',
      component: Group,
      entries: [...HistoryCleanupProps({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }

  // helper /////////////////////

  function findGroup(groups, id) {
    return groups.find(g => g.id === id);
  }
  var index = {
    __init__: ['CamundaPropertiesProvider'],
    CamundaPropertiesProvider: ['type', CamundaPropertiesProvider]
  };

  var FN_REF = '__fn';
  var DEFAULT_PRIORITY$7 = 1000;
  var slice$1 = Array.prototype.slice;

  /**
   * A general purpose event bus.
   *
   * This component is used to communicate across a diagram instance.
   * Other parts of a diagram can use it to listen to and broadcast events.
   *
   *
   * ## Registering for Events
   *
   * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
   * methods to register for events. {@link EventBus#off} can be used to
   * remove event registrations. Listeners receive an instance of {@link Event}
   * as the first argument. It allows them to hook into the event execution.
   *
   * ```javascript
   *
   * // listen for event
   * eventBus.on('foo', function(event) {
   *
   *   // access event type
   *   event.type; // 'foo'
   *
   *   // stop propagation to other listeners
   *   event.stopPropagation();
   *
   *   // prevent event default
   *   event.preventDefault();
   * });
   *
   * // listen for event with custom payload
   * eventBus.on('bar', function(event, payload) {
   *   console.log(payload);
   * });
   *
   * // listen for event returning value
   * eventBus.on('foobar', function(event) {
   *
   *   // stop event propagation + prevent default
   *   return false;
   *
   *   // stop event propagation + return custom result
   *   return {
   *     complex: 'listening result'
   *   };
   * });
   *
   *
   * // listen with custom priority (default=1000, higher is better)
   * eventBus.on('priorityfoo', 1500, function(event) {
   *   console.log('invoked first!');
   * });
   *
   *
   * // listen for event and pass the context (`this`)
   * eventBus.on('foobar', function(event) {
   *   this.foo();
   * }, this);
   * ```
   *
   *
   * ## Emitting Events
   *
   * Events can be emitted via the event bus using {@link EventBus#fire}.
   *
   * ```javascript
   *
   * // false indicates that the default action
   * // was prevented by listeners
   * if (eventBus.fire('foo') === false) {
   *   console.log('default has been prevented!');
   * };
   *
   *
   * // custom args + return value listener
   * eventBus.on('sum', function(event, a, b) {
   *   return a + b;
   * });
   *
   * // you can pass custom arguments + retrieve result values.
   * var sum = eventBus.fire('sum', 1, 2);
   * console.log(sum); // 3
   * ```
   */
  function EventBus() {
    this._listeners = {};

    // cleanup on destroy on lowest priority to allow
    // message passing until the bitter end
    this.on('diagram.destroy', 1, this._destroy, this);
  }

  /**
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @param {string|Array<string>} events
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus.prototype.on = function (events, priority, callback, that) {
    events = isArray$6(events) ? events : [events];
    if (isFunction$2(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$7;
    }
    if (!isNumber$3(priority)) {
      throw new Error('priority must be a number');
    }
    var actualCallback = callback;
    if (that) {
      actualCallback = bind$3(callback, that);

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      actualCallback[FN_REF] = callback[FN_REF] || callback;
    }
    var self = this;
    events.forEach(function (e) {
      self._addListener(e, {
        priority: priority,
        callback: actualCallback,
        next: null
      });
    });
  };

  /**
   * Register an event listener that is executed only once.
   *
   * @param {string} event the event name to register for
   * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
   * @param {Function} callback the callback to execute
   * @param {Object} [that] Pass context (`this`) to the callback
   */
  EventBus.prototype.once = function (event, priority, callback, that) {
    var self = this;
    if (isFunction$2(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$7;
    }
    if (!isNumber$3(priority)) {
      throw new Error('priority must be a number');
    }
    function wrappedCallback() {
      wrappedCallback.__isTomb = true;
      var result = callback.apply(that, arguments);
      self.off(event, wrappedCallback);
      return result;
    }

    // make sure we remember and are able to remove
    // bound callbacks via {@link #off} using the original
    // callback
    wrappedCallback[FN_REF] = callback;
    this.on(event, priority, wrappedCallback);
  };

  /**
   * Removes event listeners by event and callback.
   *
   * If no callback is given, all listeners for a given event name are being removed.
   *
   * @param {string|Array<string>} events
   * @param {Function} [callback]
   */
  EventBus.prototype.off = function (events, callback) {
    events = isArray$6(events) ? events : [events];
    var self = this;
    events.forEach(function (event) {
      self._removeListener(event, callback);
    });
  };

  /**
   * Create an EventBus event.
   *
   * @param {Object} data
   *
   * @return {Object} event, recognized by the eventBus
   */
  EventBus.prototype.createEvent = function (data) {
    var event = new InternalEvent();
    event.init(data);
    return event;
  };

  /**
   * Fires a named event.
   *
   * @example
   *
   * // fire event by name
   * events.fire('foo');
   *
   * // fire event object with nested type
   * var event = { type: 'foo' };
   * events.fire(event);
   *
   * // fire event with explicit type
   * var event = { x: 10, y: 20 };
   * events.fire('element.moved', event);
   *
   * // pass additional arguments to the event
   * events.on('foo', function(event, bar) {
   *   alert(bar);
   * });
   *
   * events.fire({ type: 'foo' }, 'I am bar!');
   *
   * @param {string} [name] the optional event name
   * @param {Object} [event] the event object
   * @param {...Object} additional arguments to be passed to the callback functions
   *
   * @return {boolean} the events return value, if specified or false if the
   *                   default action was prevented by listeners
   */
  EventBus.prototype.fire = function (type, data) {
    var event, firstListener, returnValue, args;
    args = slice$1.call(arguments);
    if (typeof type === 'object') {
      data = type;
      type = data.type;
    }
    if (!type) {
      throw new Error('no event type specified');
    }
    firstListener = this._listeners[type];
    if (!firstListener) {
      return;
    }

    // we make sure we fire instances of our home made
    // events here. We wrap them only once, though
    if (data instanceof InternalEvent) {
      // we are fine, we alread have an event
      event = data;
    } else {
      event = this.createEvent(data);
    }

    // ensure we pass the event as the first parameter
    args[0] = event;

    // original event type (in case we delegate)
    var originalType = event.type;

    // update event type before delegation
    if (type !== originalType) {
      event.type = type;
    }
    try {
      returnValue = this._invokeListeners(event, args, firstListener);
    } finally {
      // reset event type after delegation
      if (type !== originalType) {
        event.type = originalType;
      }
    }

    // set the return value to false if the event default
    // got prevented and no other return value exists
    if (returnValue === undefined && event.defaultPrevented) {
      returnValue = false;
    }
    return returnValue;
  };
  EventBus.prototype.handleError = function (error) {
    return this.fire('error', {
      error: error
    }) === false;
  };
  EventBus.prototype._destroy = function () {
    this._listeners = {};
  };
  EventBus.prototype._invokeListeners = function (event, args, listener) {
    var returnValue;
    while (listener) {
      // handle stopped propagation
      if (event.cancelBubble) {
        break;
      }
      returnValue = this._invokeListener(event, args, listener);
      listener = listener.next;
    }
    return returnValue;
  };
  EventBus.prototype._invokeListener = function (event, args, listener) {
    var returnValue;
    if (listener.callback.__isTomb) {
      return returnValue;
    }
    try {
      // returning false prevents the default action
      returnValue = invokeFunction(listener.callback, args);

      // stop propagation on return value
      if (returnValue !== undefined) {
        event.returnValue = returnValue;
        event.stopPropagation();
      }

      // prevent default on return false
      if (returnValue === false) {
        event.preventDefault();
      }
    } catch (error) {
      if (!this.handleError(error)) {
        console.error('unhandled error in event listener', error);
        throw error;
      }
    }
    return returnValue;
  };

  /*
   * Add new listener with a certain priority to the list
   * of listeners (for the given event).
   *
   * The semantics of listener registration / listener execution are
   * first register, first serve: New listeners will always be inserted
   * after existing listeners with the same priority.
   *
   * Example: Inserting two listeners with priority 1000 and 1300
   *
   *    * before: [ 1500, 1500, 1000, 1000 ]
   *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
   *
   * @param {string} event
   * @param {Object} listener { priority, callback }
   */
  EventBus.prototype._addListener = function (event, newListener) {
    var listener = this._getListeners(event),
      previousListener;

    // no prior listeners
    if (!listener) {
      this._setListeners(event, newListener);
      return;
    }

    // ensure we order listeners by priority from
    // 0 (high) to n > 0 (low)
    while (listener) {
      if (listener.priority < newListener.priority) {
        newListener.next = listener;
        if (previousListener) {
          previousListener.next = newListener;
        } else {
          this._setListeners(event, newListener);
        }
        return;
      }
      previousListener = listener;
      listener = listener.next;
    }

    // add new listener to back
    previousListener.next = newListener;
  };
  EventBus.prototype._getListeners = function (name) {
    return this._listeners[name];
  };
  EventBus.prototype._setListeners = function (name, listener) {
    this._listeners[name] = listener;
  };
  EventBus.prototype._removeListener = function (event, callback) {
    var listener = this._getListeners(event),
      nextListener,
      previousListener,
      listenerCallback;
    if (!callback) {
      // clear listeners
      this._setListeners(event, null);
      return;
    }
    while (listener) {
      nextListener = listener.next;
      listenerCallback = listener.callback;
      if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
        if (previousListener) {
          previousListener.next = nextListener;
        } else {
          // new first listener
          this._setListeners(event, nextListener);
        }
      }
      previousListener = listener;
      listener = nextListener;
    }
  };

  /**
   * A event that is emitted via the event bus.
   */
  function InternalEvent() {}
  InternalEvent.prototype.stopPropagation = function () {
    this.cancelBubble = true;
  };
  InternalEvent.prototype.preventDefault = function () {
    this.defaultPrevented = true;
  };
  InternalEvent.prototype.init = function (data) {
    assign$4(this, data || {});
  };

  /**
   * Invoke function. Be fast...
   *
   * @param {Function} fn
   * @param {Array<Object>} args
   *
   * @return {Any}
   */
  function invokeFunction(fn, args) {
    return fn.apply(null, args);
  }

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */
  var nativeToString$2 = Object.prototype.toString;
  function isString$3(obj) {
    return nativeToString$2.call(obj) === '[object String]';
  }
  function _extends$2() {
    _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$2.apply(this, arguments);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */

  function assign$2(target) {
    for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      others[_key - 1] = arguments[_key];
    }
    return _extends$2.apply(void 0, [target].concat(others));
  }

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */
  var nativeToString$1 = Object.prototype.toString;
  var nativeHasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function isUndefined$3(obj) {
    return obj === undefined;
  }
  function isArray$4(obj) {
    return nativeToString$1.call(obj) === '[object Array]';
  }
  function isObject(obj) {
    return nativeToString$1.call(obj) === '[object Object]';
  }
  function isString$2(obj) {
    return nativeToString$1.call(obj) === '[object String]';
  }
  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */

  function has$1(target, key) {
    return nativeHasOwnProperty$1.call(target, key);
  }
  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */

  function forEach$1(collection, iterator) {
    var val, result;
    if (isUndefined$3(collection)) {
      return;
    }
    var convertKey = isArray$4(collection) ? toNum$1 : identity$1;
    for (var key in collection) {
      if (has$1(collection, key)) {
        val = collection[key];
        result = iterator(val, convertKey(key));
        if (result === false) {
          return val;
        }
      }
    }
  }
  function identity$1(arg) {
    return arg;
  }
  function toNum$1(arg) {
    return Number(arg);
  }
  /**
   * Bind function against target <this>.
   *
   * @param  {Function} fn
   * @param  {Object}   target
   *
   * @return {Function} bound function
   */

  function bind(fn, target) {
    return fn.bind(target);
  }
  function _extends$1() {
    _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends$1.apply(this, arguments);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */

  function assign$1(target) {
    for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      others[_key - 1] = arguments[_key];
    }
    return _extends$1.apply(void 0, [target].concat(others));
  }
  /**
   * Pick given properties from the target object.
   *
   * @param {Object} target
   * @param {Array} properties
   *
   * @return {Object} target
   */

  function pick(target, properties) {
    var result = {};
    var obj = Object(target);
    forEach$1(properties, function (prop) {
      if (prop in obj) {
        result[prop] = target[prop];
      }
    });
    return result;
  }

  /**
   * Moddle base element.
   */
  function Base$2() {}
  Base$2.prototype.get = function (name) {
    return this.$model.properties.get(this, name);
  };
  Base$2.prototype.set = function (name, value) {
    this.$model.properties.set(this, name, value);
  };

  /**
   * A model element factory.
   *
   * @param {Moddle} model
   * @param {Properties} properties
   */
  function Factory(model, properties) {
    this.model = model;
    this.properties = properties;
  }
  Factory.prototype.createType = function (descriptor) {
    var model = this.model;
    var props = this.properties,
      prototype = Object.create(Base$2.prototype);

    // initialize default values
    forEach$1(descriptor.properties, function (p) {
      if (!p.isMany && p.default !== undefined) {
        prototype[p.name] = p.default;
      }
    });
    props.defineModel(prototype, model);
    props.defineDescriptor(prototype, descriptor);
    var name = descriptor.ns.name;

    /**
     * The new type constructor
     */
    function ModdleElement(attrs) {
      props.define(this, '$type', {
        value: name,
        enumerable: true
      });
      props.define(this, '$attrs', {
        value: {}
      });
      props.define(this, '$parent', {
        writable: true
      });
      forEach$1(attrs, bind(function (val, key) {
        this.set(key, val);
      }, this));
    }
    ModdleElement.prototype = prototype;
    ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;

    // static links
    props.defineModel(ModdleElement, model);
    props.defineDescriptor(ModdleElement, descriptor);
    return ModdleElement;
  };

  /**
   * Built-in moddle types
   */
  var BUILTINS = {
    String: true,
    Boolean: true,
    Integer: true,
    Real: true,
    Element: true
  };

  /**
   * Converters for built in types from string representations
   */
  var TYPE_CONVERTERS = {
    String: function (s) {
      return s;
    },
    Boolean: function (s) {
      return s === 'true';
    },
    Integer: function (s) {
      return parseInt(s, 10);
    },
    Real: function (s) {
      return parseFloat(s);
    }
  };

  /**
   * Convert a type to its real representation
   */
  function coerceType(type, value) {
    var converter = TYPE_CONVERTERS[type];
    if (converter) {
      return converter(value);
    } else {
      return value;
    }
  }

  /**
   * Return whether the given type is built-in
   */
  function isBuiltIn(type) {
    return !!BUILTINS[type];
  }

  /**
   * Return whether the given type is simple
   */
  function isSimple(type) {
    return !!TYPE_CONVERTERS[type];
  }

  /**
   * Parses a namespaced attribute name of the form (ns:)localName to an object,
   * given a default prefix to assume in case no explicit namespace is given.
   *
   * @param {String} name
   * @param {String} [defaultPrefix] the default prefix to take, if none is present.
   *
   * @return {Object} the parsed name
   */
  function parseName(name, defaultPrefix) {
    var parts = name.split(/:/),
      localName,
      prefix;

    // no prefix (i.e. only local name)
    if (parts.length === 1) {
      localName = name;
      prefix = defaultPrefix;
    } else
      // prefix + local name
      if (parts.length === 2) {
        localName = parts[1];
        prefix = parts[0];
      } else {
        throw new Error('expected <prefix:localName> or <localName>, got ' + name);
      }
    name = (prefix ? prefix + ':' : '') + localName;
    return {
      name: name,
      prefix: prefix,
      localName: localName
    };
  }

  /**
   * A utility to build element descriptors.
   */
  function DescriptorBuilder(nameNs) {
    this.ns = nameNs;
    this.name = nameNs.name;
    this.allTypes = [];
    this.allTypesByName = {};
    this.properties = [];
    this.propertiesByName = {};
  }
  DescriptorBuilder.prototype.build = function () {
    return pick(this, ['ns', 'name', 'allTypes', 'allTypesByName', 'properties', 'propertiesByName', 'bodyProperty', 'idProperty']);
  };

  /**
   * Add property at given index.
   *
   * @param {Object} p
   * @param {Number} [idx]
   * @param {Boolean} [validate=true]
   */
  DescriptorBuilder.prototype.addProperty = function (p, idx, validate) {
    if (typeof idx === 'boolean') {
      validate = idx;
      idx = undefined;
    }
    this.addNamedProperty(p, validate !== false);
    var properties = this.properties;
    if (idx !== undefined) {
      properties.splice(idx, 0, p);
    } else {
      properties.push(p);
    }
  };
  DescriptorBuilder.prototype.replaceProperty = function (oldProperty, newProperty, replace) {
    var oldNameNs = oldProperty.ns;
    var props = this.properties,
      propertiesByName = this.propertiesByName,
      rename = oldProperty.name !== newProperty.name;
    if (oldProperty.isId) {
      if (!newProperty.isId) {
        throw new Error('property <' + newProperty.ns.name + '> must be id property ' + 'to refine <' + oldProperty.ns.name + '>');
      }
      this.setIdProperty(newProperty, false);
    }
    if (oldProperty.isBody) {
      if (!newProperty.isBody) {
        throw new Error('property <' + newProperty.ns.name + '> must be body property ' + 'to refine <' + oldProperty.ns.name + '>');
      }

      // TODO: Check compatibility
      this.setBodyProperty(newProperty, false);
    }

    // validate existence and get location of old property
    var idx = props.indexOf(oldProperty);
    if (idx === -1) {
      throw new Error('property <' + oldNameNs.name + '> not found in property list');
    }

    // remove old property
    props.splice(idx, 1);

    // replacing the named property is intentional
    //
    //  * validate only if this is a "rename" operation
    //  * add at specific index unless we "replace"
    //
    this.addProperty(newProperty, replace ? undefined : idx, rename);

    // make new property available under old name
    propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;
  };
  DescriptorBuilder.prototype.redefineProperty = function (p, targetPropertyName, replace) {
    var nsPrefix = p.ns.prefix;
    var parts = targetPropertyName.split('#');
    var name = parseName(parts[0], nsPrefix);
    var attrName = parseName(parts[1], name.prefix).name;
    var redefinedProperty = this.propertiesByName[attrName];
    if (!redefinedProperty) {
      throw new Error('refined property <' + attrName + '> not found');
    } else {
      this.replaceProperty(redefinedProperty, p, replace);
    }
    delete p.redefines;
  };
  DescriptorBuilder.prototype.addNamedProperty = function (p, validate) {
    var ns = p.ns,
      propsByName = this.propertiesByName;
    if (validate) {
      this.assertNotDefined(p, ns.name);
      this.assertNotDefined(p, ns.localName);
    }
    propsByName[ns.name] = propsByName[ns.localName] = p;
  };
  DescriptorBuilder.prototype.removeNamedProperty = function (p) {
    var ns = p.ns,
      propsByName = this.propertiesByName;
    delete propsByName[ns.name];
    delete propsByName[ns.localName];
  };
  DescriptorBuilder.prototype.setBodyProperty = function (p, validate) {
    if (validate && this.bodyProperty) {
      throw new Error('body property defined multiple times ' + '(<' + this.bodyProperty.ns.name + '>, <' + p.ns.name + '>)');
    }
    this.bodyProperty = p;
  };
  DescriptorBuilder.prototype.setIdProperty = function (p, validate) {
    if (validate && this.idProperty) {
      throw new Error('id property defined multiple times ' + '(<' + this.idProperty.ns.name + '>, <' + p.ns.name + '>)');
    }
    this.idProperty = p;
  };
  DescriptorBuilder.prototype.assertNotDefined = function (p, name) {
    var propertyName = p.name,
      definedProperty = this.propertiesByName[propertyName];
    if (definedProperty) {
      throw new Error('property <' + propertyName + '> already defined; ' + 'override of <' + definedProperty.definedBy.ns.name + '#' + definedProperty.ns.name + '> by ' + '<' + p.definedBy.ns.name + '#' + p.ns.name + '> not allowed without redefines');
    }
  };
  DescriptorBuilder.prototype.hasProperty = function (name) {
    return this.propertiesByName[name];
  };
  DescriptorBuilder.prototype.addTrait = function (t, inherited) {
    var typesByName = this.allTypesByName,
      types = this.allTypes;
    var typeName = t.name;
    if (typeName in typesByName) {
      return;
    }
    forEach$1(t.properties, bind(function (p) {
      // clone property to allow extensions
      p = assign$1({}, p, {
        name: p.ns.localName,
        inherited: inherited
      });
      Object.defineProperty(p, 'definedBy', {
        value: t
      });
      var replaces = p.replaces,
        redefines = p.redefines;

      // add replace/redefine support
      if (replaces || redefines) {
        this.redefineProperty(p, replaces || redefines, replaces);
      } else {
        if (p.isBody) {
          this.setBodyProperty(p);
        }
        if (p.isId) {
          this.setIdProperty(p);
        }
        this.addProperty(p);
      }
    }, this));
    types.push(t);
    typesByName[typeName] = t;
  };

  /**
   * A registry of Moddle packages.
   *
   * @param {Array<Package>} packages
   * @param {Properties} properties
   */
  function Registry(packages, properties) {
    this.packageMap = {};
    this.typeMap = {};
    this.packages = [];
    this.properties = properties;
    forEach$1(packages, bind(this.registerPackage, this));
  }
  Registry.prototype.getPackage = function (uriOrPrefix) {
    return this.packageMap[uriOrPrefix];
  };
  Registry.prototype.getPackages = function () {
    return this.packages;
  };
  Registry.prototype.registerPackage = function (pkg) {
    // copy package
    pkg = assign$1({}, pkg);
    var pkgMap = this.packageMap;
    ensureAvailable(pkgMap, pkg, 'prefix');
    ensureAvailable(pkgMap, pkg, 'uri');

    // register types
    forEach$1(pkg.types, bind(function (descriptor) {
      this.registerType(descriptor, pkg);
    }, this));
    pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;
    this.packages.push(pkg);
  };

  /**
   * Register a type from a specific package with us
   */
  Registry.prototype.registerType = function (type, pkg) {
    type = assign$1({}, type, {
      superClass: (type.superClass || []).slice(),
      extends: (type.extends || []).slice(),
      properties: (type.properties || []).slice(),
      meta: assign$1(type.meta || {})
    });
    var ns = parseName(type.name, pkg.prefix),
      name = ns.name,
      propertiesByName = {};

    // parse properties
    forEach$1(type.properties, bind(function (p) {
      // namespace property names
      var propertyNs = parseName(p.name, ns.prefix),
        propertyName = propertyNs.name;

      // namespace property types
      if (!isBuiltIn(p.type)) {
        p.type = parseName(p.type, propertyNs.prefix).name;
      }
      assign$1(p, {
        ns: propertyNs,
        name: propertyName
      });
      propertiesByName[propertyName] = p;
    }, this));

    // update ns + name
    assign$1(type, {
      ns: ns,
      name: name,
      propertiesByName: propertiesByName
    });
    forEach$1(type.extends, bind(function (extendsName) {
      var extended = this.typeMap[extendsName];
      extended.traits = extended.traits || [];
      extended.traits.push(name);
    }, this));

    // link to package
    this.definePackage(type, pkg);

    // register
    this.typeMap[name] = type;
  };

  /**
   * Traverse the type hierarchy from bottom to top,
   * calling iterator with (type, inherited) for all elements in
   * the inheritance chain.
   *
   * @param {Object} nsName
   * @param {Function} iterator
   * @param {Boolean} [trait=false]
   */
  Registry.prototype.mapTypes = function (nsName, iterator, trait) {
    var type = isBuiltIn(nsName.name) ? {
      name: nsName.name
    } : this.typeMap[nsName.name];
    var self = this;

    /**
     * Traverse the selected trait.
     *
     * @param {String} cls
     */
    function traverseTrait(cls) {
      return traverseSuper(cls, true);
    }

    /**
     * Traverse the selected super type or trait
     *
     * @param {String} cls
     * @param {Boolean} [trait=false]
     */
    function traverseSuper(cls, trait) {
      var parentNs = parseName(cls, isBuiltIn(cls) ? '' : nsName.prefix);
      self.mapTypes(parentNs, iterator, trait);
    }
    if (!type) {
      throw new Error('unknown type <' + nsName.name + '>');
    }
    forEach$1(type.superClass, trait ? traverseTrait : traverseSuper);

    // call iterator with (type, inherited=!trait)
    iterator(type, !trait);
    forEach$1(type.traits, traverseTrait);
  };

  /**
   * Returns the effective descriptor for a type.
   *
   * @param  {String} type the namespaced name (ns:localName) of the type
   *
   * @return {Descriptor} the resulting effective descriptor
   */
  Registry.prototype.getEffectiveDescriptor = function (name) {
    var nsName = parseName(name);
    var builder = new DescriptorBuilder(nsName);
    this.mapTypes(nsName, function (type, inherited) {
      builder.addTrait(type, inherited);
    });
    var descriptor = builder.build();

    // define package link
    this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);
    return descriptor;
  };
  Registry.prototype.definePackage = function (target, pkg) {
    this.properties.define(target, '$pkg', {
      value: pkg
    });
  };

  ///////// helpers ////////////////////////////

  function ensureAvailable(packageMap, pkg, identifierKey) {
    var value = pkg[identifierKey];
    if (value in packageMap) {
      throw new Error('package with ' + identifierKey + ' <' + value + '> already defined');
    }
  }

  /**
   * A utility that gets and sets properties of model elements.
   *
   * @param {Model} model
   */
  function Properties(model) {
    this.model = model;
  }

  /**
   * Sets a named property on the target element.
   * If the value is undefined, the property gets deleted.
   *
   * @param {Object} target
   * @param {String} name
   * @param {Object} value
   */
  Properties.prototype.set = function (target, name, value) {
    if (!isString$2(name) || !name.length) {
      throw new TypeError('property name must be a non-empty string');
    }
    var property = this.model.getPropertyDescriptor(target, name);
    var propertyName = property && property.name;
    if (isUndefined$2(value)) {
      // unset the property, if the specified value is undefined;
      // delete from $attrs (for extensions) or the target itself
      if (property) {
        delete target[propertyName];
      } else {
        delete target.$attrs[name];
      }
    } else {
      // set the property, defining well defined properties on the fly
      // or simply updating them in target.$attrs (for extensions)
      if (property) {
        if (propertyName in target) {
          target[propertyName] = value;
        } else {
          defineProperty$2(target, property, value);
        }
      } else {
        target.$attrs[name] = value;
      }
    }
  };

  /**
   * Returns the named property of the given element
   *
   * @param  {Object} target
   * @param  {String} name
   *
   * @return {Object}
   */
  Properties.prototype.get = function (target, name) {
    var property = this.model.getPropertyDescriptor(target, name);
    if (!property) {
      return target.$attrs[name];
    }
    var propertyName = property.name;

    // check if access to collection property and lazily initialize it
    if (!target[propertyName] && property.isMany) {
      defineProperty$2(target, property, []);
    }
    return target[propertyName];
  };

  /**
   * Define a property on the target element
   *
   * @param  {Object} target
   * @param  {String} name
   * @param  {Object} options
   */
  Properties.prototype.define = function (target, name, options) {
    if (!options.writable) {
      var value = options.value;

      // use getters for read-only variables to support ES6 proxies
      // cf. https://github.com/bpmn-io/internal-docs/issues/386
      options = assign$1({}, options, {
        get: function () {
          return value;
        }
      });
      delete options.value;
    }
    Object.defineProperty(target, name, options);
  };

  /**
   * Define the descriptor for an element
   */
  Properties.prototype.defineDescriptor = function (target, descriptor) {
    this.define(target, '$descriptor', {
      value: descriptor
    });
  };

  /**
   * Define the model for an element
   */
  Properties.prototype.defineModel = function (target, model) {
    this.define(target, '$model', {
      value: model
    });
  };
  function isUndefined$2(val) {
    return typeof val === 'undefined';
  }
  function defineProperty$2(target, property, value) {
    Object.defineProperty(target, property.name, {
      enumerable: !property.isReference,
      writable: true,
      value: value,
      configurable: true
    });
  }

  //// Moddle implementation /////////////////////////////////////////////////

  /**
   * @class Moddle
   *
   * A model that can be used to create elements of a specific type.
   *
   * @example
   *
   * var Moddle = require('moddle');
   *
   * var pkg = {
   *   name: 'mypackage',
   *   prefix: 'my',
   *   types: [
   *     { name: 'Root' }
   *   ]
   * };
   *
   * var moddle = new Moddle([pkg]);
   *
   * @param {Array<Package>} packages the packages to contain
   */
  function Moddle(packages) {
    this.properties = new Properties(this);
    this.factory = new Factory(this, this.properties);
    this.registry = new Registry(packages, this.properties);
    this.typeCache = {};
  }

  /**
   * Create an instance of the specified type.
   *
   * @method Moddle#create
   *
   * @example
   *
   * var foo = moddle.create('my:Foo');
   * var bar = moddle.create('my:Bar', { id: 'BAR_1' });
   *
   * @param  {String|Object} descriptor the type descriptor or name know to the model
   * @param  {Object} attrs   a number of attributes to initialize the model instance with
   * @return {Object}         model instance
   */
  Moddle.prototype.create = function (descriptor, attrs) {
    var Type = this.getType(descriptor);
    if (!Type) {
      throw new Error('unknown type <' + descriptor + '>');
    }
    return new Type(attrs);
  };

  /**
   * Returns the type representing a given descriptor
   *
   * @method Moddle#getType
   *
   * @example
   *
   * var Foo = moddle.getType('my:Foo');
   * var foo = new Foo({ 'id' : 'FOO_1' });
   *
   * @param  {String|Object} descriptor the type descriptor or name know to the model
   * @return {Object}         the type representing the descriptor
   */
  Moddle.prototype.getType = function (descriptor) {
    var cache = this.typeCache;
    var name = isString$2(descriptor) ? descriptor : descriptor.ns.name;
    var type = cache[name];
    if (!type) {
      descriptor = this.registry.getEffectiveDescriptor(name);
      type = cache[name] = this.factory.createType(descriptor);
    }
    return type;
  };

  /**
   * Creates an any-element type to be used within model instances.
   *
   * This can be used to create custom elements that lie outside the meta-model.
   * The created element contains all the meta-data required to serialize it
   * as part of meta-model elements.
   *
   * @method Moddle#createAny
   *
   * @example
   *
   * var foo = moddle.createAny('vendor:Foo', 'http://vendor', {
   *   value: 'bar'
   * });
   *
   * var container = moddle.create('my:Container', 'http://my', {
   *   any: [ foo ]
   * });
   *
   * // go ahead and serialize the stuff
   *
   *
   * @param  {String} name  the name of the element
   * @param  {String} nsUri the namespace uri of the element
   * @param  {Object} [properties] a map of properties to initialize the instance with
   * @return {Object} the any type instance
   */
  Moddle.prototype.createAny = function (name, nsUri, properties) {
    var nameNs = parseName(name);
    var element = {
      $type: name,
      $instanceOf: function (type) {
        return type === this.$type;
      }
    };
    var descriptor = {
      name: name,
      isGeneric: true,
      ns: {
        prefix: nameNs.prefix,
        localName: nameNs.localName,
        uri: nsUri
      }
    };
    this.properties.defineDescriptor(element, descriptor);
    this.properties.defineModel(element, this);
    this.properties.define(element, '$parent', {
      enumerable: false,
      writable: true
    });
    this.properties.define(element, '$instanceOf', {
      enumerable: false,
      writable: true
    });
    forEach$1(properties, function (a, key) {
      if (isObject(a) && a.value !== undefined) {
        element[a.name] = a.value;
      } else {
        element[key] = a;
      }
    });
    return element;
  };

  /**
   * Returns a registered package by uri or prefix
   *
   * @return {Object} the package
   */
  Moddle.prototype.getPackage = function (uriOrPrefix) {
    return this.registry.getPackage(uriOrPrefix);
  };

  /**
   * Returns a snapshot of all known packages
   *
   * @return {Object} the package
   */
  Moddle.prototype.getPackages = function () {
    return this.registry.getPackages();
  };

  /**
   * Returns the descriptor for an element
   */
  Moddle.prototype.getElementDescriptor = function (element) {
    return element.$descriptor;
  };

  /**
   * Returns true if the given descriptor or instance
   * represents the given type.
   *
   * May be applied to this, if element is omitted.
   */
  Moddle.prototype.hasType = function (element, type) {
    if (type === undefined) {
      type = element;
      element = this;
    }
    var descriptor = element.$model.getElementDescriptor(element);
    return type in descriptor.allTypesByName;
  };

  /**
   * Returns the descriptor of an elements named property
   */
  Moddle.prototype.getPropertyDescriptor = function (element, property) {
    return this.getElementDescriptor(element).propertiesByName[property];
  };

  /**
   * Returns a mapped type's descriptor
   */
  Moddle.prototype.getTypeDescriptor = function (type) {
    return this.registry.typeMap[type];
  };

  /**
   * Flatten array, one level deep.
   *
   * @param {Array<?>} arr
   *
   * @return {Array<?>}
   */
  var nativeToString = Object.prototype.toString;
  var nativeHasOwnProperty = Object.prototype.hasOwnProperty;
  function isUndefined$1(obj) {
    return obj === undefined;
  }
  function isArray$3(obj) {
    return nativeToString.call(obj) === '[object Array]';
  }
  function isFunction$1(obj) {
    var tag = nativeToString.call(obj);
    return tag === '[object Function]' || tag === '[object AsyncFunction]' || tag === '[object GeneratorFunction]' || tag === '[object AsyncGeneratorFunction]' || tag === '[object Proxy]';
  }
  function isString$1(obj) {
    return nativeToString.call(obj) === '[object String]';
  }
  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */

  function has(target, key) {
    return nativeHasOwnProperty.call(target, key);
  }

  /**
   * Find element in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function|Object} matcher
   *
   * @return {Object}
   */

  function find(collection, matcher) {
    matcher = toMatcher(matcher);
    var match;
    forEach(collection, function (val, key) {
      if (matcher(val, key)) {
        match = val;
        return false;
      }
    });
    return match;
  }
  /**
   * Find element index in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function} matcher
   *
   * @return {Object}
   */

  function findIndex(collection, matcher) {
    matcher = toMatcher(matcher);
    var idx = isArray$3(collection) ? -1 : undefined;
    forEach(collection, function (val, key) {
      if (matcher(val, key)) {
        idx = key;
        return false;
      }
    });
    return idx;
  }
  /**
   * Find element in collection.
   *
   * @param  {Array|Object} collection
   * @param  {Function} matcher
   *
   * @return {Array} result
   */

  function filter$1(collection, matcher) {
    var result = [];
    forEach(collection, function (val, key) {
      if (matcher(val, key)) {
        result.push(val);
      }
    });
    return result;
  }
  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @param  {Array|Object} collection
   * @param  {Function} iterator
   *
   * @return {Object} return result that stopped the iteration
   */

  function forEach(collection, iterator) {
    var val, result;
    if (isUndefined$1(collection)) {
      return;
    }
    var convertKey = isArray$3(collection) ? toNum : identity;
    for (var key in collection) {
      if (has(collection, key)) {
        val = collection[key];
        result = iterator(val, convertKey(key));
        if (result === false) {
          return val;
        }
      }
    }
  }
  function toMatcher(matcher) {
    return isFunction$1(matcher) ? matcher : function (e) {
      return e === matcher;
    };
  }
  function identity(arg) {
    return arg;
  }
  function toNum(arg) {
    return Number(arg);
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */

  function assign(target) {
    for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      others[_key - 1] = arguments[_key];
    }
    return _extends.apply(void 0, [target].concat(others));
  }

  var fromCharCode = String.fromCharCode;
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var ENTITY_PATTERN = /&#(\d+);|&#x([0-9a-f]+);|&(\w+);/ig;
  var ENTITY_MAPPING = {
    'amp': '&',
    'apos': '\'',
    'gt': '>',
    'lt': '<',
    'quot': '"'
  };

  // map UPPERCASE variants of supported special chars
  Object.keys(ENTITY_MAPPING).forEach(function (k) {
    ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];
  });
  function replaceEntities(_, d, x, z) {
    // reserved names, i.e. &nbsp;
    if (z) {
      if (hasOwnProperty$1.call(ENTITY_MAPPING, z)) {
        return ENTITY_MAPPING[z];
      } else {
        // fall back to original value
        return '&' + z + ';';
      }
    }

    // decimal encoded char
    if (d) {
      return fromCharCode(d);
    }

    // hex encoded char
    return fromCharCode(parseInt(x, 16));
  }

  /**
   * A basic entity decoder that can decode a minimal
   * sub-set of reserved names (&amp;) as well as
   * hex (&#xaaf;) and decimal (&#1231;) encoded characters.
   *
   * @param {string} str
   *
   * @return {string} decoded string
   */
  function decodeEntities(s) {
    if (s.length > 3 && s.indexOf('&') !== -1) {
      return s.replace(ENTITY_PATTERN, replaceEntities);
    }
    return s;
  }
  var XSI_URI = 'http://www.w3.org/2001/XMLSchema-instance';
  var XSI_PREFIX = 'xsi';
  var XSI_TYPE$1 = 'xsi:type';
  var NON_WHITESPACE_OUTSIDE_ROOT_NODE = 'non-whitespace outside of root node';
  function error$4(msg) {
    return new Error(msg);
  }
  function missingNamespaceForPrefix(prefix) {
    return 'missing namespace for prefix <' + prefix + '>';
  }
  function getter(getFn) {
    return {
      'get': getFn,
      'enumerable': true
    };
  }
  function cloneNsMatrix(nsMatrix) {
    var clone = {},
      key;
    for (key in nsMatrix) {
      clone[key] = nsMatrix[key];
    }
    return clone;
  }
  function uriPrefix(prefix) {
    return prefix + '$uri';
  }
  function buildNsMatrix(nsUriToPrefix) {
    var nsMatrix = {},
      uri,
      prefix;
    for (uri in nsUriToPrefix) {
      prefix = nsUriToPrefix[uri];
      nsMatrix[prefix] = prefix;
      nsMatrix[uriPrefix(prefix)] = uri;
    }
    return nsMatrix;
  }
  function noopGetContext() {
    return {
      'line': 0,
      'column': 0
    };
  }
  function throwFunc(err) {
    throw err;
  }

  /**
   * Creates a new parser with the given options.
   *
   * @constructor
   *
   * @param  {!Object<string, ?>=} options
   */
  function Parser(options) {
    if (!this) {
      return new Parser(options);
    }
    var proxy = options && options['proxy'];
    var onText,
      onOpenTag,
      onCloseTag,
      onCDATA,
      onError = throwFunc,
      onWarning,
      onComment,
      onQuestion,
      onAttention;
    var getContext = noopGetContext;

    /**
     * Do we need to parse the current elements attributes for namespaces?
     *
     * @type {boolean}
     */
    var maybeNS = false;

    /**
     * Do we process namespaces at all?
     *
     * @type {boolean}
     */
    var isNamespace = false;

    /**
     * The caught error returned on parse end
     *
     * @type {Error}
     */
    var returnError = null;

    /**
     * Should we stop parsing?
     *
     * @type {boolean}
     */
    var parseStop = false;

    /**
     * A map of { uri: prefix } used by the parser.
     *
     * This map will ensure we can normalize prefixes during processing;
     * for each uri, only one prefix will be exposed to the handlers.
     *
     * @type {!Object<string, string>}}
     */
    var nsUriToPrefix;

    /**
     * Handle parse error.
     *
     * @param  {string|Error} err
     */
    function handleError(err) {
      if (!(err instanceof Error)) {
        err = error$4(err);
      }
      returnError = err;
      onError(err, getContext);
    }

    /**
     * Handle parse error.
     *
     * @param  {string|Error} err
     */
    function handleWarning(err) {
      if (!onWarning) {
        return;
      }
      if (!(err instanceof Error)) {
        err = error$4(err);
      }
      onWarning(err, getContext);
    }

    /**
     * Register parse listener.
     *
     * @param  {string}   name
     * @param  {Function} cb
     *
     * @return {Parser}
     */
    this['on'] = function (name, cb) {
      if (typeof cb !== 'function') {
        throw error$4('required args <name, cb>');
      }
      switch (name) {
        case 'openTag':
          onOpenTag = cb;
          break;
        case 'text':
          onText = cb;
          break;
        case 'closeTag':
          onCloseTag = cb;
          break;
        case 'error':
          onError = cb;
          break;
        case 'warn':
          onWarning = cb;
          break;
        case 'cdata':
          onCDATA = cb;
          break;
        case 'attention':
          onAttention = cb;
          break;
        // <!XXXXX zzzz="eeee">
        case 'question':
          onQuestion = cb;
          break;
        // <? ....  ?>
        case 'comment':
          onComment = cb;
          break;
        default:
          throw error$4('unsupported event: ' + name);
      }
      return this;
    };

    /**
     * Set the namespace to prefix mapping.
     *
     * @example
     *
     * parser.ns({
     *   'http://foo': 'foo',
     *   'http://bar': 'bar'
     * });
     *
     * @param  {!Object<string, string>} nsMap
     *
     * @return {Parser}
     */
    this['ns'] = function (nsMap) {
      if (typeof nsMap === 'undefined') {
        nsMap = {};
      }
      if (typeof nsMap !== 'object') {
        throw error$4('required args <nsMap={}>');
      }
      var _nsUriToPrefix = {},
        k;
      for (k in nsMap) {
        _nsUriToPrefix[k] = nsMap[k];
      }

      // FORCE default mapping for schema instance
      _nsUriToPrefix[XSI_URI] = XSI_PREFIX;
      isNamespace = true;
      nsUriToPrefix = _nsUriToPrefix;
      return this;
    };

    /**
     * Parse xml string.
     *
     * @param  {string} xml
     *
     * @return {Error} returnError, if not thrown
     */
    this['parse'] = function (xml) {
      if (typeof xml !== 'string') {
        throw error$4('required args <xml=string>');
      }
      returnError = null;
      parse(xml);
      getContext = noopGetContext;
      parseStop = false;
      return returnError;
    };

    /**
     * Stop parsing.
     */
    this['stop'] = function () {
      parseStop = true;
    };

    /**
     * Parse string, invoking configured listeners on element.
     *
     * @param  {string} xml
     */
    function parse(xml) {
      var nsMatrixStack = isNamespace ? [] : null,
        nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null,
        _nsMatrix,
        nodeStack = [],
        anonymousNsCount = 0,
        tagStart = false,
        tagEnd = false,
        i = 0,
        j = 0,
        x,
        y,
        q,
        w,
        v,
        xmlns,
        elementName,
        _elementName,
        elementProxy;
      var attrsString = '',
        attrsStart = 0,
        cachedAttrs // false = parsed with errors, null = needs parsing
      ;

      /**
       * Parse attributes on demand and returns the parsed attributes.
       *
       * Return semantics: (1) `false` on attribute parse error,
       * (2) object hash on extracted attrs.
       *
       * @return {boolean|Object}
       */
      function getAttrs() {
        if (cachedAttrs !== null) {
          return cachedAttrs;
        }
        var nsUri,
          nsUriPrefix,
          nsName,
          defaultAlias = isNamespace && nsMatrix['xmlns'],
          attrList = isNamespace && maybeNS ? [] : null,
          i = attrsStart,
          s = attrsString,
          l = s.length,
          hasNewMatrix,
          newalias,
          value,
          alias,
          name,
          attrs = {},
          seenAttrs = {},
          skipAttr,
          w,
          j;
        parseAttr: for (; i < l; i++) {
          skipAttr = false;
          w = s.charCodeAt(i);
          if (w === 32 || w < 14 && w > 8) {
            // WHITESPACE={ \f\n\r\t\v}
            continue;
          }

          // wait for non whitespace character
          if (w < 65 || w > 122 || w > 90 && w < 97) {
            if (w !== 95 && w !== 58) {
              // char 95"_" 58":"
              handleWarning('illegal first char attribute name');
              skipAttr = true;
            }
          }

          // parse attribute name
          for (j = i + 1; j < l; j++) {
            w = s.charCodeAt(j);
            if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 46 ||
            // '.'
            w === 45 ||
            // '-'
            w === 95 // '_'
            ) {
              continue;
            }

            // unexpected whitespace
            if (w === 32 || w < 14 && w > 8) {
              // WHITESPACE
              handleWarning('missing attribute value');
              i = j;
              continue parseAttr;
            }

            // expected "="
            if (w === 61) {
              // "=" == 61
              break;
            }
            handleWarning('illegal attribute name char');
            skipAttr = true;
          }
          name = s.substring(i, j);
          if (name === 'xmlns:xmlns') {
            handleWarning('illegal declaration of xmlns');
            skipAttr = true;
          }
          w = s.charCodeAt(j + 1);
          if (w === 34) {
            // '"'
            j = s.indexOf('"', i = j + 2);
            if (j === -1) {
              j = s.indexOf('\'', i);
              if (j !== -1) {
                handleWarning('attribute value quote missmatch');
                skipAttr = true;
              }
            }
          } else if (w === 39) {
            // "'"
            j = s.indexOf('\'', i = j + 2);
            if (j === -1) {
              j = s.indexOf('"', i);
              if (j !== -1) {
                handleWarning('attribute value quote missmatch');
                skipAttr = true;
              }
            }
          } else {
            handleWarning('missing attribute value quotes');
            skipAttr = true;

            // skip to next space
            for (j = j + 1; j < l; j++) {
              w = s.charCodeAt(j + 1);
              if (w === 32 || w < 14 && w > 8) {
                // WHITESPACE
                break;
              }
            }
          }
          if (j === -1) {
            handleWarning('missing closing quotes');
            j = l;
            skipAttr = true;
          }
          if (!skipAttr) {
            value = s.substring(i, j);
          }
          i = j;

          // ensure SPACE follows attribute
          // skip illegal content otherwise
          // example a="b"c
          for (; j + 1 < l; j++) {
            w = s.charCodeAt(j + 1);
            if (w === 32 || w < 14 && w > 8) {
              // WHITESPACE
              break;
            }

            // FIRST ILLEGAL CHAR
            if (i === j) {
              handleWarning('illegal character after attribute end');
              skipAttr = true;
            }
          }

          // advance cursor to next attribute
          i = j + 1;
          if (skipAttr) {
            continue parseAttr;
          }

          // check attribute re-declaration
          if (name in seenAttrs) {
            handleWarning('attribute <' + name + '> already defined');
            continue;
          }
          seenAttrs[name] = true;
          if (!isNamespace) {
            attrs[name] = value;
            continue;
          }

          // try to extract namespace information
          if (maybeNS) {
            newalias = name === 'xmlns' ? 'xmlns' : name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:' ? name.substr(6) : null;

            // handle xmlns(:alias) assignment
            if (newalias !== null) {
              nsUri = decodeEntities(value);
              nsUriPrefix = uriPrefix(newalias);
              alias = nsUriToPrefix[nsUri];
              if (!alias) {
                // no prefix defined or prefix collision
                if (newalias === 'xmlns' || nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri) {
                  // alocate free ns prefix
                  do {
                    alias = 'ns' + anonymousNsCount++;
                  } while (typeof nsMatrix[alias] !== 'undefined');
                } else {
                  alias = newalias;
                }
                nsUriToPrefix[nsUri] = alias;
              }
              if (nsMatrix[newalias] !== alias) {
                if (!hasNewMatrix) {
                  nsMatrix = cloneNsMatrix(nsMatrix);
                  hasNewMatrix = true;
                }
                nsMatrix[newalias] = alias;
                if (newalias === 'xmlns') {
                  nsMatrix[uriPrefix(alias)] = nsUri;
                  defaultAlias = alias;
                }
                nsMatrix[nsUriPrefix] = nsUri;
              }

              // expose xmlns(:asd)="..." in attributes
              attrs[name] = value;
              continue;
            }

            // collect attributes until all namespace
            // declarations are processed
            attrList.push(name, value);
            continue;
          } /** end if (maybeNs) */

          // handle attributes on element without
          // namespace declarations
          w = name.indexOf(':');
          if (w === -1) {
            attrs[name] = value;
            continue;
          }

          // normalize ns attribute name
          if (!(nsName = nsMatrix[name.substring(0, w)])) {
            handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
            continue;
          }
          name = defaultAlias === nsName ? name.substr(w + 1) : nsName + name.substr(w);

          // end: normalize ns attribute name

          // normalize xsi:type ns attribute value
          if (name === XSI_TYPE$1) {
            w = value.indexOf(':');
            if (w !== -1) {
              nsName = value.substring(0, w);

              // handle default prefixes, i.e. xs:String gracefully
              nsName = nsMatrix[nsName] || nsName;
              value = nsName + value.substring(w);
            } else {
              value = defaultAlias + ':' + value;
            }
          }

          // end: normalize xsi:type ns attribute value

          attrs[name] = value;
        }

        // handle deferred, possibly namespaced attributes
        if (maybeNS) {
          // normalize captured attributes
          for (i = 0, l = attrList.length; i < l; i++) {
            name = attrList[i++];
            value = attrList[i];
            w = name.indexOf(':');
            if (w !== -1) {
              // normalize ns attribute name
              if (!(nsName = nsMatrix[name.substring(0, w)])) {
                handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
                continue;
              }
              name = defaultAlias === nsName ? name.substr(w + 1) : nsName + name.substr(w);

              // end: normalize ns attribute name

              // normalize xsi:type ns attribute value
              if (name === XSI_TYPE$1) {
                w = value.indexOf(':');
                if (w !== -1) {
                  nsName = value.substring(0, w);

                  // handle default prefixes, i.e. xs:String gracefully
                  nsName = nsMatrix[nsName] || nsName;
                  value = nsName + value.substring(w);
                } else {
                  value = defaultAlias + ':' + value;
                }
              }

              // end: normalize xsi:type ns attribute value
            }

            attrs[name] = value;
          }

          // end: normalize captured attributes
        }

        return cachedAttrs = attrs;
      }

      /**
       * Extract the parse context { line, column, part }
       * from the current parser position.
       *
       * @return {Object} parse context
       */
      function getParseContext() {
        var splitsRe = /(\r\n|\r|\n)/g;
        var line = 0;
        var column = 0;
        var startOfLine = 0;
        var endOfLine = j;
        var match;
        var data;
        while (i >= startOfLine) {
          match = splitsRe.exec(xml);
          if (!match) {
            break;
          }

          // end of line = (break idx + break chars)
          endOfLine = match[0].length + match.index;
          if (endOfLine > i) {
            break;
          }

          // advance to next line
          line += 1;
          startOfLine = endOfLine;
        }

        // EOF errors
        if (i == -1) {
          column = endOfLine;
          data = xml.substring(j);
        } else
          // start errors
          if (j === 0) {
            data = xml.substring(j, i);
          }

          // other errors
          else {
            column = i - startOfLine;
            data = j == -1 ? xml.substring(i) : xml.substring(i, j + 1);
          }
        return {
          'data': data,
          'line': line,
          'column': column
        };
      }
      getContext = getParseContext;
      if (proxy) {
        elementProxy = Object.create({}, {
          'name': getter(function () {
            return elementName;
          }),
          'originalName': getter(function () {
            return _elementName;
          }),
          'attrs': getter(getAttrs),
          'ns': getter(function () {
            return nsMatrix;
          })
        });
      }

      // actual parse logic
      while (j !== -1) {
        if (xml.charCodeAt(j) === 60) {
          // "<"
          i = j;
        } else {
          i = xml.indexOf('<', j);
        }

        // parse end
        if (i === -1) {
          if (nodeStack.length) {
            return handleError('unexpected end of file');
          }
          if (j === 0) {
            return handleError('missing start tag');
          }
          if (j < xml.length) {
            if (xml.substring(j).trim()) {
              handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
            }
          }
          return;
        }

        // parse text
        if (j !== i) {
          if (nodeStack.length) {
            if (onText) {
              onText(xml.substring(j, i), decodeEntities, getContext);
              if (parseStop) {
                return;
              }
            }
          } else {
            if (xml.substring(j, i).trim()) {
              handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
              if (parseStop) {
                return;
              }
            }
          }
        }
        w = xml.charCodeAt(i + 1);

        // parse comments + CDATA
        if (w === 33) {
          // "!"
          q = xml.charCodeAt(i + 2);

          // CDATA section
          if (q === 91 && xml.substr(i + 3, 6) === 'CDATA[') {
            // 91 == "["
            j = xml.indexOf(']]>', i);
            if (j === -1) {
              return handleError('unclosed cdata');
            }
            if (onCDATA) {
              onCDATA(xml.substring(i + 9, j), getContext);
              if (parseStop) {
                return;
              }
            }
            j += 3;
            continue;
          }

          // comment
          if (q === 45 && xml.charCodeAt(i + 3) === 45) {
            // 45 == "-"
            j = xml.indexOf('-->', i);
            if (j === -1) {
              return handleError('unclosed comment');
            }
            if (onComment) {
              onComment(xml.substring(i + 4, j), decodeEntities, getContext);
              if (parseStop) {
                return;
              }
            }
            j += 3;
            continue;
          }
        }

        // parse question <? ... ?>
        if (w === 63) {
          // "?"
          j = xml.indexOf('?>', i);
          if (j === -1) {
            return handleError('unclosed question');
          }
          if (onQuestion) {
            onQuestion(xml.substring(i, j + 2), getContext);
            if (parseStop) {
              return;
            }
          }
          j += 2;
          continue;
        }

        // find matching closing tag for attention or standard tags
        // for that we must skip through attribute values
        // (enclosed in single or double quotes)
        for (x = i + 1;; x++) {
          v = xml.charCodeAt(x);
          if (isNaN(v)) {
            j = -1;
            return handleError('unclosed tag');
          }

          // [10] AttValue ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"
          // skips the quoted string
          // (double quotes) does not appear in a literal enclosed by (double quotes)
          // (single quote) does not appear in a literal enclosed by (single quote)
          if (v === 34) {
            //  '"'
            q = xml.indexOf('"', x + 1);
            x = q !== -1 ? q : x;
          } else if (v === 39) {
            // "'"
            q = xml.indexOf("'", x + 1);
            x = q !== -1 ? q : x;
          } else if (v === 62) {
            // '>'
            j = x;
            break;
          }
        }

        // parse attention <! ...>
        // previously comment and CDATA have already been parsed
        if (w === 33) {
          // "!"

          if (onAttention) {
            onAttention(xml.substring(i, j + 1), decodeEntities, getContext);
            if (parseStop) {
              return;
            }
          }
          j += 1;
          continue;
        }

        // don't process attributes;
        // there are none
        cachedAttrs = {};

        // if (xml.charCodeAt(i+1) === 47) { // </...
        if (w === 47) {
          // </...
          tagStart = false;
          tagEnd = true;
          if (!nodeStack.length) {
            return handleError('missing open tag');
          }

          // verify open <-> close tag match
          x = elementName = nodeStack.pop();
          q = i + 2 + x.length;
          if (xml.substring(i + 2, q) !== x) {
            return handleError('closing tag mismatch');
          }

          // verify chars in close tag
          for (; q < j; q++) {
            w = xml.charCodeAt(q);
            if (w === 32 || w > 8 && w < 14) {
              // \f\n\r\t\v space
              continue;
            }
            return handleError('close tag');
          }
        } else {
          if (xml.charCodeAt(j - 1) === 47) {
            // .../>
            x = elementName = xml.substring(i + 1, j - 1);
            tagStart = true;
            tagEnd = true;
          } else {
            x = elementName = xml.substring(i + 1, j);
            tagStart = true;
            tagEnd = false;
          }
          if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) {
            // char 95"_" 58":"
            return handleError('illegal first char nodeName');
          }
          for (q = 1, y = x.length; q < y; q++) {
            w = x.charCodeAt(q);
            if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {
              continue;
            }
            if (w === 32 || w < 14 && w > 8) {
              // \f\n\r\t\v space
              elementName = x.substring(0, q);

              // maybe there are attributes
              cachedAttrs = null;
              break;
            }
            return handleError('invalid nodeName');
          }
          if (!tagEnd) {
            nodeStack.push(elementName);
          }
        }
        if (isNamespace) {
          _nsMatrix = nsMatrix;
          if (tagStart) {
            // remember old namespace
            // unless we're self-closing
            if (!tagEnd) {
              nsMatrixStack.push(_nsMatrix);
            }
            if (cachedAttrs === null) {
              // quick check, whether there may be namespace
              // declarations on the node; if that is the case
              // we need to eagerly parse the node attributes
              if (maybeNS = x.indexOf('xmlns', q) !== -1) {
                attrsStart = q;
                attrsString = x;
                getAttrs();
                maybeNS = false;
              }
            }
          }
          _elementName = elementName;
          w = elementName.indexOf(':');
          if (w !== -1) {
            xmlns = nsMatrix[elementName.substring(0, w)];

            // prefix given; namespace must exist
            if (!xmlns) {
              return handleError('missing namespace on <' + _elementName + '>');
            }
            elementName = elementName.substr(w + 1);
          } else {
            xmlns = nsMatrix['xmlns'];

            // if no default namespace is defined,
            // we'll import the element as anonymous.
            //
            // it is up to users to correct that to the document defined
            // targetNamespace, or whatever their undersanding of the
            // XML spec mandates.
          }

          // adjust namespace prefixs as configured
          if (xmlns) {
            elementName = xmlns + ':' + elementName;
          }
        }
        if (tagStart) {
          attrsStart = q;
          attrsString = x;
          if (onOpenTag) {
            if (proxy) {
              onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);
            } else {
              onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);
            }
            if (parseStop) {
              return;
            }
          }
        }
        if (tagEnd) {
          if (onCloseTag) {
            onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);
            if (parseStop) {
              return;
            }
          }

          // restore old namespace
          if (isNamespace) {
            if (!tagStart) {
              nsMatrix = nsMatrixStack.pop();
            } else {
              nsMatrix = _nsMatrix;
            }
          }
        }
        j += 1;
      }
    } /** end parse */
  }

  function hasLowerCaseAlias(pkg) {
    return pkg.xml && pkg.xml.tagAlias === 'lowerCase';
  }
  var DEFAULT_NS_MAP = {
    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
    'xml': 'http://www.w3.org/XML/1998/namespace'
  };
  var XSI_TYPE = 'xsi:type';
  function serializeFormat(element) {
    return element.xml && element.xml.serialize;
  }
  function serializeAsType(element) {
    return serializeFormat(element) === XSI_TYPE;
  }
  function serializeAsProperty(element) {
    return serializeFormat(element) === 'property';
  }
  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  function aliasToName(aliasNs, pkg) {
    if (!hasLowerCaseAlias(pkg)) {
      return aliasNs.name;
    }
    return aliasNs.prefix + ':' + capitalize(aliasNs.localName);
  }
  function prefixedToName(nameNs, pkg) {
    var name = nameNs.name,
      localName = nameNs.localName;
    var typePrefix = pkg.xml && pkg.xml.typePrefix;
    if (typePrefix && localName.indexOf(typePrefix) === 0) {
      return nameNs.prefix + ':' + localName.slice(typePrefix.length);
    } else {
      return name;
    }
  }
  function normalizeXsiTypeName(name, model) {
    var nameNs = parseName(name);
    var pkg = model.getPackage(nameNs.prefix);
    return prefixedToName(nameNs, pkg);
  }
  function error$3(message) {
    return new Error(message);
  }

  /**
   * Get the moddle descriptor for a given instance or type.
   *
   * @param  {ModdleElement|Function} element
   *
   * @return {Object} the moddle descriptor
   */
  function getModdleDescriptor(element) {
    return element.$descriptor;
  }

  /**
   * A parse context.
   *
   * @class
   *
   * @param {Object} options
   * @param {ElementHandler} options.rootHandler the root handler for parsing a document
   * @param {boolean} [options.lax=false] whether or not to ignore invalid elements
   */
  function Context(options) {
    /**
     * @property {ElementHandler} rootHandler
     */

    /**
     * @property {Boolean} lax
     */

    assign(this, options);
    this.elementsById = {};
    this.references = [];
    this.warnings = [];

    /**
     * Add an unresolved reference.
     *
     * @param {Object} reference
     */
    this.addReference = function (reference) {
      this.references.push(reference);
    };

    /**
     * Add a processed element.
     *
     * @param {ModdleElement} element
     */
    this.addElement = function (element) {
      if (!element) {
        throw error$3('expected element');
      }
      var elementsById = this.elementsById;
      var descriptor = getModdleDescriptor(element);
      var idProperty = descriptor.idProperty,
        id;
      if (idProperty) {
        id = element.get(idProperty.name);
        if (id) {
          // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
          if (!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(id)) {
            throw new Error('illegal ID <' + id + '>');
          }
          if (elementsById[id]) {
            throw error$3('duplicate ID <' + id + '>');
          }
          elementsById[id] = element;
        }
      }
    };

    /**
     * Add an import warning.
     *
     * @param {Object} warning
     * @param {String} warning.message
     * @param {Error} [warning.error]
     */
    this.addWarning = function (warning) {
      this.warnings.push(warning);
    };
  }
  function BaseHandler() {}
  BaseHandler.prototype.handleEnd = function () {};
  BaseHandler.prototype.handleText = function () {};
  BaseHandler.prototype.handleNode = function () {};

  /**
   * A simple pass through handler that does nothing except for
   * ignoring all input it receives.
   *
   * This is used to ignore unknown elements and
   * attributes.
   */
  function NoopHandler() {}
  NoopHandler.prototype = Object.create(BaseHandler.prototype);
  NoopHandler.prototype.handleNode = function () {
    return this;
  };
  function BodyHandler() {}
  BodyHandler.prototype = Object.create(BaseHandler.prototype);
  BodyHandler.prototype.handleText = function (text) {
    this.body = (this.body || '') + text;
  };
  function ReferenceHandler(property, context) {
    this.property = property;
    this.context = context;
  }
  ReferenceHandler.prototype = Object.create(BodyHandler.prototype);
  ReferenceHandler.prototype.handleNode = function (node) {
    if (this.element) {
      throw error$3('expected no sub nodes');
    } else {
      this.element = this.createReference(node);
    }
    return this;
  };
  ReferenceHandler.prototype.handleEnd = function () {
    this.element.id = this.body;
  };
  ReferenceHandler.prototype.createReference = function (node) {
    return {
      property: this.property.ns.name,
      id: ''
    };
  };
  function ValueHandler(propertyDesc, element) {
    this.element = element;
    this.propertyDesc = propertyDesc;
  }
  ValueHandler.prototype = Object.create(BodyHandler.prototype);
  ValueHandler.prototype.handleEnd = function () {
    var value = this.body || '',
      element = this.element,
      propertyDesc = this.propertyDesc;
    value = coerceType(propertyDesc.type, value);
    if (propertyDesc.isMany) {
      element.get(propertyDesc.name).push(value);
    } else {
      element.set(propertyDesc.name, value);
    }
  };
  function BaseElementHandler() {}
  BaseElementHandler.prototype = Object.create(BodyHandler.prototype);
  BaseElementHandler.prototype.handleNode = function (node) {
    var parser = this,
      element = this.element;
    if (!element) {
      element = this.element = this.createElement(node);
      this.context.addElement(element);
    } else {
      parser = this.handleChild(node);
    }
    return parser;
  };

  /**
   * @class Reader.ElementHandler
   *
   */
  function ElementHandler(model, typeName, context) {
    this.model = model;
    this.type = model.getType(typeName);
    this.context = context;
  }
  ElementHandler.prototype = Object.create(BaseElementHandler.prototype);
  ElementHandler.prototype.addReference = function (reference) {
    this.context.addReference(reference);
  };
  ElementHandler.prototype.handleText = function (text) {
    var element = this.element,
      descriptor = getModdleDescriptor(element),
      bodyProperty = descriptor.bodyProperty;
    if (!bodyProperty) {
      throw error$3('unexpected body text <' + text + '>');
    }
    BodyHandler.prototype.handleText.call(this, text);
  };
  ElementHandler.prototype.handleEnd = function () {
    var value = this.body,
      element = this.element,
      descriptor = getModdleDescriptor(element),
      bodyProperty = descriptor.bodyProperty;
    if (bodyProperty && value !== undefined) {
      value = coerceType(bodyProperty.type, value);
      element.set(bodyProperty.name, value);
    }
  };

  /**
   * Create an instance of the model from the given node.
   *
   * @param  {Element} node the xml node
   */
  ElementHandler.prototype.createElement = function (node) {
    var attributes = node.attributes,
      Type = this.type,
      descriptor = getModdleDescriptor(Type),
      context = this.context,
      instance = new Type({}),
      model = this.model,
      propNameNs;
    forEach(attributes, function (value, name) {
      var prop = descriptor.propertiesByName[name],
        values;
      if (prop && prop.isReference) {
        if (!prop.isMany) {
          context.addReference({
            element: instance,
            property: prop.ns.name,
            id: value
          });
        } else {
          // IDREFS: parse references as whitespace-separated list
          values = value.split(' ');
          forEach(values, function (v) {
            context.addReference({
              element: instance,
              property: prop.ns.name,
              id: v
            });
          });
        }
      } else {
        if (prop) {
          value = coerceType(prop.type, value);
        } else if (name !== 'xmlns') {
          propNameNs = parseName(name, descriptor.ns.prefix);

          // check whether attribute is defined in a well-known namespace
          // if that is the case we emit a warning to indicate potential misuse
          if (model.getPackage(propNameNs.prefix)) {
            context.addWarning({
              message: 'unknown attribute <' + name + '>',
              element: instance,
              property: name,
              value: value
            });
          }
        }
        instance.set(name, value);
      }
    });
    return instance;
  };
  ElementHandler.prototype.getPropertyForNode = function (node) {
    var name = node.name;
    var nameNs = parseName(name);
    var type = this.type,
      model = this.model,
      descriptor = getModdleDescriptor(type);
    var propertyName = nameNs.name,
      property = descriptor.propertiesByName[propertyName],
      elementTypeName,
      elementType;

    // search for properties by name first

    if (property && !property.isAttr) {
      if (serializeAsType(property)) {
        elementTypeName = node.attributes[XSI_TYPE];

        // xsi type is optional, if it does not exists the
        // default type is assumed
        if (elementTypeName) {
          // take possible type prefixes from XML
          // into account, i.e.: xsi:type="t{ActualType}"
          elementTypeName = normalizeXsiTypeName(elementTypeName, model);
          elementType = model.getType(elementTypeName);
          return assign({}, property, {
            effectiveType: getModdleDescriptor(elementType).name
          });
        }
      }

      // search for properties by name first
      return property;
    }
    var pkg = model.getPackage(nameNs.prefix);
    if (pkg) {
      elementTypeName = aliasToName(nameNs, pkg);
      elementType = model.getType(elementTypeName);

      // search for collection members later
      property = find(descriptor.properties, function (p) {
        return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);
      });
      if (property) {
        return assign({}, property, {
          effectiveType: getModdleDescriptor(elementType).name
        });
      }
    } else {
      // parse unknown element (maybe extension)
      property = find(descriptor.properties, function (p) {
        return !p.isReference && !p.isAttribute && p.type === 'Element';
      });
      if (property) {
        return property;
      }
    }
    throw error$3('unrecognized element <' + nameNs.name + '>');
  };
  ElementHandler.prototype.toString = function () {
    return 'ElementDescriptor[' + getModdleDescriptor(this.type).name + ']';
  };
  ElementHandler.prototype.valueHandler = function (propertyDesc, element) {
    return new ValueHandler(propertyDesc, element);
  };
  ElementHandler.prototype.referenceHandler = function (propertyDesc) {
    return new ReferenceHandler(propertyDesc, this.context);
  };
  ElementHandler.prototype.handler = function (type) {
    if (type === 'Element') {
      return new GenericElementHandler(this.model, type, this.context);
    } else {
      return new ElementHandler(this.model, type, this.context);
    }
  };

  /**
   * Handle the child element parsing
   *
   * @param  {Element} node the xml node
   */
  ElementHandler.prototype.handleChild = function (node) {
    var propertyDesc, type, element, childHandler;
    propertyDesc = this.getPropertyForNode(node);
    element = this.element;
    type = propertyDesc.effectiveType || propertyDesc.type;
    if (isSimple(type)) {
      return this.valueHandler(propertyDesc, element);
    }
    if (propertyDesc.isReference) {
      childHandler = this.referenceHandler(propertyDesc).handleNode(node);
    } else {
      childHandler = this.handler(type).handleNode(node);
    }
    var newElement = childHandler.element;

    // child handles may decide to skip elements
    // by not returning anything
    if (newElement !== undefined) {
      if (propertyDesc.isMany) {
        element.get(propertyDesc.name).push(newElement);
      } else {
        element.set(propertyDesc.name, newElement);
      }
      if (propertyDesc.isReference) {
        assign(newElement, {
          element: element
        });
        this.context.addReference(newElement);
      } else {
        // establish child -> parent relationship
        newElement.$parent = element;
      }
    }
    return childHandler;
  };

  /**
   * An element handler that performs special validation
   * to ensure the node it gets initialized with matches
   * the handlers type (namespace wise).
   *
   * @param {Moddle} model
   * @param {String} typeName
   * @param {Context} context
   */
  function RootElementHandler(model, typeName, context) {
    ElementHandler.call(this, model, typeName, context);
  }
  RootElementHandler.prototype = Object.create(ElementHandler.prototype);
  RootElementHandler.prototype.createElement = function (node) {
    var name = node.name,
      nameNs = parseName(name),
      model = this.model,
      type = this.type,
      pkg = model.getPackage(nameNs.prefix),
      typeName = pkg && aliasToName(nameNs, pkg) || name;

    // verify the correct namespace if we parse
    // the first element in the handler tree
    //
    // this ensures we don't mistakenly import wrong namespace elements
    if (!type.hasType(typeName)) {
      throw error$3('unexpected element <' + node.originalName + '>');
    }
    return ElementHandler.prototype.createElement.call(this, node);
  };
  function GenericElementHandler(model, typeName, context) {
    this.model = model;
    this.context = context;
  }
  GenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);
  GenericElementHandler.prototype.createElement = function (node) {
    var name = node.name,
      ns = parseName(name),
      prefix = ns.prefix,
      uri = node.ns[prefix + '$uri'],
      attributes = node.attributes;
    return this.model.createAny(name, uri, attributes);
  };
  GenericElementHandler.prototype.handleChild = function (node) {
    var handler = new GenericElementHandler(this.model, 'Element', this.context).handleNode(node),
      element = this.element;
    var newElement = handler.element,
      children;
    if (newElement !== undefined) {
      children = element.$children = element.$children || [];
      children.push(newElement);

      // establish child -> parent relationship
      newElement.$parent = element;
    }
    return handler;
  };
  GenericElementHandler.prototype.handleEnd = function () {
    if (this.body) {
      this.element.$body = this.body;
    }
  };

  /**
   * A reader for a meta-model
   *
   * @param {Object} options
   * @param {Model} options.model used to read xml files
   * @param {Boolean} options.lax whether to make parse errors warnings
   */
  function Reader(options) {
    if (options instanceof Moddle) {
      options = {
        model: options
      };
    }
    assign(this, {
      lax: false
    }, options);
  }

  /**
   * The fromXML result.
   *
   * @typedef {Object} ParseResult
   *
   * @property {ModdleElement} rootElement
   * @property {Array<Object>} references
   * @property {Array<Error>} warnings
   * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
   */

  /**
   * The fromXML result.
   *
   * @typedef {Error} ParseError
   *
   * @property {Array<Error>} warnings
   */

  /**
   * Parse the given XML into a moddle document tree.
   *
   * @param {String} xml
   * @param {ElementHandler|Object} options or rootHandler
   *
   * @returns {Promise<ParseResult, ParseError>}
   */
  Reader.prototype.fromXML = function (xml, options, done) {
    var rootHandler = options.rootHandler;
    if (options instanceof ElementHandler) {
      // root handler passed via (xml, { rootHandler: ElementHandler }, ...)
      rootHandler = options;
      options = {};
    } else {
      if (typeof options === 'string') {
        // rootHandler passed via (xml, 'someString', ...)
        rootHandler = this.handler(options);
        options = {};
      } else if (typeof rootHandler === 'string') {
        // rootHandler passed via (xml, { rootHandler: 'someString' }, ...)
        rootHandler = this.handler(rootHandler);
      }
    }
    var model = this.model,
      lax = this.lax;
    var context = new Context(assign({}, options, {
        rootHandler: rootHandler
      })),
      parser = new Parser({
        proxy: true
      }),
      stack = createStack();
    rootHandler.context = context;

    // push root handler
    stack.push(rootHandler);

    /**
     * Handle error.
     *
     * @param  {Error} err
     * @param  {Function} getContext
     * @param  {boolean} lax
     *
     * @return {boolean} true if handled
     */
    function handleError(err, getContext, lax) {
      var ctx = getContext();
      var line = ctx.line,
        column = ctx.column,
        data = ctx.data;

      // we receive the full context data here,
      // for elements trim down the information
      // to the tag name, only
      if (data.charAt(0) === '<' && data.indexOf(' ') !== -1) {
        data = data.slice(0, data.indexOf(' ')) + '>';
      }
      var message = 'unparsable content ' + (data ? data + ' ' : '') + 'detected\n\t' + 'line: ' + line + '\n\t' + 'column: ' + column + '\n\t' + 'nested error: ' + err.message;
      if (lax) {
        context.addWarning({
          message: message,
          error: err
        });
        return true;
      } else {
        throw error$3(message);
      }
    }
    function handleWarning(err, getContext) {
      // just like handling errors in <lax=true> mode
      return handleError(err, getContext, true);
    }

    /**
     * Resolve collected references on parse end.
     */
    function resolveReferences() {
      var elementsById = context.elementsById;
      var references = context.references;
      var i, r;
      for (i = 0; r = references[i]; i++) {
        var element = r.element;
        var reference = elementsById[r.id];
        var property = getModdleDescriptor(element).propertiesByName[r.property];
        if (!reference) {
          context.addWarning({
            message: 'unresolved reference <' + r.id + '>',
            element: r.element,
            property: r.property,
            value: r.id
          });
        }
        if (property.isMany) {
          var collection = element.get(property.name),
            idx = collection.indexOf(r);

          // we replace an existing place holder (idx != -1) or
          // append to the collection instead
          if (idx === -1) {
            idx = collection.length;
          }
          if (!reference) {
            // remove unresolvable reference
            collection.splice(idx, 1);
          } else {
            // add or update reference in collection
            collection[idx] = reference;
          }
        } else {
          element.set(property.name, reference);
        }
      }
    }
    function handleClose() {
      stack.pop().handleEnd();
    }
    var PREAMBLE_START_PATTERN = /^<\?xml /i;
    var ENCODING_PATTERN = / encoding="([^"]+)"/i;
    var UTF_8_PATTERN = /^utf-8$/i;
    function handleQuestion(question) {
      if (!PREAMBLE_START_PATTERN.test(question)) {
        return;
      }
      var match = ENCODING_PATTERN.exec(question);
      var encoding = match && match[1];
      if (!encoding || UTF_8_PATTERN.test(encoding)) {
        return;
      }
      context.addWarning({
        message: 'unsupported document encoding <' + encoding + '>, ' + 'falling back to UTF-8'
      });
    }
    function handleOpen(node, getContext) {
      var handler = stack.peek();
      try {
        stack.push(handler.handleNode(node));
      } catch (err) {
        if (handleError(err, getContext, lax)) {
          stack.push(new NoopHandler());
        }
      }
    }
    function handleCData(text, getContext) {
      try {
        stack.peek().handleText(text);
      } catch (err) {
        handleWarning(err, getContext);
      }
    }
    function handleText(text, getContext) {
      // strip whitespace only nodes, i.e. before
      // <!CDATA[ ... ]> sections and in between tags

      if (!text.trim()) {
        return;
      }
      handleCData(text, getContext);
    }
    var uriMap = model.getPackages().reduce(function (uriMap, p) {
      uriMap[p.uri] = p.prefix;
      return uriMap;
    }, {
      'http://www.w3.org/XML/1998/namespace': 'xml' // add default xml ns
    });

    parser.ns(uriMap).on('openTag', function (obj, decodeStr, selfClosing, getContext) {
      // gracefully handle unparsable attributes (attrs=false)
      var attrs = obj.attrs || {};
      var decodedAttrs = Object.keys(attrs).reduce(function (d, key) {
        var value = decodeStr(attrs[key]);
        d[key] = value;
        return d;
      }, {});
      var node = {
        name: obj.name,
        originalName: obj.originalName,
        attributes: decodedAttrs,
        ns: obj.ns
      };
      handleOpen(node, getContext);
    }).on('question', handleQuestion).on('closeTag', handleClose).on('cdata', handleCData).on('text', function (text, decodeEntities, getContext) {
      handleText(decodeEntities(text), getContext);
    }).on('error', handleError).on('warn', handleWarning);

    // async XML parsing to make sure the execution environment
    // (node or brower) is kept responsive and that certain optimization
    // strategies can kick in.
    return new Promise(function (resolve, reject) {
      var err;
      try {
        parser.parse(xml);
        resolveReferences();
      } catch (e) {
        err = e;
      }
      var rootElement = rootHandler.element;
      if (!err && !rootElement) {
        err = error$3('failed to parse document as <' + rootHandler.type.$descriptor.name + '>');
      }
      var warnings = context.warnings;
      var references = context.references;
      var elementsById = context.elementsById;
      if (err) {
        err.warnings = warnings;
        return reject(err);
      } else {
        return resolve({
          rootElement: rootElement,
          elementsById: elementsById,
          references: references,
          warnings: warnings
        });
      }
    });
  };
  Reader.prototype.handler = function (name) {
    return new RootElementHandler(this.model, name);
  };

  // helpers //////////////////////////

  function createStack() {
    var stack = [];
    Object.defineProperty(stack, 'peek', {
      value: function () {
        return this[this.length - 1];
      }
    });
    return stack;
  }
  var XML_PREAMBLE = '<?xml version="1.0" encoding="UTF-8"?>\n';
  var ESCAPE_ATTR_CHARS = /<|>|'|"|&|\n\r|\n/g;
  var ESCAPE_CHARS = /<|>|&/g;
  function Namespaces(parent) {
    var prefixMap = {};
    var uriMap = {};
    var used = {};
    var wellknown = [];
    var custom = [];

    // API

    this.byUri = function (uri) {
      return uriMap[uri] || parent && parent.byUri(uri);
    };
    this.add = function (ns, isWellknown) {
      uriMap[ns.uri] = ns;
      if (isWellknown) {
        wellknown.push(ns);
      } else {
        custom.push(ns);
      }
      this.mapPrefix(ns.prefix, ns.uri);
    };
    this.uriByPrefix = function (prefix) {
      return prefixMap[prefix || 'xmlns'];
    };
    this.mapPrefix = function (prefix, uri) {
      prefixMap[prefix || 'xmlns'] = uri;
    };
    this.getNSKey = function (ns) {
      return ns.prefix !== undefined ? ns.uri + '|' + ns.prefix : ns.uri;
    };
    this.logUsed = function (ns) {
      var uri = ns.uri;
      var nsKey = this.getNSKey(ns);
      used[nsKey] = this.byUri(uri);

      // Inform parent recursively about the usage of this NS
      if (parent) {
        parent.logUsed(ns);
      }
    };
    this.getUsed = function (ns) {
      function isUsed(ns) {
        var nsKey = self.getNSKey(ns);
        return used[nsKey];
      }
      var self = this;
      var allNs = [].concat(wellknown, custom);
      return allNs.filter(isUsed);
    };
  }
  function lower(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
  }
  function nameToAlias(name, pkg) {
    if (hasLowerCaseAlias(pkg)) {
      return lower(name);
    } else {
      return name;
    }
  }
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }
  function nsName(ns) {
    if (isString$1(ns)) {
      return ns;
    } else {
      return (ns.prefix ? ns.prefix + ':' : '') + ns.localName;
    }
  }
  function getNsAttrs(namespaces) {
    return namespaces.getUsed().filter(function (ns) {
      // do not serialize built in <xml> namespace
      return ns.prefix !== 'xml';
    }).map(function (ns) {
      var name = 'xmlns' + (ns.prefix ? ':' + ns.prefix : '');
      return {
        name: name,
        value: ns.uri
      };
    });
  }
  function getElementNs(ns, descriptor) {
    if (descriptor.isGeneric) {
      return assign({
        localName: descriptor.ns.localName
      }, ns);
    } else {
      return assign({
        localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg)
      }, ns);
    }
  }
  function getPropertyNs(ns, descriptor) {
    return assign({
      localName: descriptor.ns.localName
    }, ns);
  }
  function getSerializableProperties(element) {
    var descriptor = element.$descriptor;
    return filter$1(descriptor.properties, function (p) {
      var name = p.name;
      if (p.isVirtual) {
        return false;
      }

      // do not serialize defaults
      if (!has(element, name)) {
        return false;
      }
      var value = element[name];

      // do not serialize default equals
      if (value === p.default) {
        return false;
      }

      // do not serialize null properties
      if (value === null) {
        return false;
      }
      return p.isMany ? value.length : true;
    });
  }
  var ESCAPE_ATTR_MAP = {
    '\n': '#10',
    '\n\r': '#10',
    '"': '#34',
    '\'': '#39',
    '<': '#60',
    '>': '#62',
    '&': '#38'
  };
  var ESCAPE_MAP = {
    '<': 'lt',
    '>': 'gt',
    '&': 'amp'
  };
  function escape$1(str, charPattern, replaceMap) {
    // ensure we are handling strings here
    str = isString$1(str) ? str : '' + str;
    return str.replace(charPattern, function (s) {
      return '&' + replaceMap[s] + ';';
    });
  }

  /**
   * Escape a string attribute to not contain any bad values (line breaks, '"', ...)
   *
   * @param {String} str the string to escape
   * @return {String} the escaped string
   */
  function escapeAttr(str) {
    return escape$1(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);
  }
  function escapeBody(str) {
    return escape$1(str, ESCAPE_CHARS, ESCAPE_MAP);
  }
  function filterAttributes(props) {
    return filter$1(props, function (p) {
      return p.isAttr;
    });
  }
  function filterContained(props) {
    return filter$1(props, function (p) {
      return !p.isAttr;
    });
  }
  function ReferenceSerializer(tagName) {
    this.tagName = tagName;
  }
  ReferenceSerializer.prototype.build = function (element) {
    this.element = element;
    return this;
  };
  ReferenceSerializer.prototype.serializeTo = function (writer) {
    writer.appendIndent().append('<' + this.tagName + '>' + this.element.id + '</' + this.tagName + '>').appendNewLine();
  };
  function BodySerializer() {}
  BodySerializer.prototype.serializeValue = BodySerializer.prototype.serializeTo = function (writer) {
    writer.append(this.escape ? escapeBody(this.value) : this.value);
  };
  BodySerializer.prototype.build = function (prop, value) {
    this.value = value;
    if (prop.type === 'String' && value.search(ESCAPE_CHARS) !== -1) {
      this.escape = true;
    }
    return this;
  };
  function ValueSerializer(tagName) {
    this.tagName = tagName;
  }
  inherits(ValueSerializer, BodySerializer);
  ValueSerializer.prototype.serializeTo = function (writer) {
    writer.appendIndent().append('<' + this.tagName + '>');
    this.serializeValue(writer);
    writer.append('</' + this.tagName + '>').appendNewLine();
  };
  function ElementSerializer(parent, propertyDescriptor) {
    this.body = [];
    this.attrs = [];
    this.parent = parent;
    this.propertyDescriptor = propertyDescriptor;
  }
  ElementSerializer.prototype.build = function (element) {
    this.element = element;
    var elementDescriptor = element.$descriptor,
      propertyDescriptor = this.propertyDescriptor;
    var otherAttrs, properties;
    var isGeneric = elementDescriptor.isGeneric;
    if (isGeneric) {
      otherAttrs = this.parseGeneric(element);
    } else {
      otherAttrs = this.parseNsAttributes(element);
    }
    if (propertyDescriptor) {
      this.ns = this.nsPropertyTagName(propertyDescriptor);
    } else {
      this.ns = this.nsTagName(elementDescriptor);
    }

    // compute tag name
    this.tagName = this.addTagName(this.ns);
    if (!isGeneric) {
      properties = getSerializableProperties(element);
      this.parseAttributes(filterAttributes(properties));
      this.parseContainments(filterContained(properties));
    }
    this.parseGenericAttributes(element, otherAttrs);
    return this;
  };
  ElementSerializer.prototype.nsTagName = function (descriptor) {
    var effectiveNs = this.logNamespaceUsed(descriptor.ns);
    return getElementNs(effectiveNs, descriptor);
  };
  ElementSerializer.prototype.nsPropertyTagName = function (descriptor) {
    var effectiveNs = this.logNamespaceUsed(descriptor.ns);
    return getPropertyNs(effectiveNs, descriptor);
  };
  ElementSerializer.prototype.isLocalNs = function (ns) {
    return ns.uri === this.ns.uri;
  };

  /**
   * Get the actual ns attribute name for the given element.
   *
   * @param {Object} element
   * @param {Boolean} [element.inherited=false]
   *
   * @return {Object} nsName
   */
  ElementSerializer.prototype.nsAttributeName = function (element) {
    var ns;
    if (isString$1(element)) {
      ns = parseName(element);
    } else {
      ns = element.ns;
    }

    // return just local name for inherited attributes
    if (element.inherited) {
      return {
        localName: ns.localName
      };
    }

    // parse + log effective ns
    var effectiveNs = this.logNamespaceUsed(ns);

    // LOG ACTUAL namespace use
    this.getNamespaces().logUsed(effectiveNs);

    // strip prefix if same namespace like parent
    if (this.isLocalNs(effectiveNs)) {
      return {
        localName: ns.localName
      };
    } else {
      return assign({
        localName: ns.localName
      }, effectiveNs);
    }
  };
  ElementSerializer.prototype.parseGeneric = function (element) {
    var self = this,
      body = this.body;
    var attributes = [];
    forEach(element, function (val, key) {
      var nonNsAttr;
      if (key === '$body') {
        body.push(new BodySerializer().build({
          type: 'String'
        }, val));
      } else if (key === '$children') {
        forEach(val, function (child) {
          body.push(new ElementSerializer(self).build(child));
        });
      } else if (key.indexOf('$') !== 0) {
        nonNsAttr = self.parseNsAttribute(element, key, val);
        if (nonNsAttr) {
          attributes.push({
            name: key,
            value: val
          });
        }
      }
    });
    return attributes;
  };
  ElementSerializer.prototype.parseNsAttribute = function (element, name, value) {
    var model = element.$model;
    var nameNs = parseName(name);
    var ns;

    // parse xmlns:foo="http://foo.bar"
    if (nameNs.prefix === 'xmlns') {
      ns = {
        prefix: nameNs.localName,
        uri: value
      };
    }

    // parse xmlns="http://foo.bar"
    if (!nameNs.prefix && nameNs.localName === 'xmlns') {
      ns = {
        uri: value
      };
    }
    if (!ns) {
      return {
        name: name,
        value: value
      };
    }
    if (model && model.getPackage(value)) {
      // register well known namespace
      this.logNamespace(ns, true, true);
    } else {
      // log custom namespace directly as used
      var actualNs = this.logNamespaceUsed(ns, true);
      this.getNamespaces().logUsed(actualNs);
    }
  };

  /**
   * Parse namespaces and return a list of left over generic attributes
   *
   * @param  {Object} element
   * @return {Array<Object>}
   */
  ElementSerializer.prototype.parseNsAttributes = function (element, attrs) {
    var self = this;
    var genericAttrs = element.$attrs;
    var attributes = [];

    // parse namespace attributes first
    // and log them. push non namespace attributes to a list
    // and process them later
    forEach(genericAttrs, function (value, name) {
      var nonNsAttr = self.parseNsAttribute(element, name, value);
      if (nonNsAttr) {
        attributes.push(nonNsAttr);
      }
    });
    return attributes;
  };
  ElementSerializer.prototype.parseGenericAttributes = function (element, attributes) {
    var self = this;
    forEach(attributes, function (attr) {
      // do not serialize xsi:type attribute
      // it is set manually based on the actual implementation type
      if (attr.name === XSI_TYPE) {
        return;
      }
      try {
        self.addAttribute(self.nsAttributeName(attr.name), attr.value);
      } catch (e) {
        console.warn('missing namespace information for ', attr.name, '=', attr.value, 'on', element, e);
      }
    });
  };
  ElementSerializer.prototype.parseContainments = function (properties) {
    var self = this,
      body = this.body,
      element = this.element;
    forEach(properties, function (p) {
      var value = element.get(p.name),
        isReference = p.isReference,
        isMany = p.isMany;
      if (!isMany) {
        value = [value];
      }
      if (p.isBody) {
        body.push(new BodySerializer().build(p, value[0]));
      } else if (isSimple(p.type)) {
        forEach(value, function (v) {
          body.push(new ValueSerializer(self.addTagName(self.nsPropertyTagName(p))).build(p, v));
        });
      } else if (isReference) {
        forEach(value, function (v) {
          body.push(new ReferenceSerializer(self.addTagName(self.nsPropertyTagName(p))).build(v));
        });
      } else {
        // allow serialization via type
        // rather than element name
        var asType = serializeAsType(p),
          asProperty = serializeAsProperty(p);
        forEach(value, function (v) {
          var serializer;
          if (asType) {
            serializer = new TypeSerializer(self, p);
          } else if (asProperty) {
            serializer = new ElementSerializer(self, p);
          } else {
            serializer = new ElementSerializer(self);
          }
          body.push(serializer.build(v));
        });
      }
    });
  };
  ElementSerializer.prototype.getNamespaces = function (local) {
    var namespaces = this.namespaces,
      parent = this.parent,
      parentNamespaces;
    if (!namespaces) {
      parentNamespaces = parent && parent.getNamespaces();
      if (local || !parentNamespaces) {
        this.namespaces = namespaces = new Namespaces(parentNamespaces);
      } else {
        namespaces = parentNamespaces;
      }
    }
    return namespaces;
  };
  ElementSerializer.prototype.logNamespace = function (ns, wellknown, local) {
    var namespaces = this.getNamespaces(local);
    var nsUri = ns.uri,
      nsPrefix = ns.prefix;
    var existing = namespaces.byUri(nsUri);
    if (!existing || local) {
      namespaces.add(ns, wellknown);
    }
    namespaces.mapPrefix(nsPrefix, nsUri);
    return ns;
  };
  ElementSerializer.prototype.logNamespaceUsed = function (ns, local) {
    var element = this.element,
      model = element.$model,
      namespaces = this.getNamespaces(local);

    // ns may be
    //
    //   * prefix only
    //   * prefix:uri
    //   * localName only

    var prefix = ns.prefix,
      uri = ns.uri,
      newPrefix,
      idx,
      wellknownUri;

    // handle anonymous namespaces (elementForm=unqualified), cf. #23
    if (!prefix && !uri) {
      return {
        localName: ns.localName
      };
    }
    wellknownUri = DEFAULT_NS_MAP[prefix] || model && (model.getPackage(prefix) || {}).uri;
    uri = uri || wellknownUri || namespaces.uriByPrefix(prefix);
    if (!uri) {
      throw new Error('no namespace uri given for prefix <' + prefix + '>');
    }
    ns = namespaces.byUri(uri);
    if (!ns) {
      newPrefix = prefix;
      idx = 1;

      // find a prefix that is not mapped yet
      while (namespaces.uriByPrefix(newPrefix)) {
        newPrefix = prefix + '_' + idx++;
      }
      ns = this.logNamespace({
        prefix: newPrefix,
        uri: uri
      }, wellknownUri === uri);
    }
    if (prefix) {
      namespaces.mapPrefix(prefix, uri);
    }
    return ns;
  };
  ElementSerializer.prototype.parseAttributes = function (properties) {
    var self = this,
      element = this.element;
    forEach(properties, function (p) {
      var value = element.get(p.name);
      if (p.isReference) {
        if (!p.isMany) {
          value = value.id;
        } else {
          var values = [];
          forEach(value, function (v) {
            values.push(v.id);
          });

          // IDREFS is a whitespace-separated list of references.
          value = values.join(' ');
        }
      }
      self.addAttribute(self.nsAttributeName(p), value);
    });
  };
  ElementSerializer.prototype.addTagName = function (nsTagName) {
    var actualNs = this.logNamespaceUsed(nsTagName);
    this.getNamespaces().logUsed(actualNs);
    return nsName(nsTagName);
  };
  ElementSerializer.prototype.addAttribute = function (name, value) {
    var attrs = this.attrs;
    if (isString$1(value)) {
      value = escapeAttr(value);
    }

    // de-duplicate attributes
    // https://github.com/bpmn-io/moddle-xml/issues/66
    var idx = findIndex(attrs, function (element) {
      return element.name.localName === name.localName && element.name.uri === name.uri && element.name.prefix === name.prefix;
    });
    var attr = {
      name: name,
      value: value
    };
    if (idx !== -1) {
      attrs.splice(idx, 1, attr);
    } else {
      attrs.push(attr);
    }
  };
  ElementSerializer.prototype.serializeAttributes = function (writer) {
    var attrs = this.attrs,
      namespaces = this.namespaces;
    if (namespaces) {
      attrs = getNsAttrs(namespaces).concat(attrs);
    }
    forEach(attrs, function (a) {
      writer.append(' ').append(nsName(a.name)).append('="').append(a.value).append('"');
    });
  };
  ElementSerializer.prototype.serializeTo = function (writer) {
    var firstBody = this.body[0],
      indent = firstBody && firstBody.constructor !== BodySerializer;
    writer.appendIndent().append('<' + this.tagName);
    this.serializeAttributes(writer);
    writer.append(firstBody ? '>' : ' />');
    if (firstBody) {
      if (indent) {
        writer.appendNewLine().indent();
      }
      forEach(this.body, function (b) {
        b.serializeTo(writer);
      });
      if (indent) {
        writer.unindent().appendIndent();
      }
      writer.append('</' + this.tagName + '>');
    }
    writer.appendNewLine();
  };

  /**
   * A serializer for types that handles serialization of data types
   */
  function TypeSerializer(parent, propertyDescriptor) {
    ElementSerializer.call(this, parent, propertyDescriptor);
  }
  inherits(TypeSerializer, ElementSerializer);
  TypeSerializer.prototype.parseNsAttributes = function (element) {
    // extracted attributes
    var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element);
    var descriptor = element.$descriptor;

    // only serialize xsi:type if necessary
    if (descriptor.name === this.propertyDescriptor.type) {
      return attributes;
    }
    var typeNs = this.typeNs = this.nsTagName(descriptor);
    this.getNamespaces().logUsed(this.typeNs);

    // add xsi:type attribute to represent the elements
    // actual type

    var pkg = element.$model.getPackage(typeNs.uri),
      typePrefix = pkg.xml && pkg.xml.typePrefix || '';
    this.addAttribute(this.nsAttributeName(XSI_TYPE), (typeNs.prefix ? typeNs.prefix + ':' : '') + typePrefix + descriptor.ns.localName);
    return attributes;
  };
  TypeSerializer.prototype.isLocalNs = function (ns) {
    return ns.uri === (this.typeNs || this.ns).uri;
  };
  function SavingWriter() {
    this.value = '';
    this.write = function (str) {
      this.value += str;
    };
  }
  function FormatingWriter(out, format) {
    var indent = [''];
    this.append = function (str) {
      out.write(str);
      return this;
    };
    this.appendNewLine = function () {
      if (format) {
        out.write('\n');
      }
      return this;
    };
    this.appendIndent = function () {
      if (format) {
        out.write(indent.join('  '));
      }
      return this;
    };
    this.indent = function () {
      indent.push('');
      return this;
    };
    this.unindent = function () {
      indent.pop();
      return this;
    };
  }

  /**
   * A writer for meta-model backed document trees
   *
   * @param {Object} options output options to pass into the writer
   */
  function Writer(options) {
    options = assign({
      format: false,
      preamble: true
    }, options || {});
    function toXML(tree, writer) {
      var internalWriter = writer || new SavingWriter();
      var formatingWriter = new FormatingWriter(internalWriter, options.format);
      if (options.preamble) {
        formatingWriter.append(XML_PREAMBLE);
      }
      new ElementSerializer().build(tree).serializeTo(formatingWriter);
      if (!writer) {
        return internalWriter.value;
      }
    }
    return {
      toXML: toXML
    };
  }

  /**
   * A sub class of {@link Moddle} with support for import and export of DMN xml files.
   *
   * @class DmnModdle
   * @extends Moddle
   *
   * @param {Object|Array} packages to use for instantiating the model
   * @param {Object} [options] additional options to pass over
   */
  function DmnModdle(packages, options) {
    Moddle.call(this, packages, options);
  }
  DmnModdle.prototype = Object.create(Moddle.prototype);

  /**
   * The fromXML result.
   *
   * @typedef {Object} ParseResult
   *
   * @property {ModdleElement} rootElement
   * @property {Array<Object>} references
   * @property {Array<Error>} warnings
   * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
   */

  /**
   * The fromXML error.
   *
   * @typedef {Error} ParseError
   *
   * @property {Array<Error>} warnings
   */

  /**
   * Instantiates a DMN model tree from a given xml string.
   *
   * @param {String}   xmlStr
   * @param {String}   [typeName='dmn:Definitions'] name of the root element
   * @param {Object}   [options]  options to pass to the underlying reader
   *
   * @returns {Promise<ParseResult, ParseError>}
   */
  DmnModdle.prototype.fromXML = function (xmlStr, typeName, options) {
    if (!isString$3(typeName)) {
      options = typeName;
      typeName = 'dmn:Definitions';
    }
    var reader = new Reader(assign$2({
      model: this,
      lax: true
    }, options));
    var rootHandler = reader.handler(typeName);
    return reader.fromXML(xmlStr, rootHandler);
  };

  /**
   * The toXML result.
   *
   * @typedef {Object} SerializationResult
   *
   * @property {String} xml
   */

  /**
   * Serializes a DMN object tree to XML.
   *
   * @param {String}   element    the root element, typically an instance of `Definitions`
   * @param {Object}   [options]  to pass to the underlying writer
   *
   * @returns {Promise<SerializationResult, Error>}
   */
  DmnModdle.prototype.toXML = function (element, options) {
    var writer = new Writer(options);
    return new Promise(function (resolve, reject) {
      try {
        var result = writer.toXML(element);
        return resolve({
          xml: result
        });
      } catch (err) {
        return reject(err);
      }
    });
  };
  var name$4 = "DC";
  var prefix$4 = "dc";
  var uri$4 = "http://www.omg.org/spec/DMN/20180521/DC/";
  var types$4 = [{
    name: "Dimension",
    properties: [{
      name: "width",
      isAttr: true,
      type: "Real"
    }, {
      name: "height",
      isAttr: true,
      type: "Real"
    }]
  }, {
    name: "Bounds",
    properties: [{
      name: "height",
      isAttr: true,
      type: "Real"
    }, {
      name: "width",
      isAttr: true,
      type: "Real"
    }, {
      name: "x",
      isAttr: true,
      type: "Real"
    }, {
      name: "y",
      isAttr: true,
      type: "Real"
    }]
  }, {
    name: "Point",
    properties: [{
      name: "x",
      isAttr: true,
      type: "Real"
    }, {
      name: "y",
      isAttr: true,
      type: "Real"
    }]
  }, {
    name: "Color",
    properties: [{
      name: "red",
      type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
    }, {
      name: "green",
      type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
    }, {
      name: "blue",
      type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
    }]
  }];
  var associations$3 = [];
  var enumerations$3 = [{
    name: "AlignmentKind",
    literalValues: [{
      name: "start"
    }, {
      name: "center"
    }, {
      name: "end"
    }]
  }];
  var DcPackage = {
    name: name$4,
    prefix: prefix$4,
    uri: uri$4,
    types: types$4,
    associations: associations$3,
    enumerations: enumerations$3
  };
  var name$3 = "DI";
  var prefix$3 = "di";
  var uri$3 = "http://www.omg.org/spec/DMN/20180521/DI/";
  var types$3 = [{
    name: "DiagramElement",
    isAbstract: true,
    properties: [{
      name: "extension",
      type: "Extension"
    }, {
      name: "id",
      isAttr: true,
      isId: true,
      type: "String"
    }, {
      name: "style",
      isReference: true,
      type: "Style",
      xml: {
        serialize: "property"
      }
    }, {
      name: "sharedStyle",
      isReference: true,
      isVirtual: true,
      type: "Style"
    }]
  }, {
    name: "Diagram",
    superClass: ["DiagramElement"],
    properties: [{
      name: "name",
      isAttr: true,
      type: "String"
    }, {
      name: "documentation",
      isAttr: true,
      type: "String"
    }, {
      name: "resolution",
      isAttr: true,
      type: "Real"
    }]
  }, {
    name: "Shape",
    isAbstract: true,
    properties: [{
      name: "bounds",
      type: "dc:Bounds"
    }],
    superClass: ["DiagramElement"]
  }, {
    name: "Edge",
    isAbstract: true,
    properties: [{
      name: "waypoint",
      type: "dc:Point",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }],
    superClass: ["DiagramElement"]
  }, {
    name: "Style",
    isAbstract: true,
    properties: [{
      name: "id",
      isAttr: true,
      isId: true,
      type: "String"
    }]
  }, {
    name: "Extension",
    properties: [{
      name: "values",
      isMany: true,
      type: "Element"
    }]
  }];
  var associations$2 = [];
  var enumerations$2 = [];
  var xml$2 = {
    tagAlias: "lowerCase"
  };
  var DiPackage = {
    name: name$3,
    prefix: prefix$3,
    uri: uri$3,
    types: types$3,
    associations: associations$2,
    enumerations: enumerations$2,
    xml: xml$2
  };
  var name$2 = "DMN";
  var prefix$2 = "dmn";
  var uri$2 = "https://www.omg.org/spec/DMN/20191111/MODEL/";
  var types$2 = [{
    name: "AuthorityRequirement",
    superClass: ["DMNElement"],
    properties: [{
      name: "requiredAuthority",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "requiredDecision",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "requiredInput",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "ItemDefinition",
    superClass: ["NamedElement"],
    properties: [{
      name: "typeRef",
      type: "String"
    }, {
      name: "allowedValues",
      type: "UnaryTests",
      xml: {
        serialize: "property"
      }
    }, {
      name: "typeLanguage",
      type: "String",
      isAttr: true
    }, {
      name: "itemComponent",
      type: "ItemDefinition",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "functionItem",
      type: "FunctionItem"
    }, {
      name: "isCollection",
      isAttr: true,
      type: "Boolean"
    }]
  }, {
    name: "Definitions",
    superClass: ["NamedElement"],
    properties: [{
      name: "import",
      type: "Import",
      isMany: true
    }, {
      name: "itemDefinition",
      type: "ItemDefinition",
      isMany: true
    }, {
      name: "drgElement",
      type: "DRGElement",
      isMany: true
    }, {
      name: "artifact",
      type: "Artifact",
      isMany: true
    }, {
      name: "elementCollection",
      type: "ElementCollection",
      isMany: true
    }, {
      name: "businessContextElement",
      type: "BusinessContextElement",
      isMany: true
    }, {
      name: "namespace",
      type: "String",
      isAttr: true
    }, {
      name: "expressionLanguage",
      type: "String",
      isAttr: true
    }, {
      name: "typeLanguage",
      type: "String",
      isAttr: true
    }, {
      name: "exporter",
      isAttr: true,
      type: "String"
    }, {
      name: "exporterVersion",
      isAttr: true,
      type: "String"
    }, {
      name: "dmnDI",
      type: "dmndi:DMNDI"
    }]
  }, {
    name: "KnowledgeSource",
    superClass: ["DRGElement"],
    properties: [{
      name: "authorityRequirement",
      type: "AuthorityRequirement",
      isMany: true
    }, {
      name: "type",
      type: "String"
    }, {
      name: "owner",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "locationURI",
      type: "String",
      isAttr: true
    }]
  }, {
    name: "DecisionRule",
    superClass: ["DMNElement"],
    properties: [{
      name: "inputEntry",
      type: "UnaryTests",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "outputEntry",
      type: "LiteralExpression",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "annotationEntry",
      type: "RuleAnnotation",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "Expression",
    isAbstract: true,
    superClass: ["DMNElement"],
    properties: [{
      name: "typeRef",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "InformationItem",
    superClass: ["NamedElement"],
    properties: [{
      name: "typeRef",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "Decision",
    superClass: ["DRGElement"],
    properties: [{
      name: "question",
      type: "String",
      xml: {
        serialize: "property"
      }
    }, {
      name: "allowedAnswers",
      type: "String",
      xml: {
        serialize: "property"
      }
    }, {
      name: "variable",
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }, {
      name: "informationRequirement",
      type: "InformationRequirement",
      isMany: true
    }, {
      name: "knowledgeRequirement",
      type: "KnowledgeRequirement",
      isMany: true
    }, {
      name: "authorityRequirement",
      type: "AuthorityRequirement",
      isMany: true
    }, {
      name: "supportedObjective",
      isMany: true,
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "impactedPerformanceIndicator",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "decisionMaker",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "decisionOwner",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "usingProcess",
      isMany: true,
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "usingTask",
      isMany: true,
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "decisionLogic",
      type: "Expression"
    }]
  }, {
    name: "Invocation",
    superClass: ["Expression"],
    properties: [{
      name: "calledFunction",
      type: "Expression"
    }, {
      name: "binding",
      type: "Binding",
      isMany: true
    }]
  }, {
    name: "OrganisationalUnit",
    superClass: ["BusinessContextElement"],
    properties: [{
      name: "decisionMade",
      type: "Decision",
      isReference: true,
      isMany: true
    }, {
      name: "decisionOwned",
      type: "Decision",
      isReference: true,
      isMany: true
    }]
  }, {
    name: "Import",
    superClass: ["NamedElement"],
    properties: [{
      name: "importType",
      type: "String",
      isAttr: true
    }, {
      name: "locationURI",
      type: "String",
      isAttr: true
    }, {
      name: "namespace",
      type: "String",
      isAttr: true
    }]
  }, {
    name: "InformationRequirement",
    superClass: ["DMNElement"],
    properties: [{
      name: "requiredDecision",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "requiredInput",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "ElementCollection",
    superClass: ["NamedElement"],
    properties: [{
      name: "drgElement",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "DRGElement",
    isAbstract: true,
    superClass: ["NamedElement"],
    properties: []
  }, {
    name: "InputData",
    superClass: ["DRGElement"],
    properties: [{
      name: "variable",
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "DMNElement",
    isAbstract: true,
    properties: [{
      name: "description",
      type: "String"
    }, {
      name: "extensionElements",
      type: "ExtensionElements"
    }, {
      name: "id",
      type: "String",
      isAttr: true,
      isId: true
    }, {
      name: "extensionAttribute",
      type: "ExtensionAttribute",
      isMany: true
    }, {
      name: "label",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "InputClause",
    superClass: ["DMNElement"],
    properties: [{
      name: "inputExpression",
      type: "LiteralExpression",
      xml: {
        serialize: "property"
      }
    }, {
      name: "inputValues",
      type: "UnaryTests",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "DecisionTable",
    superClass: ["Expression"],
    properties: [{
      name: "input",
      type: "InputClause",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "output",
      type: "OutputClause",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "annotation",
      type: "RuleAnnotationClause",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "rule",
      type: "DecisionRule",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "hitPolicy",
      type: "HitPolicy",
      isAttr: true,
      "default": "UNIQUE"
    }, {
      name: "aggregation",
      type: "BuiltinAggregator",
      isAttr: true
    }, {
      name: "preferredOrientation",
      type: "DecisionTableOrientation",
      isAttr: true
    }, {
      name: "outputLabel",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "LiteralExpression",
    superClass: ["Expression"],
    properties: [{
      name: "expressionLanguage",
      type: "String",
      isAttr: true
    }, {
      name: "text",
      type: "String"
    }, {
      name: "importedValues",
      type: "ImportedValues"
    }]
  }, {
    name: "Binding",
    properties: [{
      name: "parameter",
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }, {
      name: "bindingFormula",
      type: "Expression"
    }]
  }, {
    name: "KnowledgeRequirement",
    superClass: ["DMNElement"],
    properties: [{
      name: "requiredKnowledge",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "BusinessKnowledgeModel",
    superClass: ["Invocable"],
    properties: [{
      name: "encapsulatedLogic",
      type: "FunctionDefinition",
      xml: {
        serialize: "property"
      }
    }, {
      name: "knowledgeRequirement",
      type: "KnowledgeRequirement",
      isMany: true
    }, {
      name: "authorityRequirement",
      type: "AuthorityRequirement",
      isMany: true
    }]
  }, {
    name: "BusinessContextElement",
    isAbstract: true,
    superClass: ["NamedElement"],
    properties: [{
      name: "URI",
      type: "String",
      isAttr: true
    }]
  }, {
    name: "PerformanceIndicator",
    superClass: ["BusinessContextElement"],
    properties: [{
      name: "impactingDecision",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "FunctionDefinition",
    superClass: ["Expression"],
    properties: [{
      name: "formalParameter",
      type: "InformationItem",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "body",
      type: "Expression"
    }, {
      name: "kind",
      type: "FunctionKind",
      isAttr: true
    }]
  }, {
    name: "Context",
    superClass: ["Expression"],
    properties: [{
      name: "contextEntry",
      type: "ContextEntry",
      isMany: true
    }]
  }, {
    name: "ContextEntry",
    superClass: ["DMNElement"],
    properties: [{
      name: "variable",
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }, {
      name: "value",
      type: "Expression"
    }]
  }, {
    name: "List",
    superClass: ["Expression"],
    properties: [{
      name: "elements",
      isMany: true,
      type: "Expression"
    }]
  }, {
    name: "Relation",
    superClass: ["Expression"],
    properties: [{
      name: "column",
      type: "InformationItem",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "row",
      type: "List",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "OutputClause",
    superClass: ["DMNElement"],
    properties: [{
      name: "outputValues",
      type: "UnaryTests",
      xml: {
        serialize: "property"
      }
    }, {
      name: "defaultOutputEntry",
      type: "LiteralExpression",
      xml: {
        serialize: "property"
      }
    }, {
      name: "name",
      isAttr: true,
      type: "String"
    }, {
      name: "typeRef",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "UnaryTests",
    superClass: ["Expression"],
    properties: [{
      name: "text",
      type: "String"
    }, {
      name: "expressionLanguage",
      type: "String",
      isAttr: true
    }]
  }, {
    name: "NamedElement",
    isAbstract: true,
    superClass: ["DMNElement"],
    properties: [{
      name: "name",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "ImportedValues",
    superClass: ["Import"],
    properties: [{
      name: "importedElement",
      type: "String"
    }, {
      name: "expressionLanguage",
      type: "String",
      isAttr: true
    }]
  }, {
    name: "DecisionService",
    superClass: ["Invocable"],
    properties: [{
      name: "outputDecision",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "encapsulatedDecision",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "inputDecision",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }, {
      name: "inputData",
      type: "DMNElementReference",
      isMany: true,
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "ExtensionElements",
    properties: [{
      name: "values",
      type: "Element",
      isMany: true
    }]
  }, {
    name: "ExtensionAttribute",
    properties: [{
      name: "value",
      type: "Element"
    }, {
      name: "valueRef",
      type: "Element",
      isAttr: true,
      isReference: true
    }, {
      name: "name",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "Element",
    isAbstract: true,
    properties: [{
      name: "extensionAttribute",
      type: "ExtensionAttribute",
      isAttr: true,
      isReference: true
    }, {
      name: "elements",
      type: "ExtensionElements",
      isAttr: true,
      isReference: true
    }]
  }, {
    name: "Artifact",
    isAbstract: true,
    superClass: ["DMNElement"],
    properties: []
  }, {
    name: "Association",
    superClass: ["Artifact"],
    properties: [{
      name: "sourceRef",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "targetRef",
      type: "DMNElementReference",
      xml: {
        serialize: "property"
      }
    }, {
      name: "associationDirection",
      type: "AssociationDirection",
      isAttr: true
    }]
  }, {
    name: "TextAnnotation",
    superClass: ["Artifact"],
    properties: [{
      name: "text",
      type: "String"
    }, {
      name: "textFormat",
      isAttr: true,
      type: "String",
      "default": "text/plain"
    }]
  }, {
    name: "RuleAnnotationClause",
    properties: [{
      name: "name",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "RuleAnnotation",
    properties: [{
      name: "text",
      type: "String"
    }]
  }, {
    name: "Invocable",
    isAbstract: true,
    superClass: ["DRGElement"],
    properties: [{
      name: "variable",
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }]
  }, {
    name: "Group",
    superClass: ["Artifact"],
    properties: [{
      name: "name",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "FunctionItem",
    superClass: ["DMNElement"],
    properties: [{
      name: "parameters",
      isMany: true,
      type: "InformationItem",
      xml: {
        serialize: "property"
      }
    }, {
      name: "outputTypeRef",
      isAttr: true,
      type: "String"
    }]
  }, {
    name: "DMNElementReference",
    properties: [{
      isAttr: true,
      name: "href",
      type: "String"
    }]
  }];
  var enumerations$1 = [{
    name: "HitPolicy",
    literalValues: [{
      name: "UNIQUE"
    }, {
      name: "FIRST"
    }, {
      name: "PRIORITY"
    }, {
      name: "ANY"
    }, {
      name: "COLLECT"
    }, {
      name: "RULE ORDER"
    }, {
      name: "OUTPUT ORDER"
    }]
  }, {
    name: "BuiltinAggregator",
    literalValues: [{
      name: "SUM"
    }, {
      name: "COUNT"
    }, {
      name: "MIN"
    }, {
      name: "MAX"
    }]
  }, {
    name: "DecisionTableOrientation",
    literalValues: [{
      name: "Rule-as-Row"
    }, {
      name: "Rule-as-Column"
    }, {
      name: "CrossTable"
    }]
  }, {
    name: "AssociationDirection",
    literalValues: [{
      name: "None"
    }, {
      name: "One"
    }, {
      name: "Both"
    }]
  }, {
    name: "FunctionKind",
    literalValues: [{
      name: "FEEL"
    }, {
      name: "Java"
    }, {
      name: "PMML"
    }]
  }];
  var associations$1 = [];
  var xml$1 = {
    tagAlias: "lowerCase"
  };
  var DmnPackage = {
    name: name$2,
    prefix: prefix$2,
    uri: uri$2,
    types: types$2,
    enumerations: enumerations$1,
    associations: associations$1,
    xml: xml$1
  };
  var name$1 = "DMNDI";
  var prefix$1 = "dmndi";
  var uri$1 = "https://www.omg.org/spec/DMN/20191111/DMNDI/";
  var types$1 = [{
    name: "DMNDI",
    properties: [{
      name: "diagrams",
      type: "DMNDiagram",
      isMany: true
    }, {
      name: "styles",
      type: "DMNStyle",
      isMany: true
    }]
  }, {
    name: "DMNStyle",
    superClass: ["di:Style"],
    properties: [{
      name: "fillColor",
      type: "dc:Color",
      isAttr: true
    }, {
      name: "strokeColor",
      type: "dc:Color",
      isAttr: true
    }, {
      name: "fontColor",
      type: "dc:Color",
      isAttr: true
    }, {
      name: "fontSize",
      isAttr: true,
      type: "Real"
    }, {
      name: "fontFamily",
      isAttr: true,
      type: "String"
    }, {
      name: "fontItalic",
      isAttr: true,
      type: "Boolean"
    }, {
      name: "fontBold",
      isAttr: true,
      type: "Boolean"
    }, {
      name: "fontUnderline",
      isAttr: true,
      type: "Boolean"
    }, {
      name: "fontStrikeThrough",
      isAttr: true,
      type: "Boolean"
    }, {
      name: "labelHorizontalAlignment",
      type: "dc:AlignmentKind",
      isAttr: true
    }, {
      name: "labelVerticalAlignment",
      type: "dc:AlignmentKind",
      isAttr: true
    }]
  }, {
    name: "DMNDiagram",
    superClass: ["di:Diagram"],
    properties: [{
      name: "dmnElementRef",
      type: "dmn:DMNElement",
      isAttr: true,
      isReference: true
    }, {
      name: "size",
      type: "Size"
    }, {
      name: "localStyle",
      type: "DMNStyle",
      isVirtual: true
    }, {
      name: "sharedStyle",
      type: "DMNStyle",
      isVirtual: true,
      isReference: true,
      redefines: "di:DiagramElement#sharedStyle"
    }, {
      name: "diagramElements",
      type: "DMNDiagramElement",
      isMany: true
    }]
  }, {
    name: "DMNDiagramElement",
    isAbstract: true,
    superClass: ["di:DiagramElement"],
    properties: [{
      name: "dmnElementRef",
      type: "dmn:DMNElement",
      isAttr: true,
      isReference: true
    }, {
      name: "sharedStyle",
      type: "DMNStyle",
      isVirtual: true,
      isReference: true,
      redefines: "di:DiagramElement#sharedStyle"
    }, {
      name: "localStyle",
      type: "DMNStyle",
      isVirtual: true
    }, {
      name: "label",
      type: "DMNLabel"
    }]
  }, {
    name: "DMNLabel",
    superClass: ["di:Shape"],
    properties: [{
      name: "text",
      type: "Text"
    }]
  }, {
    name: "DMNShape",
    superClass: ["di:Shape", "DMNDiagramElement"],
    properties: [{
      name: "isListedInputData",
      isAttr: true,
      type: "Boolean"
    }, {
      name: "decisionServiceDividerLine",
      type: "DMNDecisionServiceDividerLine"
    }, {
      name: "isCollapsed",
      isAttr: true,
      type: "Boolean"
    }]
  }, {
    name: "DMNEdge",
    superClass: ["di:Edge", "DMNDiagramElement"],
    properties: [{
      name: "sourceElement",
      type: "DMNDiagramElement",
      isAttr: true,
      isReference: true
    }, {
      name: "targetElement",
      type: "DMNDiagramElement",
      isAttr: true,
      isReference: true
    }]
  }, {
    name: "DMNDecisionServiceDividerLine",
    superClass: ["di:Edge"]
  }, {
    name: "Text",
    properties: [{
      name: "text",
      isBody: true,
      type: "String"
    }]
  }, {
    name: "Size",
    superClass: ["dc:Dimension"]
  }];
  var associations = [];
  var enumerations = [];
  var DmnDiPackage = {
    name: name$1,
    prefix: prefix$1,
    uri: uri$1,
    types: types$1,
    associations: associations,
    enumerations: enumerations
  };
  var name = "bpmn.io DI for DMN";
  var uri = "http://bpmn.io/schema/dmn/biodi/2.0";
  var prefix = "biodi";
  var xml = {
    tagAlias: "lowerCase"
  };
  var types$5 = [{
    name: "DecisionTable",
    isAbstract: true,
    "extends": ["dmn:DecisionTable"],
    properties: [{
      name: "annotationsWidth",
      isAttr: true,
      type: "Integer"
    }]
  }, {
    name: "OutputClause",
    isAbstract: true,
    "extends": ["dmn:OutputClause"],
    properties: [{
      name: "width",
      isAttr: true,
      type: "Integer"
    }]
  }, {
    name: "InputClause",
    isAbstract: true,
    "extends": ["dmn:InputClause"],
    properties: [{
      name: "width",
      isAttr: true,
      type: "Integer"
    }]
  }];
  var BioDiPackage = {
    name: name,
    uri: uri,
    prefix: prefix,
    xml: xml,
    types: types$5
  };
  var packages = {
    dc: DcPackage,
    di: DiPackage,
    dmn: DmnPackage,
    dmndi: DmnDiPackage,
    biodi: BioDiPackage
  };
  function simple(additionalPackages, options) {
    var pks = assign$2({}, packages, additionalPackages);
    return new DmnModdle(pks, options);
  }

  // TODO: remove with future dmn-js version

  /**
   * Wraps APIs to check:
   *
   * 1) If a callback is passed -> Warn users about callback deprecation.
   * 2) If Promise class is implemented in current environment.
   *
   * @private
   */
  function wrapForCompatibility(api) {
    return function () {
      if (!window.Promise) {
        throw new Error('Promises is not supported in this environment.' + ' Please polyfill Promise.');
      }
      var argLen = arguments.length;
      if (argLen >= 1 && isFunction$2(arguments[argLen - 1])) {
        var callback = arguments[argLen - 1];
        console.warn(new Error('Passing callbacks to ' + replaceBoundPrefix(api.name) + ' is deprecated and will be removed in a future major release. ' + 'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'));
        var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);
        api.apply(this, argsWithoutCallback).then(function (result) {
          var firstKey = Object.keys(result)[0];

          // The APIs we are wrapping all resolve a single item depending on the API.
          // For instance, importXML resolves { warnings } and saveXML returns { xml }.
          // That's why we can call the callback with the first item of result.
          return callback(null, result[firstKey]);

          // Passing a second paramter instead of catch because we don't want to
          // catch errors thrown by callback().
        }, function (err) {
          return callback(err, err.warnings);
        });
      } else {
        return api.apply(this, arguments);
      }
    };
  }

  // helper ////////

  /**
   * replaceBoundPrefix - replace the <bound > prefix from a string. Can be used
   * when logging the name of an API, not being sure whether is was bound or not.
   *
   * @param  {string} string
   * @return {string} the string without the <bound > prefix. If no <bound > prefix
   * was present, the same string will be returned.
   */
  function replaceBoundPrefix(string) {
    return string.replace('bound ', '');
  }

  function ownKeys$a(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$a(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) {
        _defineProperty$H(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$H(obj, key, value) {
    key = _toPropertyKey$E(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$E(arg) {
    var key = _toPrimitive$E(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$E(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * @typedef {import('./View').OpenResult} OpenResult
   */

  /**
   * @typedef {import('./View').OpenError} OpenError
   */

  const DEFAULT_CONTAINER_OPTIONS = {
    width: '100%',
    height: '100%',
    position: 'relative'
  };

  /**
   * The base class for DMN viewers and editors.
   *
   * @abstract
   */
  class Manager {
    /**
     * Create a new instance with the given options.
     *
     * @param  {Object} options
     *
     * @return {Manager}
     */
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _defineProperty$H(this, "_viewsChanged", () => {
        this._emit('views.changed', {
          views: this._views,
          activeView: this._activeView
        });
      });
      this._eventBus = new EventBus();
      this._viewsChanged = debounce(this._viewsChanged, 0);
      this._views = [];
      this._viewers = {};

      // keep support for callbacks
      this.open = wrapForCompatibility(this.open.bind(this));
      this.importXML = wrapForCompatibility(this.importXML.bind(this));
      this.saveXML = wrapForCompatibility(this.saveXML.bind(this));
      this._init(options);
    }

    /**
    * The importXML result.
    *
    * @typedef {Object} ImportXMLResult
    *
    * @property {Array<string>} warnings
    */

    /**
    * The importXML error.
    *
    * @typedef {Error} ImportXMLError
    *
    * @property {Array<string>} warnings
    */

    /**
     * Parse and render a DMN diagram.
     *
     * Once finished the viewer reports back the result to the
     * provided callback function with (err, warnings).
     *
     * ## Life-Cycle Events
     *
     * During import the viewer will fire life-cycle events:
     *
     *   * import.parse.start (about to read model from xml)
     *   * import.parse.complete (model read; may have worked or not)
     *   * import.render.start (graphical import start)
     *   * import.render.complete (graphical import finished)
     *   * import.done (everything done)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @param {string} xml the DMN xml
     * @param {Object} [options]
     * @param {boolean} [options.open=true]
     *
     * @return {Promise<ImportXMLResult, ImportXMLError>}
     */
    importXML(xml, options) {
      var self = this;
      options = options || {
        open: true
      };
      return new Promise(function (resolve, reject) {
        var previousActiveView = self._activeView;

        // clean up previously rendered diagram before new import
        self._clear().then(() => {
          // hook in pre-parse listeners +
          // allow xml manipulation
          xml = self._emit('import.parse.start', {
            xml: xml
          }) || xml;
          var parseWarnings;
          self._moddle.fromXML(xml, 'dmn:Definitions').then(parseResult => {
            var definitions = parseResult.rootElement;
            var references = parseResult.references;
            var elementsById = parseResult.elementsById;
            parseWarnings = parseResult.warnings;

            // hook in post parse listeners +
            // allow definitions manipulation
            definitions = self._emit('import.parse.complete', ParseCompleteEvent({
              error: null,
              definitions: definitions,
              elementsById: elementsById,
              references: references,
              warnings: parseWarnings
            })) || definitions;
            self._setDefinitions(definitions);
            if (!options.open) {
              self._emit('import.done', {
                error: null,
                warnings: parseWarnings
              });
              resolve({
                warnings: parseWarnings
              });
              return;
            }

            // open either previously active view or view of the same type if available
            var view = self._getInitialView(self._views, previousActiveView);
            if (!view) {
              var noDisplayableContentsErr = new Error('no displayable contents');
              self._emit('import.done', {
                error: noDisplayableContentsErr,
                warnings: parseWarnings
              });
              noDisplayableContentsErr.warnings = parseWarnings;
              return reject(noDisplayableContentsErr);
            }
            self.open(view).then(result => ({
              warnings: result.warnings
            })).catch(error => ({
              error: error,
              warnings: error.warnings
            })).then(result => {
              var allWarnings = [].concat(parseWarnings, result.warnings);
              self._emit('import.done', {
                error: result.error,
                warnings: allWarnings
              });
              if (result.error) {
                result.error.warnings = allWarnings;
                reject(result.error);
              } else {
                resolve({
                  warnings: allWarnings
                });
              }
            });
          }).catch(parseError => {
            parseWarnings = parseError.warnings;
            parseError = checkDMNCompatibilityError(parseError, xml) || checkValidationError(parseError) || parseError;
            self._emit('import.parse.complete', ParseCompleteEvent({
              error: parseError,
              warnings: parseWarnings
            }));
            self._emit('import.done', {
              error: parseError,
              warnings: parseWarnings
            });
            parseError.warnings = parseWarnings;
            return reject(parseError);
          });
        }).catch(clearError => {
          self._emit('import.done', {
            error: clearError,
            warnings: []
          });
          clearError.warnings = [];
          return reject(clearError);
        });
      });

      // TODO: remove with future dmn-js version
      function ParseCompleteEvent(data) {
        var event = self._eventBus.createEvent(data);
        Object.defineProperty(event, 'context', {
          enumerable: true,
          get: function get() {
            console.warn(new Error('import.parse.complete <context> is deprecated ' + 'and will be removed in future library versions'));
            return {
              warnings: data.warnings,
              references: data.references,
              elementsById: data.elementsById
            };
          }
        });
        return event;
      }
    }
    getDefinitions() {
      return this._definitions;
    }

    /**
     * Return active view.
     *
     * @return {View}
     */
    getActiveView() {
      return this._activeView;
    }

    /**
     * Get the currently active viewer instance.
     *
     * @return {View}
     */
    getActiveViewer() {
      var activeView = this.getActiveView();
      return activeView && this._getViewer(activeView);
    }
    getView(element) {
      return this._views.filter(function (v) {
        return v.element === element;
      })[0];
    }
    getViews() {
      return this._views;
    }

    /**
     * The saveXML result.
     *
     * @typedef {Object} SaveXMLResult
     *
     * @property {string} xml
     */

    /**
     * Export the currently displayed DMN diagram as
     * a DMN XML document.
     *
     * ## Life-Cycle Events
     *
     * During XML saving the viewer will fire life-cycle events:
     *
     *   * saveXML.start (before serialization)
     *   * saveXML.serialized (after xml generation)
     *   * saveXML.done (everything done)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @param {Object} [options] export options
     * @param {boolean} [options.format=false] output formated XML
     * @param {boolean} [options.preamble=true] output preamble
     *
     * @return {Promise<SaveXMLResult, Error>}
     */
    saveXML(options) {
      var self = this;
      options = options || {};
      var definitions = this._definitions;
      return new Promise(function (resolve, reject) {
        if (!definitions) {
          reject(new Error('no definitions loaded'));
          return;
        }

        // allow to fiddle around with definitions
        definitions = self._emit('saveXML.start', {
          definitions: definitions
        }) || definitions;
        self._moddle.toXML(definitions, options).then(function (result) {
          var xml = result.xml;
          xml = self._emit('saveXML.serialized', {
            xml: xml
          }) || xml;
          return {
            xml
          };
        }).catch(error => ({
          error
        })).then(result => {
          self._emit('saveXML.done', result);
          if (result.error) {
            reject(result.error);
          } else {
            resolve({
              xml: result.xml
            });
          }
        });
      });
    }

    /**
     * Register an event listener
     *
     * Remove a previously added listener via {@link #off(event, callback)}.
     *
     * @param {string} event
     * @param {number} [priority]
     * @param {Function} callback
     * @param {Object} [that]
     */
    on() {
      this._eventBus.on(...arguments);
    }

    /**
     * De-register an event listener
     *
     * @param {string} event
     * @param {Function} callback
     */
    off() {
      this._eventBus.off(...arguments);
    }

    /**
     * Register a listener to be invoked once only.
     *
     * @param {string} event
     * @param {number} [priority]
     * @param {Function} callback
     * @param {Object} [that]
     */
    once() {
      this._eventBus.once(...arguments);
    }
    attachTo(parentNode) {
      // unwrap jQuery if provided
      if (parentNode.get && parentNode.constructor.prototype.jquery) {
        parentNode = parentNode.get(0);
      }
      if (typeof parentNode === 'string') {
        parentNode = query(parentNode);
      }
      parentNode.appendChild(this._container);
      this._emit('attach', {});
    }
    detach() {
      this._emit('detach', {});
      remove$4(this._container);
    }
    destroy() {
      Object.keys(this._viewers).forEach(viewerId => {
        var viewer = this._viewers[viewerId];
        safeExecute(viewer, 'destroy');
      });
      remove$4(this._container);
    }
    _init(options) {
      this._options = options;
      this._moddle = this._createModdle(options);
      this._viewers = {};
      this._views = [];
      const container = domify$1('<div class="dmn-js-parent"></div>');
      const containerOptions = assign$4({}, DEFAULT_CONTAINER_OPTIONS, options);
      assign$4(container.style, {
        width: ensureUnit(containerOptions.width),
        height: ensureUnit(containerOptions.height),
        position: containerOptions.position
      });
      this._container = container;
      if (options.container) {
        this.attachTo(options.container);
      }
    }
    _clear() {
      return this._switchView(null);
    }

    /**
     * Open diagram view.
     *
     * @param  {View} view
     * @returns {Promise} Resolves with {OpenResult} when successful
     * or rejects with {OpenError}
     */
    open(view) {
      return this._switchView(view);
    }
    _setDefinitions(definitions) {
      this._definitions = definitions;
      this._updateViews();
    }
    /**
     * Recompute changed views after elements in
     * the DMN diagram have changed.
     */
    _updateViews() {
      var definitions = this._definitions;
      if (!definitions) {
        this._views = [];
        this._switchView(null);
        return;
      }
      var viewProviders = this._getViewProviders();
      var displayableElements = [definitions, ...(definitions.drgElement || [])];

      // compute list of available views
      var views = this._views,
        newViews = [];
      for (var _i = 0, _displayableElements = displayableElements; _i < _displayableElements.length; _i++) {
        var element = _displayableElements[_i];
        var provider = find$2(viewProviders, function (provider) {
          if (typeof provider.opens === 'string') {
            return provider.opens === element.$type;
          } else {
            return provider.opens(element);
          }
        });
        if (!provider) {
          continue;
        }
        var view = {
          element,
          id: element.id,
          name: element.name,
          type: provider.id
        };
        newViews.push(view);
      }
      var activeView = this._activeView,
        newActiveView;
      if (activeView) {
        // check the new active view
        newActiveView = find$2(newViews, function (view) {
          return viewsEqual(activeView, view);
        }) || this._getInitialView(newViews);
        if (!newActiveView) {
          this._switchView(null);
          return;
        }
      }

      // Views have changed if
      // active view has changed OR
      // number of views has changed OR
      // not all views equal
      var activeViewChanged = !viewsEqual(activeView, newActiveView) || viewNameChanged(activeView, newActiveView);
      var viewsChanged = views.length !== newViews.length || !every(newViews, function (newView) {
        return find$2(views, function (view) {
          return viewsEqual(view, newView) && !viewNameChanged(view, newView);
        });
      });
      this._activeView = newActiveView;
      this._views = newViews;
      if (activeViewChanged || viewsChanged) {
        this._viewsChanged();
      }
    }
    _getInitialView(views, preferredView) {
      var initialView;
      if (preferredView) {
        initialView = find$2(views, function (view) {
          return viewsEqual(view, preferredView);
        }) || find$2(views, function (view) {
          return view.type === preferredView;
        });
      }
      return initialView || views[0];
    }

    /**
     * Switch to another view.
     *
     * @param  {View} newView
     * @returns {Promise} Resolves with {OpenResult} when successful
     * or rejects with {OpenError}
     */
    _switchView(newView) {
      var self = this;
      return new Promise(function (resolve, reject) {
        var complete = (openError, openResult) => {
          self._viewsChanged();
          if (openError) {
            reject(openError);
          } else {
            resolve(openResult);
          }
        };
        var activeView = self.getActiveView(),
          activeViewer;
        var newViewer = newView && self._getViewer(newView),
          element = newView && newView.element;
        if (activeView) {
          activeViewer = self._getViewer(activeView);
          if (activeViewer !== newViewer) {
            safeExecute(activeViewer, 'clear');
            activeViewer.detach();
          }
        }
        self._activeView = newView;
        if (newViewer) {
          if (activeViewer !== newViewer) {
            newViewer.attachTo(self._container);
          }
          self._emit('import.render.start', {
            view: newView,
            element: element
          });
          newViewer.open(element).then(result => {
            self._emit('import.render.complete', {
              view: newView,
              error: null,
              warnings: result.warnings
            });
            complete(null, result);
          }).catch(error => {
            self._emit('import.render.complete', {
              view: newView,
              error: error,
              warnings: error.warnings
            });
            complete(error, null);
          });
          return;
        }

        // no active view
        complete();
      });
    }
    _getViewer(view) {
      var type = view.type;
      var viewer = this._viewers[type];
      if (!viewer) {
        viewer = this._viewers[type] = this._createViewer(view.type);
        this._emit('viewer.created', {
          type: type,
          viewer: viewer
        });
      }
      return viewer;
    }
    _createViewer(id) {
      var provider = find$2(this._getViewProviders(), function (provider) {
        return provider.id === id;
      });
      if (!provider) {
        throw new Error('no provider for view type <' + id + '>');
      }
      var Viewer = provider.constructor;
      var providerOptions = this._options[id] || {};
      var commonOptions = this._options.common || {};
      return new Viewer(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, commonOptions), providerOptions), {}, {
        additionalModules: [...(providerOptions.additionalModules || []), {
          _parent: ['value', this],
          moddle: ['value', this._moddle]
        }]
      }));
    }

    /**
     * Emit an event.
     */
    _emit() {
      return this._eventBus.fire(...arguments);
    }
    _createModdle(options) {
      return new simple(options.moddleExtensions);
    }

    /**
     * Return the list of available view providers.
     *
     * @abstract
     *
     * @return {Array<ViewProvider>}
     */
    _getViewProviders() {
      return [];
    }
  }

  // helpers //////////////////////

  /**
   * Ensure the passed argument is a proper unit (defaulting to px)
   */
  function ensureUnit(val) {
    return val + (isNumber$3(val) ? 'px' : '');
  }
  function checkDMNCompatibilityError(err, xml) {
    // check if we can indicate opening of old DMN 1.1 or DMN 1.2 diagrams

    if (err.message !== 'failed to parse document as <dmn:Definitions>') {
      return null;
    }
    var olderDMNVersion = xml.indexOf('"http://www.omg.org/spec/DMN/20151101/dmn.xsd"') !== -1 && '1.1' || xml.indexOf('"http://www.omg.org/spec/DMN/20180521/MODEL/"') !== -1 && '1.2';
    if (!olderDMNVersion) {
      return null;
    }
    err = new Error('unsupported DMN ' + olderDMNVersion + ' file detected; ' + 'only DMN 1.3 files can be opened');
    console.error('Cannot open what looks like a DMN ' + olderDMNVersion + ' diagram. ' + 'Please refer to https://bpmn.io/l/dmn-compatibility.html ' + 'to learn how to make the toolkit compatible with older DMN files', err);
    return err;
  }
  function checkValidationError(err) {
    // check if we can help the user by indicating wrong DMN 1.3 xml
    // (in case he or the exporting tool did not get that right)

    var pattern = /unparsable content <([^>]+)> detected([\s\S]*)$/,
      match = pattern.exec(err.message);
    if (!match) {
      return null;
    }
    err.message = 'unparsable content <' + match[1] + '> detected; ' + 'this may indicate an invalid DMN 1.3 diagram file' + match[2];
    return err;
  }
  function viewsEqual(a, b) {
    if (!isDefined(a)) {
      if (!isDefined(b)) {
        return true;
      } else {
        return false;
      }
    }
    if (!isDefined(b)) {
      return false;
    }

    // compare by element OR element ID equality
    return a.element === b.element || a.id === b.id;
  }
  function viewNameChanged(a, b) {
    return !a || !b || a.name !== b.name;
  }
  function safeExecute(viewer, method) {
    if (isFunction$2(viewer[method])) {
      viewer[method]();
    }
  }

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }
  var hat_1 = createCommonjsModule(function (module) {
    var hat = module.exports = function (bits, base) {
      if (!base) base = 16;
      if (bits === undefined) bits = 128;
      if (bits <= 0) return '0';
      var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
      for (var i = 2; digits === Infinity; i *= 2) {
        digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
      }
      var rem = digits - Math.floor(digits);
      var res = '';
      for (var i = 0; i < Math.floor(digits); i++) {
        var x = Math.floor(Math.random() * base).toString(base);
        res = x + res;
      }
      if (rem) {
        var b = Math.pow(base, rem);
        var x = Math.floor(Math.random() * b).toString(base);
        res = x + res;
      }
      var parsed = parseInt(res, base);
      if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
        return hat(bits, base);
      } else return res;
    };
    hat.rack = function (bits, base, expandBy) {
      var fn = function (data) {
        var iters = 0;
        do {
          if (iters++ > 10) {
            if (expandBy) bits += expandBy;else throw new Error('too many ID collisions, use more bits');
          }
          var id = hat(bits, base);
        } while (Object.hasOwnProperty.call(hats, id));
        hats[id] = data;
        return id;
      };
      var hats = fn.hats = {};
      fn.get = function (id) {
        return fn.hats[id];
      };
      fn.set = function (id, value) {
        fn.hats[id] = value;
        return fn;
      };
      fn.bits = bits || 128;
      fn.base = base || 16;
      return fn;
    };
  });

  /**
   * Create a new id generator / cache instance.
   *
   * You may optionally provide a seed that is used internally.
   *
   * @param {Seed} seed
   */

  function Ids(seed) {
    if (!(this instanceof Ids)) {
      return new Ids(seed);
    }
    seed = seed || [128, 36, 1];
    this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
  }
  /**
   * Generate a next id.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */

  Ids.prototype.next = function (element) {
    return this._seed(element || true);
  };
  /**
   * Generate a next id with a given prefix.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */

  Ids.prototype.nextPrefixed = function (prefix, element) {
    var id;
    do {
      id = prefix + this.next(true);
    } while (this.assigned(id)); // claim {prefix}{random}

    this.claim(id, element); // return

    return id;
  };
  /**
   * Manually claim an existing id.
   *
   * @param {String} id
   * @param {String} [element] element the id is claimed by
   */

  Ids.prototype.claim = function (id, element) {
    this._seed.set(id, element || true);
  };
  /**
   * Returns true if the given id has already been assigned.
   *
   * @param  {String} id
   * @return {Boolean}
   */

  Ids.prototype.assigned = function (id) {
    return this._seed.get(id) || false;
  };
  /**
   * Unclaim an id.
   *
   * @param  {String} id the id to unclaim
   */

  Ids.prototype.unclaim = function (id) {
    delete this._seed.hats[id];
  };
  /**
   * Clear all claimed ids.
   */

  Ids.prototype.clear = function () {
    var hats = this._seed.hats,
      id;
    for (id in hats) {
      this.unclaim(id);
    }
  };

  /**
   * Is an element of the given DMN type?
   *
   * @param  {tjs.model.Base|ModdleElement} element
   * @param  {string} type
   *
   * @return {boolean}
   */
  function is(element, type) {
    var bo = getBusinessObject(element);
    return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);
  }
  function isInput$1(element) {
    return is(element, 'dmn:InputClause');
  }
  function isOutput(element) {
    return is(element, 'dmn:OutputClause');
  }

  /**
   * Return the business object for a given element.
   *
   * @param  {tjs.model.Base|ModdleElement} element
   *
   * @return {ModdleElement}
   */
  function getBusinessObject(element) {
    return element && element.businessObject || element;
  }
  function getName(element) {
    return getBusinessObject(element).name;
  }

  /**
   * Return true if element has any of the given types.
   *
   * @param {djs.model.Base} element
   * @param {Array<string>} types
   *
   * @return {boolean}
   */
  function isAny(element, types) {
    return some(types, function (t) {
      return is(element, t);
    });
  }

  class EditingManager extends Manager {
    _init(options) {
      super._init(options);

      // hook ID collection into the modeler
      this.on('import.parse.complete', event => {
        if (!event.error) {
          this._collectIds(event.definitions, event.elementsById);
        }
      });
      this.on('destroy', () => {
        this._moddle.ids.clear();
      });
      this.on('viewer.created', _ref => {
        let viewer = _ref.viewer;
        viewer.on('elements.changed', _ref2 => {
          let elements = _ref2.elements;
          var viewsChanged = elements.some(function (e) {
            return isAny(e, ['dmn:Decision', 'dmn:Definitions']);
          });
          if (viewsChanged) {
            this._updateViews();
          }
        });
      });
    }

    /**
     * Collect ids processed during parsing of the
     * definitions object.
     *
     * @param {ModdleElement} definitions
     * @param {Array<ModdleElement>} elementsById
     */
    _collectIds(definitions, elementsById) {
      var moddle = definitions.$model,
        ids = moddle.ids,
        id;

      // remove references from previous import
      ids.clear();
      for (id in elementsById) {
        ids.claim(id, elementsById[id]);
      }
    }
    _createModdle(options) {
      var moddle = super._createModdle(options);

      // attach ids to moddle to be able to track
      // and validated ids in the DMN XML document
      // tree
      moddle.ids = new Ids([32, 36, 1]);
      return moddle;
    }
  }

  function e$3(e, t) {
    t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }));
  }

  const CLASS_PATTERN = /^class[ {]/;

  /**
   * @param {function} fn
   *
   * @return {boolean}
   */
  function isClass(fn) {
    return CLASS_PATTERN.test(fn.toString());
  }

  /**
   * @param {any} obj
   *
   * @return {boolean}
   */
  function isArray$2(obj) {
    return Array.isArray(obj);
  }

  /**
   * @param {any} obj
   * @param {string} prop
   *
   * @return {boolean}
   */
  function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /**
   * @typedef {import('./index').InjectAnnotated } InjectAnnotated
   */

  /**
   * @template T
   *
   * @params {[...string[], T] | ...string[], T} args
   *
   * @return {T & InjectAnnotated}
   */
  function annotate(...args) {
    if (args.length === 1 && isArray$2(args[0])) {
      args = args[0];
    }
    args = [...args];
    const fn = args.pop();
    fn.$inject = args;
    return fn;
  }

  // Current limitations:
  // - can't put into "function arg" comments
  // function /* (no parenthesis like this) */ (){}
  // function abc( /* xx (no parenthesis like this) */ a, b) {}
  //
  // Just put the comment before function or inside:
  // /* (((this is fine))) */ function(a, b) {}
  // function abc(a) { /* (((this is fine))) */}
  //
  // - can't reliably auto-annotate constructor; we'll match the
  // first constructor(...) pattern found which may be the one
  // of a nested class, too.

  const CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
  const FN_ARGS = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
  const FN_ARG = /\/\*([^*]*)\*\//m;

  /**
   * @param {unknown} fn
   *
   * @return {string[]}
   */
  function parseAnnotations(fn) {
    if (typeof fn !== 'function') {
      throw new Error(`Cannot annotate "${fn}". Expected a function!`);
    }
    const match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);

    // may parse class without constructor
    if (!match) {
      return [];
    }
    const args = match[1] || match[2];
    return args && args.split(',').map(arg => {
      const argMatch = arg.match(FN_ARG);
      return (argMatch && argMatch[1] || arg).trim();
    }) || [];
  }

  /**
   * @typedef { import('./index').ModuleDeclaration } ModuleDeclaration
   * @typedef { import('./index').ModuleDefinition } ModuleDefinition
   * @typedef { import('./index').InjectorContext } InjectorContext
   */

  /**
   * Create a new injector with the given modules.
   *
   * @param {ModuleDefinition[]} modules
   * @param {InjectorContext} [parent]
   */
  function Injector(modules, parent) {
    parent = parent || {
      get: function (name, strict) {
        currentlyResolving.push(name);
        if (strict === false) {
          return null;
        } else {
          throw error(`No provider for "${name}"!`);
        }
      }
    };
    const currentlyResolving = [];
    const providers = this._providers = Object.create(parent._providers || null);
    const instances = this._instances = Object.create(null);
    const self = instances.injector = this;
    const error = function (msg) {
      const stack = currentlyResolving.join(' -> ');
      currentlyResolving.length = 0;
      return new Error(stack ? `${msg} (Resolving: ${stack})` : msg);
    };

    /**
     * Return a named service.
     *
     * @param {string} name
     * @param {boolean} [strict=true] if false, resolve missing services to null
     *
     * @return {any}
     */
    function get(name, strict) {
      if (!providers[name] && name.indexOf('.') !== -1) {
        const parts = name.split('.');
        let pivot = get(parts.shift());
        while (parts.length) {
          pivot = pivot[parts.shift()];
        }
        return pivot;
      }
      if (hasOwnProp(instances, name)) {
        return instances[name];
      }
      if (hasOwnProp(providers, name)) {
        if (currentlyResolving.indexOf(name) !== -1) {
          currentlyResolving.push(name);
          throw error('Cannot resolve circular dependency!');
        }
        currentlyResolving.push(name);
        instances[name] = providers[name][0](providers[name][1]);
        currentlyResolving.pop();
        return instances[name];
      }
      return parent.get(name, strict);
    }
    function fnDef(fn, locals) {
      if (typeof locals === 'undefined') {
        locals = {};
      }
      if (typeof fn !== 'function') {
        if (isArray$2(fn)) {
          fn = annotate(fn.slice());
        } else {
          throw error(`Cannot invoke "${fn}". Expected a function!`);
        }
      }
      const inject = fn.$inject || parseAnnotations(fn);
      const dependencies = inject.map(dep => {
        if (hasOwnProp(locals, dep)) {
          return locals[dep];
        } else {
          return get(dep);
        }
      });
      return {
        fn: fn,
        dependencies: dependencies
      };
    }
    function instantiate(Type) {
      const {
        fn,
        dependencies
      } = fnDef(Type);

      // instantiate var args constructor
      const Constructor = Function.prototype.bind.apply(fn, [null].concat(dependencies));
      return new Constructor();
    }
    function invoke(func, context, locals) {
      const {
        fn,
        dependencies
      } = fnDef(func, locals);
      return fn.apply(context, dependencies);
    }

    /**
     * @param {Injector} childInjector
     *
     * @return {Function}
     */
    function createPrivateInjectorFactory(childInjector) {
      return annotate(key => childInjector.get(key));
    }

    /**
     * @param {ModuleDefinition[]} modules
     * @param {string[]} [forceNewInstances]
     *
     * @return {Injector}
     */
    function createChild(modules, forceNewInstances) {
      if (forceNewInstances && forceNewInstances.length) {
        const fromParentModule = Object.create(null);
        const matchedScopes = Object.create(null);
        const privateInjectorsCache = [];
        const privateChildInjectors = [];
        const privateChildFactories = [];
        let provider;
        let cacheIdx;
        let privateChildInjector;
        let privateChildInjectorFactory;
        for (let name in providers) {
          provider = providers[name];
          if (forceNewInstances.indexOf(name) !== -1) {
            if (provider[2] === 'private') {
              cacheIdx = privateInjectorsCache.indexOf(provider[3]);
              if (cacheIdx === -1) {
                privateChildInjector = provider[3].createChild([], forceNewInstances);
                privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
                privateInjectorsCache.push(provider[3]);
                privateChildInjectors.push(privateChildInjector);
                privateChildFactories.push(privateChildInjectorFactory);
                fromParentModule[name] = [privateChildInjectorFactory, name, 'private', privateChildInjector];
              } else {
                fromParentModule[name] = [privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx]];
              }
            } else {
              fromParentModule[name] = [provider[2], provider[1]];
            }
            matchedScopes[name] = true;
          }
          if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {
            /* jshint -W083 */
            forceNewInstances.forEach(scope => {
              if (provider[1].$scope.indexOf(scope) !== -1) {
                fromParentModule[name] = [provider[2], provider[1]];
                matchedScopes[scope] = true;
              }
            });
          }
        }
        forceNewInstances.forEach(scope => {
          if (!matchedScopes[scope]) {
            throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
          }
        });
        modules.unshift(fromParentModule);
      }
      return new Injector(modules, self);
    }
    const factoryMap = {
      factory: invoke,
      type: instantiate,
      value: function (value) {
        return value;
      }
    };

    /**
     * @param {ModuleDefinition} moduleDefinition
     * @param {Injector} injector
     */
    function createInitializer(moduleDefinition, injector) {
      const initializers = moduleDefinition.__init__ || [];
      return function () {
        initializers.forEach(initializer => {
          // eagerly resolve component (fn or string)
          if (typeof initializer === 'string') {
            injector.get(initializer);
          } else {
            injector.invoke(initializer);
          }
        });
      };
    }

    /**
     * @param {ModuleDefinition} moduleDefinition
     */
    function loadModule(moduleDefinition) {
      const moduleExports = moduleDefinition.__exports__;

      // private module
      if (moduleExports) {
        const nestedModules = moduleDefinition.__modules__;
        const clonedModule = Object.keys(moduleDefinition).reduce((clonedModule, key) => {
          if (key !== '__exports__' && key !== '__modules__' && key !== '__init__' && key !== '__depends__') {
            clonedModule[key] = moduleDefinition[key];
          }
          return clonedModule;
        }, Object.create(null));
        const childModules = (nestedModules || []).concat(clonedModule);
        const privateInjector = createChild(childModules);
        const getFromPrivateInjector = annotate(function (key) {
          return privateInjector.get(key);
        });
        moduleExports.forEach(function (key) {
          providers[key] = [getFromPrivateInjector, key, 'private', privateInjector];
        });

        // ensure child injector initializes
        const initializers = (moduleDefinition.__init__ || []).slice();
        initializers.unshift(function () {
          privateInjector.init();
        });
        moduleDefinition = Object.assign({}, moduleDefinition, {
          __init__: initializers
        });
        return createInitializer(moduleDefinition, privateInjector);
      }

      // normal module
      Object.keys(moduleDefinition).forEach(function (key) {
        if (key === '__init__' || key === '__depends__') {
          return;
        }
        if (moduleDefinition[key][2] === 'private') {
          providers[key] = moduleDefinition[key];
          return;
        }
        const type = moduleDefinition[key][0];
        const value = moduleDefinition[key][1];
        providers[key] = [factoryMap[type], arrayUnwrap(type, value), type];
      });
      return createInitializer(moduleDefinition, self);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     * @param {ModuleDefinition} moduleDefinition
     *
     * @return {ModuleDefinition[]}
     */
    function resolveDependencies(moduleDefinitions, moduleDefinition) {
      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }
      moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);
      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }
      return moduleDefinitions.concat(moduleDefinition);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     *
     * @return { () => void } initializerFn
     */
    function bootstrap(moduleDefinitions) {
      const initializers = moduleDefinitions.reduce(resolveDependencies, []).map(loadModule);
      let initialized = false;
      return function () {
        if (initialized) {
          return;
        }
        initialized = true;
        initializers.forEach(initializer => initializer());
      };
    }

    // public API
    this.get = get;
    this.invoke = invoke;
    this.instantiate = instantiate;
    this.createChild = createChild;

    // setup
    this.init = bootstrap(modules);
  }

  // helpers ///////////////

  function arrayUnwrap(type, value) {
    if (type !== 'value' && isArray$2(value)) {
      value = annotate(value.slice());
    }
    return value;
  }

  var DEFAULT_RENDER_PRIORITY$1 = 1000;

  /**
   * The base implementation of shape and connection renderers.
   *
   * @param {EventBus} eventBus
   * @param {number} [renderPriority=1000]
   */
  function BaseRenderer(eventBus, renderPriority) {
    var self = this;
    renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY$1;
    eventBus.on(['render.shape', 'render.connection'], renderPriority, function (evt, context) {
      var type = evt.type,
        element = context.element,
        visuals = context.gfx,
        attrs = context.attrs;
      if (self.canRender(element)) {
        if (type === 'render.shape') {
          return self.drawShape(visuals, element, attrs);
        } else {
          return self.drawConnection(visuals, element, attrs);
        }
      }
    });
    eventBus.on(['render.getShapePath', 'render.getConnectionPath'], renderPriority, function (evt, element) {
      if (self.canRender(element)) {
        if (evt.type === 'render.getShapePath') {
          return self.getShapePath(element);
        } else {
          return self.getConnectionPath(element);
        }
      }
    });
  }

  /**
   * Should check whether *this* renderer can render
   * the element/connection.
   *
   * @param {element} element
   *
   * @returns {boolean}
   */
  BaseRenderer.prototype.canRender = function () {};

  /**
   * Provides the shape's snap svg element to be drawn on the `canvas`.
   *
   * @param {djs.Graphics} visuals
   * @param {Shape} shape
   *
   * @returns {Snap.svg} [returns a Snap.svg paper element ]
   */
  BaseRenderer.prototype.drawShape = function () {};

  /**
   * Provides the shape's snap svg element to be drawn on the `canvas`.
   *
   * @param {djs.Graphics} visuals
   * @param {Connection} connection
   *
   * @returns {Snap.svg} [returns a Snap.svg paper element ]
   */
  BaseRenderer.prototype.drawConnection = function () {};

  /**
   * Gets the SVG path of a shape that represents it's visual bounds.
   *
   * @param {Shape} shape
   *
   * @return {string} svg path
   */
  BaseRenderer.prototype.getShapePath = function () {};

  /**
   * Gets the SVG path of a connection that represents it's visual bounds.
   *
   * @param {Connection} connection
   *
   * @return {string} svg path
   */
  BaseRenderer.prototype.getConnectionPath = function () {};

  function ensureImported(element, target) {
    if (element.ownerDocument !== target.ownerDocument) {
      try {
        // may fail on webkit
        return target.ownerDocument.importNode(element, true);
      } catch (e) {

        // ignore
      }
    }
    return element;
  }

  /**
   * appendTo utility
   */

  /**
   * Append a node to a target element and return the appended node.
   *
   * @param  {SVGElement} element
   * @param  {SVGElement} target
   *
   * @return {SVGElement} the appended node
   */
  function appendTo(element, target) {
    return target.appendChild(ensureImported(element, target));
  }

  /**
   * append utility
   */

  /**
   * Append a node to an element
   *
   * @param  {SVGElement} element
   * @param  {SVGElement} node
   *
   * @return {SVGElement} the element
   */
  function append(target, node) {
    appendTo(node, target);
    return target;
  }

  /**
   * attribute accessor utility
   */

  var LENGTH_ATTR = 2;
  var CSS_PROPERTIES = {
    'alignment-baseline': 1,
    'baseline-shift': 1,
    'clip': 1,
    'clip-path': 1,
    'clip-rule': 1,
    'color': 1,
    'color-interpolation': 1,
    'color-interpolation-filters': 1,
    'color-profile': 1,
    'color-rendering': 1,
    'cursor': 1,
    'direction': 1,
    'display': 1,
    'dominant-baseline': 1,
    'enable-background': 1,
    'fill': 1,
    'fill-opacity': 1,
    'fill-rule': 1,
    'filter': 1,
    'flood-color': 1,
    'flood-opacity': 1,
    'font': 1,
    'font-family': 1,
    'font-size': LENGTH_ATTR,
    'font-size-adjust': 1,
    'font-stretch': 1,
    'font-style': 1,
    'font-variant': 1,
    'font-weight': 1,
    'glyph-orientation-horizontal': 1,
    'glyph-orientation-vertical': 1,
    'image-rendering': 1,
    'kerning': 1,
    'letter-spacing': 1,
    'lighting-color': 1,
    'marker': 1,
    'marker-end': 1,
    'marker-mid': 1,
    'marker-start': 1,
    'mask': 1,
    'opacity': 1,
    'overflow': 1,
    'pointer-events': 1,
    'shape-rendering': 1,
    'stop-color': 1,
    'stop-opacity': 1,
    'stroke': 1,
    'stroke-dasharray': 1,
    'stroke-dashoffset': 1,
    'stroke-linecap': 1,
    'stroke-linejoin': 1,
    'stroke-miterlimit': 1,
    'stroke-opacity': 1,
    'stroke-width': LENGTH_ATTR,
    'text-anchor': 1,
    'text-decoration': 1,
    'text-rendering': 1,
    'unicode-bidi': 1,
    'visibility': 1,
    'word-spacing': 1,
    'writing-mode': 1
  };
  function getAttribute(node, name) {
    if (CSS_PROPERTIES[name]) {
      return node.style[name];
    } else {
      return node.getAttributeNS(null, name);
    }
  }
  function setAttribute(node, name, value) {
    var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var type = CSS_PROPERTIES[hyphenated];
    if (type) {
      // append pixel unit, unless present
      if (type === LENGTH_ATTR && typeof value === 'number') {
        value = String(value) + 'px';
      }
      node.style[hyphenated] = value;
    } else {
      node.setAttributeNS(null, name, value);
    }
  }
  function setAttributes(node, attrs) {
    var names = Object.keys(attrs),
      i,
      name;
    for (i = 0, name; name = names[i]; i++) {
      setAttribute(node, name, attrs[name]);
    }
  }

  /**
   * Gets or sets raw attributes on a node.
   *
   * @param  {SVGElement} node
   * @param  {Object} [attrs]
   * @param  {String} [name]
   * @param  {String} [value]
   *
   * @return {String}
   */
  function attr(node, name, value) {
    if (typeof name === 'string') {
      if (value !== undefined) {
        setAttribute(node, name, value);
      } else {
        return getAttribute(node, name);
      }
    } else {
      setAttributes(node, name);
    }
    return node;
  }

  /**
   * Taken from https://github.com/component/classes
   *
   * Without the component bits.
   */

  /**
   * toString reference.
   */

  const toString = Object.prototype.toString;

  /**
    * Wrap `el` in a `ClassList`.
    *
    * @param {Element} el
    * @return {ClassList}
    * @api public
    */

  function classes(el) {
    return new ClassList(el);
  }
  function ClassList(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
    * Add class `name` if not already present.
    *
    * @param {String} name
    * @return {ClassList}
    * @api public
    */

  ClassList.prototype.add = function (name) {
    this.list.add(name);
    return this;
  };

  /**
    * Remove class `name` when present, or
    * pass a regular expression to remove
    * any which match.
    *
    * @param {String|RegExp} name
    * @return {ClassList}
    * @api public
    */

  ClassList.prototype.remove = function (name) {
    if ('[object RegExp]' == toString.call(name)) {
      return this.removeMatching(name);
    }
    this.list.remove(name);
    return this;
  };

  /**
    * Remove all classes matching `re`.
    *
    * @param {RegExp} re
    * @return {ClassList}
    * @api private
    */

  ClassList.prototype.removeMatching = function (re) {
    const arr = this.array();
    for (let i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
    * Toggle class `name`, can force state via `force`.
    *
    * For browsers that support classList, but do not support `force` yet,
    * the mistake will be detected and corrected.
    *
    * @param {String} name
    * @param {Boolean} force
    * @return {ClassList}
    * @api public
    */

  ClassList.prototype.toggle = function (name, force) {
    if ('undefined' !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  };

  /**
    * Return an array of classes.
    *
    * @return {Array}
    * @api public
    */

  ClassList.prototype.array = function () {
    return Array.from(this.list);
  };

  /**
    * Check if class `name` is present.
    *
    * @param {String} name
    * @return {ClassList}
    * @api public
    */

  ClassList.prototype.has = ClassList.prototype.contains = function (name) {
    return this.list.contains(name);
  };
  function remove$2(element) {
    var parent = element.parentNode;
    if (parent) {
      parent.removeChild(element);
    }
    return element;
  }

  /**
   * Clear utility
   */

  /**
   * Removes all children from the given element
   *
   * @param  {DOMElement} element
   * @return {DOMElement} the element (for chaining)
   */
  function clear(element) {
    var child;
    while (child = element.firstChild) {
      remove$2(child);
    }
    return element;
  }
  function clone$1(element) {
    return element.cloneNode(true);
  }
  var ns = {
    svg: 'http://www.w3.org/2000/svg'
  };

  /**
   * DOM parsing utility
   */

  var SVG_START = '<svg xmlns="' + ns.svg + '"';
  function parse(svg) {
    var unwrap = false;

    // ensure we import a valid svg document
    if (svg.substring(0, 4) === '<svg') {
      if (svg.indexOf(ns.svg) === -1) {
        svg = SVG_START + svg.substring(4);
      }
    } else {
      // namespace svg
      svg = SVG_START + '>' + svg + '</svg>';
      unwrap = true;
    }
    var parsed = parseDocument(svg);
    if (!unwrap) {
      return parsed;
    }
    var fragment = document.createDocumentFragment();
    var parent = parsed.firstChild;
    while (parent.firstChild) {
      fragment.appendChild(parent.firstChild);
    }
    return fragment;
  }
  function parseDocument(svg) {
    var parser;

    // parse
    parser = new DOMParser();
    parser.async = false;
    return parser.parseFromString(svg, 'text/xml');
  }

  /**
   * Create utility for SVG elements
   */

  /**
   * Create a specific type from name or SVG markup.
   *
   * @param {String} name the name or markup of the element
   * @param {Object} [attrs] attributes to set on the element
   *
   * @returns {SVGElement}
   */
  function create$2(name, attrs) {
    var element;
    if (name.charAt(0) === '<') {
      element = parse(name).firstChild;
      element = document.importNode(element, true);
    } else {
      element = document.createElementNS(ns.svg, name);
    }
    if (attrs) {
      attr(element, attrs);
    }
    return element;
  }

  /**
   * Geometry helpers
   */

  // fake node used to instantiate svg geometry elements
  var node = null;
  function getNode() {
    if (node === null) {
      node = create$2('svg');
    }
    return node;
  }
  function extend$1(object, props) {
    var i,
      k,
      keys = Object.keys(props);
    for (i = 0; k = keys[i]; i++) {
      object[k] = props[k];
    }
    return object;
  }

  /**
   * Create matrix via args.
   *
   * @example
   *
   * createMatrix({ a: 1, b: 1 });
   * createMatrix();
   * createMatrix(1, 2, 0, 0, 30, 20);
   *
   * @return {SVGMatrix}
   */
  function createMatrix(a, b, c, d, e, f) {
    var matrix = getNode().createSVGMatrix();
    switch (arguments.length) {
      case 0:
        return matrix;
      case 1:
        return extend$1(matrix, a);
      case 6:
        return extend$1(matrix, {
          a: a,
          b: b,
          c: c,
          d: d,
          e: e,
          f: f
        });
    }
  }
  function createTransform(matrix) {
    if (matrix) {
      return getNode().createSVGTransformFromMatrix(matrix);
    } else {
      return getNode().createSVGTransform();
    }
  }

  /**
   * Serialization util
   */

  var TEXT_ENTITIES = /([&<>]{1})/g;
  var ATTR_ENTITIES = /([\n\r"]{1})/g;
  var ENTITY_REPLACEMENT = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '\''
  };
  function escape(str, pattern) {
    function replaceFn(match, entity) {
      return ENTITY_REPLACEMENT[entity] || entity;
    }
    return str.replace(pattern, replaceFn);
  }
  function serialize(node, output) {
    var i, len, attrMap, attrNode, childNodes;
    switch (node.nodeType) {
      // TEXT
      case 3:
        // replace special XML characters
        output.push(escape(node.textContent, TEXT_ENTITIES));
        break;

      // ELEMENT
      case 1:
        output.push('<', node.tagName);
        if (node.hasAttributes()) {
          attrMap = node.attributes;
          for (i = 0, len = attrMap.length; i < len; ++i) {
            attrNode = attrMap.item(i);
            output.push(' ', attrNode.name, '="', escape(attrNode.value, ATTR_ENTITIES), '"');
          }
        }
        if (node.hasChildNodes()) {
          output.push('>');
          childNodes = node.childNodes;
          for (i = 0, len = childNodes.length; i < len; ++i) {
            serialize(childNodes.item(i), output);
          }
          output.push('</', node.tagName, '>');
        } else {
          output.push('/>');
        }
        break;

      // COMMENT
      case 8:
        output.push('<!--', escape(node.nodeValue, TEXT_ENTITIES), '-->');
        break;

      // CDATA
      case 4:
        output.push('<![CDATA[', node.nodeValue, ']]>');
        break;
      default:
        throw new Error('unable to handle node ' + node.nodeType);
    }
    return output;
  }

  /**
   * innerHTML like functionality for SVG elements.
   * based on innerSVG (https://code.google.com/p/innersvg)
   */

  function set$1(element, svg) {
    var parsed = parse(svg);

    // clear element contents
    clear(element);
    if (!svg) {
      return;
    }
    if (!isFragment(parsed)) {
      // extract <svg> from parsed document
      parsed = parsed.documentElement;
    }
    var nodes = slice(parsed.childNodes);

    // import + append each node
    for (var i = 0; i < nodes.length; i++) {
      appendTo(nodes[i], element);
    }
  }
  function get$1(element) {
    var child = element.firstChild,
      output = [];
    while (child) {
      serialize(child, output);
      child = child.nextSibling;
    }
    return output.join('');
  }
  function isFragment(node) {
    return node.nodeName === '#document-fragment';
  }
  function innerSVG(element, svg) {
    if (svg !== undefined) {
      try {
        set$1(element, svg);
      } catch (e) {
        throw new Error('error parsing SVG: ' + e.message);
      }
      return element;
    } else {
      return get$1(element);
    }
  }
  function slice(arr) {
    return Array.prototype.slice.call(arr);
  }

  /**
   * transform accessor utility
   */

  function wrapMatrix(transformList, transform) {
    if (transform instanceof SVGMatrix) {
      return transformList.createSVGTransformFromMatrix(transform);
    }
    return transform;
  }
  function setTransforms(transformList, transforms) {
    var i, t;
    transformList.clear();
    for (i = 0; t = transforms[i]; i++) {
      transformList.appendItem(wrapMatrix(transformList, t));
    }
  }

  /**
   * Get or set the transforms on the given node.
   *
   * @param {SVGElement} node
   * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]
   *
   * @return {SVGTransform} the consolidated transform
   */
  function transform$1(node, transforms) {
    var transformList = node.transform.baseVal;
    if (transforms) {
      if (!Array.isArray(transforms)) {
        transforms = [transforms];
      }
      setTransforms(transformList, transforms);
    }
    return transformList.consolidate();
  }

  function componentsToPath(elements) {
    return elements.join(',').replace(/,?([A-z]),?/g, '$1');
  }
  function toSVGPoints(points) {
    var result = '';
    for (var i = 0, p; p = points[i]; i++) {
      result += p.x + ',' + p.y + ' ';
    }
    return result;
  }
  function createLine(points, attrs) {
    var line = create$2('polyline');
    attr(line, {
      points: toSVGPoints(points)
    });
    if (attrs) {
      attr(line, attrs);
    }
    return line;
  }
  function updateLine(gfx, points) {
    attr(gfx, {
      points: toSVGPoints(points)
    });
    return gfx;
  }

  /**
   * @typedef { {x:number, y: number, width: number, height: number} } Bounds
   */

  /**
   * Get parent elements.
   *
   * @param {Array<djs.model.base>} elements
   *
   * @returns {Array<djs.model.Base>}
   */
  function getParents(elements) {
    // find elements that are not children of any other elements
    return filter$2(elements, function (element) {
      return !find$2(elements, function (e) {
        return e !== element && getParent(element, e);
      });
    });
  }
  function getParent(element, parent) {
    if (!parent) {
      return;
    }
    if (element === parent) {
      return parent;
    }
    if (!element.parent) {
      return;
    }
    return getParent(element.parent, parent);
  }

  /**
   * Adds an element to a collection and returns true if the
   * element was added.
   *
   * @param {Array<Object>} elements
   * @param {Object} e
   * @param {boolean} unique
   */
  function add$2(elements, e, unique) {
    var canAdd = !unique || elements.indexOf(e) === -1;
    if (canAdd) {
      elements.push(e);
    }
    return canAdd;
  }

  /**
   * Iterate over each element in a collection, calling the iterator function `fn`
   * with (element, index, recursionDepth).
   *
   * Recurse into all elements that are returned by `fn`.
   *
   * @param  {Object|Array<Object>} elements
   * @param  {Function} fn iterator function called with (element, index, recursionDepth)
   * @param  {number} [depth] maximum recursion depth
   */
  function eachElement(elements, fn, depth) {
    depth = depth || 0;
    if (!isArray$6(elements)) {
      elements = [elements];
    }
    forEach$3(elements, function (s, i) {
      var filter = fn(s, i, depth);
      if (isArray$6(filter) && filter.length) {
        eachElement(filter, fn, depth + 1);
      }
    });
  }

  /**
   * Collects self + child elements up to a given depth from a list of elements.
   *
   * @param  {djs.model.Base|Array<djs.model.Base>} elements the elements to select the children from
   * @param  {boolean} unique whether to return a unique result set (no duplicates)
   * @param  {number} maxDepth the depth to search through or -1 for infinite
   *
   * @return {Array<djs.model.Base>} found elements
   */
  function selfAndChildren(elements, unique, maxDepth) {
    var result = [],
      processedChildren = [];
    eachElement(elements, function (element, i, depth) {
      add$2(result, element, unique);
      var children = element.children;

      // max traversal depth not reached yet
      if (maxDepth === -1 || depth < maxDepth) {
        // children exist && children not yet processed
        if (children && add$2(processedChildren, children, unique)) {
          return children;
        }
      }
    });
    return result;
  }

  /**
   * Return self + ALL children for a number of elements
   *
   * @param  {Array<djs.model.Base>} elements to query
   * @param  {boolean} allowDuplicates to allow duplicates in the result set
   *
   * @return {Array<djs.model.Base>} the collected elements
   */
  function selfAndAllChildren(elements, allowDuplicates) {
    return selfAndChildren(elements, !allowDuplicates, -1);
  }

  /**
   * Gets the the closure for all selected elements,
   * their enclosed children and connections.
   *
   * @param {Array<djs.model.Base>} elements
   * @param {boolean} [isTopLevel=true]
   * @param {Object} [existingClosure]
   *
   * @return {Object} newClosure
   */
  function getClosure(elements, isTopLevel, closure) {
    if (isUndefined$5(isTopLevel)) {
      isTopLevel = true;
    }
    if (isObject$1(isTopLevel)) {
      closure = isTopLevel;
      isTopLevel = true;
    }
    closure = closure || {};
    var allShapes = copyObject(closure.allShapes),
      allConnections = copyObject(closure.allConnections),
      enclosedElements = copyObject(closure.enclosedElements),
      enclosedConnections = copyObject(closure.enclosedConnections);
    var topLevel = copyObject(closure.topLevel, isTopLevel && groupBy(elements, function (e) {
      return e.id;
    }));
    function handleConnection(c) {
      if (topLevel[c.source.id] && topLevel[c.target.id]) {
        topLevel[c.id] = [c];
      }

      // not enclosed as a child, but maybe logically
      // (connecting two moved elements?)
      if (allShapes[c.source.id] && allShapes[c.target.id]) {
        enclosedConnections[c.id] = enclosedElements[c.id] = c;
      }
      allConnections[c.id] = c;
    }
    function handleElement(element) {
      enclosedElements[element.id] = element;
      if (element.waypoints) {
        // remember connection
        enclosedConnections[element.id] = allConnections[element.id] = element;
      } else {
        // remember shape
        allShapes[element.id] = element;

        // remember all connections
        forEach$3(element.incoming, handleConnection);
        forEach$3(element.outgoing, handleConnection);

        // recurse into children
        return element.children;
      }
    }
    eachElement(elements, handleElement);
    return {
      allShapes: allShapes,
      allConnections: allConnections,
      topLevel: topLevel,
      enclosedConnections: enclosedConnections,
      enclosedElements: enclosedElements
    };
  }

  /**
   * Returns the surrounding bbox for all elements in
   * the array or the element primitive.
   *
   * @param {Array<djs.model.Shape>|djs.model.Shape} elements
   * @param {boolean} [stopRecursion=false]
   *
   * @return {Bounds}
   */
  function getBBox(elements, stopRecursion) {
    stopRecursion = !!stopRecursion;
    if (!isArray$6(elements)) {
      elements = [elements];
    }
    var minX, minY, maxX, maxY;
    forEach$3(elements, function (element) {
      // If element is a connection the bbox must be computed first
      var bbox = element;
      if (element.waypoints && !stopRecursion) {
        bbox = getBBox(element.waypoints, true);
      }
      var x = bbox.x,
        y = bbox.y,
        height = bbox.height || 0,
        width = bbox.width || 0;
      if (x < minX || minX === undefined) {
        minX = x;
      }
      if (y < minY || minY === undefined) {
        minY = y;
      }
      if (x + width > maxX || maxX === undefined) {
        maxX = x + width;
      }
      if (y + height > maxY || maxY === undefined) {
        maxY = y + height;
      }
    });
    return {
      x: minX,
      y: minY,
      height: maxY - minY,
      width: maxX - minX
    };
  }

  /**
   * Returns all elements that are enclosed from the bounding box.
   *
   *   * If bbox.(width|height) is not specified the method returns
   *     all elements with element.x/y > bbox.x/y
   *   * If only bbox.x or bbox.y is specified, method return all elements with
   *     e.x > bbox.x or e.y > bbox.y
   *
   * @param {Array<djs.model.Shape>} elements List of Elements to search through
   * @param {djs.model.Shape} bbox the enclosing bbox.
   *
   * @return {Array<djs.model.Shape>} enclosed elements
   */
  function getEnclosedElements(elements, bbox) {
    var filteredElements = {};
    forEach$3(elements, function (element) {
      var e = element;
      if (e.waypoints) {
        e = getBBox(e);
      }
      if (!isNumber$3(bbox.y) && e.x > bbox.x) {
        filteredElements[element.id] = element;
      }
      if (!isNumber$3(bbox.x) && e.y > bbox.y) {
        filteredElements[element.id] = element;
      }
      if (e.x > bbox.x && e.y > bbox.y) {
        if (isNumber$3(bbox.width) && isNumber$3(bbox.height) && e.width + e.x < bbox.width + bbox.x && e.height + e.y < bbox.height + bbox.y) {
          filteredElements[element.id] = element;
        } else if (!isNumber$3(bbox.width) || !isNumber$3(bbox.height)) {
          filteredElements[element.id] = element;
        }
      }
    });
    return filteredElements;
  }
  function getType$1(element) {
    if ('waypoints' in element) {
      return 'connection';
    }
    if ('x' in element) {
      return 'shape';
    }
    return 'root';
  }
  function isFrameElement(element) {
    return !!(element && element.isFrame);
  }

  // helpers ///////////////////////////////

  function copyObject(src1, src2) {
    return assign$4({}, src1 || {}, src2 || {});
  }

  // apply default renderer with lowest possible priority
  // so that it only kicks in if noone else could render
  var DEFAULT_RENDER_PRIORITY = 1;

  /**
   * The default renderer used for shapes and connections.
   *
   * @param {EventBus} eventBus
   * @param {Styles} styles
   */
  function DefaultRenderer(eventBus, styles) {
    //
    BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY);
    this.CONNECTION_STYLE = styles.style(['no-fill'], {
      strokeWidth: 5,
      stroke: 'fuchsia'
    });
    this.SHAPE_STYLE = styles.style({
      fill: 'white',
      stroke: 'fuchsia',
      strokeWidth: 2
    });
    this.FRAME_STYLE = styles.style(['no-fill'], {
      stroke: 'fuchsia',
      strokeDasharray: 4,
      strokeWidth: 2
    });
  }
  e$3(DefaultRenderer, BaseRenderer);
  DefaultRenderer.prototype.canRender = function () {
    return true;
  };
  DefaultRenderer.prototype.drawShape = function drawShape(visuals, element, attrs) {
    var rect = create$2('rect');
    attr(rect, {
      x: 0,
      y: 0,
      width: element.width || 0,
      height: element.height || 0
    });
    if (isFrameElement(element)) {
      attr(rect, assign$4({}, this.FRAME_STYLE, attrs || {}));
    } else {
      attr(rect, assign$4({}, this.SHAPE_STYLE, attrs || {}));
    }
    append(visuals, rect);
    return rect;
  };
  DefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection, attrs) {
    var line = createLine(connection.waypoints, assign$4({}, this.CONNECTION_STYLE, attrs || {}));
    append(visuals, line);
    return line;
  };
  DefaultRenderer.prototype.getShapePath = function getShapePath(shape) {
    var x = shape.x,
      y = shape.y,
      width = shape.width,
      height = shape.height;
    var shapePath = [['M', x, y], ['l', width, 0], ['l', 0, height], ['l', -width, 0], ['z']];
    return componentsToPath(shapePath);
  };
  DefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {
    var waypoints = connection.waypoints;
    var idx,
      point,
      connectionPath = [];
    for (idx = 0; point = waypoints[idx]; idx++) {
      // take invisible docking into account
      // when creating the path
      point = point.original || point;
      connectionPath.push([idx === 0 ? 'M' : 'L', point.x, point.y]);
    }
    return componentsToPath(connectionPath);
  };
  DefaultRenderer.$inject = ['eventBus', 'styles'];

  /**
   * A component that manages shape styles
   */
  function Styles() {
    var defaultTraits = {
      'no-fill': {
        fill: 'none'
      },
      'no-border': {
        strokeOpacity: 0.0
      },
      'no-events': {
        pointerEvents: 'none'
      }
    };
    var self = this;

    /**
     * Builds a style definition from a className, a list of traits and an object of additional attributes.
     *
     * @param  {string} className
     * @param  {Array<string>} traits
     * @param  {Object} additionalAttrs
     *
     * @return {Object} the style defintion
     */
    this.cls = function (className, traits, additionalAttrs) {
      var attrs = this.style(traits, additionalAttrs);
      return assign$4(attrs, {
        'class': className
      });
    };

    /**
     * Builds a style definition from a list of traits and an object of additional attributes.
     *
     * @param  {Array<string>} traits
     * @param  {Object} additionalAttrs
     *
     * @return {Object} the style defintion
     */
    this.style = function (traits, additionalAttrs) {
      if (!isArray$6(traits) && !additionalAttrs) {
        additionalAttrs = traits;
        traits = [];
      }
      var attrs = reduce(traits, function (attrs, t) {
        return assign$4(attrs, defaultTraits[t] || {});
      }, {});
      return additionalAttrs ? assign$4(attrs, additionalAttrs) : attrs;
    };
    this.computeStyle = function (custom, traits, defaultStyles) {
      if (!isArray$6(traits)) {
        defaultStyles = traits;
        traits = [];
      }
      return self.style(traits || [], assign$4({}, defaultStyles, custom || {}));
    };
  }

  var DrawModule$1 = {
    __init__: ['defaultRenderer'],
    defaultRenderer: ['type', DefaultRenderer],
    styles: ['type', Styles]
  };

  /**
   * Failsafe remove an element from a collection
   *
   * @param  {Array<Object>} [collection]
   * @param  {Object} [element]
   *
   * @return {number} the previous index of the element
   */
  function remove$1(collection, element) {
    if (!collection || !element) {
      return -1;
    }
    var idx = collection.indexOf(element);
    if (idx !== -1) {
      collection.splice(idx, 1);
    }
    return idx;
  }

  /**
   * Fail save add an element to the given connection, ensuring
   * it does not yet exist.
   *
   * @param {Array<Object>} collection
   * @param {Object} element
   * @param {number} idx
   */
  function add$1(collection, element, idx) {
    if (!collection || !element) {
      return;
    }
    if (typeof idx !== 'number') {
      idx = -1;
    }
    var currentIdx = collection.indexOf(element);
    if (currentIdx !== -1) {
      if (currentIdx === idx) {
        // nothing to do, position has not changed
        return;
      } else {
        if (idx !== -1) {
          // remove from current position
          collection.splice(currentIdx, 1);
        } else {
          // already exists in collection
          return;
        }
      }
    }
    if (idx !== -1) {
      // insert at specified position
      collection.splice(idx, 0, element);
    } else {
      // push to end
      collection.push(element);
    }
  }

  /**
   * Fail save get the index of an element in a collection.
   *
   * @param {Array<Object>} collection
   * @param {Object} element
   *
   * @return {number} the index or -1 if collection or element do
   *                  not exist or the element is not contained.
   */
  function indexOf(collection, element) {
    if (!collection || !element) {
      return -1;
    }
    return collection.indexOf(element);
  }

  /**
   * Computes the distance between two points
   *
   * @param  {Point}  p
   * @param  {Point}  q
   *
   * @return {number}  distance
   */
  function pointDistance(a, b) {
    if (!a || !b) {
      return -1;
    }
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
  }

  /**
   * Returns true if the point r is on the line between p and q
   *
   * @param  {Point}  p
   * @param  {Point}  q
   * @param  {Point}  r
   * @param  {number} [accuracy=5] accuracy for points on line check (lower is better)
   *
   * @return {boolean}
   */
  function pointsOnLine(p, q, r, accuracy) {
    if (typeof accuracy === 'undefined') {
      accuracy = 5;
    }
    if (!p || !q || !r) {
      return false;
    }
    var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),
      dist = pointDistance(p, q);

    // @see http://stackoverflow.com/a/907491/412190
    return Math.abs(val / dist) <= accuracy;
  }
  var ALIGNED_THRESHOLD = 2;

  /**
   * Check whether two points are horizontally or vertically aligned.
   *
   * @param {Array<Point>|Point}
   * @param {Point}
   *
   * @return {string|boolean}
   */
  function pointsAligned(a, b) {
    var points;
    if (isArray$6(a)) {
      points = a;
    } else {
      points = [a, b];
    }
    if (pointsAlignedHorizontally(points)) {
      return 'h';
    }
    if (pointsAlignedVertically(points)) {
      return 'v';
    }
    return false;
  }
  function pointsAlignedHorizontally(a, b) {
    var points;
    if (isArray$6(a)) {
      points = a;
    } else {
      points = [a, b];
    }
    var firstPoint = points.slice().shift();
    return every(points, function (point) {
      return Math.abs(firstPoint.y - point.y) <= ALIGNED_THRESHOLD;
    });
  }
  function pointsAlignedVertically(a, b) {
    var points;
    if (isArray$6(a)) {
      points = a;
    } else {
      points = [a, b];
    }
    var firstPoint = points.slice().shift();
    return every(points, function (point) {
      return Math.abs(firstPoint.x - point.x) <= ALIGNED_THRESHOLD;
    });
  }

  /**
   * Returns a point in the middle of points p and q
   *
   * @param  {Point}  p
   * @param  {Point}  q
   *
   * @return {Point} middle point
   */
  function getMidPoint(p, q) {
    return {
      x: Math.round(p.x + (q.x - p.x) / 2.0),
      y: Math.round(p.y + (q.y - p.y) / 2.0)
    };
  }

  /**
   * This file contains source code adapted from Snap.svg (licensed Apache-2.0).
   *
   * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js
   */

  /* eslint no-fallthrough: "off" */
  var p2s = /,?([a-z]),?/gi,
    toFloat = parseFloat,
    math = Math,
    PI = math.PI,
    mmin = math.min,
    mmax = math.max,
    pow = math.pow,
    abs$2 = math.abs,
    pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/ig,
    pathValues = /(-?\d*\.?\d*(?:e[-+]?\d+)?)[\s]*,?[\s]*/ig;
  var isArray$1 = Array.isArray || function (o) {
    return o instanceof Array;
  };
  function hasProperty(obj, property) {
    return Object.prototype.hasOwnProperty.call(obj, property);
  }
  function clone(obj) {
    if (typeof obj == 'function' || Object(obj) !== obj) {
      return obj;
    }
    var res = new obj.constructor();
    for (var key in obj) {
      if (hasProperty(obj, key)) {
        res[key] = clone(obj[key]);
      }
    }
    return res;
  }
  function repush(array, item) {
    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {
      return array.push(array.splice(i, 1)[0]);
    }
  }
  function cacher(f) {
    function newf() {
      var arg = Array.prototype.slice.call(arguments, 0),
        args = arg.join('\u2400'),
        cache = newf.cache = newf.cache || {},
        count = newf.count = newf.count || [];
      if (hasProperty(cache, args)) {
        repush(count, args);
        return cache[args];
      }
      count.length >= 1e3 && delete cache[count.shift()];
      count.push(args);
      cache[args] = f.apply(0, arg);
      return cache[args];
    }
    return newf;
  }
  function parsePathString(pathString) {
    if (!pathString) {
      return null;
    }
    var pth = paths(pathString);
    if (pth.arr) {
      return clone(pth.arr);
    }
    var paramCounts = {
        a: 7,
        c: 6,
        h: 1,
        l: 2,
        m: 2,
        q: 4,
        s: 4,
        t: 2,
        v: 1,
        z: 0
      },
      data = [];
    if (isArray$1(pathString) && isArray$1(pathString[0])) {
      // rough assumption
      data = clone(pathString);
    }
    if (!data.length) {
      String(pathString).replace(pathCommand, function (a, b, c) {
        var params = [],
          name = b.toLowerCase();
        c.replace(pathValues, function (a, b) {
          b && params.push(+b);
        });
        if (name == 'm' && params.length > 2) {
          data.push([b].concat(params.splice(0, 2)));
          name = 'l';
          b = b == 'm' ? 'l' : 'L';
        }
        while (params.length >= paramCounts[name]) {
          data.push([b].concat(params.splice(0, paramCounts[name])));
          if (!paramCounts[name]) {
            break;
          }
        }
      });
    }
    data.toString = paths.toString;
    pth.arr = clone(data);
    return data;
  }
  function paths(ps) {
    var p = paths.ps = paths.ps || {};
    if (p[ps]) {
      p[ps].sleep = 100;
    } else {
      p[ps] = {
        sleep: 100
      };
    }
    setTimeout(function () {
      for (var key in p) {
        if (hasProperty(p, key) && key != ps) {
          p[key].sleep--;
          !p[key].sleep && delete p[key];
        }
      }
    });
    return p[ps];
  }
  function rectBBox(x, y, width, height) {
    if (arguments.length === 1) {
      y = x.y;
      width = x.width;
      height = x.height;
      x = x.x;
    }
    return {
      x: x,
      y: y,
      width: width,
      height: height,
      x2: x + width,
      y2: y + height
    };
  }
  function pathToString() {
    return this.join(',').replace(p2s, '$1');
  }
  function pathClone(pathArray) {
    var res = clone(pathArray);
    res.toString = pathToString;
    return res;
  }
  function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
    var t1 = 1 - t,
      t13 = pow(t1, 3),
      t12 = pow(t1, 2),
      t2 = t * t,
      t3 = t2 * t,
      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,
      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
    return {
      x: fixError(x),
      y: fixError(y)
    };
  }
  function bezierBBox(points) {
    var bbox = curveBBox.apply(null, points);
    return rectBBox(bbox.x0, bbox.y0, bbox.x1 - bbox.x0, bbox.y1 - bbox.y0);
  }
  function isPointInsideBBox(bbox, x, y) {
    return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
  }
  function isBBoxIntersect(bbox1, bbox2) {
    bbox1 = rectBBox(bbox1);
    bbox2 = rectBBox(bbox2);
    return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
  }
  function base3(t, p1, p2, p3, p4) {
    var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
    return t * t2 - 3 * p1 + 3 * p2;
  }
  function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
    if (z == null) {
      z = 1;
    }
    z = z > 1 ? 1 : z < 0 ? 0 : z;
    var z2 = z / 2,
      n = 12,
      Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],
      Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],
      sum = 0;
    for (var i = 0; i < n; i++) {
      var ct = z2 * Tvalues[i] + z2,
        xbase = base3(ct, x1, x2, x3, x4),
        ybase = base3(ct, y1, y2, y3, y4),
        comb = xbase * xbase + ybase * ybase;
      sum += Cvalues[i] * math.sqrt(comb);
    }
    return z2 * sum;
  }
  function intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {
    if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {
      return;
    }
    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    if (!denominator) {
      return;
    }
    var px = fixError(nx / denominator),
      py = fixError(ny / denominator),
      px2 = +px.toFixed(2),
      py2 = +py.toFixed(2);
    if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {
      return;
    }
    return {
      x: px,
      y: py
    };
  }
  function fixError(number) {
    return Math.round(number * 100000000000) / 100000000000;
  }
  function findBezierIntersections(bez1, bez2, justCount) {
    var bbox1 = bezierBBox(bez1),
      bbox2 = bezierBBox(bez2);
    if (!isBBoxIntersect(bbox1, bbox2)) {
      return justCount ? 0 : [];
    }

    // As an optimization, lines will have only 1 segment

    var l1 = bezlen.apply(0, bez1),
      l2 = bezlen.apply(0, bez2),
      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,
      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,
      dots1 = [],
      dots2 = [],
      xy = {},
      res = justCount ? 0 : [];
    for (var i = 0; i < n1 + 1; i++) {
      var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));
      dots1.push({
        x: p.x,
        y: p.y,
        t: i / n1
      });
    }
    for (i = 0; i < n2 + 1; i++) {
      p = findDotsAtSegment.apply(0, bez2.concat(i / n2));
      dots2.push({
        x: p.x,
        y: p.y,
        t: i / n2
      });
    }
    for (i = 0; i < n1; i++) {
      for (var j = 0; j < n2; j++) {
        var di = dots1[i],
          di1 = dots1[i + 1],
          dj = dots2[j],
          dj1 = dots2[j + 1],
          ci = abs$2(di1.x - di.x) < .01 ? 'y' : 'x',
          cj = abs$2(dj1.x - dj.x) < .01 ? 'y' : 'x',
          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),
          key;
        if (is) {
          key = is.x.toFixed(9) + '#' + is.y.toFixed(9);
          if (xy[key]) {
            continue;
          }
          xy[key] = true;
          var t1 = di.t + abs$2((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),
            t2 = dj.t + abs$2((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
          if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
            if (justCount) {
              res++;
            } else {
              res.push({
                x: is.x,
                y: is.y,
                t1: t1,
                t2: t2
              });
            }
          }
        }
      }
    }
    return res;
  }

  /**
   * Find or counts the intersections between two SVG paths.
   *
   * Returns a number in counting mode and a list of intersections otherwise.
   *
   * A single intersection entry contains the intersection coordinates (x, y)
   * as well as additional information regarding the intersecting segments
   * on each path (segment1, segment2) and the relative location of the
   * intersection on these segments (t1, t2).
   *
   * The path may be an SVG path string or a list of path components
   * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.
   *
   * @example
   *
   * var intersections = findPathIntersections(
   *   'M0,0L100,100',
   *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]
   * );
   *
   * // intersections = [
   * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }
   * // ]
   *
   * @param {String|Array<PathDef>} path1
   * @param {String|Array<PathDef>} path2
   * @param {Boolean} [justCount=false]
   *
   * @return {Array<Intersection>|Number}
   */
  function findPathIntersections(path1, path2, justCount) {
    path1 = pathToCurve(path1);
    path2 = pathToCurve(path2);
    var x1,
      y1,
      x2,
      y2,
      x1m,
      y1m,
      x2m,
      y2m,
      bez1,
      bez2,
      res = justCount ? 0 : [];
    for (var i = 0, ii = path1.length; i < ii; i++) {
      var pi = path1[i];
      if (pi[0] == 'M') {
        x1 = x1m = pi[1];
        y1 = y1m = pi[2];
      } else {
        if (pi[0] == 'C') {
          bez1 = [x1, y1].concat(pi.slice(1));
          x1 = bez1[6];
          y1 = bez1[7];
        } else {
          bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
          x1 = x1m;
          y1 = y1m;
        }
        for (var j = 0, jj = path2.length; j < jj; j++) {
          var pj = path2[j];
          if (pj[0] == 'M') {
            x2 = x2m = pj[1];
            y2 = y2m = pj[2];
          } else {
            if (pj[0] == 'C') {
              bez2 = [x2, y2].concat(pj.slice(1));
              x2 = bez2[6];
              y2 = bez2[7];
            } else {
              bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
              x2 = x2m;
              y2 = y2m;
            }
            var intr = findBezierIntersections(bez1, bez2, justCount);
            if (justCount) {
              res += intr;
            } else {
              for (var k = 0, kk = intr.length; k < kk; k++) {
                intr[k].segment1 = i;
                intr[k].segment2 = j;
                intr[k].bez1 = bez1;
                intr[k].bez2 = bez2;
              }
              res = res.concat(intr);
            }
          }
        }
      }
    }
    return res;
  }
  function pathToAbsolute(pathArray) {
    var pth = paths(pathArray);
    if (pth.abs) {
      return pathClone(pth.abs);
    }
    if (!isArray$1(pathArray) || !isArray$1(pathArray && pathArray[0])) {
      // rough assumption
      pathArray = parsePathString(pathArray);
    }
    if (!pathArray || !pathArray.length) {
      return [['M', 0, 0]];
    }
    var res = [],
      x = 0,
      y = 0,
      mx = 0,
      my = 0,
      start = 0,
      pa0;
    if (pathArray[0][0] == 'M') {
      x = +pathArray[0][1];
      y = +pathArray[0][2];
      mx = x;
      my = y;
      start++;
      res[0] = ['M', x, y];
    }
    for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
      res.push(r = []);
      pa = pathArray[i];
      pa0 = pa[0];
      if (pa0 != pa0.toUpperCase()) {
        r[0] = pa0.toUpperCase();
        switch (r[0]) {
          case 'A':
            r[1] = pa[1];
            r[2] = pa[2];
            r[3] = pa[3];
            r[4] = pa[4];
            r[5] = pa[5];
            r[6] = +pa[6] + x;
            r[7] = +pa[7] + y;
            break;
          case 'V':
            r[1] = +pa[1] + y;
            break;
          case 'H':
            r[1] = +pa[1] + x;
            break;
          case 'M':
            mx = +pa[1] + x;
            my = +pa[2] + y;
          default:
            for (var j = 1, jj = pa.length; j < jj; j++) {
              r[j] = +pa[j] + (j % 2 ? x : y);
            }
        }
      } else {
        for (var k = 0, kk = pa.length; k < kk; k++) {
          r[k] = pa[k];
        }
      }
      pa0 = pa0.toUpperCase();
      switch (r[0]) {
        case 'Z':
          x = +mx;
          y = +my;
          break;
        case 'H':
          x = r[1];
          break;
        case 'V':
          y = r[1];
          break;
        case 'M':
          mx = r[r.length - 2];
          my = r[r.length - 1];
        default:
          x = r[r.length - 2];
          y = r[r.length - 1];
      }
    }
    res.toString = pathToString;
    pth.abs = pathClone(res);
    return res;
  }
  function isLine(bez) {
    return bez[0] === bez[2] && bez[1] === bez[3] && bez[4] === bez[6] && bez[5] === bez[7];
  }
  function lineToCurve(x1, y1, x2, y2) {
    return [x1, y1, x2, y2, x2, y2];
  }
  function qubicToCurve(x1, y1, ax, ay, x2, y2) {
    var _13 = 1 / 3,
      _23 = 2 / 3;
    return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
  }
  function arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
    // for more information of where this math came from visit:
    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
    var _120 = PI * 120 / 180,
      rad = PI / 180 * (+angle || 0),
      res = [],
      xy,
      rotate = cacher(function (x, y, rad) {
        var X = x * math.cos(rad) - y * math.sin(rad),
          Y = x * math.sin(rad) + y * math.cos(rad);
        return {
          x: X,
          y: Y
        };
      });
    if (!recursive) {
      xy = rotate(x1, y1, -rad);
      x1 = xy.x;
      y1 = xy.y;
      xy = rotate(x2, y2, -rad);
      x2 = xy.x;
      y2 = xy.y;
      var x = (x1 - x2) / 2,
        y = (y1 - y2) / 2;
      var h = x * x / (rx * rx) + y * y / (ry * ry);
      if (h > 1) {
        h = math.sqrt(h);
        rx = h * rx;
        ry = h * ry;
      }
      var rx2 = rx * rx,
        ry2 = ry * ry,
        k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs$2((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
        cx = k * rx * y / ry + (x1 + x2) / 2,
        cy = k * -ry * x / rx + (y1 + y2) / 2,
        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),
        f2 = math.asin(((y2 - cy) / ry).toFixed(9));
      f1 = x1 < cx ? PI - f1 : f1;
      f2 = x2 < cx ? PI - f2 : f2;
      f1 < 0 && (f1 = PI * 2 + f1);
      f2 < 0 && (f2 = PI * 2 + f2);
      if (sweep_flag && f1 > f2) {
        f1 = f1 - PI * 2;
      }
      if (!sweep_flag && f2 > f1) {
        f2 = f2 - PI * 2;
      }
    } else {
      f1 = recursive[0];
      f2 = recursive[1];
      cx = recursive[2];
      cy = recursive[3];
    }
    var df = f2 - f1;
    if (abs$2(df) > _120) {
      var f2old = f2,
        x2old = x2,
        y2old = y2;
      f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
      x2 = cx + rx * math.cos(f2);
      y2 = cy + ry * math.sin(f2);
      res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
    }
    df = f2 - f1;
    var c1 = math.cos(f1),
      s1 = math.sin(f1),
      c2 = math.cos(f2),
      s2 = math.sin(f2),
      t = math.tan(df / 4),
      hx = 4 / 3 * rx * t,
      hy = 4 / 3 * ry * t,
      m1 = [x1, y1],
      m2 = [x1 + hx * s1, y1 - hy * c1],
      m3 = [x2 + hx * s2, y2 - hy * c2],
      m4 = [x2, y2];
    m2[0] = 2 * m1[0] - m2[0];
    m2[1] = 2 * m1[1] - m2[1];
    if (recursive) {
      return [m2, m3, m4].concat(res);
    } else {
      res = [m2, m3, m4].concat(res).join().split(',');
      var newres = [];
      for (var i = 0, ii = res.length; i < ii; i++) {
        newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
      }
      return newres;
    }
  }

  // Returns bounding box of cubic bezier curve.
  // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
  // Original version: NISHIO Hirokazu
  // Modifications: https://github.com/timo22345
  function curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {
    var tvalues = [],
      bounds = [[], []],
      a,
      b,
      c,
      t,
      t1,
      t2,
      b2ac,
      sqrtb2ac;
    for (var i = 0; i < 2; ++i) {
      if (i == 0) {
        b = 6 * x0 - 12 * x1 + 6 * x2;
        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
        c = 3 * x1 - 3 * x0;
      } else {
        b = 6 * y0 - 12 * y1 + 6 * y2;
        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
        c = 3 * y1 - 3 * y0;
      }
      if (abs$2(a) < 1e-12) {
        if (abs$2(b) < 1e-12) {
          continue;
        }
        t = -c / b;
        if (0 < t && t < 1) {
          tvalues.push(t);
        }
        continue;
      }
      b2ac = b * b - 4 * c * a;
      sqrtb2ac = math.sqrt(b2ac);
      if (b2ac < 0) {
        continue;
      }
      t1 = (-b + sqrtb2ac) / (2 * a);
      if (0 < t1 && t1 < 1) {
        tvalues.push(t1);
      }
      t2 = (-b - sqrtb2ac) / (2 * a);
      if (0 < t2 && t2 < 1) {
        tvalues.push(t2);
      }
    }
    var j = tvalues.length,
      jlen = j,
      mt;
    while (j--) {
      t = tvalues[j];
      mt = 1 - t;
      bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
      bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
    }
    bounds[0][jlen] = x0;
    bounds[1][jlen] = y0;
    bounds[0][jlen + 1] = x3;
    bounds[1][jlen + 1] = y3;
    bounds[0].length = bounds[1].length = jlen + 2;
    return {
      x0: mmin.apply(0, bounds[0]),
      y0: mmin.apply(0, bounds[1]),
      x1: mmax.apply(0, bounds[0]),
      y1: mmax.apply(0, bounds[1])
    };
  }
  function pathToCurve(path) {
    var pth = paths(path);

    // return cached curve, if existing
    if (pth.curve) {
      return pathClone(pth.curve);
    }
    var curvedPath = pathToAbsolute(path),
      attrs = {
        x: 0,
        y: 0,
        bx: 0,
        by: 0,
        X: 0,
        Y: 0,
        qx: null,
        qy: null
      },
      processPath = function (path, d, pathCommand) {
        var nx, ny;
        if (!path) {
          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
        }
        !(path[0] in {
          T: 1,
          Q: 1
        }) && (d.qx = d.qy = null);
        switch (path[0]) {
          case 'M':
            d.X = path[1];
            d.Y = path[2];
            break;
          case 'A':
            path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));
            break;
          case 'S':
            if (pathCommand == 'C' || pathCommand == 'S') {
              // In 'S' case we have to take into account, if the previous command is C/S.
              nx = d.x * 2 - d.bx;

              // And reflect the previous
              ny = d.y * 2 - d.by;

              // command's control point relative to the current point.
            } else {
              // or some else or nothing
              nx = d.x;
              ny = d.y;
            }
            path = ['C', nx, ny].concat(path.slice(1));
            break;
          case 'T':
            if (pathCommand == 'Q' || pathCommand == 'T') {
              // In 'T' case we have to take into account, if the previous command is Q/T.
              d.qx = d.x * 2 - d.qx;

              // And make a reflection similar
              d.qy = d.y * 2 - d.qy;

              // to case 'S'.
            } else {
              // or something else or nothing
              d.qx = d.x;
              d.qy = d.y;
            }
            path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));
            break;
          case 'Q':
            d.qx = path[1];
            d.qy = path[2];
            path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));
            break;
          case 'L':
            path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));
            break;
          case 'H':
            path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));
            break;
          case 'V':
            path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));
            break;
          case 'Z':
            path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));
            break;
        }
        return path;
      },
      fixArc = function (pp, i) {
        if (pp[i].length > 7) {
          pp[i].shift();
          var pi = pp[i];
          while (pi.length) {
            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved
            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
          }
          pp.splice(i, 1);
          ii = curvedPath.length;
        }
      },
      pathCommands = [],
      // path commands of original path p
      pfirst = '',
      // temporary holder for original path command
      pathCommand = ''; // holder for previous path command of original path

    for (var i = 0, ii = curvedPath.length; i < ii; i++) {
      curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command

      if (pfirst != 'C')
        // C is not saved yet, because it may be result of conversion
        {
          pathCommands[i] = pfirst; // Save current path command
          i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand
        }

      curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath

      if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command
      // which may produce multiple C:s
      // so we have to make sure that C is also C in original path

      fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands

      var seg = curvedPath[i],
        seglen = seg.length;
      attrs.x = seg[seglen - 2];
      attrs.y = seg[seglen - 1];
      attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
      attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
    }

    // cache curve
    pth.curve = pathClone(curvedPath);
    return curvedPath;
  }
  var intersect = findPathIntersections;

  var intersectPaths = intersect;

  function roundBounds(bounds) {
    return {
      x: Math.round(bounds.x),
      y: Math.round(bounds.y),
      width: Math.round(bounds.width),
      height: Math.round(bounds.height)
    };
  }
  function roundPoint(point) {
    return {
      x: Math.round(point.x),
      y: Math.round(point.y)
    };
  }

  /**
   * Convert the given bounds to a { top, left, bottom, right } descriptor.
   *
   * @param {Bounds|Point} bounds
   *
   * @return {Object}
   */
  function asTRBL(bounds) {
    return {
      top: bounds.y,
      right: bounds.x + (bounds.width || 0),
      bottom: bounds.y + (bounds.height || 0),
      left: bounds.x
    };
  }

  /**
   * Convert a { top, left, bottom, right } to an objects bounds.
   *
   * @param {Object} trbl
   *
   * @return {Bounds}
   */
  function asBounds(trbl) {
    return {
      x: trbl.left,
      y: trbl.top,
      width: trbl.right - trbl.left,
      height: trbl.bottom - trbl.top
    };
  }

  /**
   * Get the mid of the given bounds or point.
   *
   * @param {Bounds|Point} bounds
   *
   * @return {Point}
   */
  function getBoundsMid(bounds) {
    return roundPoint({
      x: bounds.x + (bounds.width || 0) / 2,
      y: bounds.y + (bounds.height || 0) / 2
    });
  }

  /**
   * Get the mid of the given Connection.
   *
   * @param {djs.Base.Connection} connection
   *
   * @return {Point}
   */
  function getConnectionMid(connection) {
    var waypoints = connection.waypoints;

    // calculate total length and length of each segment
    var parts = waypoints.reduce(function (parts, point, index) {
      var lastPoint = waypoints[index - 1];
      if (lastPoint) {
        var lastPart = parts[parts.length - 1];
        var startLength = lastPart && lastPart.endLength || 0;
        var length = distance(lastPoint, point);
        parts.push({
          start: lastPoint,
          end: point,
          startLength: startLength,
          endLength: startLength + length,
          length: length
        });
      }
      return parts;
    }, []);
    var totalLength = parts.reduce(function (length, part) {
      return length + part.length;
    }, 0);

    // find which segement contains middle point
    var midLength = totalLength / 2;
    var i = 0;
    var midSegment = parts[i];
    while (midSegment.endLength < midLength) {
      midSegment = parts[++i];
    }

    // calculate relative position on mid segment
    var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;
    var midPoint = {
      x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,
      y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress
    };
    return midPoint;
  }

  /**
   * Get the mid of the given Element.
   *
   * @param {djs.Base.Connection} connection
   *
   * @return {Point}
   */
  function getMid(element) {
    if (isConnection$8(element)) {
      return getConnectionMid(element);
    }
    return getBoundsMid(element);
  }

  // orientation utils //////////////////////

  /**
   * Get orientation of the given rectangle with respect to
   * the reference rectangle.
   *
   * A padding (positive or negative) may be passed to influence
   * horizontal / vertical orientation and intersection.
   *
   * @param {Bounds} rect
   * @param {Bounds} reference
   * @param {Point|number} padding
   *
   * @return {string} the orientation; one of top, top-left, left, ..., bottom, right or intersect.
   */
  function getOrientation(rect, reference, padding) {
    padding = padding || 0;

    // make sure we can use an object, too
    // for individual { x, y } padding
    if (!isObject$1(padding)) {
      padding = {
        x: padding,
        y: padding
      };
    }
    var rectOrientation = asTRBL(rect),
      referenceOrientation = asTRBL(reference);
    var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,
      right = rectOrientation.left - padding.x >= referenceOrientation.right,
      bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,
      left = rectOrientation.right + padding.x <= referenceOrientation.left;
    var vertical = top ? 'top' : bottom ? 'bottom' : null,
      horizontal = left ? 'left' : right ? 'right' : null;
    if (horizontal && vertical) {
      return vertical + '-' + horizontal;
    } else {
      return horizontal || vertical || 'intersect';
    }
  }

  // intersection utils //////////////////////

  /**
   * Get intersection between an element and a line path.
   *
   * @param {PathDef} elementPath
   * @param {PathDef} linePath
   * @param {boolean} cropStart crop from start or end
   *
   * @return {Point}
   */
  function getElementLineIntersection(elementPath, linePath, cropStart) {
    var intersections = getIntersections(elementPath, linePath);

    // recognize intersections
    // only one -> choose
    // two close together -> choose first
    // two or more distinct -> pull out appropriate one
    // none -> ok (fallback to point itself)
    if (intersections.length === 1) {
      return roundPoint(intersections[0]);
    } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {
      return roundPoint(intersections[0]);
    } else if (intersections.length > 1) {
      // sort by intersections based on connection segment +
      // distance from start
      intersections = sortBy(intersections, function (i) {
        var distance = Math.floor(i.t2 * 100) || 1;
        distance = 100 - distance;
        distance = (distance < 10 ? '0' : '') + distance;

        // create a sort string that makes sure we sort
        // line segment ASC + line segment position DESC (for cropStart)
        // line segment ASC + line segment position ASC (for cropEnd)
        return i.segment2 + '#' + distance;
      });
      return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);
    }
    return null;
  }
  function getIntersections(a, b) {
    return intersectPaths(a, b);
  }
  function filterRedundantWaypoints(waypoints) {
    // alter copy of waypoints, not original
    waypoints = waypoints.slice();
    var idx = 0,
      point,
      previousPoint,
      nextPoint;
    while (waypoints[idx]) {
      point = waypoints[idx];
      previousPoint = waypoints[idx - 1];
      nextPoint = waypoints[idx + 1];
      if (pointDistance(point, nextPoint) === 0 || pointsOnLine(previousPoint, nextPoint, point)) {
        // remove point, if overlapping with {nextPoint}
        // or on line with {previousPoint} -> {point} -> {nextPoint}
        waypoints.splice(idx, 1);
      } else {
        idx++;
      }
    }
    return waypoints;
  }

  // helpers //////////////////////

  function distance(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
  }
  function isConnection$8(element) {
    return !!element.waypoints;
  }

  function round$9(number, resolution) {
    return Math.round(number * resolution) / resolution;
  }
  function ensurePx(number) {
    return isNumber$3(number) ? number + 'px' : number;
  }
  function findRoot(element) {
    while (element.parent) {
      element = element.parent;
    }
    return element;
  }

  /**
   * Creates a HTML container element for a SVG element with
   * the given configuration
   *
   * @param  {Object} options
   * @return {HTMLElement} the container element
   */
  function createContainer(options) {
    options = assign$4({}, {
      width: '100%',
      height: '100%'
    }, options);
    const container = options.container || document.body;

    // create a <div> around the svg element with the respective size
    // this way we can always get the correct container size
    // (this is impossible for <svg> elements at the moment)
    const parent = document.createElement('div');
    parent.setAttribute('class', 'djs-container djs-parent');
    assign$3(parent, {
      position: 'relative',
      overflow: 'hidden',
      width: ensurePx(options.width),
      height: ensurePx(options.height)
    });
    container.appendChild(parent);
    return parent;
  }
  function createGroup(parent, cls, childIndex) {
    const group = create$2('g');
    classes(group).add(cls);
    const index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;

    // must ensure second argument is node or _null_
    // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
    parent.insertBefore(group, parent.childNodes[index] || null);
    return group;
  }
  const BASE_LAYER = 'base';

  // render plane contents behind utility layers
  const PLANE_LAYER_INDEX = 0;
  const UTILITY_LAYER_INDEX = 1;
  const REQUIRED_MODEL_ATTRS = {
    shape: ['x', 'y', 'width', 'height'],
    connection: ['waypoints']
  };

  /**
   * The main drawing canvas.
   *
   * @class
   * @constructor
   *
   * @emits Canvas#canvas.init
   *
   * @param {Object} config
   * @param {EventBus} eventBus
   * @param {GraphicsFactory} graphicsFactory
   * @param {ElementRegistry} elementRegistry
   */
  function Canvas(config, eventBus, graphicsFactory, elementRegistry) {
    this._eventBus = eventBus;
    this._elementRegistry = elementRegistry;
    this._graphicsFactory = graphicsFactory;
    this._rootsIdx = 0;
    this._layers = {};
    this._planes = [];
    this._rootElement = null;
    this._init(config || {});
  }
  Canvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];

  /**
   * Creates a <svg> element that is wrapped into a <div>.
   * This way we are always able to correctly figure out the size of the svg element
   * by querying the parent node.

   * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)

   * <div class="djs-container" style="width: {desired-width}, height: {desired-height}">
   *   <svg width="100%" height="100%">
   *    ...
   *   </svg>
   * </div>
   */
  Canvas.prototype._init = function (config) {
    const eventBus = this._eventBus;

    // html container
    const container = this._container = createContainer(config);
    const svg = this._svg = create$2('svg');
    attr(svg, {
      width: '100%',
      height: '100%'
    });
    append(container, svg);
    const viewport = this._viewport = createGroup(svg, 'viewport');

    // debounce canvas.viewbox.changed events
    // for smoother diagram interaction
    if (config.deferUpdate !== false) {
      this._viewboxChanged = debounce(bind$3(this._viewboxChanged, this), 300);
    }
    eventBus.on('diagram.init', function () {
      /**
       * An event indicating that the canvas is ready to be drawn on.
       *
       * @memberOf Canvas
       *
       * @event canvas.init
       *
       * @type {Object}
       * @property {SVGElement} svg the created svg element
       * @property {SVGElement} viewport the direct parent of diagram elements and shapes
       */
      eventBus.fire('canvas.init', {
        svg: svg,
        viewport: viewport
      });
    }, this);

    // reset viewbox on shape changes to
    // recompute the viewbox
    eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed', 'root.set'], function () {
      delete this._cachedViewbox;
    }, this);
    eventBus.on('diagram.destroy', 500, this._destroy, this);
    eventBus.on('diagram.clear', 500, this._clear, this);
  };
  Canvas.prototype._destroy = function (emit) {
    this._eventBus.fire('canvas.destroy', {
      svg: this._svg,
      viewport: this._viewport
    });
    const parent = this._container.parentNode;
    if (parent) {
      parent.removeChild(this._container);
    }
    delete this._svg;
    delete this._container;
    delete this._layers;
    delete this._planes;
    delete this._rootElement;
    delete this._viewport;
  };
  Canvas.prototype._clear = function () {
    const allElements = this._elementRegistry.getAll();

    // remove all elements
    allElements.forEach(element => {
      const type = getType$1(element);
      if (type === 'root') {
        this.removeRootElement(element);
      } else {
        this._removeElement(element, type);
      }
    });

    // remove all planes
    this._planes = [];
    this._rootElement = null;

    // force recomputation of view box
    delete this._cachedViewbox;
  };

  /**
   * Returns the default layer on which
   * all elements are drawn.
   *
   * @returns {SVGElement}
   */
  Canvas.prototype.getDefaultLayer = function () {
    return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);
  };

  /**
   * Returns a layer that is used to draw elements
   * or annotations on it.
   *
   * Non-existing layers retrieved through this method
   * will be created. During creation, the optional index
   * may be used to create layers below or above existing layers.
   * A layer with a certain index is always created above all
   * existing layers with the same index.
   *
   * @param {string} name
   * @param {number} index
   *
   * @returns {SVGElement}
   */
  Canvas.prototype.getLayer = function (name, index) {
    if (!name) {
      throw new Error('must specify a name');
    }
    let layer = this._layers[name];
    if (!layer) {
      layer = this._layers[name] = this._createLayer(name, index);
    }

    // throw an error if layer creation / retrival is
    // requested on different index
    if (typeof index !== 'undefined' && layer.index !== index) {
      throw new Error('layer <' + name + '> already created at index <' + index + '>');
    }
    return layer.group;
  };

  /**
   * For a given index, return the number of layers that have a higher index and
   * are visible.
   *
   * This is used to determine the node a layer should be inserted at.
   *
   * @param {Number} index
   * @returns {Number}
   */
  Canvas.prototype._getChildIndex = function (index) {
    return reduce(this._layers, function (childIndex, layer) {
      if (layer.visible && index >= layer.index) {
        childIndex++;
      }
      return childIndex;
    }, 0);
  };

  /**
   * Creates a given layer and returns it.
   *
   * @param {string} name
   * @param {number} [index=0]
   *
   * @return {Object} layer descriptor with { index, group: SVGGroup }
   */
  Canvas.prototype._createLayer = function (name, index) {
    if (typeof index === 'undefined') {
      index = UTILITY_LAYER_INDEX;
    }
    const childIndex = this._getChildIndex(index);
    return {
      group: createGroup(this._viewport, 'layer-' + name, childIndex),
      index: index,
      visible: true
    };
  };

  /**
   * Shows a given layer.
   *
   * @param {String} layer
   * @returns {SVGElement}
   */
  Canvas.prototype.showLayer = function (name) {
    if (!name) {
      throw new Error('must specify a name');
    }
    const layer = this._layers[name];
    if (!layer) {
      throw new Error('layer <' + name + '> does not exist');
    }
    const viewport = this._viewport;
    const group = layer.group;
    const index = layer.index;
    if (layer.visible) {
      return group;
    }
    const childIndex = this._getChildIndex(index);
    viewport.insertBefore(group, viewport.childNodes[childIndex] || null);
    layer.visible = true;
    return group;
  };

  /**
   * Hides a given layer.
   *
   * @param {String} layer
   * @returns {SVGElement}
   */
  Canvas.prototype.hideLayer = function (name) {
    if (!name) {
      throw new Error('must specify a name');
    }
    const layer = this._layers[name];
    if (!layer) {
      throw new Error('layer <' + name + '> does not exist');
    }
    const group = layer.group;
    if (!layer.visible) {
      return group;
    }
    remove$2(group);
    layer.visible = false;
    return group;
  };
  Canvas.prototype._removeLayer = function (name) {
    const layer = this._layers[name];
    if (layer) {
      delete this._layers[name];
      remove$2(layer.group);
    }
  };

  /**
   * Returns the currently active layer. Can be null.
   *
   * @returns {SVGElement|null}
   */
  Canvas.prototype.getActiveLayer = function () {
    const plane = this._findPlaneForRoot(this.getRootElement());
    if (!plane) {
      return null;
    }
    return plane.layer;
  };

  /**
   * Returns the plane which contains the given element.
   *
   * @param {string|djs.model.Base} element
   *
   * @return {djs.model.Base} root for element
   */
  Canvas.prototype.findRoot = function (element) {
    if (typeof element === 'string') {
      element = this._elementRegistry.get(element);
    }
    if (!element) {
      return;
    }
    const plane = this._findPlaneForRoot(findRoot(element)) || {};
    return plane.rootElement;
  };

  /**
   * Return a list of all root elements on the diagram.
   *
   * @return {djs.model.Root[]}
   */
  Canvas.prototype.getRootElements = function () {
    return this._planes.map(function (plane) {
      return plane.rootElement;
    });
  };
  Canvas.prototype._findPlaneForRoot = function (rootElement) {
    return find$2(this._planes, function (plane) {
      return plane.rootElement === rootElement;
    });
  };

  /**
   * Returns the html element that encloses the
   * drawing canvas.
   *
   * @return {DOMNode}
   */
  Canvas.prototype.getContainer = function () {
    return this._container;
  };

  // markers //////////////////////

  Canvas.prototype._updateMarker = function (element, marker, add) {
    let container;
    if (!element.id) {
      element = this._elementRegistry.get(element);
    }

    // we need to access all
    container = this._elementRegistry._elements[element.id];
    if (!container) {
      return;
    }
    forEach$3([container.gfx, container.secondaryGfx], function (gfx) {
      if (gfx) {
        // invoke either addClass or removeClass based on mode
        if (add) {
          classes(gfx).add(marker);
        } else {
          classes(gfx).remove(marker);
        }
      }
    });

    /**
     * An event indicating that a marker has been updated for an element
     *
     * @event element.marker.update
     * @type {Object}
     * @property {djs.model.Element} element the shape
     * @property {Object} gfx the graphical representation of the shape
     * @property {string} marker
     * @property {boolean} add true if the marker was added, false if it got removed
     */
    this._eventBus.fire('element.marker.update', {
      element: element,
      gfx: container.gfx,
      marker: marker,
      add: !!add
    });
  };

  /**
   * Adds a marker to an element (basically a css class).
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @example
   * canvas.addMarker('foo', 'some-marker');
   *
   * const fooGfx = canvas.getGraphics('foo');
   *
   * fooGfx; // <g class="... some-marker"> ... </g>
   *
   * @param {string|djs.model.Base} element
   * @param {string} marker
   */
  Canvas.prototype.addMarker = function (element, marker) {
    this._updateMarker(element, marker, true);
  };

  /**
   * Remove a marker from an element.
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @param  {string|djs.model.Base} element
   * @param  {string} marker
   */
  Canvas.prototype.removeMarker = function (element, marker) {
    this._updateMarker(element, marker, false);
  };

  /**
   * Check the existence of a marker on element.
   *
   * @param  {string|djs.model.Base} element
   * @param  {string} marker
   */
  Canvas.prototype.hasMarker = function (element, marker) {
    if (!element.id) {
      element = this._elementRegistry.get(element);
    }
    const gfx = this.getGraphics(element);
    return classes(gfx).has(marker);
  };

  /**
   * Toggles a marker on an element.
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @param  {string|djs.model.Base} element
   * @param  {string} marker
   */
  Canvas.prototype.toggleMarker = function (element, marker) {
    if (this.hasMarker(element, marker)) {
      this.removeMarker(element, marker);
    } else {
      this.addMarker(element, marker);
    }
  };

  /**
   * Returns the current root element.
   *
   * Supports two different modes for handling root elements:
   *
   * 1. if no root element has been added before, an implicit root will be added
   * and returned. This is used in applications that don't require explicit
   * root elements.
   *
   * 2. when root elements have been added before calling `getRootElement`,
   * root elements can be null. This is used for applications that want to manage
   * root elements themselves.
   *
   * @returns {Object|djs.model.Root|null} rootElement.
   */
  Canvas.prototype.getRootElement = function () {
    const rootElement = this._rootElement;

    // can return null if root elements are present but none was set yet
    if (rootElement || this._planes.length) {
      return rootElement;
    }
    return this.setRootElement(this.addRootElement(null));
  };

  /**
   * Adds a given root element and returns it.
   *
   * @param {Object|djs.model.Root} rootElement
   *
   * @return {Object|djs.model.Root} rootElement
   */

  Canvas.prototype.addRootElement = function (rootElement) {
    const idx = this._rootsIdx++;
    if (!rootElement) {
      rootElement = {
        id: '__implicitroot_' + idx,
        children: [],
        isImplicit: true
      };
    }
    const layerName = rootElement.layer = 'root-' + idx;
    this._ensureValid('root', rootElement);
    const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);
    this.hideLayer(layerName);
    this._addRoot(rootElement, layer);
    this._planes.push({
      rootElement: rootElement,
      layer: layer
    });
    return rootElement;
  };

  /**
   * Removes a given rootElement and returns it.
   *
   * @param {djs.model.Root|String} rootElement
   *
   * @return {Object|djs.model.Root} rootElement
   */
  Canvas.prototype.removeRootElement = function (rootElement) {
    if (typeof rootElement === 'string') {
      rootElement = this._elementRegistry.get(rootElement);
    }
    const plane = this._findPlaneForRoot(rootElement);
    if (!plane) {
      return;
    }

    // hook up life-cycle events
    this._removeRoot(rootElement);

    // clean up layer
    this._removeLayer(rootElement.layer);

    // clean up plane
    this._planes = this._planes.filter(function (plane) {
      return plane.rootElement !== rootElement;
    });

    // clean up active root
    if (this._rootElement === rootElement) {
      this._rootElement = null;
    }
    return rootElement;
  };

  // root element handling //////////////////////

  /**
   * Sets a given element as the new root element for the canvas
   * and returns the new root element.
   *
   * @param {Object|djs.model.Root} rootElement
   *
   * @return {Object|djs.model.Root} new root element
   */
  Canvas.prototype.setRootElement = function (rootElement, override) {
    if (isDefined(override)) {
      throw new Error('override not supported');
    }
    if (rootElement === this._rootElement) {
      return;
    }
    let plane;
    if (!rootElement) {
      throw new Error('rootElement required');
    }
    plane = this._findPlaneForRoot(rootElement);

    // give set add semantics for backwards compatibility
    if (!plane) {
      rootElement = this.addRootElement(rootElement);
    }
    this._setRoot(rootElement);
    return rootElement;
  };
  Canvas.prototype._removeRoot = function (element) {
    const elementRegistry = this._elementRegistry,
      eventBus = this._eventBus;

    // simulate element remove event sequence
    eventBus.fire('root.remove', {
      element: element
    });
    eventBus.fire('root.removed', {
      element: element
    });
    elementRegistry.remove(element);
  };
  Canvas.prototype._addRoot = function (element, gfx) {
    const elementRegistry = this._elementRegistry,
      eventBus = this._eventBus;

    // resemble element add event sequence
    eventBus.fire('root.add', {
      element: element
    });
    elementRegistry.add(element, gfx);
    eventBus.fire('root.added', {
      element: element,
      gfx: gfx
    });
  };
  Canvas.prototype._setRoot = function (rootElement, layer) {
    const currentRoot = this._rootElement;
    if (currentRoot) {
      // un-associate previous root element <svg>
      this._elementRegistry.updateGraphics(currentRoot, null, true);

      // hide previous layer
      this.hideLayer(currentRoot.layer);
    }
    if (rootElement) {
      if (!layer) {
        layer = this._findPlaneForRoot(rootElement).layer;
      }

      // associate element with <svg>
      this._elementRegistry.updateGraphics(rootElement, this._svg, true);

      // show root layer
      this.showLayer(rootElement.layer);
    }
    this._rootElement = rootElement;
    this._eventBus.fire('root.set', {
      element: rootElement
    });
  };

  // add functionality //////////////////////

  Canvas.prototype._ensureValid = function (type, element) {
    if (!element.id) {
      throw new Error('element must have an id');
    }
    if (this._elementRegistry.get(element.id)) {
      throw new Error('element <' + element.id + '> already exists');
    }
    const requiredAttrs = REQUIRED_MODEL_ATTRS[type];
    const valid = every(requiredAttrs, function (attr) {
      return typeof element[attr] !== 'undefined';
    });
    if (!valid) {
      throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);
    }
  };
  Canvas.prototype._setParent = function (element, parent, parentIndex) {
    add$1(parent.children, element, parentIndex);
    element.parent = parent;
  };

  /**
   * Adds an element to the canvas.
   *
   * This wires the parent <-> child relationship between the element and
   * a explicitly specified parent or an implicit root element.
   *
   * During add it emits the events
   *
   *  * <{type}.add> (element, parent)
   *  * <{type}.added> (element, gfx)
   *
   * Extensions may hook into these events to perform their magic.
   *
   * @param {string} type
   * @param {Object|djs.model.Base} element
   * @param {Object|djs.model.Base} [parent]
   * @param {number} [parentIndex]
   *
   * @return {Object|djs.model.Base} the added element
   */
  Canvas.prototype._addElement = function (type, element, parent, parentIndex) {
    parent = parent || this.getRootElement();
    const eventBus = this._eventBus,
      graphicsFactory = this._graphicsFactory;
    this._ensureValid(type, element);
    eventBus.fire(type + '.add', {
      element: element,
      parent: parent
    });
    this._setParent(element, parent, parentIndex);

    // create graphics
    const gfx = graphicsFactory.create(type, element, parentIndex);
    this._elementRegistry.add(element, gfx);

    // update its visual
    graphicsFactory.update(type, element, gfx);
    eventBus.fire(type + '.added', {
      element: element,
      gfx: gfx
    });
    return element;
  };

  /**
   * Adds a shape to the canvas
   *
   * @param {Object|djs.model.Shape} shape to add to the diagram
   * @param {djs.model.Base} [parent]
   * @param {number} [parentIndex]
   *
   * @return {djs.model.Shape} the added shape
   */
  Canvas.prototype.addShape = function (shape, parent, parentIndex) {
    return this._addElement('shape', shape, parent, parentIndex);
  };

  /**
   * Adds a connection to the canvas
   *
   * @param {Object|djs.model.Connection} connection to add to the diagram
   * @param {djs.model.Base} [parent]
   * @param {number} [parentIndex]
   *
   * @return {djs.model.Connection} the added connection
   */
  Canvas.prototype.addConnection = function (connection, parent, parentIndex) {
    return this._addElement('connection', connection, parent, parentIndex);
  };

  /**
   * Internal remove element
   */
  Canvas.prototype._removeElement = function (element, type) {
    const elementRegistry = this._elementRegistry,
      graphicsFactory = this._graphicsFactory,
      eventBus = this._eventBus;
    element = elementRegistry.get(element.id || element);
    if (!element) {
      // element was removed already
      return;
    }
    eventBus.fire(type + '.remove', {
      element: element
    });
    graphicsFactory.remove(element);

    // unset parent <-> child relationship
    remove$1(element.parent && element.parent.children, element);
    element.parent = null;
    eventBus.fire(type + '.removed', {
      element: element
    });
    elementRegistry.remove(element);
    return element;
  };

  /**
   * Removes a shape from the canvas
   *
   * @param {string|djs.model.Shape} shape or shape id to be removed
   *
   * @return {djs.model.Shape} the removed shape
   */
  Canvas.prototype.removeShape = function (shape) {
    /**
     * An event indicating that a shape is about to be removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event shape.remove
     * @type {Object}
     * @property {djs.model.Shape} element the shape descriptor
     * @property {Object} gfx the graphical representation of the shape
     */

    /**
     * An event indicating that a shape has been removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event shape.removed
     * @type {Object}
     * @property {djs.model.Shape} element the shape descriptor
     * @property {Object} gfx the graphical representation of the shape
     */
    return this._removeElement(shape, 'shape');
  };

  /**
   * Removes a connection from the canvas
   *
   * @param {string|djs.model.Connection} connection or connection id to be removed
   *
   * @return {djs.model.Connection} the removed connection
   */
  Canvas.prototype.removeConnection = function (connection) {
    /**
     * An event indicating that a connection is about to be removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event connection.remove
     * @type {Object}
     * @property {djs.model.Connection} element the connection descriptor
     * @property {Object} gfx the graphical representation of the connection
     */

    /**
     * An event indicating that a connection has been removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event connection.removed
     * @type {Object}
     * @property {djs.model.Connection} element the connection descriptor
     * @property {Object} gfx the graphical representation of the connection
     */
    return this._removeElement(connection, 'connection');
  };

  /**
   * Return the graphical object underlaying a certain diagram element
   *
   * @param {string|djs.model.Base} element descriptor of the element
   * @param {boolean} [secondary=false] whether to return the secondary connected element
   *
   * @return {SVGElement}
   */
  Canvas.prototype.getGraphics = function (element, secondary) {
    return this._elementRegistry.getGraphics(element, secondary);
  };

  /**
   * Perform a viewbox update via a given change function.
   *
   * @param {Function} changeFn
   */
  Canvas.prototype._changeViewbox = function (changeFn) {
    // notify others of the upcoming viewbox change
    this._eventBus.fire('canvas.viewbox.changing');

    // perform actual change
    changeFn.apply(this);

    // reset the cached viewbox so that
    // a new get operation on viewbox or zoom
    // triggers a viewbox re-computation
    this._cachedViewbox = null;

    // notify others of the change; this step
    // may or may not be debounced
    this._viewboxChanged();
  };
  Canvas.prototype._viewboxChanged = function () {
    this._eventBus.fire('canvas.viewbox.changed', {
      viewbox: this.viewbox()
    });
  };

  /**
   * Gets or sets the view box of the canvas, i.e. the
   * area that is currently displayed.
   *
   * The getter may return a cached viewbox (if it is currently
   * changing). To force a recomputation, pass `false` as the first argument.
   *
   * @example
   *
   * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })
   *
   * // sets the visible area of the diagram to (100|100) -> (600|100)
   * // and and scales it according to the diagram width
   *
   * const viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.
   *
   * console.log(viewbox);
   * // {
   * //   inner: Dimensions,
   * //   outer: Dimensions,
   * //   scale,
   * //   x, y,
   * //   width, height
   * // }
   *
   * // if the current diagram is zoomed and scrolled, you may reset it to the
   * // default zoom via this method, too:
   *
   * const zoomedAndScrolledViewbox = canvas.viewbox();
   *
   * canvas.viewbox({
   *   x: 0,
   *   y: 0,
   *   width: zoomedAndScrolledViewbox.outer.width,
   *   height: zoomedAndScrolledViewbox.outer.height
   * });
   *
   * @param  {Object} [box] the new view box to set
   * @param  {number} box.x the top left X coordinate of the canvas visible in view box
   * @param  {number} box.y the top left Y coordinate of the canvas visible in view box
   * @param  {number} box.width the visible width
   * @param  {number} box.height
   *
   * @return {Object} the current view box
   */
  Canvas.prototype.viewbox = function (box) {
    if (box === undefined && this._cachedViewbox) {
      return this._cachedViewbox;
    }
    const viewport = this._viewport,
      outerBox = this.getSize();
    let innerBox, matrix, activeLayer, transform, scale, x, y;
    if (!box) {
      // compute the inner box based on the
      // diagrams active layer. This allows us to exclude
      // external components, such as overlays

      activeLayer = this._rootElement ? this.getActiveLayer() : null;
      innerBox = activeLayer && activeLayer.getBBox() || {};
      transform = transform$1(viewport);
      matrix = transform ? transform.matrix : createMatrix();
      scale = round$9(matrix.a, 1000);
      x = round$9(-matrix.e || 0, 1000);
      y = round$9(-matrix.f || 0, 1000);
      box = this._cachedViewbox = {
        x: x ? x / scale : 0,
        y: y ? y / scale : 0,
        width: outerBox.width / scale,
        height: outerBox.height / scale,
        scale: scale,
        inner: {
          width: innerBox.width || 0,
          height: innerBox.height || 0,
          x: innerBox.x || 0,
          y: innerBox.y || 0
        },
        outer: outerBox
      };
      return box;
    } else {
      this._changeViewbox(function () {
        scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);
        const matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);
        transform$1(viewport, matrix);
      });
    }
    return box;
  };

  /**
   * Gets or sets the scroll of the canvas.
   *
   * @param {Object} [delta] the new scroll to apply.
   *
   * @param {number} [delta.dx]
   * @param {number} [delta.dy]
   */
  Canvas.prototype.scroll = function (delta) {
    const node = this._viewport;
    let matrix = node.getCTM();
    if (delta) {
      this._changeViewbox(function () {
        delta = assign$4({
          dx: 0,
          dy: 0
        }, delta || {});
        matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);
        setCTM(node, matrix);
      });
    }
    return {
      x: matrix.e,
      y: matrix.f
    };
  };

  /**
   * Scrolls the viewbox to contain the given element.
   * Optionally specify a padding to be applied to the edges.
   *
   * @param {Object|String} [element] the element to scroll to.
   * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.
   *
   */
  Canvas.prototype.scrollToElement = function (element, padding) {
    let defaultPadding = 100;
    if (typeof element === 'string') {
      element = this._elementRegistry.get(element);
    }

    // set to correct rootElement
    const rootElement = this.findRoot(element);
    if (rootElement !== this.getRootElement()) {
      this.setRootElement(rootElement);
    }
    if (!padding) {
      padding = {};
    }
    if (typeof padding === 'number') {
      defaultPadding = padding;
    }
    padding = {
      top: padding.top || defaultPadding,
      right: padding.right || defaultPadding,
      bottom: padding.bottom || defaultPadding,
      left: padding.left || defaultPadding
    };
    const elementBounds = getBBox(element),
      elementTrbl = asTRBL(elementBounds),
      viewboxBounds = this.viewbox(),
      zoom = this.zoom();
    let dx, dy;

    // shrink viewboxBounds with padding
    viewboxBounds.y += padding.top / zoom;
    viewboxBounds.x += padding.left / zoom;
    viewboxBounds.width -= (padding.right + padding.left) / zoom;
    viewboxBounds.height -= (padding.bottom + padding.top) / zoom;
    const viewboxTrbl = asTRBL(viewboxBounds);
    const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;
    if (!canFit) {
      // top-left when element can't fit
      dx = elementBounds.x - viewboxBounds.x;
      dy = elementBounds.y - viewboxBounds.y;
    } else {
      const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),
        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),
        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),
        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);
      dx = dRight || dLeft;
      dy = dBottom || dTop;
    }
    this.scroll({
      dx: -dx * zoom,
      dy: -dy * zoom
    });
  };

  /**
   * Gets or sets the current zoom of the canvas, optionally zooming
   * to the specified position.
   *
   * The getter may return a cached zoom level. Call it with `false` as
   * the first argument to force recomputation of the current level.
   *
   * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,
   *                                   or `fit-viewport` to adjust the size to fit the current viewport
   * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null
   *
   * @return {number} the current scale
   */
  Canvas.prototype.zoom = function (newScale, center) {
    if (!newScale) {
      return this.viewbox(newScale).scale;
    }
    if (newScale === 'fit-viewport') {
      return this._fitViewport(center);
    }
    let outer, matrix;
    this._changeViewbox(function () {
      if (typeof center !== 'object') {
        outer = this.viewbox().outer;
        center = {
          x: outer.width / 2,
          y: outer.height / 2
        };
      }
      matrix = this._setZoom(newScale, center);
    });
    return round$9(matrix.a, 1000);
  };
  function setCTM(node, m) {
    const mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';
    node.setAttribute('transform', mstr);
  }
  Canvas.prototype._fitViewport = function (center) {
    const vbox = this.viewbox(),
      outer = vbox.outer,
      inner = vbox.inner;
    let newScale, newViewbox;

    // display the complete diagram without zooming in.
    // instead of relying on internal zoom, we perform a
    // hard reset on the canvas viewbox to realize this
    //
    // if diagram does not need to be zoomed in, we focus it around
    // the diagram origin instead

    if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {
      newViewbox = {
        x: 0,
        y: 0,
        width: Math.max(inner.width + inner.x, outer.width),
        height: Math.max(inner.height + inner.y, outer.height)
      };
    } else {
      newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);
      newViewbox = {
        x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),
        y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),
        width: outer.width / newScale,
        height: outer.height / newScale
      };
    }
    this.viewbox(newViewbox);
    return this.viewbox(false).scale;
  };
  Canvas.prototype._setZoom = function (scale, center) {
    const svg = this._svg,
      viewport = this._viewport;
    const matrix = svg.createSVGMatrix();
    const point = svg.createSVGPoint();
    let centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;
    currentMatrix = viewport.getCTM();
    const currentScale = currentMatrix.a;
    if (center) {
      centerPoint = assign$4(point, center);

      // revert applied viewport transformations
      originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());

      // create scale matrix
      scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);
      newMatrix = currentMatrix.multiply(scaleMatrix);
    } else {
      newMatrix = matrix.scale(scale);
    }
    setCTM(this._viewport, newMatrix);
    return newMatrix;
  };

  /**
   * Returns the size of the canvas
   *
   * @return {Dimensions}
   */
  Canvas.prototype.getSize = function () {
    return {
      width: this._container.clientWidth,
      height: this._container.clientHeight
    };
  };

  /**
   * Return the absolute bounding box for the given element
   *
   * The absolute bounding box may be used to display overlays in the
   * callers (browser) coordinate system rather than the zoomed in/out
   * canvas coordinates.
   *
   * @param  {ElementDescriptor} element
   * @return {Bounds} the absolute bounding box
   */
  Canvas.prototype.getAbsoluteBBox = function (element) {
    const vbox = this.viewbox();
    let bbox;

    // connection
    // use svg bbox
    if (element.waypoints) {
      const gfx = this.getGraphics(element);
      bbox = gfx.getBBox();
    }

    // shapes
    // use data
    else {
      bbox = element;
    }
    const x = bbox.x * vbox.scale - vbox.x * vbox.scale;
    const y = bbox.y * vbox.scale - vbox.y * vbox.scale;
    const width = bbox.width * vbox.scale;
    const height = bbox.height * vbox.scale;
    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  };

  /**
   * Fires an event in order other modules can react to the
   * canvas resizing
   */
  Canvas.prototype.resized = function () {
    // force recomputation of view box
    delete this._cachedViewbox;
    this._eventBus.fire('canvas.resized');
  };

  var ELEMENT_ID = 'data-element-id';

  /**
   * @class
   *
   * A registry that keeps track of all shapes in the diagram.
   */
  function ElementRegistry$2(eventBus) {
    this._elements = {};
    this._eventBus = eventBus;
  }
  ElementRegistry$2.$inject = ['eventBus'];

  /**
   * Register a pair of (element, gfx, (secondaryGfx)).
   *
   * @param {djs.model.Base} element
   * @param {SVGElement} gfx
   * @param {SVGElement} [secondaryGfx] optional other element to register, too
   */
  ElementRegistry$2.prototype.add = function (element, gfx, secondaryGfx) {
    var id = element.id;
    this._validateId(id);

    // associate dom node with element
    attr(gfx, ELEMENT_ID, id);
    if (secondaryGfx) {
      attr(secondaryGfx, ELEMENT_ID, id);
    }
    this._elements[id] = {
      element: element,
      gfx: gfx,
      secondaryGfx: secondaryGfx
    };
  };

  /**
   * Removes an element from the registry.
   *
   * @param {string|djs.model.Base} element
   */
  ElementRegistry$2.prototype.remove = function (element) {
    var elements = this._elements,
      id = element.id || element,
      container = id && elements[id];
    if (container) {
      // unset element id on gfx
      attr(container.gfx, ELEMENT_ID, '');
      if (container.secondaryGfx) {
        attr(container.secondaryGfx, ELEMENT_ID, '');
      }
      delete elements[id];
    }
  };

  /**
   * Update the id of an element
   *
   * @param {string|djs.model.Base} element
   * @param {string} newId
   */
  ElementRegistry$2.prototype.updateId = function (element, newId) {
    this._validateId(newId);
    if (typeof element === 'string') {
      element = this.get(element);
    }
    this._eventBus.fire('element.updateId', {
      element: element,
      newId: newId
    });
    var gfx = this.getGraphics(element),
      secondaryGfx = this.getGraphics(element, true);
    this.remove(element);
    element.id = newId;
    this.add(element, gfx, secondaryGfx);
  };

  /**
   * Update the graphics of an element
   *
   * @param {string|djs.model.Base} element
   * @param {SVGElement} gfx
   * @param {boolean} [secondary=false] whether to update the secondary connected element
   */
  ElementRegistry$2.prototype.updateGraphics = function (filter, gfx, secondary) {
    var id = filter.id || filter;
    var container = this._elements[id];
    if (secondary) {
      container.secondaryGfx = gfx;
    } else {
      container.gfx = gfx;
    }
    if (gfx) {
      attr(gfx, ELEMENT_ID, id);
    }
    return gfx;
  };

  /**
   * Return the model element for a given id or graphics.
   *
   * @example
   *
   * elementRegistry.get('SomeElementId_1');
   * elementRegistry.get(gfx);
   *
   *
   * @param {string|SVGElement} filter for selecting the element
   *
   * @return {djs.model.Base}
   */
  ElementRegistry$2.prototype.get = function (filter) {
    var id;
    if (typeof filter === 'string') {
      id = filter;
    } else {
      id = filter && attr(filter, ELEMENT_ID);
    }
    var container = this._elements[id];
    return container && container.element;
  };

  /**
   * Return all elements that match a given filter function.
   *
   * @param {Function} fn
   *
   * @return {Array<djs.model.Base>}
   */
  ElementRegistry$2.prototype.filter = function (fn) {
    var filtered = [];
    this.forEach(function (element, gfx) {
      if (fn(element, gfx)) {
        filtered.push(element);
      }
    });
    return filtered;
  };

  /**
   * Return the first element that satisfies the provided testing function.
   *
   * @param {Function} fn
   *
   * @return {djs.model.Base}
   */
  ElementRegistry$2.prototype.find = function (fn) {
    var map = this._elements,
      keys = Object.keys(map);
    for (var i = 0; i < keys.length; i++) {
      var id = keys[i],
        container = map[id],
        element = container.element,
        gfx = container.gfx;
      if (fn(element, gfx)) {
        return element;
      }
    }
  };

  /**
   * Return all rendered model elements.
   *
   * @return {Array<djs.model.Base>}
   */
  ElementRegistry$2.prototype.getAll = function () {
    return this.filter(function (e) {
      return e;
    });
  };

  /**
   * Iterate over all diagram elements.
   *
   * @param {Function} fn
   */
  ElementRegistry$2.prototype.forEach = function (fn) {
    var map = this._elements;
    Object.keys(map).forEach(function (id) {
      var container = map[id],
        element = container.element,
        gfx = container.gfx;
      return fn(element, gfx);
    });
  };

  /**
   * Return the graphical representation of an element or its id.
   *
   * @example
   * elementRegistry.getGraphics('SomeElementId_1');
   * elementRegistry.getGraphics(rootElement); // <g ...>
   *
   * elementRegistry.getGraphics(rootElement, true); // <svg ...>
   *
   *
   * @param {string|djs.model.Base} filter
   * @param {boolean} [secondary=false] whether to return the secondary connected element
   *
   * @return {SVGElement}
   */
  ElementRegistry$2.prototype.getGraphics = function (filter, secondary) {
    var id = filter.id || filter;
    var container = this._elements[id];
    return container && (secondary ? container.secondaryGfx : container.gfx);
  };

  /**
   * Validate the suitability of the given id and signals a problem
   * with an exception.
   *
   * @param {string} id
   *
   * @throws {Error} if id is empty or already assigned
   */
  ElementRegistry$2.prototype._validateId = function (id) {
    if (!id) {
      throw new Error('element must have an id');
    }
    if (this._elements[id]) {
      throw new Error('element with id ' + id + ' already added');
    }
  };

  var objectRefsExports = {};
  var objectRefs = {
    get exports(){ return objectRefsExports; },
    set exports(v){ objectRefsExports = v; },
  };

  var collection = {};

  /**
   * An empty collection stub. Use {@link RefsCollection.extend} to extend a
   * collection with ref semantics.
   *
   * @class RefsCollection
   */

  /**
   * Extends a collection with {@link Refs} aware methods
   *
   * @memberof RefsCollection
   * @static
   *
   * @param  {Array<Object>} collection
   * @param  {Refs} refs instance
   * @param  {Object} property represented by the collection
   * @param  {Object} target object the collection is attached to
   *
   * @return {RefsCollection<Object>} the extended array
   */
  function extend(collection, refs, property, target) {
    var inverseProperty = property.inverse;

    /**
     * Removes the given element from the array and returns it.
     *
     * @method RefsCollection#remove
     *
     * @param {Object} element the element to remove
     */
    Object.defineProperty(collection, 'remove', {
      value: function (element) {
        var idx = this.indexOf(element);
        if (idx !== -1) {
          this.splice(idx, 1);

          // unset inverse
          refs.unset(element, inverseProperty, target);
        }
        return element;
      }
    });

    /**
     * Returns true if the collection contains the given element
     *
     * @method RefsCollection#contains
     *
     * @param {Object} element the element to check for
     */
    Object.defineProperty(collection, 'contains', {
      value: function (element) {
        return this.indexOf(element) !== -1;
      }
    });

    /**
     * Adds an element to the array, unless it exists already (set semantics).
     *
     * @method RefsCollection#add
     *
     * @param {Object} element the element to add
     * @param {Number} optional index to add element to
     *                 (possibly moving other elements around)
     */
    Object.defineProperty(collection, 'add', {
      value: function (element, idx) {
        var currentIdx = this.indexOf(element);
        if (typeof idx === 'undefined') {
          if (currentIdx !== -1) {
            // element already in collection (!)
            return;
          }

          // add to end of array, as no idx is specified
          idx = this.length;
        }

        // handle already in collection
        if (currentIdx !== -1) {
          // remove element from currentIdx
          this.splice(currentIdx, 1);
        }

        // add element at idx
        this.splice(idx, 0, element);
        if (currentIdx === -1) {
          // set inverse, unless element was
          // in collection already
          refs.set(element, inverseProperty, target);
        }
      }
    });

    // a simple marker, identifying this element
    // as being a refs collection
    Object.defineProperty(collection, '__refs_collection', {
      value: true
    });
    return collection;
  }
  function isExtended(collection) {
    return collection.__refs_collection === true;
  }
  collection.extend = extend;
  collection.isExtended = isExtended;

  var Collection = collection;
  function hasOwnProperty(e, property) {
    return Object.prototype.hasOwnProperty.call(e, property.name || property);
  }
  function defineCollectionProperty(ref, property, target) {
    var collection = Collection.extend(target[property.name] || [], ref, property, target);
    Object.defineProperty(target, property.name, {
      enumerable: property.enumerable,
      value: collection
    });
    if (collection.length) {
      collection.forEach(function (o) {
        ref.set(o, property.inverse, target);
      });
    }
  }
  function defineProperty$1(ref, property, target) {
    var inverseProperty = property.inverse;
    var _value = target[property.name];
    Object.defineProperty(target, property.name, {
      configurable: property.configurable,
      enumerable: property.enumerable,
      get: function () {
        return _value;
      },
      set: function (value) {
        // return if we already performed all changes
        if (value === _value) {
          return;
        }
        var old = _value;

        // temporary set null
        _value = null;
        if (old) {
          ref.unset(old, inverseProperty, target);
        }

        // set new value
        _value = value;

        // set inverse value
        ref.set(_value, inverseProperty, target);
      }
    });
  }

  /**
   * Creates a new references object defining two inversly related
   * attribute descriptors a and b.
   *
   * <p>
   *   When bound to an object using {@link Refs#bind} the references
   *   get activated and ensure that add and remove operations are applied
   *   reversely, too.
   * </p>
   *
   * <p>
   *   For attributes represented as collections {@link Refs} provides the
   *   {@link RefsCollection#add}, {@link RefsCollection#remove} and {@link RefsCollection#contains} extensions
   *   that must be used to properly hook into the inverse change mechanism.
   * </p>
   *
   * @class Refs
   *
   * @classdesc A bi-directional reference between two attributes.
   *
   * @param {Refs.AttributeDescriptor} a property descriptor
   * @param {Refs.AttributeDescriptor} b property descriptor
   *
   * @example
   *
   * var refs = Refs({ name: 'wheels', collection: true, enumerable: true }, { name: 'car' });
   *
   * var car = { name: 'toyota' };
   * var wheels = [{ pos: 'front-left' }, { pos: 'front-right' }];
   *
   * refs.bind(car, 'wheels');
   *
   * car.wheels // []
   * car.wheels.add(wheels[0]);
   * car.wheels.add(wheels[1]);
   *
   * car.wheels // [{ pos: 'front-left' }, { pos: 'front-right' }]
   *
   * wheels[0].car // { name: 'toyota' };
   * car.wheels.remove(wheels[0]);
   *
   * wheels[0].car // undefined
   */
  function Refs$1(a, b) {
    if (!(this instanceof Refs$1)) {
      return new Refs$1(a, b);
    }

    // link
    a.inverse = b;
    b.inverse = a;
    this.props = {};
    this.props[a.name] = a;
    this.props[b.name] = b;
  }

  /**
   * Binds one side of a bi-directional reference to a
   * target object.
   *
   * @memberOf Refs
   *
   * @param  {Object} target
   * @param  {String} property
   */
  Refs$1.prototype.bind = function (target, property) {
    if (typeof property === 'string') {
      if (!this.props[property]) {
        throw new Error('no property <' + property + '> in ref');
      }
      property = this.props[property];
    }
    if (property.collection) {
      defineCollectionProperty(this, property, target);
    } else {
      defineProperty$1(this, property, target);
    }
  };
  Refs$1.prototype.ensureRefsCollection = function (target, property) {
    var collection = target[property.name];
    if (!Collection.isExtended(collection)) {
      defineCollectionProperty(this, property, target);
    }
    return collection;
  };
  Refs$1.prototype.ensureBound = function (target, property) {
    if (!hasOwnProperty(target, property)) {
      this.bind(target, property);
    }
  };
  Refs$1.prototype.unset = function (target, property, value) {
    if (target) {
      this.ensureBound(target, property);
      if (property.collection) {
        this.ensureRefsCollection(target, property).remove(value);
      } else {
        target[property.name] = undefined;
      }
    }
  };
  Refs$1.prototype.set = function (target, property, value) {
    if (target) {
      this.ensureBound(target, property);
      if (property.collection) {
        this.ensureRefsCollection(target, property).add(value);
      } else {
        target[property.name] = value;
      }
    }
  };
  var refs = Refs$1;

  (function (module) {
  	module.exports = refs;
  	module.exports.Collection = collection;
  } (objectRefs));

  var Refs = /*@__PURE__*/getDefaultExportFromCjs(objectRefsExports);

  var parentRefs = new Refs({
      name: 'children',
      enumerable: true,
      collection: true
    }, {
      name: 'parent'
    }),
    labelRefs = new Refs({
      name: 'labels',
      enumerable: true,
      collection: true
    }, {
      name: 'labelTarget'
    }),
    attacherRefs = new Refs({
      name: 'attachers',
      collection: true
    }, {
      name: 'host'
    }),
    outgoingRefs = new Refs({
      name: 'outgoing',
      collection: true
    }, {
      name: 'source'
    }),
    incomingRefs = new Refs({
      name: 'incoming',
      collection: true
    }, {
      name: 'target'
    });

  /**
   * @namespace djs.model
   */

  /**
   * @memberOf djs.model
   */

  /**
   * The basic graphical representation
   *
   * @class
   *
   * @abstract
   */
  function Base$1() {
    /**
     * The object that backs up the shape
     *
     * @name Base#businessObject
     * @type Object
     */
    Object.defineProperty(this, 'businessObject', {
      writable: true
    });

    /**
     * Single label support, will mapped to multi label array
     *
     * @name Base#label
     * @type Object
     */
    Object.defineProperty(this, 'label', {
      get: function () {
        return this.labels[0];
      },
      set: function (newLabel) {
        var label = this.label,
          labels = this.labels;
        if (!newLabel && label) {
          labels.remove(label);
        } else {
          labels.add(newLabel, 0);
        }
      }
    });

    /**
     * The parent shape
     *
     * @name Base#parent
     * @type Shape
     */
    parentRefs.bind(this, 'parent');

    /**
     * The list of labels
     *
     * @name Base#labels
     * @type Label
     */
    labelRefs.bind(this, 'labels');

    /**
     * The list of outgoing connections
     *
     * @name Base#outgoing
     * @type Array<Connection>
     */
    outgoingRefs.bind(this, 'outgoing');

    /**
     * The list of incoming connections
     *
     * @name Base#incoming
     * @type Array<Connection>
     */
    incomingRefs.bind(this, 'incoming');
  }

  /**
   * A graphical object
   *
   * @class
   * @constructor
   *
   * @extends Base
   */
  function Shape() {
    Base$1.call(this);

    /**
     * Indicates frame shapes
     *
     * @name Shape#isFrame
     * @type boolean
     */

    /**
     * The list of children
     *
     * @name Shape#children
     * @type Array<Base>
     */
    parentRefs.bind(this, 'children');

    /**
     * @name Shape#host
     * @type Shape
     */
    attacherRefs.bind(this, 'host');

    /**
     * @name Shape#attachers
     * @type Shape
     */
    attacherRefs.bind(this, 'attachers');
  }
  e$3(Shape, Base$1);

  /**
   * A root graphical object
   *
   * @class
   * @constructor
   *
   * @extends Shape
   */
  function Root$1() {
    Shape.call(this);
  }
  e$3(Root$1, Shape);

  /**
   * A label for an element
   *
   * @class
   * @constructor
   *
   * @extends Shape
   */
  function Label$1() {
    Shape.call(this);

    /**
     * The labeled element
     *
     * @name Label#labelTarget
     * @type Base
     */
    labelRefs.bind(this, 'labelTarget');
  }
  e$3(Label$1, Shape);

  /**
   * A connection between two elements
   *
   * @class
   * @constructor
   *
   * @extends Base
   */
  function Connection() {
    Base$1.call(this);

    /**
     * The element this connection originates from
     *
     * @name Connection#source
     * @type Base
     */
    outgoingRefs.bind(this, 'source');

    /**
     * The element this connection points to
     *
     * @name Connection#target
     * @type Base
     */
    incomingRefs.bind(this, 'target');
  }
  e$3(Connection, Base$1);
  var types = {
    connection: Connection,
    shape: Shape,
    label: Label$1,
    root: Root$1
  };

  /**
   * Creates a new model element of the specified type
   *
   * @method create
   *
   * @example
   *
   * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });
   * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });
   *
   * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });
   *
   * @param  {string} type lower-cased model name
   * @param  {Object} attrs attributes to initialize the new model instance with
   *
   * @return {Base} the new model instance
   */
  function create$1(type, attrs) {
    var Type = types[type];
    if (!Type) {
      throw new Error('unknown type: <' + type + '>');
    }
    return assign$4(new Type(), attrs);
  }

  /**
   * A factory for diagram-js shapes
   */
  function ElementFactory$3() {
    this._uid = 12;
  }
  ElementFactory$3.prototype.createRoot = function (attrs) {
    return this.create('root', attrs);
  };
  ElementFactory$3.prototype.createLabel = function (attrs) {
    return this.create('label', attrs);
  };
  ElementFactory$3.prototype.createShape = function (attrs) {
    return this.create('shape', attrs);
  };
  ElementFactory$3.prototype.createConnection = function (attrs) {
    return this.create('connection', attrs);
  };

  /**
   * Create a model element with the given type and
   * a number of pre-set attributes.
   *
   * @param  {string} type
   * @param  {Object} attrs
   * @return {djs.model.Base} the newly created model instance
   */
  ElementFactory$3.prototype.create = function (type, attrs) {
    attrs = assign$4({}, attrs || {});
    if (!attrs.id) {
      attrs.id = type + '_' + this._uid++;
    }
    return create$1(type, attrs);
  };

  /**
   * SVGs for elements are generated by the {@link GraphicsFactory}.
   *
   * This utility gives quick access to the important semantic
   * parts of an element.
   */

  /**
   * Returns the visual part of a diagram element
   *
   * @param {Snap<SVGElement>} gfx
   *
   * @return {Snap<SVGElement>}
   */
  function getVisual(gfx) {
    return gfx.childNodes[0];
  }

  /**
   * Returns the children for a given diagram element.
   *
   * @param {Snap<SVGElement>} gfx
   * @return {Snap<SVGElement>}
   */
  function getChildren$1(gfx) {
    return gfx.parentNode.childNodes[1];
  }

  /**
   * @param {<SVGElement>} element
   * @param {number} x
   * @param {number} y
   * @param {number} angle
   * @param {number} amount
   */
  function transform(gfx, x, y, angle, amount) {
    var translate = createTransform();
    translate.setTranslate(x, y);
    var rotate = createTransform();
    rotate.setRotate(angle || 0, 0, 0);
    var scale = createTransform();
    scale.setScale(amount || 1, amount || 1);
    transform$1(gfx, [translate, rotate, scale]);
  }

  /**
   * @param {SVGElement} element
   * @param {number} x
   * @param {number} y
   */
  function translate$1(gfx, x, y) {
    var translate = createTransform();
    translate.setTranslate(x, y);
    transform$1(gfx, translate);
  }

  /**
   * @param {SVGElement} element
   * @param {number} angle
   */
  function rotate(gfx, angle) {
    var rotate = createTransform();
    rotate.setRotate(angle, 0, 0);
    transform$1(gfx, rotate);
  }

  /**
   * A factory that creates graphical elements
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   */
  function GraphicsFactory(eventBus, elementRegistry) {
    this._eventBus = eventBus;
    this._elementRegistry = elementRegistry;
  }
  GraphicsFactory.$inject = ['eventBus', 'elementRegistry'];
  GraphicsFactory.prototype._getChildrenContainer = function (element) {
    var gfx = this._elementRegistry.getGraphics(element);
    var childrenGfx;

    // root element
    if (!element.parent) {
      childrenGfx = gfx;
    } else {
      childrenGfx = getChildren$1(gfx);
      if (!childrenGfx) {
        childrenGfx = create$2('g');
        classes(childrenGfx).add('djs-children');
        append(gfx.parentNode, childrenGfx);
      }
    }
    return childrenGfx;
  };

  /**
   * Clears the graphical representation of the element and returns the
   * cleared visual (the <g class="djs-visual" /> element).
   */
  GraphicsFactory.prototype._clear = function (gfx) {
    var visual = getVisual(gfx);
    clear$1(visual);
    return visual;
  };

  /**
   * Creates a gfx container for shapes and connections
   *
   * The layout is as follows:
   *
   * <g class="djs-group">
   *
   *   <!-- the gfx -->
   *   <g class="djs-element djs-(shape|connection|frame)">
   *     <g class="djs-visual">
   *       <!-- the renderer draws in here -->
   *     </g>
   *
   *     <!-- extensions (overlays, click box, ...) goes here
   *   </g>
   *
   *   <!-- the gfx child nodes -->
   *   <g class="djs-children"></g>
   * </g>
   *
   * @param {string} type the type of the element, i.e. shape | connection
   * @param {SVGElement} [childrenGfx]
   * @param {number} [parentIndex] position to create container in parent
   * @param {boolean} [isFrame] is frame element
   *
   * @return {SVGElement}
   */
  GraphicsFactory.prototype._createContainer = function (type, childrenGfx, parentIndex, isFrame) {
    var outerGfx = create$2('g');
    classes(outerGfx).add('djs-group');

    // insert node at position
    if (typeof parentIndex !== 'undefined') {
      prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);
    } else {
      append(childrenGfx, outerGfx);
    }
    var gfx = create$2('g');
    classes(gfx).add('djs-element');
    classes(gfx).add('djs-' + type);
    if (isFrame) {
      classes(gfx).add('djs-frame');
    }
    append(outerGfx, gfx);

    // create visual
    var visual = create$2('g');
    classes(visual).add('djs-visual');
    append(gfx, visual);
    return gfx;
  };
  GraphicsFactory.prototype.create = function (type, element, parentIndex) {
    var childrenGfx = this._getChildrenContainer(element.parent);
    return this._createContainer(type, childrenGfx, parentIndex, isFrameElement(element));
  };
  GraphicsFactory.prototype.updateContainments = function (elements) {
    var self = this,
      elementRegistry = this._elementRegistry,
      parents;
    parents = reduce(elements, function (map, e) {
      if (e.parent) {
        map[e.parent.id] = e.parent;
      }
      return map;
    }, {});

    // update all parents of changed and reorganized their children
    // in the correct order (as indicated in our model)
    forEach$3(parents, function (parent) {
      var children = parent.children;
      if (!children) {
        return;
      }
      var childrenGfx = self._getChildrenContainer(parent);
      forEach$3(children.slice().reverse(), function (child) {
        var childGfx = elementRegistry.getGraphics(child);
        prependTo(childGfx.parentNode, childrenGfx);
      });
    });
  };
  GraphicsFactory.prototype.drawShape = function (visual, element) {
    var eventBus = this._eventBus;
    return eventBus.fire('render.shape', {
      gfx: visual,
      element: element
    });
  };
  GraphicsFactory.prototype.getShapePath = function (element) {
    var eventBus = this._eventBus;
    return eventBus.fire('render.getShapePath', element);
  };
  GraphicsFactory.prototype.drawConnection = function (visual, element) {
    var eventBus = this._eventBus;
    return eventBus.fire('render.connection', {
      gfx: visual,
      element: element
    });
  };
  GraphicsFactory.prototype.getConnectionPath = function (waypoints) {
    var eventBus = this._eventBus;
    return eventBus.fire('render.getConnectionPath', waypoints);
  };
  GraphicsFactory.prototype.update = function (type, element, gfx) {
    // do NOT update root element
    if (!element.parent) {
      return;
    }
    var visual = this._clear(gfx);

    // redraw
    if (type === 'shape') {
      this.drawShape(visual, element);

      // update positioning
      translate$1(gfx, element.x, element.y);
    } else if (type === 'connection') {
      this.drawConnection(visual, element);
    } else {
      throw new Error('unknown type: ' + type);
    }
    if (element.hidden) {
      attr(gfx, 'display', 'none');
    } else {
      attr(gfx, 'display', 'block');
    }
  };
  GraphicsFactory.prototype.remove = function (element) {
    var gfx = this._elementRegistry.getGraphics(element);

    // remove
    remove$2(gfx.parentNode);
  };

  // helpers //////////

  function prependTo(newNode, parentNode, siblingNode) {
    var node = siblingNode || parentNode.firstChild;

    // do not prepend node to itself to prevent IE from crashing
    // https://github.com/bpmn-io/bpmn-js/issues/746
    if (newNode === node) {
      return;
    }
    parentNode.insertBefore(newNode, node);
  }

  var CoreModule$2 = {
    __depends__: [DrawModule$1],
    __init__: ['canvas'],
    canvas: ['type', Canvas],
    elementRegistry: ['type', ElementRegistry$2],
    elementFactory: ['type', ElementFactory$3],
    eventBus: ['type', EventBus],
    graphicsFactory: ['type', GraphicsFactory]
  };

  /**
   * @typedef { import('didi').ModuleDeclaration } Module
   */

  /**
   * Bootstrap an injector from a list of modules, instantiating a number of default components
   *
   * @param {Array<Module>} modules
   *
   * @return {Injector} a injector to use to access the components
   */
  function bootstrap(modules) {
    var injector = new Injector(modules);
    injector.init();
    return injector;
  }

  /**
   * Creates an injector from passed options.
   *
   * @param {Object} options
   * @return {Injector}
   */
  function createInjector$2(options) {
    options = options || {};
    var configModule = {
      'config': ['value', options]
    };
    var modules = [configModule, CoreModule$2].concat(options.modules || []);
    return bootstrap(modules);
  }

  /**
   * The main diagram-js entry point that bootstraps the diagram with the given
   * configuration.
   *
   * To register extensions with the diagram, pass them as Array<Module> to the constructor.
   *
   * @class djs.Diagram
   * @memberOf djs
   * @constructor
   *
   * @example
   *
   * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>
   *
   * // plug-in implemenentation
   * function MyLoggingPlugin(eventBus) {
   *   eventBus.on('shape.added', function(event) {
   *     console.log('shape ', event.shape, ' was added to the diagram');
   *   });
   * }
   *
   * // export as module
   * export default {
   *   __init__: [ 'myLoggingPlugin' ],
   *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]
   * };
   *
   *
   * // instantiate the diagram with the new plug-in
   *
   * import MyLoggingModule from 'path-to-my-logging-plugin';
   *
   * var diagram = new Diagram({
   *   modules: [
   *     MyLoggingModule
   *   ]
   * });
   *
   * diagram.invoke([ 'canvas', function(canvas) {
   *   // add shape to drawing canvas
   *   canvas.addShape({ x: 10, y: 10 });
   * });
   *
   * // 'shape ... was added to the diagram' logged to console
   *
   * @param {Object} options
   * @param {Array<Module>} [options.modules] external modules to instantiate with the diagram
   * @param {Injector} [injector] an (optional) injector to bootstrap the diagram with
   */
  function Diagram(options, injector) {
    // create injector unless explicitly specified
    this.injector = injector = injector || createInjector$2(options);

    // API

    /**
     * Resolves a diagram service
     *
     * @method Diagram#get
     *
     * @param {string} name the name of the diagram service to be retrieved
     * @param {boolean} [strict=true] if false, resolve missing services to null
     */
    this.get = injector.get;

    /**
     * Executes a function into which diagram services are injected
     *
     * @method Diagram#invoke
     *
     * @param {Function|Object[]} fn the function to resolve
     * @param {Object} locals a number of locals to use to resolve certain dependencies
     */
    this.invoke = injector.invoke;

    // init

    // indicate via event

    /**
     * An event indicating that all plug-ins are loaded.
     *
     * Use this event to fire other events to interested plug-ins
     *
     * @memberOf Diagram
     *
     * @event diagram.init
     *
     * @example
     *
     * eventBus.on('diagram.init', function() {
     *   eventBus.fire('my-custom-event', { foo: 'BAR' });
     * });
     *
     * @type {Object}
     */
    this.get('eventBus').fire('diagram.init');
  }

  /**
   * Destroys the diagram
   *
   * @method  Diagram#destroy
   */
  Diagram.prototype.destroy = function () {
    this.get('eventBus').fire('diagram.destroy');
  };

  /**
   * Clear the diagram, removing all contents.
   */
  Diagram.prototype.clear = function () {
    this.get('eventBus').fire('diagram.clear');
  };

  var diRefs = new Refs({
    name: 'dmnElementRef',
    enumerable: true
  }, {
    name: 'di',
    configurable: true
  });
  function DRDTreeWalker(handler, options) {
    // list of elements to handle deferred to ensure
    // prerequisites are drawn
    var deferred = [];
    function visit(element) {
      var gfx = element.gfx;

      // avoid multiple rendering of elements
      if (gfx) {
        throw new Error('already rendered ' + element.id);
      }

      // call handler
      return handler.element(element);
    }
    function visitRoot(element) {
      return handler.root(element);
    }
    function visitIfDi(element) {
      try {
        var gfx = element.di && visit(element);
        return gfx;
      } catch (e) {
        logError(e.message, {
          element: element,
          error: e
        });
      }
    }

    // Semantic handling //////////////////////

    /**
     * Handle definitions and return the rendered diagram (if any)
     *
     * @param {ModdleElement} definitions to walk and import
     * @param {ModdleElement} [diagram] specific diagram to import and display
     *
     * @throws {Error} if no diagram to display could be found
     */
    function handleDefinitions(definitions, diagram) {
      // make sure we walk the correct dmnElement
      var dmnDI = definitions.dmnDI;
      if (!dmnDI) {
        throw new Error('no dmndi:DMNDI');
      }
      var diagrams = dmnDI.diagrams || [];
      if (diagram && diagrams.indexOf(diagram) === -1) {
        throw new Error('diagram not part of dmndi:DMNDI');
      }
      if (!diagram && diagrams && diagrams.length) {
        diagram = diagrams[0];
      }

      // no diagram -> nothing to import
      if (!diagram) {
        throw new Error('no diagram to display');
      }

      // assign current diagram to definitions so that it can accessed later
      definitions.di = diagram;

      // load DI from selected diagram only
      handleDiagram(diagram);
      visitRoot(definitions);
      handleDrgElements(definitions.get('drgElement'));
      handleArtifacts(definitions.get('artifact'));
      handleDeferred();
    }
    function handleDrgElements(elements) {
      forEach$3(elements, function (element) {
        visitIfDi(element);
        handleRequirements(element);
      });
    }
    function handleArtifacts(elements) {
      forEach$3(elements, function (element) {
        if (is(element, 'dmn:Association')) {
          handleAssociation(element);
        } else {
          visitIfDi(element);
        }
      });
    }

    /**
     * Defer association visit until all shapes are visited.
     *
     * @param {ModdleElement} element
     */
    function handleAssociation(element) {
      defer(function () {
        visitIfDi(element);
      });
    }

    /**
     * Defer requirements visiting until all shapes are visited.
     *
     * @param {ModdleElement} element
     */
    function handleRequirements(element) {
      forEach$3(['informationRequirement', 'knowledgeRequirement', 'authorityRequirement'], function (requirements) {
        forEach$3(element[requirements], function (requirement) {
          defer(function () {
            visitIfDi(requirement);
          });
        });
      });
    }

    // DI handling //////////////////////
    function handleDiagram(diagram) {
      forEach$3(diagram.diagramElements, handleDiagramElement);
    }
    function handleDiagramElement(diagramElement) {
      registerDi(diagramElement);
    }
    function registerDi(di) {
      var dmnElement = di.dmnElementRef;
      if (dmnElement) {
        if (dmnElement.di) {
          logError('multiple DI elements defined for element', {
            element: dmnElement
          });
        } else {
          diRefs.bind(dmnElement, 'di');
          dmnElement.di = di;
        }
      } else {
        logError('no DMN element referenced in element', {
          element: di
        });
      }
    }
    function defer(fn) {
      deferred.push(fn);
    }
    function handleDeferred() {
      forEach$3(deferred, function (d) {
        d();
      });
    }
    function logError(message, context) {
      handler.error(message, context);
    }

    // API //////////////////////

    return {
      handleDefinitions: handleDefinitions
    };
  }

  /**
   * Import the definitions into a diagram.
   *
   * Errors and warnings are reported through the specified callback.
   *
   * @param  {Drd} drd
   * @param  {ModdleElement} definitions
   * @param  {Function} done
   *         the callback, invoked with (err, [ warning ]) once the import is done
   */
  function importDRD(drd, definitions, done) {
    var importer = drd.get('drdImporter'),
      eventBus = drd.get('eventBus');
    var error,
      warnings = [];
    function render(definitions) {
      var visitor = {
        root: function root(element) {
          return importer.root(element);
        },
        element: function element(_element, di) {
          return importer.add(_element, di);
        },
        error: function error(message, context) {
          warnings.push({
            message: message,
            context: context
          });
        }
      };
      var walker = new DRDTreeWalker(visitor);

      // import
      walker.handleDefinitions(definitions);
    }
    eventBus.fire('import.start', {
      definitions: definitions
    });
    try {
      render(definitions);
    } catch (e) {
      error = e;
    }
    eventBus.fire('import.done', {
      error: error,
      warnings: warnings
    });
    done(error, warnings);
  }

  var RENDERER_IDS = new Ids();
  var black = 'hsl(225, 10%, 15%)';

  /**
   * Renderer for the DRD view. The default colors are configurable.
   * When default label color is not provided, it will take the default
   * stroke color.
   *
   * @example
   * ```javascript
   * // for simple DRD viewer
   * const viewer = new DrdViewer({
   *   drdRenderer: {
   *     defaultFillColor: '#ffd700',
   *     defaultStrokeColor: '#0057b8',
   *     defaultLabelColor: '#0057b8'
   *   }
   * });
   *
   * // in dmn-js
   * const modeler = new DmnModeler({
   *   drd: {
   *     drdRenderer: {
   *       defaultFillColor: '#ffd700',
   *       defaultStrokeColor: '#0057b8',
   *       defaultLabelColor: '#0057b8'
   *     }
   *   }
   * });
   * ```
   */
  function DrdRenderer(config, eventBus, pathMap, styles, textRenderer, canvas) {
    BaseRenderer.call(this, eventBus);
    var rendererId = RENDERER_IDS.next();
    var computeStyle = styles.computeStyle;
    var markers = {};
    var defaultFillColor = config && config.defaultFillColor || 'white',
      defaultStrokeColor = config && config.defaultStrokeColor || black,
      defaultLabelColor = config && config.defaultLabelColor;
    function marker(type, fill, stroke) {
      var id = type + '-' + colorEscape(fill) + '-' + colorEscape(stroke) + '-' + rendererId;
      if (!markers[id]) {
        createMarker(id, type, fill, stroke);
      }
      return 'url(#' + id + ')';
    }
    function addMarker(id, options) {
      var attrs = assign$4({
        strokeWidth: 1,
        strokeLinecap: 'round',
        strokeDasharray: 'none'
      }, options.attrs);
      var ref = options.ref || {
        x: 0,
        y: 0
      };
      var scale = options.scale || 1;

      // fix for safari / chrome / firefox bug not correctly
      // resetting stroke dash array
      if (attrs.strokeDasharray === 'none') {
        attrs.strokeDasharray = [10000, 1];
      }
      var marker = create$2('marker');
      attr(options.element, attrs);
      append(marker, options.element);
      attr(marker, {
        id: id,
        viewBox: '0 0 20 20',
        refX: ref.x,
        refY: ref.y,
        markerWidth: 20 * scale,
        markerHeight: 20 * scale,
        orient: 'auto'
      });
      var defs = query('defs', canvas._svg);
      if (!defs) {
        defs = create$2('defs');
        append(canvas._svg, defs);
      }
      append(defs, marker);
      markers[id] = marker;
    }
    function createMarker(id, type, fill, stroke) {
      if (type === 'association-start') {
        var associationStart = create$2('path');
        attr(associationStart, {
          d: 'M 11 5 L 1 10 L 11 15'
        });
        addMarker(id, {
          element: associationStart,
          attrs: {
            fill: 'none',
            stroke: stroke,
            strokeWidth: 1.5
          },
          ref: {
            x: 1,
            y: 10
          },
          scale: 0.5
        });
      } else if (type === 'association-end') {
        var associationEnd = create$2('path');
        attr(associationEnd, {
          d: 'M 1 5 L 11 10 L 1 15'
        });
        addMarker(id, {
          element: associationEnd,
          attrs: {
            fill: 'none',
            stroke: stroke,
            strokeWidth: 1.5
          },
          ref: {
            x: 12,
            y: 10
          },
          scale: 0.5
        });
      } else if (type === 'information-requirement-end') {
        var informationRequirementEnd = create$2('path');
        attr(informationRequirementEnd, {
          d: 'M 1 5 L 11 10 L 1 15 Z'
        });
        addMarker(id, {
          element: informationRequirementEnd,
          attrs: {
            fill: stroke,
            stroke: 'none'
          },
          ref: {
            x: 11,
            y: 10
          },
          scale: 1
        });
      } else if (type === 'knowledge-requirement-end') {
        var knowledgeRequirementEnd = create$2('path');
        attr(knowledgeRequirementEnd, {
          d: 'M 1 3 L 11 10 L 1 17'
        });
        addMarker(id, {
          element: knowledgeRequirementEnd,
          attrs: {
            fill: 'none',
            stroke: stroke,
            strokeWidth: 2
          },
          ref: {
            x: 11,
            y: 10
          },
          scale: 0.8
        });
      } else if (type === 'authority-requirement-end') {
        var authorityRequirementEnd = create$2('circle');
        attr(authorityRequirementEnd, {
          cx: 3,
          cy: 3,
          r: 3
        });
        addMarker(id, {
          element: authorityRequirementEnd,
          attrs: {
            fill: stroke,
            stroke: 'none'
          },
          ref: {
            x: 3,
            y: 3
          },
          scale: 0.9
        });
      }
    }
    function drawRect(p, width, height, r, offset, attrs) {
      if (isObject$1(offset)) {
        attrs = offset;
        offset = 0;
      }
      offset = offset || 0;
      attrs = computeStyle(attrs, {
        stroke: black,
        strokeWidth: 2,
        fill: 'white'
      });
      var rect = create$2('rect');
      attr(rect, {
        x: offset,
        y: offset,
        width: width - offset * 2,
        height: height - offset * 2,
        rx: r,
        ry: r
      });
      attr(rect, attrs);
      append(p, rect);
      return rect;
    }
    function renderLabel(p, label, options) {
      var text = textRenderer.createText(label || '', options);
      attr$1(text, 'class', 'djs-label');
      append(p, text);
      return text;
    }
    function renderEmbeddedLabel(p, element, align, options) {
      var name = getName(element);
      options = assign$4({
        box: element,
        align: align,
        padding: 5,
        style: {
          fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
        }
      }, options);
      return renderLabel(p, name, options);
    }
    function drawPath(p, d, attrs) {
      attrs = computeStyle(attrs, ['no-fill'], {
        strokeWidth: 2,
        stroke: black
      });
      var path = create$2('path');
      attr(path, {
        d: d
      });
      attr(path, attrs);
      append(p, path);
      return path;
    }
    var handlers = {
      'dmn:Decision': function dmnDecision(p, element) {
        var rect = drawRect(p, element.width, element.height, 0, {
          stroke: getStrokeColor(element, defaultStrokeColor),
          fill: getFillColor(element, defaultFillColor)
        });
        renderEmbeddedLabel(p, element, 'center-middle');
        return rect;
      },
      'dmn:KnowledgeSource': function dmnKnowledgeSource(p, element) {
        var pathData = pathMap.getScaledPath('KNOWLEDGE_SOURCE', {
          xScaleFactor: 1.021,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.0,
            my: 0.075
          }
        });
        var knowledgeSource = drawPath(p, pathData, {
          strokeWidth: 2,
          fill: getFillColor(element, defaultFillColor),
          stroke: getStrokeColor(element, defaultStrokeColor)
        });
        renderEmbeddedLabel(p, element, 'center-middle');
        return knowledgeSource;
      },
      'dmn:BusinessKnowledgeModel': function dmnBusinessKnowledgeModel(p, element) {
        var pathData = pathMap.getScaledPath('BUSINESS_KNOWLEDGE_MODEL', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.0,
            my: 0.3
          }
        });
        var businessKnowledge = drawPath(p, pathData, {
          strokeWidth: 2,
          fill: getFillColor(element, defaultFillColor),
          stroke: getStrokeColor(element, defaultStrokeColor)
        });
        renderEmbeddedLabel(p, element, 'center-middle');
        return businessKnowledge;
      },
      'dmn:InputData': function dmnInputData(p, element) {
        var rect = drawRect(p, element.width, element.height, 22, {
          stroke: getStrokeColor(element, defaultStrokeColor),
          fill: getFillColor(element, defaultFillColor)
        });
        renderEmbeddedLabel(p, element, 'center-middle');
        return rect;
      },
      'dmn:TextAnnotation': function dmnTextAnnotation(p, element) {
        var style = {
          'fill': 'none',
          'stroke': 'none'
        };
        var textElement = drawRect(p, element.width, element.height, 0, 0, style);
        var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.0,
            my: 0.0
          }
        });
        drawPath(p, textPathData, {
          stroke: getStrokeColor(element, defaultStrokeColor)
        });
        var text = getSemantic(element).text || '';
        renderLabel(p, text, {
          style: {
            fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
          },
          box: element,
          align: 'left-top',
          padding: 5
        });
        return textElement;
      },
      'dmn:Association': function dmnAssociation(p, element) {
        var semantic = getSemantic(element);
        var fill = getFillColor(element, defaultFillColor),
          stroke = getStrokeColor(element, defaultStrokeColor),
          attrs = {
            stroke: stroke,
            strokeDasharray: '0.5, 5',
            strokeLinecap: 'round',
            strokeLinejoin: 'round',
            fill: 'none'
          };
        if (semantic.associationDirection === 'One' || semantic.associationDirection === 'Both') {
          attrs.markerEnd = marker('association-end', fill, stroke);
        }
        if (semantic.associationDirection === 'Both') {
          attrs.markerStart = marker('association-start', fill, stroke);
        }
        return drawLine(p, element.waypoints, attrs);
      },
      'dmn:InformationRequirement': function dmnInformationRequirement(p, element) {
        var fill = getFillColor(element, defaultFillColor),
          stroke = getStrokeColor(element, defaultStrokeColor),
          attrs = {
            stroke: stroke,
            strokeWidth: 1,
            strokeLinecap: 'round',
            strokeLinejoin: 'round',
            markerEnd: marker('information-requirement-end', fill, stroke)
          };
        return drawLine(p, element.waypoints, attrs);
      },
      'dmn:KnowledgeRequirement': function dmnKnowledgeRequirement(p, element) {
        var fill = getFillColor(element, defaultFillColor),
          stroke = getStrokeColor(element, defaultStrokeColor);
        var attrs = {
          stroke: stroke,
          strokeWidth: 1,
          strokeDasharray: 5,
          strokeLinecap: 'round',
          strokeLinejoin: 'round',
          markerEnd: marker('knowledge-requirement-end', fill, stroke)
        };
        return drawLine(p, element.waypoints, attrs);
      },
      'dmn:AuthorityRequirement': function dmnAuthorityRequirement(p, element) {
        var fill = getFillColor(element, defaultFillColor),
          stroke = getStrokeColor(element, defaultStrokeColor),
          attrs = {
            stroke: stroke,
            strokeWidth: 1.5,
            strokeDasharray: 5,
            strokeLinecap: 'round',
            strokeLinejoin: 'round',
            markerEnd: marker('authority-requirement-end', fill, stroke)
          };
        return drawLine(p, element.waypoints, attrs);
      }
    };

    // draw shape and connection //////////////////

    function drawShape(parent, element) {
      var h = handlers[element.type];
      if (!h) {
        return BaseRenderer.prototype.drawShape.apply(this, [parent, element]);
      } else {
        return h(parent, element);
      }
    }
    function drawConnection(parent, element) {
      var type = element.type;
      var h = handlers[type];
      if (!h) {
        return BaseRenderer.prototype.drawConnection.apply(this, [parent, element]);
      } else {
        return h(parent, element);
      }
    }
    function drawLine(p, waypoints, attrs) {
      attrs = computeStyle(attrs, ['no-fill'], {
        stroke: black,
        strokeWidth: 2,
        fill: 'none'
      });
      var line = createLine(waypoints, attrs);
      append(p, line);
      return line;
    }
    this.canRender = function (element) {
      return is(element, 'dmn:DMNElement') || is(element, 'dmn:InformationRequirement') || is(element, 'dmn:KnowledgeRequirement') || is(element, 'dmn:AuthorityRequirement');
    };
    this.drawShape = drawShape;
    this.drawConnection = drawConnection;
  }
  e$3(DrdRenderer, BaseRenderer);
  DrdRenderer.$inject = ['config.drdRenderer', 'eventBus', 'pathMap', 'styles', 'textRenderer', 'canvas'];

  // helper functions //////////////////////

  function getSemantic(element) {
    return element.businessObject;
  }
  function colorEscape(str) {
    // only allow characters and numbers
    return str.replace(/[^0-9a-zA-z]+/g, '_');
  }
  function getStrokeColor(element, defaultColor) {
    return defaultColor;
  }
  function getFillColor(element, defaultColor) {
    return defaultColor;
  }
  function getLabelColor(element, defaultColor, defaultStrokeColor) {
    return defaultColor || getStrokeColor(element, defaultStrokeColor);
  }

  var DEFAULT_BOX_PADDING = 0;
  var DEFAULT_LABEL_SIZE = {
    width: 150,
    height: 50
  };
  function parseAlign(align) {
    var parts = align.split('-');
    return {
      horizontal: parts[0] || 'center',
      vertical: parts[1] || 'top'
    };
  }
  function parsePadding(padding) {
    if (isObject$1(padding)) {
      return assign$4({
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }, padding);
    } else {
      return {
        top: padding,
        left: padding,
        right: padding,
        bottom: padding
      };
    }
  }
  function getTextBBox(text, fakeText) {
    fakeText.textContent = text;
    var textBBox;
    try {
      var bbox,
        emptyLine = text === '';

      // add dummy text, when line is empty to
      // determine correct height
      fakeText.textContent = emptyLine ? 'dummy' : text;
      textBBox = fakeText.getBBox();

      // take text rendering related horizontal
      // padding into account
      bbox = {
        width: textBBox.width + textBBox.x * 2,
        height: textBBox.height
      };
      if (emptyLine) {
        // correct width
        bbox.width = 0;
      }
      return bbox;
    } catch (e) {
      return {
        width: 0,
        height: 0
      };
    }
  }

  /**
   * Layout the next line and return the layouted element.
   *
   * Alters the lines passed.
   *
   * @param  {Array<string>} lines
   * @return {Object} the line descriptor, an object { width, height, text }
   */
  function layoutNext(lines, maxWidth, fakeText) {
    var originalLine = lines.shift(),
      fitLine = originalLine;
    var textBBox;
    for (;;) {
      textBBox = getTextBBox(fitLine, fakeText);
      textBBox.width = fitLine ? textBBox.width : 0;

      // try to fit
      if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {
        return fit(lines, fitLine, originalLine, textBBox);
      }
      fitLine = shortenLine(fitLine, textBBox.width, maxWidth);
    }
  }
  function fit(lines, fitLine, originalLine, textBBox) {
    if (fitLine.length < originalLine.length) {
      var remainder = originalLine.slice(fitLine.length).trim();
      lines.unshift(remainder);
    }
    return {
      width: textBBox.width,
      height: textBBox.height,
      text: fitLine
    };
  }
  var SOFT_BREAK = '\u00AD';

  /**
   * Shortens a line based on spacing and hyphens.
   * Returns the shortened result on success.
   *
   * @param  {string} line
   * @param  {number} maxLength the maximum characters of the string
   * @return {string} the shortened string
   */
  function semanticShorten(line, maxLength) {
    var parts = line.split(/(\s|-|\u00AD)/g),
      part,
      shortenedParts = [],
      length = 0;

    // try to shorten via break chars
    if (parts.length > 1) {
      while (part = parts.shift()) {
        if (part.length + length < maxLength) {
          shortenedParts.push(part);
          length += part.length;
        } else {
          // remove previous part, too if hyphen does not fit anymore
          if (part === '-' || part === SOFT_BREAK) {
            shortenedParts.pop();
          }
          break;
        }
      }
    }
    var last = shortenedParts[shortenedParts.length - 1];

    // translate trailing soft break to actual hyphen
    if (last && last === SOFT_BREAK) {
      shortenedParts[shortenedParts.length - 1] = '-';
    }
    return shortenedParts.join('');
  }
  function shortenLine(line, width, maxWidth) {
    var length = Math.max(line.length * (maxWidth / width), 1);

    // try to shorten semantically (i.e. based on spaces and hyphens)
    var shortenedLine = semanticShorten(line, length);
    if (!shortenedLine) {
      // force shorten by cutting the long word
      shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));
    }
    return shortenedLine;
  }
  function getHelperSvg() {
    var helperSvg = document.getElementById('helper-svg');
    if (!helperSvg) {
      helperSvg = create$2('svg');
      attr(helperSvg, {
        id: 'helper-svg'
      });
      assign$3(helperSvg, {
        visibility: 'hidden',
        position: 'fixed',
        width: 0,
        height: 0
      });
      document.body.appendChild(helperSvg);
    }
    return helperSvg;
  }

  /**
   * Creates a new label utility
   *
   * @param {Object} config
   * @param {Dimensions} config.size
   * @param {number} config.padding
   * @param {Object} config.style
   * @param {string} config.align
   */
  function Text(config) {
    this._config = assign$4({}, {
      size: DEFAULT_LABEL_SIZE,
      padding: DEFAULT_BOX_PADDING,
      style: {},
      align: 'center-top'
    }, config || {});
  }

  /**
   * Returns the layouted text as an SVG element.
   *
   * @param {string} text
   * @param {Object} options
   *
   * @return {SVGElement}
   */
  Text.prototype.createText = function (text, options) {
    return this.layoutText(text, options).element;
  };

  /**
   * Returns a labels layouted dimensions.
   *
   * @param {string} text to layout
   * @param {Object} options
   *
   * @return {Dimensions}
   */
  Text.prototype.getDimensions = function (text, options) {
    return this.layoutText(text, options).dimensions;
  };

  /**
   * Creates and returns a label and its bounding box.
   *
   * @method Text#createText
   *
   * @param {string} text the text to render on the label
   * @param {Object} options
   * @param {string} options.align how to align in the bounding box.
   *                               Any of { 'center-middle', 'center-top' },
   *                               defaults to 'center-top'.
   * @param {string} options.style style to be applied to the text
   * @param {boolean} options.fitBox indicates if box will be recalculated to
   *                                 fit text
   *
   * @return {Object} { element, dimensions }
   */
  Text.prototype.layoutText = function (text, options) {
    var box = assign$4({}, this._config.size, options.box),
      style = assign$4({}, this._config.style, options.style),
      align = parseAlign(options.align || this._config.align),
      padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),
      fitBox = options.fitBox || false;
    var lineHeight = getLineHeight(style);

    // we split text by lines and normalize
    // {soft break} + {line break} => { line break }
    var lines = text.split(/\u00AD?\r?\n/),
      layouted = [];
    var maxWidth = box.width - padding.left - padding.right;

    // ensure correct rendering by attaching helper text node to invisible SVG
    var helperText = create$2('text');
    attr(helperText, {
      x: 0,
      y: 0
    });
    attr(helperText, style);
    var helperSvg = getHelperSvg();
    append(helperSvg, helperText);
    while (lines.length) {
      layouted.push(layoutNext(lines, maxWidth, helperText));
    }
    if (align.vertical === 'middle') {
      padding.top = padding.bottom = 0;
    }
    var totalHeight = reduce(layouted, function (sum, line, idx) {
      return sum + (lineHeight || line.height);
    }, 0) + padding.top + padding.bottom;
    var maxLineWidth = reduce(layouted, function (sum, line, idx) {
      return line.width > sum ? line.width : sum;
    }, 0);

    // the y position of the next line
    var y = padding.top;
    if (align.vertical === 'middle') {
      y += (box.height - totalHeight) / 2;
    }

    // magic number initial offset
    y -= (lineHeight || layouted[0].height) / 4;
    var textElement = create$2('text');
    attr(textElement, style);

    // layout each line taking into account that parent
    // shape might resize to fit text size
    forEach$3(layouted, function (line) {
      var x;
      y += lineHeight || line.height;
      switch (align.horizontal) {
        case 'left':
          x = padding.left;
          break;
        case 'right':
          x = (fitBox ? maxLineWidth : maxWidth) - padding.right - line.width;
          break;
        default:
          // aka center
          x = Math.max(((fitBox ? maxLineWidth : maxWidth) - line.width) / 2 + padding.left, 0);
      }
      var tspan = create$2('tspan');
      attr(tspan, {
        x: x,
        y: y
      });
      tspan.textContent = line.text;
      append(textElement, tspan);
    });
    remove$2(helperText);
    var dimensions = {
      width: maxLineWidth,
      height: totalHeight
    };
    return {
      dimensions: dimensions,
      element: textElement
    };
  };
  function getLineHeight(style) {
    if ('fontSize' in style && 'lineHeight' in style) {
      return style.lineHeight * parseInt(style.fontSize, 10);
    }
  }

  var DEFAULT_FONT_SIZE = 12;
  var LINE_HEIGHT_RATIO = 1.2;
  var MIN_TEXT_ANNOTATION_HEIGHT = 30;
  function TextRenderer(config) {
    var defaultStyle = assign$4({
      fontFamily: 'Arial, sans-serif',
      fontSize: DEFAULT_FONT_SIZE,
      fontWeight: 'normal',
      lineHeight: LINE_HEIGHT_RATIO
    }, config && config.defaultStyle || {});
    var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;
    var externalStyle = assign$4({}, defaultStyle, {
      fontSize: fontSize
    }, config && config.externalStyle || {});
    var textUtil = new Text({
      style: defaultStyle
    });

    /**
     * Get the new bounds of an externally rendered,
     * layouted label.
     *
     * @param  {Bounds} bounds
     * @param  {string} text
     *
     * @return {Bounds}
     */
    this.getExternalLabelBounds = function (bounds, text) {
      var layoutedDimensions = textUtil.getDimensions(text, {
        box: {
          width: 90,
          height: 30,
          x: bounds.width / 2 + bounds.x,
          y: bounds.height / 2 + bounds.y
        },
        style: externalStyle
      });

      // resize label shape to fit label text
      return {
        x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),
        y: Math.round(bounds.y),
        width: Math.ceil(layoutedDimensions.width),
        height: Math.ceil(layoutedDimensions.height)
      };
    };

    /**
     * Get the new bounds of text annotation.
     *
     * @param  {Bounds} bounds
     * @param  {string} text
     *
     * @return {Bounds}
     */
    this.getTextAnnotationBounds = function (bounds, text) {
      var layoutedDimensions = textUtil.getDimensions(text, {
        box: bounds,
        style: defaultStyle,
        align: 'left-top',
        padding: 5
      });
      return {
        x: bounds.x,
        y: bounds.y,
        width: bounds.width,
        height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))
      };
    };

    /**
     * Create a layouted text element.
     *
     * @param {string} text
     * @param {Object} [options]
     *
     * @return {SVGElement} rendered text
     */
    this.createText = function (text, options) {
      return textUtil.createText(text, options || {});
    };

    /**
     * Get default text style.
     */
    this.getDefaultStyle = function () {
      return defaultStyle;
    };

    /**
     * Get the external text style.
     */
    this.getExternalStyle = function () {
      return externalStyle;
    };
  }
  TextRenderer.$inject = ['config.textRenderer'];

  /* eslint-disable max-len */

  /**
   * Map containing SVG paths needed by BpmnRenderer.
   */

  function PathMap() {
    /**
     * Contains a map of path elements
     *
     * <h1>Path definition</h1>
     * A parameterized path is defined like this:
     * <pre>
     * 'GATEWAY_PARALLEL': {
     *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
            '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
     *   height: 17.5,
     *   width:  17.5,
     *   heightElements: [2.5, 7.5],
     *   widthElements: [2.5, 7.5]
     * }
     * </pre>
     * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling
     * is based on the ratio between the specified height and width in this object and the
     * height and width that is set as scale target (Note x,y coordinates will be scaled with
     * individual ratios).</p>
     * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.
     * The scaling is based on the computed ratios.
     * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using
     * the computed ratio coefficient.
     * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.
     *   <ul>
     *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>
     *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>
     *   </ul>
     *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.
     * </p>
      m1,1
      l 0,55.3
      c 29.8,19.7 48.4,-4.2 67.2,-6.7
      c 12.2,-2.3 19.8,1.6 30.8,6.2
      l 0,-54.6
      z
      */
    this.pathMap = {
      'KNOWLEDGE_SOURCE': {
        d: 'm {mx},{my} ' + 'l 0,{e.y0} ' + 'c {e.x0},{e.y1} {e.x1},-{e.y2} {e.x2},-{e.y3} ' + 'c {e.x3},-{e.y4} {e.x4},{e.y5} {e.x5},{e.y6} ' + 'l 0,-{e.y7}z',
        width: 100,
        height: 65,
        widthElements: [29.8, 48.4, 67.2, 12.2, 19.8, 30.8],
        heightElements: [55.3, 19.7, 4.2, 6.7, 2.3, 1.6, 6.2, 54.6]
      },
      'BUSINESS_KNOWLEDGE_MODEL': {
        d: 'm {mx},{my} l {e.x0},-{e.y0} l {e.x1},0 l 0,{e.y1} l -{e.x2},{e.y2} l -{e.x3},0z',
        width: 125,
        height: 45,
        widthElements: [13.8, 109.2, 13.8, 109.1],
        heightElements: [13.2, 29.8, 13.2]
      },
      'TEXT_ANNOTATION': {
        d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',
        width: 10,
        height: 30,
        widthElements: [10],
        heightElements: [30]
      }
    };
    this.getRawPath = function getRawPath(pathId) {
      return this.pathMap[pathId].d;
    };

    /**
     * Scales the path to the given height and width.
     * <h1>Use case</h1>
     * <p>Use case is to scale the content of elements (event, gateways) based
     * on the element bounding box's size.
     * </p>
     * <h1>Why not transform</h1>
     * <p>Scaling a path with transform() will also scale the stroke and IE does not support
     * the option 'non-scaling-stroke' to prevent this.
     * Also there are use cases where only some parts of a path should be
     * scaled.</p>
     *
     * @param {string} pathId The ID of the path.
     * @param {Object} param <p>
     *   Example param object scales the path to 60% size of the container (data.width, data.height).
     *   <pre>
     *   {
     *     xScaleFactor: 0.6,
     *     yScaleFactor:0.6,
     *     containerWidth: data.width,
     *     containerHeight: data.height,
     *     position: {
     *       mx: 0.46,
     *       my: 0.2,
     *     }
     *   }
     *   </pre>
     *   <ul>
     *    <li>targetpathwidth = xScaleFactor * containerWidth</li>
     *    <li>targetpathheight = yScaleFactor * containerHeight</li>
     *    <li>Position is used to set the starting coordinate of the path. M is computed:
      *    <ul>
      *      <li>position.x * containerWidth</li>
      *      <li>position.y * containerHeight</li>
      *    </ul>
      *    Center of the container <pre> position: {
     *       mx: 0.5,
     *       my: 0.5,
     *     }</pre>
     *     Upper left corner of the container
     *     <pre> position: {
     *       mx: 0.0,
     *       my: 0.0,
     *     }</pre>
     *    </li>
     *   </ul>
     * </p>
     *
     */
    this.getScaledPath = function getScaledPath(pathId, param) {
      var rawPath = this.pathMap[pathId];

      // positioning
      // compute the start point of the path
      var mx, my;
      if (param.abspos) {
        mx = param.abspos.x;
        my = param.abspos.y;
      } else {
        mx = param.containerWidth * param.position.mx;
        my = param.containerHeight * param.position.my;
      }
      var coordinates = {}; // map for the scaled coordinates
      if (param.position) {
        // path
        var heightRatio = param.containerHeight / rawPath.height * param.yScaleFactor;
        var widthRatio = param.containerWidth / rawPath.width * param.xScaleFactor;

        // Apply height ratio
        for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {
          coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;
        }

        // Apply width ratio
        for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {
          coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;
        }
      }

      // Apply value to raw path
      var path = format(rawPath.d, {
        mx: mx,
        my: my,
        e: coordinates
      });
      return path;
    };
  }

  // helpers //////////////////////

  // copied and adjusted from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js
  var tokenRegex = /\{([^{}]+)\}/g,
    objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g; // matches .xxxxx or ["xxxxx"] to run over object properties

  function replacer(all, key, obj) {
    var res = obj;
    key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {
      name = name || quotedName;
      if (res) {
        if (name in res) {
          res = res[name];
        }
        typeof res == 'function' && isFunc && (res = res());
      }
    });
    res = (res == null || res == obj ? all : res) + '';
    return res;
  }
  function format(str, obj) {
    return String(str).replace(tokenRegex, function (all, key) {
      return replacer(all, key, obj);
    });
  }

  var DrawModule = {
    __init__: ['drdRenderer'],
    drdRenderer: ['type', DrdRenderer],
    textRenderer: ['type', TextRenderer],
    pathMap: ['type', PathMap]
  };

  function DrdImporter(eventBus, canvas, elementFactory, elementRegistry) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._elementRegistry = elementRegistry;
    this._elementFactory = elementFactory;
  }
  DrdImporter.$inject = ['eventBus', 'canvas', 'elementFactory', 'elementRegistry'];
  DrdImporter.prototype.root = function (semantic) {
    var element = this._elementFactory.createRoot(elementData$1(semantic));
    this._canvas.setRootElement(element);
    return element;
  };

  /**
   * Add drd element (semantic) to the canvas.
   */
  DrdImporter.prototype.add = function (semantic) {
    var elementFactory = this._elementFactory,
      canvas = this._canvas,
      eventBus = this._eventBus,
      di = semantic.di;
    var element, waypoints, source, target, elementDefinition, bounds;
    if (di.$instanceOf('dmndi:DMNShape')) {
      bounds = di.bounds;
      elementDefinition = elementData$1(semantic, {
        x: Math.round(bounds.x),
        y: Math.round(bounds.y),
        width: Math.round(bounds.width),
        height: Math.round(bounds.height)
      });
      element = elementFactory.createShape(elementDefinition);
      canvas.addShape(element);
      eventBus.fire('drdElement.added', {
        element: element,
        di: di
      });
    } else if (di.$instanceOf('dmndi:DMNEdge')) {
      waypoints = collectWaypoints(di);
      source = this._getSource(semantic);
      target = this._getTarget(semantic);
      if (source && target) {
        elementDefinition = elementData$1(semantic, {
          hidden: false,
          source: source,
          target: target,
          waypoints: waypoints
        });
        element = elementFactory.createConnection(elementDefinition);
        canvas.addConnection(element);
        eventBus.fire('drdElement.added', {
          element: element,
          di: di
        });
      }
    } else {
      throw new Error('unknown di for element ' + semantic.id);
    }
    return element;
  };
  DrdImporter.prototype._getSource = function (semantic) {
    var href, elementReference;
    if (is(semantic, 'dmn:Association')) {
      elementReference = semantic.sourceRef;
    } else if (is(semantic, 'dmn:InformationRequirement')) {
      elementReference = semantic.requiredDecision || semantic.requiredInput;
    } else if (is(semantic, 'dmn:KnowledgeRequirement')) {
      elementReference = semantic.requiredKnowledge;
    } else if (is(semantic, 'dmn:AuthorityRequirement')) {
      elementReference = semantic.requiredDecision || semantic.requiredInput || semantic.requiredAuthority;
    }
    if (elementReference) {
      href = elementReference.href;
    }
    if (href) {
      return this._getShape(getIdFromHref(href));
    }
  };
  DrdImporter.prototype._getTarget = function (semantic) {
    if (is(semantic, 'dmn:Association')) {
      return semantic.targetRef && this._getShape(getIdFromHref(semantic.targetRef.href));
    }
    return this._getShape(semantic.$parent.id);
  };
  DrdImporter.prototype._getShape = function (id) {
    return this._elementRegistry.get(id);
  };

  // helper /////
  function elementData$1(semantic, attrs) {
    return assign$4({
      id: semantic.id,
      type: semantic.$type,
      businessObject: semantic
    }, attrs);
  }
  function collectWaypoints(edge) {
    var waypoints = edge.waypoint;
    if (waypoints) {
      return map$2(waypoints, function (waypoint) {
        var position = {
          x: waypoint.x,
          y: waypoint.y
        };
        return assign$4({
          original: position
        }, position);
      });
    }
  }
  function getIdFromHref(href) {
    return href.split('#').pop();
  }

  var ImportModule = {
    drdImporter: ['type', DrdImporter]
  };

  var CoreModule$1 = {
    __depends__: [DrawModule, ImportModule]
  };

  /**
   * A simple translation stub to be used for multi-language support
   * in diagrams. Can be easily replaced with a more sophisticated
   * solution.
   *
   * @example
   *
   * // use it inside any diagram component by injecting `translate`.
   *
   * function MyService(translate) {
   *   alert(translate('HELLO {you}', { you: 'You!' }));
   * }
   *
   * @param {string} template to interpolate
   * @param {Object} [replacements] a map with substitutes
   *
   * @return {string} the translated string
   */
  function translate(template, replacements) {
    replacements = replacements || {};
    return template.replace(/{([^}]+)}/g, function (_, key) {
      return replacements[key] || '{' + key + '}';
    });
  }

  var TranslateModule = {
    translate: ['value', translate]
  };

  function __stopPropagation(event) {
    if (!event || typeof event.stopPropagation !== 'function') {
      return;
    }
    event.stopPropagation();
  }
  function getOriginal$1(event) {
    return event.originalEvent || event.srcEvent;
  }
  function stopPropagation$3(event, immediate) {
    __stopPropagation(event);
    __stopPropagation(getOriginal$1(event));
  }
  function toPoint(event) {
    if (event.pointers && event.pointers.length) {
      event = event.pointers[0];
    }
    if (event.touches && event.touches.length) {
      event = event.touches[0];
    }
    return event ? {
      x: event.clientX,
      y: event.clientY
    } : null;
  }

  function isMac() {
    return /mac/i.test(navigator.platform);
  }

  function isButton(event, button) {
    return (getOriginal$1(event) || event).button === button;
  }
  function isPrimaryButton(event) {
    // button === 0 -> left áka primary mouse button
    return isButton(event, 0);
  }
  function isAuxiliaryButton(event) {
    // button === 1 -> auxiliary áka wheel button
    return isButton(event, 1);
  }
  function hasPrimaryModifier(event) {
    var originalEvent = getOriginal$1(event) || event;
    if (!isPrimaryButton(event)) {
      return false;
    }

    // Use cmd as primary modifier key for mac OS
    if (isMac()) {
      return originalEvent.metaKey;
    } else {
      return originalEvent.ctrlKey;
    }
  }
  function hasSecondaryModifier(event) {
    var originalEvent = getOriginal$1(event) || event;
    return isPrimaryButton(event) && originalEvent.shiftKey;
  }

  function allowAll(event) {
    return true;
  }
  function allowPrimaryAndAuxiliary(event) {
    return isPrimaryButton(event) || isAuxiliaryButton(event);
  }
  var LOW_PRIORITY$m = 500;

  /**
   * A plugin that provides interaction events for diagram elements.
   *
   * It emits the following events:
   *
   *   * element.click
   *   * element.contextmenu
   *   * element.dblclick
   *   * element.hover
   *   * element.mousedown
   *   * element.mousemove
   *   * element.mouseup
   *   * element.out
   *
   * Each event is a tuple { element, gfx, originalEvent }.
   *
   * Canceling the event via Event#preventDefault()
   * prevents the original DOM operation.
   *
   * @param {EventBus} eventBus
   */
  function InteractionEvents$1(eventBus, elementRegistry, styles) {
    var self = this;

    /**
     * Fire an interaction event.
     *
     * @param {string} type local event name, e.g. element.click.
     * @param {DOMEvent} event native event
     * @param {djs.model.Base} [element] the diagram element to emit the event on;
     *                                   defaults to the event target
     */
    function fire(type, event, element) {
      if (isIgnored(type, event)) {
        return;
      }
      var target, gfx, returnValue;
      if (!element) {
        target = event.delegateTarget || event.target;
        if (target) {
          gfx = target;
          element = elementRegistry.get(gfx);
        }
      } else {
        gfx = elementRegistry.getGraphics(element);
      }
      if (!gfx || !element) {
        return;
      }
      returnValue = eventBus.fire(type, {
        element: element,
        gfx: gfx,
        originalEvent: event
      });
      if (returnValue === false) {
        event.stopPropagation();
        event.preventDefault();
      }
    }

    // TODO(nikku): document this
    var handlers = {};
    function mouseHandler(localEventName) {
      return handlers[localEventName];
    }
    function isIgnored(localEventName, event) {
      var filter = ignoredFilters[localEventName] || isPrimaryButton;

      // only react on left mouse button interactions
      // except for interaction events that are enabled
      // for secundary mouse button
      return !filter(event);
    }
    var bindings = {
      click: 'element.click',
      contextmenu: 'element.contextmenu',
      dblclick: 'element.dblclick',
      mousedown: 'element.mousedown',
      mousemove: 'element.mousemove',
      mouseover: 'element.hover',
      mouseout: 'element.out',
      mouseup: 'element.mouseup'
    };
    var ignoredFilters = {
      'element.contextmenu': allowAll,
      'element.mousedown': allowPrimaryAndAuxiliary,
      'element.mouseup': allowPrimaryAndAuxiliary,
      'element.click': allowPrimaryAndAuxiliary,
      'element.dblclick': allowPrimaryAndAuxiliary
    };

    // manual event trigger //////////

    /**
     * Trigger an interaction event (based on a native dom event)
     * on the target shape or connection.
     *
     * @param {string} eventName the name of the triggered DOM event
     * @param {MouseEvent} event
     * @param {djs.model.Base} targetElement
     */
    function triggerMouseEvent(eventName, event, targetElement) {
      // i.e. element.mousedown...
      var localEventName = bindings[eventName];
      if (!localEventName) {
        throw new Error('unmapped DOM event name <' + eventName + '>');
      }
      return fire(localEventName, event, targetElement);
    }
    var ELEMENT_SELECTOR = 'svg, .djs-element';

    // event handling ///////

    function registerEvent(node, event, localEvent, ignoredFilter) {
      var handler = handlers[localEvent] = function (event) {
        fire(localEvent, event);
      };
      if (ignoredFilter) {
        ignoredFilters[localEvent] = ignoredFilter;
      }
      handler.$delegate = delegate.bind(node, ELEMENT_SELECTOR, event, handler);
    }
    function unregisterEvent(node, event, localEvent) {
      var handler = mouseHandler(localEvent);
      if (!handler) {
        return;
      }
      delegate.unbind(node, event, handler.$delegate);
    }
    function registerEvents(svg) {
      forEach$3(bindings, function (val, key) {
        registerEvent(svg, key, val);
      });
    }
    function unregisterEvents(svg) {
      forEach$3(bindings, function (val, key) {
        unregisterEvent(svg, key, val);
      });
    }
    eventBus.on('canvas.destroy', function (event) {
      unregisterEvents(event.svg);
    });
    eventBus.on('canvas.init', function (event) {
      registerEvents(event.svg);
    });

    // hit box updating ////////////////

    eventBus.on(['shape.added', 'connection.added'], function (event) {
      var element = event.element,
        gfx = event.gfx;
      eventBus.fire('interactionEvents.createHit', {
        element: element,
        gfx: gfx
      });
    });

    // Update djs-hit on change.
    // A low priortity is necessary, because djs-hit of labels has to be updated
    // after the label bounds have been updated in the renderer.
    eventBus.on(['shape.changed', 'connection.changed'], LOW_PRIORITY$m, function (event) {
      var element = event.element,
        gfx = event.gfx;
      eventBus.fire('interactionEvents.updateHit', {
        element: element,
        gfx: gfx
      });
    });
    eventBus.on('interactionEvents.createHit', LOW_PRIORITY$m, function (event) {
      var element = event.element,
        gfx = event.gfx;
      self.createDefaultHit(element, gfx);
    });
    eventBus.on('interactionEvents.updateHit', function (event) {
      var element = event.element,
        gfx = event.gfx;
      self.updateDefaultHit(element, gfx);
    });

    // hit styles ////////////

    var STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-stroke');
    var CLICK_STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-click-stroke');
    var ALL_HIT_STYLE = createHitStyle('djs-hit djs-hit-all');
    var NO_MOVE_HIT_STYLE = createHitStyle('djs-hit djs-hit-no-move');
    var HIT_TYPES = {
      'all': ALL_HIT_STYLE,
      'click-stroke': CLICK_STROKE_HIT_STYLE,
      'stroke': STROKE_HIT_STYLE,
      'no-move': NO_MOVE_HIT_STYLE
    };
    function createHitStyle(classNames, attrs) {
      attrs = assign$4({
        stroke: 'white',
        strokeWidth: 15
      }, attrs || {});
      return styles.cls(classNames, ['no-fill', 'no-border'], attrs);
    }

    // style helpers ///////////////

    function applyStyle(hit, type) {
      var attrs = HIT_TYPES[type];
      if (!attrs) {
        throw new Error('invalid hit type <' + type + '>');
      }
      attr(hit, attrs);
      return hit;
    }
    function appendHit(gfx, hit) {
      append(gfx, hit);
    }

    // API

    /**
     * Remove hints on the given graphics.
     *
     * @param {SVGElement} gfx
     */
    this.removeHits = function (gfx) {
      var hits = all('.djs-hit', gfx);
      forEach$3(hits, remove$2);
    };

    /**
     * Create default hit for the given element.
     *
     * @param {djs.model.Base} element
     * @param {SVGElement} gfx
     *
     * @return {SVGElement} created hit
     */
    this.createDefaultHit = function (element, gfx) {
      var waypoints = element.waypoints,
        isFrame = element.isFrame,
        boxType;
      if (waypoints) {
        return this.createWaypointsHit(gfx, waypoints);
      } else {
        boxType = isFrame ? 'stroke' : 'all';
        return this.createBoxHit(gfx, boxType, {
          width: element.width,
          height: element.height
        });
      }
    };

    /**
     * Create hits for the given waypoints.
     *
     * @param {SVGElement} gfx
     * @param {Array<Point>} waypoints
     *
     * @return {SVGElement}
     */
    this.createWaypointsHit = function (gfx, waypoints) {
      var hit = createLine(waypoints);
      applyStyle(hit, 'stroke');
      appendHit(gfx, hit);
      return hit;
    };

    /**
     * Create hits for a box.
     *
     * @param {SVGElement} gfx
     * @param {string} hitType
     * @param {Object} attrs
     *
     * @return {SVGElement}
     */
    this.createBoxHit = function (gfx, type, attrs) {
      attrs = assign$4({
        x: 0,
        y: 0
      }, attrs);
      var hit = create$2('rect');
      applyStyle(hit, type);
      attr(hit, attrs);
      appendHit(gfx, hit);
      return hit;
    };

    /**
     * Update default hit of the element.
     *
     * @param  {djs.model.Base} element
     * @param  {SVGElement} gfx
     *
     * @return {SVGElement} updated hit
     */
    this.updateDefaultHit = function (element, gfx) {
      var hit = query('.djs-hit', gfx);
      if (!hit) {
        return;
      }
      if (element.waypoints) {
        updateLine(hit, element.waypoints);
      } else {
        attr(hit, {
          width: element.width,
          height: element.height
        });
      }
      return hit;
    };
    this.fire = fire;
    this.triggerMouseEvent = triggerMouseEvent;
    this.mouseHandler = mouseHandler;
    this.registerEvent = registerEvent;
    this.unregisterEvent = unregisterEvent;
  }
  InteractionEvents$1.$inject = ['eventBus', 'elementRegistry', 'styles'];

  /**
   * An event indicating that the mouse hovered over an element
   *
   * @event element.hover
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has left an element
   *
   * @event element.out
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has clicked an element
   *
   * @event element.click
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has double clicked an element
   *
   * @event element.dblclick
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has gone down on an element.
   *
   * @event element.mousedown
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has gone up on an element.
   *
   * @event element.mouseup
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the context menu action is triggered
   * via mouse or touch controls.
   *
   * @event element.contextmenu
   *
   * @type {Object}
   * @property {djs.model.Base} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  var InteractionEventsModule = {
    __init__: ['interactionEvents'],
    interactionEvents: ['type', InteractionEvents$1]
  };

  var LOW_PRIORITY$l = 500;

  /**
   * @class
   *
   * A plugin that adds an outline to shapes and connections that may be activated and styled
   * via CSS classes.
   *
   * @param {EventBus} eventBus
   * @param {Styles} styles
   * @param {ElementRegistry} elementRegistry
   */
  function Outline(eventBus, styles, elementRegistry) {
    this.offset = 6;
    var OUTLINE_STYLE = styles.cls('djs-outline', ['no-fill']);
    var self = this;
    function createOutline(gfx, bounds) {
      var outline = create$2('rect');
      attr(outline, assign$4({
        x: 10,
        y: 10,
        rx: 3,
        width: 100,
        height: 100
      }, OUTLINE_STYLE));
      append(gfx, outline);
      return outline;
    }

    // A low priortity is necessary, because outlines of labels have to be updated
    // after the label bounds have been updated in the renderer.
    eventBus.on(['shape.added', 'shape.changed'], LOW_PRIORITY$l, function (event) {
      var element = event.element,
        gfx = event.gfx;
      var outline = query('.djs-outline', gfx);
      if (!outline) {
        outline = createOutline(gfx);
      }
      self.updateShapeOutline(outline, element);
    });
    eventBus.on(['connection.added', 'connection.changed'], function (event) {
      var element = event.element,
        gfx = event.gfx;
      var outline = query('.djs-outline', gfx);
      if (!outline) {
        outline = createOutline(gfx);
      }
      self.updateConnectionOutline(outline, element);
    });
  }

  /**
   * Updates the outline of a shape respecting the dimension of the
   * element and an outline offset.
   *
   * @param  {SVGElement} outline
   * @param  {djs.model.Base} element
   */
  Outline.prototype.updateShapeOutline = function (outline, element) {
    attr(outline, {
      x: -this.offset,
      y: -this.offset,
      width: element.width + this.offset * 2,
      height: element.height + this.offset * 2
    });
  };

  /**
   * Updates the outline of a connection respecting the bounding box of
   * the connection and an outline offset.
   *
   * @param  {SVGElement} outline
   * @param  {djs.model.Base} element
   */
  Outline.prototype.updateConnectionOutline = function (outline, connection) {
    var bbox = getBBox(connection);
    attr(outline, {
      x: bbox.x - this.offset,
      y: bbox.y - this.offset,
      width: bbox.width + this.offset * 2,
      height: bbox.height + this.offset * 2
    });
  };
  Outline.$inject = ['eventBus', 'styles', 'elementRegistry'];

  var OutlineModule = {
    __init__: ['outline'],
    outline: ['type', Outline]
  };

  /**
   * A service that offers the current selection in a diagram.
   * Offers the api to control the selection, too.
   *
   * @class
   *
   * @param {EventBus} eventBus the event bus
   */
  function Selection$1(eventBus, canvas) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._selectedElements = [];
    var self = this;
    eventBus.on(['shape.remove', 'connection.remove'], function (e) {
      var element = e.element;
      self.deselect(element);
    });
    eventBus.on(['diagram.clear', 'root.set'], function (e) {
      self.select(null);
    });
  }
  Selection$1.$inject = ['eventBus', 'canvas'];
  Selection$1.prototype.deselect = function (element) {
    var selectedElements = this._selectedElements;
    var idx = selectedElements.indexOf(element);
    if (idx !== -1) {
      var oldSelection = selectedElements.slice();
      selectedElements.splice(idx, 1);
      this._eventBus.fire('selection.changed', {
        oldSelection: oldSelection,
        newSelection: selectedElements
      });
    }
  };
  Selection$1.prototype.get = function () {
    return this._selectedElements;
  };
  Selection$1.prototype.isSelected = function (element) {
    return this._selectedElements.indexOf(element) !== -1;
  };

  /**
   * This method selects one or more elements on the diagram.
   *
   * By passing an additional add parameter you can decide whether or not the element(s)
   * should be added to the already existing selection or not.
   *
   * @method Selection#select
   *
   * @param  {Object|Object[]} elements element or array of elements to be selected
   * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false
   */
  Selection$1.prototype.select = function (elements, add) {
    var selectedElements = this._selectedElements,
      oldSelection = selectedElements.slice();
    if (!isArray$6(elements)) {
      elements = elements ? [elements] : [];
    }
    var canvas = this._canvas;
    var rootElement = canvas.getRootElement();
    elements = elements.filter(function (element) {
      var elementRoot = canvas.findRoot(element);
      return rootElement === elementRoot;
    });

    // selection may be cleared by passing an empty array or null
    // to the method
    if (add) {
      forEach$3(elements, function (element) {
        if (selectedElements.indexOf(element) !== -1) {
          // already selected
          return;
        } else {
          selectedElements.push(element);
        }
      });
    } else {
      this._selectedElements = selectedElements = elements.slice();
    }
    this._eventBus.fire('selection.changed', {
      oldSelection: oldSelection,
      newSelection: selectedElements
    });
  };

  var MARKER_HOVER = 'hover',
    MARKER_SELECTED = 'selected';
  var SELECTION_OUTLINE_PADDING = 6;

  /**
   * A plugin that adds a visible selection UI to shapes and connections
   * by appending the <code>hover</code> and <code>selected</code> classes to them.
   *
   * @class
   *
   * Makes elements selectable, too.
   *
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   */
  function SelectionVisuals(canvas, eventBus, selection) {
    this._canvas = canvas;
    var self = this;
    this._multiSelectionBox = null;
    function addMarker(e, cls) {
      canvas.addMarker(e, cls);
    }
    function removeMarker(e, cls) {
      canvas.removeMarker(e, cls);
    }
    eventBus.on('element.hover', function (event) {
      addMarker(event.element, MARKER_HOVER);
    });
    eventBus.on('element.out', function (event) {
      removeMarker(event.element, MARKER_HOVER);
    });
    eventBus.on('selection.changed', function (event) {
      function deselect(s) {
        removeMarker(s, MARKER_SELECTED);
      }
      function select(s) {
        addMarker(s, MARKER_SELECTED);
      }
      var oldSelection = event.oldSelection,
        newSelection = event.newSelection;
      forEach$3(oldSelection, function (e) {
        if (newSelection.indexOf(e) === -1) {
          deselect(e);
        }
      });
      forEach$3(newSelection, function (e) {
        if (oldSelection.indexOf(e) === -1) {
          select(e);
        }
      });
      self._updateSelectionOutline(newSelection);
    });
    eventBus.on('element.changed', function (event) {
      if (selection.isSelected(event.element)) {
        self._updateSelectionOutline(selection.get());
      }
    });
  }
  SelectionVisuals.$inject = ['canvas', 'eventBus', 'selection'];
  SelectionVisuals.prototype._updateSelectionOutline = function (selection) {
    var layer = this._canvas.getLayer('selectionOutline');
    clear(layer);
    var enabled = selection.length > 1;
    var container = this._canvas.getContainer();
    classes(container)[enabled ? 'add' : 'remove']('djs-multi-select');
    if (!enabled) {
      return;
    }
    var bBox = addSelectionOutlinePadding(getBBox(selection));
    var rect = create$2('rect');
    attr(rect, assign$4({
      rx: 3
    }, bBox));
    classes(rect).add('djs-selection-outline');
    append(layer, rect);
  };

  // helpers //////////

  function addSelectionOutlinePadding(bBox) {
    return {
      x: bBox.x - SELECTION_OUTLINE_PADDING,
      y: bBox.y - SELECTION_OUTLINE_PADDING,
      width: bBox.width + SELECTION_OUTLINE_PADDING * 2,
      height: bBox.height + SELECTION_OUTLINE_PADDING * 2
    };
  }

  function SelectionBehavior$1(eventBus, selection, canvas, elementRegistry) {
    // Select elements on create
    eventBus.on('create.end', 500, function (event) {
      var context = event.context,
        canExecute = context.canExecute,
        elements = context.elements,
        hints = context.hints || {},
        autoSelect = hints.autoSelect;
      if (canExecute) {
        if (autoSelect === false) {
          // Select no elements
          return;
        }
        if (isArray$6(autoSelect)) {
          selection.select(autoSelect);
        } else {
          // Select all elements by default
          selection.select(elements.filter(isShown));
        }
      }
    });

    // Select connection targets on connect
    eventBus.on('connect.end', 500, function (event) {
      var context = event.context,
        connection = context.connection;
      if (connection) {
        selection.select(connection);
      }
    });

    // Select shapes on move
    eventBus.on('shape.move.end', 500, function (event) {
      var previousSelection = event.previousSelection || [];
      var shape = elementRegistry.get(event.context.shape.id);

      // Always select main shape on move
      var isSelected = find$2(previousSelection, function (selectedShape) {
        return shape.id === selectedShape.id;
      });
      if (!isSelected) {
        selection.select(shape);
      }
    });

    // Select elements on click
    eventBus.on('element.click', function (event) {
      if (!isPrimaryButton(event)) {
        return;
      }
      var element = event.element;
      if (element === canvas.getRootElement()) {
        element = null;
      }
      var isSelected = selection.isSelected(element),
        isMultiSelect = selection.get().length > 1;

      // Add to selection if CTRL or SHIFT pressed
      var add = hasPrimaryModifier(event) || hasSecondaryModifier(event);
      if (isSelected && isMultiSelect) {
        if (add) {
          // Deselect element
          return selection.deselect(element);
        } else {
          // Select element only
          return selection.select(element);
        }
      } else if (!isSelected) {
        // Select element
        selection.select(element, add);
      } else {
        // Deselect element
        selection.deselect(element);
      }
    });
  }
  SelectionBehavior$1.$inject = ['eventBus', 'selection', 'canvas', 'elementRegistry'];
  function isShown(element) {
    return !element.hidden;
  }

  var SelectionModule = {
    __init__: ['selectionVisuals', 'selectionBehavior'],
    __depends__: [InteractionEventsModule, OutlineModule],
    selection: ['type', Selection$1],
    selectionVisuals: ['type', SelectionVisuals],
    selectionBehavior: ['type', SelectionBehavior$1]
  };

  /**
   * Util that provides unique IDs.
   *
   * @class djs.util.IdGenerator
   * @constructor
   * @memberOf djs.util
   *
   * The ids can be customized via a given prefix and contain a random value to avoid collisions.
   *
   * @param {string} prefix a prefix to prepend to generated ids (for better readability)
   */
  function IdGenerator(prefix) {
    this._counter = 0;
    this._prefix = (prefix ? prefix + '-' : '') + Math.floor(Math.random() * 1000000000) + '-';
  }

  /**
   * Returns a next unique ID.
   *
   * @method djs.util.IdGenerator#next
   *
   * @returns {string} the id
   */
  IdGenerator.prototype.next = function () {
    return this._prefix + ++this._counter;
  };

  // document wide unique overlay ids
  var ids = new IdGenerator('ov');
  var LOW_PRIORITY$k = 500;

  /**
   * A service that allows users to attach overlays to diagram elements.
   *
   * The overlay service will take care of overlay positioning during updates.
   *
   * @example
   *
   * // add a pink badge on the top left of the shape
   * overlays.add(someShape, {
   *   position: {
   *     top: -5,
   *     left: -5
   *   },
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   * // or add via shape id
   *
   * overlays.add('some-element-id', {
   *   position: {
   *     top: -5,
   *     left: -5
   *   }
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   * // or add with optional type
   *
   * overlays.add(someShape, 'badge', {
   *   position: {
   *     top: -5,
   *     left: -5
   *   }
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   *
   * // remove an overlay
   *
   * var id = overlays.add(...);
   * overlays.remove(id);
   *
   *
   * You may configure overlay defaults during tool by providing a `config` module
   * with `overlays.defaults` as an entry:
   *
   * {
   *   overlays: {
   *     defaults: {
   *       show: {
   *         minZoom: 0.7,
   *         maxZoom: 5.0
   *       },
   *       scale: {
   *         min: 1
   *       }
   *     }
   * }
   *
   * @param {Object} config
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   */
  function Overlays(config, eventBus, canvas, elementRegistry) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._elementRegistry = elementRegistry;
    this._ids = ids;
    this._overlayDefaults = assign$4({
      // no show constraints
      show: null,
      // always scale
      scale: true
    }, config && config.defaults);

    /**
     * Mapping overlayId -> overlay
     */
    this._overlays = {};

    /**
     * Mapping elementId -> overlay container
     */
    this._overlayContainers = [];

    // root html element for all overlays
    this._overlayRoot = createRoot(canvas.getContainer());
    this._init();
  }
  Overlays.$inject = ['config.overlays', 'eventBus', 'canvas', 'elementRegistry'];

  /**
   * Returns the overlay with the specified id or a list of overlays
   * for an element with a given type.
   *
   * @example
   *
   * // return the single overlay with the given id
   * overlays.get('some-id');
   *
   * // return all overlays for the shape
   * overlays.get({ element: someShape });
   *
   * // return all overlays on shape with type 'badge'
   * overlays.get({ element: someShape, type: 'badge' });
   *
   * // shape can also be specified as id
   * overlays.get({ element: 'element-id', type: 'badge' });
   *
   *
   * @param {Object} search
   * @param {string} [search.id]
   * @param {string|djs.model.Base} [search.element]
   * @param {string} [search.type]
   *
   * @return {Object|Array<Object>} the overlay(s)
   */
  Overlays.prototype.get = function (search) {
    if (isString$4(search)) {
      search = {
        id: search
      };
    }
    if (isString$4(search.element)) {
      search.element = this._elementRegistry.get(search.element);
    }
    if (search.element) {
      var container = this._getOverlayContainer(search.element, true);

      // return a list of overlays when searching by element (+type)
      if (container) {
        return search.type ? filter$2(container.overlays, matchPattern({
          type: search.type
        })) : container.overlays.slice();
      } else {
        return [];
      }
    } else if (search.type) {
      return filter$2(this._overlays, matchPattern({
        type: search.type
      }));
    } else {
      // return single element when searching by id
      return search.id ? this._overlays[search.id] : null;
    }
  };

  /**
   * Adds a HTML overlay to an element.
   *
   * @param {string|djs.model.Base}   element   attach overlay to this shape
   * @param {string}                  [type]    optional type to assign to the overlay
   * @param {Object}                  overlay   the overlay configuration
   *
   * @param {string|DOMElement}       overlay.html                 html element to use as an overlay
   * @param {Object}                  [overlay.show]               show configuration
   * @param {number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay
   * @param {number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay
   * @param {Object}                  overlay.position             where to attach the overlay
   * @param {number}                  [overlay.position.left]      relative to element bbox left attachment
   * @param {number}                  [overlay.position.top]       relative to element bbox top attachment
   * @param {number}                  [overlay.position.bottom]    relative to element bbox bottom attachment
   * @param {number}                  [overlay.position.right]     relative to element bbox right attachment
   * @param {boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of
   *                                                               diagram zoom
   * @param {number}                  [overlay.scale.min]
   * @param {number}                  [overlay.scale.max]
   *
   * @return {string}                 id that may be used to reference the overlay for update or removal
   */
  Overlays.prototype.add = function (element, type, overlay) {
    if (isObject$1(type)) {
      overlay = type;
      type = null;
    }
    if (!element.id) {
      element = this._elementRegistry.get(element);
    }
    if (!overlay.position) {
      throw new Error('must specifiy overlay position');
    }
    if (!overlay.html) {
      throw new Error('must specifiy overlay html');
    }
    if (!element) {
      throw new Error('invalid element specified');
    }
    var id = this._ids.next();
    overlay = assign$4({}, this._overlayDefaults, overlay, {
      id: id,
      type: type,
      element: element,
      html: overlay.html
    });
    this._addOverlay(overlay);
    return id;
  };

  /**
   * Remove an overlay with the given id or all overlays matching the given filter.
   *
   * @see Overlays#get for filter options.
   *
   * @param {string|object} [filter]
   */
  Overlays.prototype.remove = function (filter) {
    var overlays = this.get(filter) || [];
    if (!isArray$6(overlays)) {
      overlays = [overlays];
    }
    var self = this;
    forEach$3(overlays, function (overlay) {
      var container = self._getOverlayContainer(overlay.element, true);
      if (overlay) {
        remove$4(overlay.html);
        remove$4(overlay.htmlContainer);
        delete overlay.htmlContainer;
        delete overlay.element;
        delete self._overlays[overlay.id];
      }
      if (container) {
        var idx = container.overlays.indexOf(overlay);
        if (idx !== -1) {
          container.overlays.splice(idx, 1);
        }
      }
    });
  };
  Overlays.prototype.isShown = function () {
    return this._overlayRoot.style.display !== 'none';
  };
  Overlays.prototype.show = function () {
    setVisible(this._overlayRoot);
  };
  Overlays.prototype.hide = function () {
    setVisible(this._overlayRoot, false);
  };
  Overlays.prototype.clear = function () {
    this._overlays = {};
    this._overlayContainers = [];
    clear$1(this._overlayRoot);
  };
  Overlays.prototype._updateOverlayContainer = function (container) {
    var element = container.element,
      html = container.html;

    // update container left,top according to the elements x,y coordinates
    // this ensures we can attach child elements relative to this container

    var x = element.x,
      y = element.y;
    if (element.waypoints) {
      var bbox = getBBox(element);
      x = bbox.x;
      y = bbox.y;
    }
    setPosition(html, x, y);
    attr$1(container.html, 'data-container-id', element.id);
  };
  Overlays.prototype._updateOverlay = function (overlay) {
    var position = overlay.position,
      htmlContainer = overlay.htmlContainer,
      element = overlay.element;

    // update overlay html relative to shape because
    // it is already positioned on the element

    // update relative
    var left = position.left,
      top = position.top;
    if (position.right !== undefined) {
      var width;
      if (element.waypoints) {
        width = getBBox(element).width;
      } else {
        width = element.width;
      }
      left = position.right * -1 + width;
    }
    if (position.bottom !== undefined) {
      var height;
      if (element.waypoints) {
        height = getBBox(element).height;
      } else {
        height = element.height;
      }
      top = position.bottom * -1 + height;
    }
    setPosition(htmlContainer, left || 0, top || 0);
    this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
  };
  Overlays.prototype._createOverlayContainer = function (element) {
    var html = domify$1('<div class="djs-overlays" />');
    assign$3(html, {
      position: 'absolute'
    });
    this._overlayRoot.appendChild(html);
    var container = {
      html: html,
      element: element,
      overlays: []
    };
    this._updateOverlayContainer(container);
    this._overlayContainers.push(container);
    return container;
  };
  Overlays.prototype._updateRoot = function (viewbox) {
    var scale = viewbox.scale || 1;
    var matrix = 'matrix(' + [scale, 0, 0, scale, -1 * viewbox.x * scale, -1 * viewbox.y * scale].join(',') + ')';
    setTransform(this._overlayRoot, matrix);
  };
  Overlays.prototype._getOverlayContainer = function (element, raw) {
    var container = find$2(this._overlayContainers, function (c) {
      return c.element === element;
    });
    if (!container && !raw) {
      return this._createOverlayContainer(element);
    }
    return container;
  };
  Overlays.prototype._addOverlay = function (overlay) {
    var id = overlay.id,
      element = overlay.element,
      html = overlay.html,
      htmlContainer,
      overlayContainer;

    // unwrap jquery (for those who need it)
    if (html.get && html.constructor.prototype.jquery) {
      html = html.get(0);
    }

    // create proper html elements from
    // overlay HTML strings
    if (isString$4(html)) {
      html = domify$1(html);
    }
    overlayContainer = this._getOverlayContainer(element);
    htmlContainer = domify$1('<div class="djs-overlay" data-overlay-id="' + id + '">');
    assign$3(htmlContainer, {
      position: 'absolute'
    });
    htmlContainer.appendChild(html);
    if (overlay.type) {
      classes$1(htmlContainer).add('djs-overlay-' + overlay.type);
    }
    var elementRoot = this._canvas.findRoot(element);
    var activeRoot = this._canvas.getRootElement();
    setVisible(htmlContainer, elementRoot === activeRoot);
    overlay.htmlContainer = htmlContainer;
    overlayContainer.overlays.push(overlay);
    overlayContainer.html.appendChild(htmlContainer);
    this._overlays[id] = overlay;
    this._updateOverlay(overlay);
    this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
  };
  Overlays.prototype._updateOverlayVisibilty = function (overlay, viewbox) {
    var show = overlay.show,
      rootElement = this._canvas.findRoot(overlay.element),
      minZoom = show && show.minZoom,
      maxZoom = show && show.maxZoom,
      htmlContainer = overlay.htmlContainer,
      activeRootElement = this._canvas.getRootElement(),
      visible = true;
    if (rootElement !== activeRootElement) {
      visible = false;
    } else if (show) {
      if (isDefined(minZoom) && minZoom > viewbox.scale || isDefined(maxZoom) && maxZoom < viewbox.scale) {
        visible = false;
      }
    }
    setVisible(htmlContainer, visible);
    this._updateOverlayScale(overlay, viewbox);
  };
  Overlays.prototype._updateOverlayScale = function (overlay, viewbox) {
    var shouldScale = overlay.scale,
      minScale,
      maxScale,
      htmlContainer = overlay.htmlContainer;
    var scale,
      transform = '';
    if (shouldScale !== true) {
      if (shouldScale === false) {
        minScale = 1;
        maxScale = 1;
      } else {
        minScale = shouldScale.min;
        maxScale = shouldScale.max;
      }
      if (isDefined(minScale) && viewbox.scale < minScale) {
        scale = (1 / viewbox.scale || 1) * minScale;
      }
      if (isDefined(maxScale) && viewbox.scale > maxScale) {
        scale = (1 / viewbox.scale || 1) * maxScale;
      }
    }
    if (isDefined(scale)) {
      transform = 'scale(' + scale + ',' + scale + ')';
    }
    setTransform(htmlContainer, transform);
  };
  Overlays.prototype._updateOverlaysVisibilty = function (viewbox) {
    var self = this;
    forEach$3(this._overlays, function (overlay) {
      self._updateOverlayVisibilty(overlay, viewbox);
    });
  };
  Overlays.prototype._init = function () {
    var eventBus = this._eventBus;
    var self = this;

    // scroll/zoom integration

    function updateViewbox(viewbox) {
      self._updateRoot(viewbox);
      self._updateOverlaysVisibilty(viewbox);
      self.show();
    }
    eventBus.on('canvas.viewbox.changing', function (event) {
      self.hide();
    });
    eventBus.on('canvas.viewbox.changed', function (event) {
      updateViewbox(event.viewbox);
    });

    // remove integration

    eventBus.on(['shape.remove', 'connection.remove'], function (e) {
      var element = e.element;
      var overlays = self.get({
        element: element
      });
      forEach$3(overlays, function (o) {
        self.remove(o.id);
      });
      var container = self._getOverlayContainer(element);
      if (container) {
        remove$4(container.html);
        var i = self._overlayContainers.indexOf(container);
        if (i !== -1) {
          self._overlayContainers.splice(i, 1);
        }
      }
    });

    // move integration

    eventBus.on('element.changed', LOW_PRIORITY$k, function (e) {
      var element = e.element;
      var container = self._getOverlayContainer(element, true);
      if (container) {
        forEach$3(container.overlays, function (overlay) {
          self._updateOverlay(overlay);
        });
        self._updateOverlayContainer(container);
      }
    });

    // marker integration, simply add them on the overlays as classes, too.

    eventBus.on('element.marker.update', function (e) {
      var container = self._getOverlayContainer(e.element, true);
      if (container) {
        classes$1(container.html)[e.add ? 'add' : 'remove'](e.marker);
      }
    });
    eventBus.on('root.set', function () {
      self._updateOverlaysVisibilty(self._canvas.viewbox());
    });

    // clear overlays with diagram

    eventBus.on('diagram.clear', this.clear, this);
  };

  // helpers /////////////////////////////

  function createRoot(parentNode) {
    var root = domify$1('<div class="djs-overlay-container" />');
    assign$3(root, {
      position: 'absolute',
      width: 0,
      height: 0
    });
    parentNode.insertBefore(root, parentNode.firstChild);
    return root;
  }
  function setPosition(el, x, y) {
    assign$3(el, {
      left: x + 'px',
      top: y + 'px'
    });
  }

  /**
   * Set element visible
   *
   * @param {DOMElement} el
   * @param {boolean} [visible=true]
   */
  function setVisible(el, visible) {
    el.style.display = visible === false ? 'none' : '';
  }
  function setTransform(el, transform) {
    el.style['transform-origin'] = 'top left';
    ['', '-ms-', '-webkit-'].forEach(function (prefix) {
      el.style[prefix + 'transform'] = transform;
    });
  }

  var OverlaysModule = {
    __init__: ['overlays'],
    overlays: ['type', Overlays]
  };

  function DefinitionPropertiesView(eventBus, canvas, translate) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._translate = translate;
    eventBus.on('diagram.init', function () {
      this._init();
    }, this);
    eventBus.on('import.done', function (event) {
      if (!event.error) {
        this.update();
      }
    }, this);

    /* markup definition */

    this.HTML_MARKUP = '<div class="dmn-definitions">' + '<div class="dmn-definitions-name" title="' + this._translate('Definition Name') + '" spellcheck="false">' + '</div>' + '<div class="dmn-definitions-id" title="' + this._translate('Definition ID') + '" spellcheck="false">' + '</div>' + '</div>';
  }
  DefinitionPropertiesView.$inject = ['eventBus', 'canvas', 'translate'];

  /**
   * Initialize
   */
  DefinitionPropertiesView.prototype._init = function () {
    var canvas = this._canvas,
      eventBus = this._eventBus;
    var parent = canvas.getContainer(),
      container = this._container = domify$1(this.HTML_MARKUP);
    parent.appendChild(container);
    this.nameElement = query('.dmn-definitions-name', this._container);
    this.idElement = query('.dmn-definitions-id', this._container);
    delegate.bind(container, '.dmn-definitions-name, .dmn-definitions-id', 'mousedown', function (event) {
      event.stopPropagation();
    });
    eventBus.fire('definitionIdView.create', {
      html: container
    });
  };
  DefinitionPropertiesView.prototype.update = function () {
    var businessObject = this._canvas.getRootElement().businessObject;
    this.nameElement.textContent = businessObject.name;
    this.idElement.textContent = businessObject.id;
  };

  function PaletteAdapter(eventBus, canvas) {
    function toggleMarker(cls, on) {
      var container = canvas.getContainer();
      classes$1(container).toggle(cls, on);
    }
    eventBus.on('palette.create', function () {
      toggleMarker('with-palette', true);
    });
    eventBus.on('palette.changed', function (event) {
      toggleMarker('with-palette-two-column', event.twoColumn);
    });
  }
  PaletteAdapter.$inject = ['eventBus', 'canvas'];

  var DefinitionPropertiesViewer = {
    __depends__: [TranslateModule],
    __init__: ['definitionPropertiesView', 'definitionPropertiesPaletteAdapter'],
    definitionPropertiesView: ['type', DefinitionPropertiesView],
    definitionPropertiesPaletteAdapter: ['type', PaletteAdapter]
  };

  var PROVIDERS = [{
    className: 'dmn-icon-decision-table',
    matches: function matches(el) {
      var businessObject = el.businessObject;
      return is(businessObject, 'dmn:Decision') && is(businessObject.decisionLogic, 'dmn:DecisionTable');
    }
  }, {
    className: 'dmn-icon-literal-expression',
    matches: function matches(el) {
      var businessObject = el.businessObject;
      return is(businessObject, 'dmn:Decision') && is(businessObject.decisionLogic, 'dmn:LiteralExpression');
    }
  }];

  /**
   * Displays overlays that can be clicked in order to drill
   * down into a DMN element.
   */
  class DrillDown {
    constructor(injector, eventBus, overlays, config) {
      this._injector = injector;
      this._eventBus = eventBus;
      this._overlays = overlays;
      this._config = config || {
        enabled: true
      };
      eventBus.on(['shape.added'], _ref => {
        let element = _ref.element;
        for (let i = 0; i < PROVIDERS.length; i++) {
          const _PROVIDERS$i = PROVIDERS[i],
            matches = _PROVIDERS$i.matches,
            className = _PROVIDERS$i.className;
          var editable = matches && matches(element);
          if (editable) {
            this.addOverlay(element, className);
          }
        }
      });
    }

    /**
     * Add overlay to an element that enables drill down.
     *
     * @param {Object} element Element to add overlay to.
     * @param {string} className
     *        CSS class that will be added to overlay in order to display icon.
     */
    addOverlay(element, className) {
      const html = domify$1("\n      <div class=\"drill-down-overlay\">\n        <span class=\"".concat(className, "\"></span>\n      </div>\n    "));
      const overlayId = this._overlays.add(element, {
        position: {
          top: 2,
          left: 2
        },
        html
      });

      // TODO(nikku): can we remove renamed to drillDown.enabled
      if (this._config.enabled !== false) {
        classes$1(html).add('interactive');
        this.bindEventListener(element, html, overlayId);
      }
    }

    /**
     * @param {Object} element
     * @param {Object} overlay
     * @param {string} id
     */
    bindEventListener(element, overlay, id) {
      const overlays = this._overlays,
        eventBus = this._eventBus;
      const overlaysRoot = overlays._overlayRoot;
      delegate.bind(overlaysRoot, '[data-overlay-id="' + id + '"]', 'click', () => {
        const triggerDefault = eventBus.fire('drillDown.click', {
          element
        });
        if (triggerDefault === false) {
          return;
        }
        this.drillDown(element);
      });
    }

    /**
     * Drill down into the specific element.
     *
     * @param  {djs.model.Base} element
     *
     * @return {boolean} whether drill down was executed
     */
    drillDown(element) {
      const parent = this._injector.get('_parent', false);

      // no parent; skip drill down
      if (!parent) {
        return false;
      }
      const view = parent.getView(element.businessObject);

      // no view to drill down to
      if (!view) {
        return false;
      }
      parent.open(view);
      return true;
    }
  }
  DrillDown.$inject = ['injector', 'eventBus', 'overlays', 'config.drillDown'];

  var DrillDownModule = {
    __depends__: [OverlaysModule],
    __init__: ['drillDown'],
    drillDown: ['type', DrillDown]
  };

  /**
   * This file must not be changed or exchanged.
   *
   * @see http://bpmn.io/license for more information.
   */

  // inlined ../../../../resources/logo.svg
  // eslint-disable-next-line
  var BPMNIO_LOGO_SVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.02 5.57" width="53" height="21" style="vertical-align:middle"><path fill="#000000" d="M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"/><path fill="#000000" d="M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"/></svg>';
  var BPMNIO_IMG = BPMNIO_LOGO_SVG;
  function css(attrs) {
    return attrs.join(';');
  }
  var LIGHTBOX_STYLES = css(['z-index: 1001', 'position: fixed', 'top: 0', 'left: 0', 'right: 0', 'bottom: 0']);
  var BACKDROP_STYLES = css(['width: 100%', 'height: 100%', 'background: rgba(40,40,40,0.2)']);
  var NOTICE_STYLES = css(['position: absolute', 'left: 50%', 'top: 40%', 'transform: translate(-50%)', 'width: 260px', 'padding: 10px', 'background: white', 'box-shadow: 0 1px 4px rgba(0,0,0,0.3)', 'font-family: Helvetica, Arial, sans-serif', 'font-size: 14px', 'display: flex', 'line-height: 1.3']);

  /* eslint-disable max-len */
  var LIGHTBOX_MARKUP = '<div class="bjs-powered-by-lightbox" style="' + LIGHTBOX_STYLES + '">' + '<div class="backdrop" style="' + BACKDROP_STYLES + '"></div>' + '<div class="notice" style="' + NOTICE_STYLES + '">' + '<a href="https://bpmn.io" target="_blank" rel="noopener" style="margin: 15px 20px 15px 10px; align-self: center;' + '">' + BPMNIO_IMG + '</a>' + '<span>' + 'Web-based tooling for BPMN, DMN and CMMN diagrams ' + 'powered by <a href="https://bpmn.io" target="_blank" rel="noopener">bpmn.io</a>.' + '</span>' + '</div>' + '</div>';
  /* eslint-enable */

  var lightbox;
  function open() {
    if (!lightbox) {
      lightbox = domify$1(LIGHTBOX_MARKUP);
      delegate.bind(lightbox, '.backdrop', 'click', function (event) {
        document.body.removeChild(lightbox);
      });
    }
    document.body.appendChild(lightbox);
  }

  const _excluded$7 = ["additionalModules", "canvas"];
  function ownKeys$9(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$9(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) {
        _defineProperty$G(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$G(obj, key, value) {
    key = _toPropertyKey$D(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$D(arg) {
    var key = _toPrimitive$D(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$D(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _objectWithoutProperties$6(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$6(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$6(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenResult} OpenResult
   */

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenError} OpenError
   */

  /**
   * A viewer for DMN diagrams.
   *
   * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include
   * additional features.
   *
   *
   * ## Extending the Viewer
   *
   * In order to extend the viewer pass extension modules to bootstrap via the
   * `additionalModules` option. An extension module is an object that exposes
   * named services.
   *
   * The following example depicts the integration of a simple
   * logging component that integrates with interaction events:
   *
   *
   * ```javascript
   *
   * // logging component
   * function InteractionLogger(eventBus) {
   *   eventBus.on('element.hover', function(event) {
   *     console.log()
   *   })
   * }
   *
   * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
   *
   * // extension module
   * var extensionModule = {
   *   __init__: [ 'interactionLogger' ],
   *   interactionLogger: [ 'type', InteractionLogger ]
   * };
   *
   * // extend the viewer
   * var drdViewer = new Viewer({ additionalModules: [ extensionModule ] });
   * drdViewer.importXML(...);
   * ```
   *
   * @param {Object} options configuration options to pass to the viewer
   * @param {DOMElement} [options.container]
   *        the container to render the viewer in, defaults to body
   * @param {Array<didi.Module>} [options.modules]
   *        a list of modules to override the default modules
   * @param {Array<didi.Module>} [options.additionalModules]
   *        a list of modules to use with the default modules
   */
  function Viewer$3(options) {
    this._container = this._createContainer();

    /* <project-logo> */

    addProjectLogo(this._container);

    /* </project-logo> */

    this._init(this._container, options);
  }
  e$3(Viewer$3, Diagram);

  /**
   * The saveSVG result.
   *
   * @typedef {Object} SaveSVGResult
   *
   * @property {string} svg
   */

  /**
   * Export the currently displayed DMN diagram as
   * an SVG image.
   *
   * @param {Object} [options]
   *
   * @return {Promise<SaveSVGResult>}
   */
  Viewer$3.prototype.saveSVG = wrapForCompatibility(function (options) {
    var self = this;
    return new Promise(function (resolve) {
      var canvas = self.get('canvas');
      var contentNode = canvas.getActiveLayer(),
        defsNode = query('defs', canvas._svg);
      var contents = innerSVG(contentNode),
        defs = defsNode && defsNode.outerHTML || '';
      var bbox = contentNode.getBBox();

      /* eslint-disable max-len */
      var svg = '<?xml version="1.0" encoding="utf-8"?>\n' + '<!-- created with dmn-js / http://bpmn.io -->\n' + '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' + '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'width="' + bbox.width + '" height="' + bbox.height + '" ' + 'viewBox="' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '" version="1.1">' + defs + contents + '</svg>';
      /* eslint-enable */

      resolve({
        svg
      });
    });
  });
  Viewer$3.prototype.getModules = function () {
    return this._modules;
  };

  /**
   * Destroy the viewer instance and remove all its
   * remainders from the document tree.
   */
  Viewer$3.prototype.destroy = function () {
    // diagram destroy
    Diagram.prototype.destroy.call(this);

    // dom detach
    remove$4(this._container);
  };

  /**
   * Register an event listener
   *
   * Remove a previously added listener via {@link #off(event, callback)}.
   *
   * @param {string} event
   * @param {number} [priority]
   * @param {Function} callback
   * @param {Object} [that]
   */
  Viewer$3.prototype.on = function (event, priority, callback, target) {
    return this.get('eventBus').on(event, priority, callback, target);
  };

  /**
   * De-register an event listener
   *
   * @param {string} event
   * @param {Function} callback
   */
  Viewer$3.prototype.off = function (event, callback) {
    this.get('eventBus').off(event, callback);
  };
  Viewer$3.prototype._init = function (container, options) {
    var additionalModules = options.additionalModules,
      canvas = options.canvas,
      additionalOptions = _objectWithoutProperties$6(options, _excluded$7);
    var baseModules = options.modules || this.getModules(),
      staticModules = [{
        drd: ['value', this]
      }];
    var modules = [...staticModules, ...baseModules, ...(additionalModules || [])];
    var diagramOptions = _objectSpread$9(_objectSpread$9({}, additionalOptions), {}, {
      canvas: _objectSpread$9(_objectSpread$9({}, canvas), {}, {
        container
      }),
      modules
    });

    // invoke diagram constructor
    Diagram.call(this, diagramOptions);
    if (options && options.container) {
      this.attachTo(options.container);
    }
  };

  /**
   * Emit an event on the underlying {@link EventBus}
   *
   * @param  {string} type
   * @param  {Object} event
   *
   * @return {Object} event processing result (if any)
   */
  Viewer$3.prototype._emit = function (type, event) {
    return this.get('eventBus').fire(type, event);
  };
  Viewer$3.prototype._createContainer = function () {
    return domify$1('<div class="dmn-drd-container"></div>');
  };

  /**
   * Open diagram element.
   *
   * @param  {ModdleElement} definitions
   * @returns {Promise} Resolves with {OpenResult} when successful
   * or rejects with {OpenError}
   */
  Viewer$3.prototype.open = function (definitions) {
    var self = this;
    return new Promise((resolve, reject) => {
      var err;

      // use try/catch to not swallow synchronous exceptions
      // that may be raised during model parsing
      try {
        if (self._definitions) {
          // clear existing rendered diagram
          self.clear();
        }

        // update definitions
        self._definitions = definitions;

        // perform graphical import
        return importDRD(self, definitions, function (err, warnings) {
          if (err) {
            err.warnings = warnings || [];
            reject(err);
          } else {
            resolve({
              warnings: warnings || []
            });
          }
        });
      } catch (e) {
        err = e;
      }
      if (err) {
        err.warnings = err.warnings || [];
        reject(err);
      } else {
        resolve({
          warnings: []
        });
      }
    });
  };

  /**
   * Attach viewer to given parent node.
   *
   * @param  {Element} parentNode
   */
  Viewer$3.prototype.attachTo = function (parentNode) {
    if (!parentNode) {
      throw new Error('parentNode required');
    }

    // ensure we detach from the
    // previous, old parent
    this.detach();
    var container = this._container;
    parentNode.appendChild(container);
    this._emit('attach', {});
    this.get('canvas').resized();
  };

  /**
   * Detach viewer from parent node, if attached.
   */
  Viewer$3.prototype.detach = function () {
    var container = this._container,
      parentNode = container.parentNode;
    if (!parentNode) {
      return;
    }
    this._emit('detach', {});
    parentNode.removeChild(container);
  };
  Viewer$3.prototype._modules = [CoreModule$1, TranslateModule, SelectionModule, OverlaysModule, DefinitionPropertiesViewer, DrillDownModule];

  /**
   * Adds the project logo to the diagram container as
   * required by the bpmn.io license.
   *
   * @see http://bpmn.io/license
   *
   * @param {Element} container
   */
  function addProjectLogo(container) {
    var linkMarkup = '<a href="http://bpmn.io" ' + 'target="_blank" ' + 'class="bjs-powered-by" ' + 'title="Powered by bpmn.io" ' + 'style="position: absolute; bottom: 15px; right: 15px; z-index: 100;">' + BPMNIO_IMG + '</a>';
    var linkElement = domify$1(linkMarkup);
    container.appendChild(linkElement);
    event.bind(linkElement, 'click', function (event) {
      open();
      event.preventDefault();
    });
  }

  /* </project-logo> */

  function center(bounds) {
    return {
      x: bounds.x + bounds.width / 2,
      y: bounds.y + bounds.height / 2
    };
  }
  function delta(a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  }

  /**
   * Get the logarithm of x with base 10
   * @param  {Integer} value
   */
  function log10(x) {
    return Math.log(x) / Math.log(10);
  }

  /**
   * Get step size for given range and number of steps.
   *
   * @param {Object} range
   * @param {number} range.min
   * @param {number} range.max
   */
  function getStepSize(range, steps) {
    var minLinearRange = log10(range.min),
      maxLinearRange = log10(range.max);
    var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);
    return absoluteLinearRange / steps;
  }
  function cap(range, scale) {
    return Math.max(range.min, Math.min(range.max, scale));
  }

  var sign = Math.sign || function (n) {
    return n >= 0 ? 1 : -1;
  };
  var RANGE$2 = {
      min: 0.2,
      max: 4
    },
    NUM_STEPS = 10;
  var DELTA_THRESHOLD = 0.1;
  var DEFAULT_SCALE = 0.75;

  /**
   * An implementation of zooming and scrolling within the
   * {@link Canvas} via the mouse wheel.
   *
   * Mouse wheel zooming / scrolling may be disabled using
   * the {@link toggle(enabled)} method.
   *
   * @param {Object} [config]
   * @param {boolean} [config.enabled=true] default enabled state
   * @param {number} [config.scale=.75] scroll sensivity
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function ZoomScroll$1(config, eventBus, canvas) {
    config = config || {};
    this._enabled = false;
    this._canvas = canvas;
    this._container = canvas._container;
    this._handleWheel = bind$3(this._handleWheel, this);
    this._totalDelta = 0;
    this._scale = config.scale || DEFAULT_SCALE;
    var self = this;
    eventBus.on('canvas.init', function (e) {
      self._init(config.enabled !== false);
    });
  }
  ZoomScroll$1.$inject = ['config.zoomScroll', 'eventBus', 'canvas'];
  ZoomScroll$1.prototype.scroll = function scroll(delta) {
    this._canvas.scroll(delta);
  };
  ZoomScroll$1.prototype.reset = function reset() {
    this._canvas.zoom('fit-viewport');
  };

  /**
   * Zoom depending on delta.
   *
   * @param {number} delta
   * @param {Object} position
   */
  ZoomScroll$1.prototype.zoom = function zoom(delta, position) {
    // zoom with half the step size of stepZoom
    var stepSize = getStepSize(RANGE$2, NUM_STEPS * 2);

    // add until threshold reached
    this._totalDelta += delta;
    if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {
      this._zoom(delta, position, stepSize);

      // reset
      this._totalDelta = 0;
    }
  };
  ZoomScroll$1.prototype._handleWheel = function handleWheel(event) {
    // event is already handled by '.djs-scrollable'
    if (closest(event.target, '.djs-scrollable', true)) {
      return;
    }
    var element = this._container;
    event.preventDefault();

    // pinch to zoom is mapped to wheel + ctrlKey = true
    // in modern browsers (!)

    var isZoom = event.ctrlKey;
    var isHorizontalScroll = event.shiftKey;
    var factor = -1 * this._scale,
      delta;
    if (isZoom) {
      factor *= event.deltaMode === 0 ? 0.020 : 0.32;
    } else {
      factor *= event.deltaMode === 0 ? 1.0 : 16.0;
    }
    if (isZoom) {
      var elementRect = element.getBoundingClientRect();
      var offset = {
        x: event.clientX - elementRect.left,
        y: event.clientY - elementRect.top
      };
      delta = Math.sqrt(Math.pow(event.deltaY, 2) + Math.pow(event.deltaX, 2)) * sign(event.deltaY) * factor;

      // zoom in relative to diagram {x,y} coordinates
      this.zoom(delta, offset);
    } else {
      if (isHorizontalScroll) {
        delta = {
          dx: factor * event.deltaY,
          dy: 0
        };
      } else {
        delta = {
          dx: factor * event.deltaX,
          dy: factor * event.deltaY
        };
      }
      this.scroll(delta);
    }
  };

  /**
   * Zoom with fixed step size.
   *
   * @param {number} delta - Zoom delta (1 for zooming in, -1 for out).
   * @param {Object} position
   */
  ZoomScroll$1.prototype.stepZoom = function stepZoom(delta, position) {
    var stepSize = getStepSize(RANGE$2, NUM_STEPS);
    this._zoom(delta, position, stepSize);
  };

  /**
   * Zoom in/out given a step size.
   *
   * @param {number} delta
   * @param {Object} position
   * @param {number} stepSize
   */
  ZoomScroll$1.prototype._zoom = function (delta, position, stepSize) {
    var canvas = this._canvas;
    var direction = delta > 0 ? 1 : -1;
    var currentLinearZoomLevel = log10(canvas.zoom());

    // snap to a proximate zoom step
    var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;

    // increase or decrease one zoom step in the given direction
    newLinearZoomLevel += stepSize * direction;

    // calculate the absolute logarithmic zoom level based on the linear zoom level
    // (e.g. 2 for an absolute x2 zoom)
    var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);
    canvas.zoom(cap(RANGE$2, newLogZoomLevel), position);
  };

  /**
   * Toggle the zoom scroll ability via mouse wheel.
   *
   * @param  {boolean} [newEnabled] new enabled state
   */
  ZoomScroll$1.prototype.toggle = function toggle(newEnabled) {
    var element = this._container;
    var handleWheel = this._handleWheel;
    var oldEnabled = this._enabled;
    if (typeof newEnabled === 'undefined') {
      newEnabled = !oldEnabled;
    }

    // only react on actual changes
    if (oldEnabled !== newEnabled) {
      // add or remove wheel listener based on
      // changed enabled state
      event[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);
    }
    this._enabled = newEnabled;
    return newEnabled;
  };
  ZoomScroll$1.prototype._init = function (newEnabled) {
    this.toggle(newEnabled);
  };

  var ZoomScroll = {
    __init__: ['zoomScroll'],
    zoomScroll: ['type', ZoomScroll$1]
  };

  var CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;
  function set(mode) {
    var classes = classes$1(document.body);
    classes.removeMatching(CURSOR_CLS_PATTERN);
    if (mode) {
      classes.add('djs-cursor-' + mode);
    }
  }
  function unset() {
    set(null);
  }

  var TRAP_PRIORITY = 5000;

  /**
   * Installs a click trap that prevents a ghost click following a dragging operation.
   *
   * @return {Function} a function to immediately remove the installed trap.
   */
  function install(eventBus, eventName) {
    eventName = eventName || 'element.click';
    function trap() {
      return false;
    }
    eventBus.once(eventName, TRAP_PRIORITY, trap);
    return function () {
      eventBus.off(eventName, trap);
    };
  }

  var THRESHOLD$1 = 15;

  /**
   * Move the canvas via mouse.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function MoveCanvas$1(eventBus, canvas) {
    var context;

    // listen for move on element mouse down;
    // allow others to hook into the event before us though
    // (dragging / element moving will do this)
    eventBus.on('element.mousedown', 500, function (e) {
      return handleStart(e.originalEvent);
    });
    function handleMove(event) {
      var start = context.start,
        button = context.button,
        position = toPoint(event),
        delta$1 = delta(position, start);
      if (!context.dragging && length(delta$1) > THRESHOLD$1) {
        context.dragging = true;
        if (button === 0) {
          install(eventBus);
        }
        set('grab');
      }
      if (context.dragging) {
        var lastPosition = context.last || context.start;
        delta$1 = delta(position, lastPosition);
        canvas.scroll({
          dx: delta$1.x,
          dy: delta$1.y
        });
        context.last = position;
      }

      // prevent select
      event.preventDefault();
    }
    function handleEnd(event$1) {
      event.unbind(document, 'mousemove', handleMove);
      event.unbind(document, 'mouseup', handleEnd);
      context = null;
      unset();
    }
    function handleStart(event$1) {
      // event is already handled by '.djs-draggable'
      if (closest(event$1.target, '.djs-draggable')) {
        return;
      }
      var button = event$1.button;

      // reject right mouse button or modifier key
      if (button >= 2 || event$1.ctrlKey || event$1.shiftKey || event$1.altKey) {
        return;
      }
      context = {
        button: button,
        start: toPoint(event$1)
      };
      event.bind(document, 'mousemove', handleMove);
      event.bind(document, 'mouseup', handleEnd);

      // we've handled the event
      return true;
    }
    this.isActive = function () {
      return !!context;
    };
  }
  MoveCanvas$1.$inject = ['eventBus', 'canvas'];

  // helpers ///////

  function length(point) {
    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
  }

  var MoveCanvas = {
    __init__: ['moveCanvas'],
    moveCanvas: ['type', MoveCanvas$1]
  };

  var hammerExports = {};
  var hammer = {
    get exports(){ return hammerExports; },
    set exports(v){ hammerExports = v; },
  };

  /*! Hammer.JS - v2.0.7 - 2016-04-22
   * http://hammerjs.github.io/
   *
   * Copyright (c) 2016 Jorik Tangelder;
   * Licensed under the MIT license */

  (function (module) {
  	(function (window, document, exportName, undefined$1) {

  	  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
  	  var TEST_ELEMENT = document.createElement('div');
  	  var TYPE_FUNCTION = 'function';
  	  var round = Math.round;
  	  var abs = Math.abs;
  	  var now = Date.now;

  	  /**
  	   * set a timeout with a given scope
  	   * @param {Function} fn
  	   * @param {Number} timeout
  	   * @param {Object} context
  	   * @returns {number}
  	   */
  	  function setTimeoutContext(fn, timeout, context) {
  	    return setTimeout(bindFn(fn, context), timeout);
  	  }

  	  /**
  	   * if the argument is an array, we want to execute the fn on each entry
  	   * if it aint an array we don't want to do a thing.
  	   * this is used by all the methods that accept a single and array argument.
  	   * @param {*|Array} arg
  	   * @param {String} fn
  	   * @param {Object} [context]
  	   * @returns {Boolean}
  	   */
  	  function invokeArrayArg(arg, fn, context) {
  	    if (Array.isArray(arg)) {
  	      each(arg, context[fn], context);
  	      return true;
  	    }
  	    return false;
  	  }

  	  /**
  	   * walk objects and arrays
  	   * @param {Object} obj
  	   * @param {Function} iterator
  	   * @param {Object} context
  	   */
  	  function each(obj, iterator, context) {
  	    var i;
  	    if (!obj) {
  	      return;
  	    }
  	    if (obj.forEach) {
  	      obj.forEach(iterator, context);
  	    } else if (obj.length !== undefined$1) {
  	      i = 0;
  	      while (i < obj.length) {
  	        iterator.call(context, obj[i], i, obj);
  	        i++;
  	      }
  	    } else {
  	      for (i in obj) {
  	        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
  	      }
  	    }
  	  }

  	  /**
  	   * wrap a method with a deprecation warning and stack trace
  	   * @param {Function} method
  	   * @param {String} name
  	   * @param {String} message
  	   * @returns {Function} A new function wrapping the supplied method.
  	   */
  	  function deprecate(method, name, message) {
  	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
  	    return function () {
  	      var e = new Error('get-stack-trace');
  	      var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
  	      var log = window.console && (window.console.warn || window.console.log);
  	      if (log) {
  	        log.call(window.console, deprecationMessage, stack);
  	      }
  	      return method.apply(this, arguments);
  	    };
  	  }

  	  /**
  	   * extend object.
  	   * means that properties in dest will be overwritten by the ones in src.
  	   * @param {Object} target
  	   * @param {...Object} objects_to_assign
  	   * @returns {Object} target
  	   */
  	  var assign;
  	  if (typeof Object.assign !== 'function') {
  	    assign = function assign(target) {
  	      if (target === undefined$1 || target === null) {
  	        throw new TypeError('Cannot convert undefined or null to object');
  	      }
  	      var output = Object(target);
  	      for (var index = 1; index < arguments.length; index++) {
  	        var source = arguments[index];
  	        if (source !== undefined$1 && source !== null) {
  	          for (var nextKey in source) {
  	            if (source.hasOwnProperty(nextKey)) {
  	              output[nextKey] = source[nextKey];
  	            }
  	          }
  	        }
  	      }
  	      return output;
  	    };
  	  } else {
  	    assign = Object.assign;
  	  }

  	  /**
  	   * extend object.
  	   * means that properties in dest will be overwritten by the ones in src.
  	   * @param {Object} dest
  	   * @param {Object} src
  	   * @param {Boolean} [merge=false]
  	   * @returns {Object} dest
  	   */
  	  var extend = deprecate(function extend(dest, src, merge) {
  	    var keys = Object.keys(src);
  	    var i = 0;
  	    while (i < keys.length) {
  	      if (!merge || merge && dest[keys[i]] === undefined$1) {
  	        dest[keys[i]] = src[keys[i]];
  	      }
  	      i++;
  	    }
  	    return dest;
  	  }, 'extend', 'Use `assign`.');

  	  /**
  	   * merge the values from src in the dest.
  	   * means that properties that exist in dest will not be overwritten by src
  	   * @param {Object} dest
  	   * @param {Object} src
  	   * @returns {Object} dest
  	   */
  	  var merge = deprecate(function merge(dest, src) {
  	    return extend(dest, src, true);
  	  }, 'merge', 'Use `assign`.');

  	  /**
  	   * simple class inheritance
  	   * @param {Function} child
  	   * @param {Function} base
  	   * @param {Object} [properties]
  	   */
  	  function inherit(child, base, properties) {
  	    var baseP = base.prototype,
  	      childP;
  	    childP = child.prototype = Object.create(baseP);
  	    childP.constructor = child;
  	    childP._super = baseP;
  	    if (properties) {
  	      assign(childP, properties);
  	    }
  	  }

  	  /**
  	   * simple function bind
  	   * @param {Function} fn
  	   * @param {Object} context
  	   * @returns {Function}
  	   */
  	  function bindFn(fn, context) {
  	    return function boundFn() {
  	      return fn.apply(context, arguments);
  	    };
  	  }

  	  /**
  	   * let a boolean value also be a function that must return a boolean
  	   * this first item in args will be used as the context
  	   * @param {Boolean|Function} val
  	   * @param {Array} [args]
  	   * @returns {Boolean}
  	   */
  	  function boolOrFn(val, args) {
  	    if (typeof val == TYPE_FUNCTION) {
  	      return val.apply(args ? args[0] || undefined$1 : undefined$1, args);
  	    }
  	    return val;
  	  }

  	  /**
  	   * use the val2 when val1 is undefined
  	   * @param {*} val1
  	   * @param {*} val2
  	   * @returns {*}
  	   */
  	  function ifUndefined(val1, val2) {
  	    return val1 === undefined$1 ? val2 : val1;
  	  }

  	  /**
  	   * addEventListener with multiple events at once
  	   * @param {EventTarget} target
  	   * @param {String} types
  	   * @param {Function} handler
  	   */
  	  function addEventListeners(target, types, handler) {
  	    each(splitStr(types), function (type) {
  	      target.addEventListener(type, handler, false);
  	    });
  	  }

  	  /**
  	   * removeEventListener with multiple events at once
  	   * @param {EventTarget} target
  	   * @param {String} types
  	   * @param {Function} handler
  	   */
  	  function removeEventListeners(target, types, handler) {
  	    each(splitStr(types), function (type) {
  	      target.removeEventListener(type, handler, false);
  	    });
  	  }

  	  /**
  	   * find if a node is in the given parent
  	   * @method hasParent
  	   * @param {HTMLElement} node
  	   * @param {HTMLElement} parent
  	   * @return {Boolean} found
  	   */
  	  function hasParent(node, parent) {
  	    while (node) {
  	      if (node == parent) {
  	        return true;
  	      }
  	      node = node.parentNode;
  	    }
  	    return false;
  	  }

  	  /**
  	   * small indexOf wrapper
  	   * @param {String} str
  	   * @param {String} find
  	   * @returns {Boolean} found
  	   */
  	  function inStr(str, find) {
  	    return str.indexOf(find) > -1;
  	  }

  	  /**
  	   * split string on whitespace
  	   * @param {String} str
  	   * @returns {Array} words
  	   */
  	  function splitStr(str) {
  	    return str.trim().split(/\s+/g);
  	  }

  	  /**
  	   * find if a array contains the object using indexOf or a simple polyFill
  	   * @param {Array} src
  	   * @param {String} find
  	   * @param {String} [findByKey]
  	   * @return {Boolean|Number} false when not found, or the index
  	   */
  	  function inArray(src, find, findByKey) {
  	    if (src.indexOf && !findByKey) {
  	      return src.indexOf(find);
  	    } else {
  	      var i = 0;
  	      while (i < src.length) {
  	        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
  	          return i;
  	        }
  	        i++;
  	      }
  	      return -1;
  	    }
  	  }

  	  /**
  	   * convert array-like objects to real arrays
  	   * @param {Object} obj
  	   * @returns {Array}
  	   */
  	  function toArray(obj) {
  	    return Array.prototype.slice.call(obj, 0);
  	  }

  	  /**
  	   * unique array with objects based on a key (like 'id') or just by the array's value
  	   * @param {Array} src [{id:1},{id:2},{id:1}]
  	   * @param {String} [key]
  	   * @param {Boolean} [sort=False]
  	   * @returns {Array} [{id:1},{id:2}]
  	   */
  	  function uniqueArray(src, key, sort) {
  	    var results = [];
  	    var values = [];
  	    var i = 0;
  	    while (i < src.length) {
  	      var val = key ? src[i][key] : src[i];
  	      if (inArray(values, val) < 0) {
  	        results.push(src[i]);
  	      }
  	      values[i] = val;
  	      i++;
  	    }
  	    if (sort) {
  	      if (!key) {
  	        results = results.sort();
  	      } else {
  	        results = results.sort(function sortUniqueArray(a, b) {
  	          return a[key] > b[key];
  	        });
  	      }
  	    }
  	    return results;
  	  }

  	  /**
  	   * get the prefixed property
  	   * @param {Object} obj
  	   * @param {String} property
  	   * @returns {String|Undefined} prefixed
  	   */
  	  function prefixed(obj, property) {
  	    var prefix, prop;
  	    var camelProp = property[0].toUpperCase() + property.slice(1);
  	    var i = 0;
  	    while (i < VENDOR_PREFIXES.length) {
  	      prefix = VENDOR_PREFIXES[i];
  	      prop = prefix ? prefix + camelProp : property;
  	      if (prop in obj) {
  	        return prop;
  	      }
  	      i++;
  	    }
  	    return undefined$1;
  	  }

  	  /**
  	   * get a unique id
  	   * @returns {number} uniqueId
  	   */
  	  var _uniqueId = 1;
  	  function uniqueId() {
  	    return _uniqueId++;
  	  }

  	  /**
  	   * get the window object of an element
  	   * @param {HTMLElement} element
  	   * @returns {DocumentView|Window}
  	   */
  	  function getWindowForElement(element) {
  	    var doc = element.ownerDocument || element;
  	    return doc.defaultView || doc.parentWindow || window;
  	  }
  	  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
  	  var SUPPORT_TOUCH = ('ontouchstart' in window);
  	  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;
  	  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
  	  var INPUT_TYPE_TOUCH = 'touch';
  	  var INPUT_TYPE_PEN = 'pen';
  	  var INPUT_TYPE_MOUSE = 'mouse';
  	  var INPUT_TYPE_KINECT = 'kinect';
  	  var COMPUTE_INTERVAL = 25;
  	  var INPUT_START = 1;
  	  var INPUT_MOVE = 2;
  	  var INPUT_END = 4;
  	  var INPUT_CANCEL = 8;
  	  var DIRECTION_NONE = 1;
  	  var DIRECTION_LEFT = 2;
  	  var DIRECTION_RIGHT = 4;
  	  var DIRECTION_UP = 8;
  	  var DIRECTION_DOWN = 16;
  	  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
  	  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
  	  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
  	  var PROPS_XY = ['x', 'y'];
  	  var PROPS_CLIENT_XY = ['clientX', 'clientY'];

  	  /**
  	   * create new input type manager
  	   * @param {Manager} manager
  	   * @param {Function} callback
  	   * @returns {Input}
  	   * @constructor
  	   */
  	  function Input(manager, callback) {
  	    var self = this;
  	    this.manager = manager;
  	    this.callback = callback;
  	    this.element = manager.element;
  	    this.target = manager.options.inputTarget;

  	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
  	    // so when disabled the input events are completely bypassed.
  	    this.domHandler = function (ev) {
  	      if (boolOrFn(manager.options.enable, [manager])) {
  	        self.handler(ev);
  	      }
  	    };
  	    this.init();
  	  }
  	  Input.prototype = {
  	    /**
  	     * should handle the inputEvent data and trigger the callback
  	     * @virtual
  	     */
  	    handler: function () {},
  	    /**
  	     * bind the events
  	     */
  	    init: function () {
  	      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
  	      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
  	      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  	    },
  	    /**
  	     * unbind the events
  	     */
  	    destroy: function () {
  	      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
  	      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
  	      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  	    }
  	  };

  	  /**
  	   * create new input type manager
  	   * called by the Manager constructor
  	   * @param {Hammer} manager
  	   * @returns {Input}
  	   */
  	  function createInputInstance(manager) {
  	    var Type;
  	    var inputClass = manager.options.inputClass;
  	    if (inputClass) {
  	      Type = inputClass;
  	    } else if (SUPPORT_POINTER_EVENTS) {
  	      Type = PointerEventInput;
  	    } else if (SUPPORT_ONLY_TOUCH) {
  	      Type = TouchInput;
  	    } else if (!SUPPORT_TOUCH) {
  	      Type = MouseInput;
  	    } else {
  	      Type = TouchMouseInput;
  	    }
  	    return new Type(manager, inputHandler);
  	  }

  	  /**
  	   * handle input events
  	   * @param {Manager} manager
  	   * @param {String} eventType
  	   * @param {Object} input
  	   */
  	  function inputHandler(manager, eventType, input) {
  	    var pointersLen = input.pointers.length;
  	    var changedPointersLen = input.changedPointers.length;
  	    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
  	    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
  	    input.isFirst = !!isFirst;
  	    input.isFinal = !!isFinal;
  	    if (isFirst) {
  	      manager.session = {};
  	    }

  	    // source event is the normalized value of the domEvents
  	    // like 'touchstart, mouseup, pointerdown'
  	    input.eventType = eventType;

  	    // compute scale, rotation etc
  	    computeInputData(manager, input);

  	    // emit secret event
  	    manager.emit('hammer.input', input);
  	    manager.recognize(input);
  	    manager.session.prevInput = input;
  	  }

  	  /**
  	   * extend the data with some usable properties like scale, rotate, velocity etc
  	   * @param {Object} manager
  	   * @param {Object} input
  	   */
  	  function computeInputData(manager, input) {
  	    var session = manager.session;
  	    var pointers = input.pointers;
  	    var pointersLength = pointers.length;

  	    // store the first input to calculate the distance and direction
  	    if (!session.firstInput) {
  	      session.firstInput = simpleCloneInputData(input);
  	    }

  	    // to compute scale and rotation we need to store the multiple touches
  	    if (pointersLength > 1 && !session.firstMultiple) {
  	      session.firstMultiple = simpleCloneInputData(input);
  	    } else if (pointersLength === 1) {
  	      session.firstMultiple = false;
  	    }
  	    var firstInput = session.firstInput;
  	    var firstMultiple = session.firstMultiple;
  	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  	    var center = input.center = getCenter(pointers);
  	    input.timeStamp = now();
  	    input.deltaTime = input.timeStamp - firstInput.timeStamp;
  	    input.angle = getAngle(offsetCenter, center);
  	    input.distance = getDistance(offsetCenter, center);
  	    computeDeltaXY(session, input);
  	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
  	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  	    input.overallVelocityX = overallVelocity.x;
  	    input.overallVelocityY = overallVelocity.y;
  	    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
  	    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  	    computeIntervalInputData(session, input);

  	    // find the correct target
  	    var target = manager.element;
  	    if (hasParent(input.srcEvent.target, target)) {
  	      target = input.srcEvent.target;
  	    }
  	    input.target = target;
  	  }
  	  function computeDeltaXY(session, input) {
  	    var center = input.center;
  	    var offset = session.offsetDelta || {};
  	    var prevDelta = session.prevDelta || {};
  	    var prevInput = session.prevInput || {};
  	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
  	      prevDelta = session.prevDelta = {
  	        x: prevInput.deltaX || 0,
  	        y: prevInput.deltaY || 0
  	      };
  	      offset = session.offsetDelta = {
  	        x: center.x,
  	        y: center.y
  	      };
  	    }
  	    input.deltaX = prevDelta.x + (center.x - offset.x);
  	    input.deltaY = prevDelta.y + (center.y - offset.y);
  	  }

  	  /**
  	   * velocity is calculated every x ms
  	   * @param {Object} session
  	   * @param {Object} input
  	   */
  	  function computeIntervalInputData(session, input) {
  	    var last = session.lastInterval || input,
  	      deltaTime = input.timeStamp - last.timeStamp,
  	      velocity,
  	      velocityX,
  	      velocityY,
  	      direction;
  	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {
  	      var deltaX = input.deltaX - last.deltaX;
  	      var deltaY = input.deltaY - last.deltaY;
  	      var v = getVelocity(deltaTime, deltaX, deltaY);
  	      velocityX = v.x;
  	      velocityY = v.y;
  	      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
  	      direction = getDirection(deltaX, deltaY);
  	      session.lastInterval = input;
  	    } else {
  	      // use latest velocity info if it doesn't overtake a minimum period
  	      velocity = last.velocity;
  	      velocityX = last.velocityX;
  	      velocityY = last.velocityY;
  	      direction = last.direction;
  	    }
  	    input.velocity = velocity;
  	    input.velocityX = velocityX;
  	    input.velocityY = velocityY;
  	    input.direction = direction;
  	  }

  	  /**
  	   * create a simple clone from the input used for storage of firstInput and firstMultiple
  	   * @param {Object} input
  	   * @returns {Object} clonedInputData
  	   */
  	  function simpleCloneInputData(input) {
  	    // make a simple copy of the pointers because we will get a reference if we don't
  	    // we only need clientXY for the calculations
  	    var pointers = [];
  	    var i = 0;
  	    while (i < input.pointers.length) {
  	      pointers[i] = {
  	        clientX: round(input.pointers[i].clientX),
  	        clientY: round(input.pointers[i].clientY)
  	      };
  	      i++;
  	    }
  	    return {
  	      timeStamp: now(),
  	      pointers: pointers,
  	      center: getCenter(pointers),
  	      deltaX: input.deltaX,
  	      deltaY: input.deltaY
  	    };
  	  }

  	  /**
  	   * get the center of all the pointers
  	   * @param {Array} pointers
  	   * @return {Object} center contains `x` and `y` properties
  	   */
  	  function getCenter(pointers) {
  	    var pointersLength = pointers.length;

  	    // no need to loop when only one touch
  	    if (pointersLength === 1) {
  	      return {
  	        x: round(pointers[0].clientX),
  	        y: round(pointers[0].clientY)
  	      };
  	    }
  	    var x = 0,
  	      y = 0,
  	      i = 0;
  	    while (i < pointersLength) {
  	      x += pointers[i].clientX;
  	      y += pointers[i].clientY;
  	      i++;
  	    }
  	    return {
  	      x: round(x / pointersLength),
  	      y: round(y / pointersLength)
  	    };
  	  }

  	  /**
  	   * calculate the velocity between two points. unit is in px per ms.
  	   * @param {Number} deltaTime
  	   * @param {Number} x
  	   * @param {Number} y
  	   * @return {Object} velocity `x` and `y`
  	   */
  	  function getVelocity(deltaTime, x, y) {
  	    return {
  	      x: x / deltaTime || 0,
  	      y: y / deltaTime || 0
  	    };
  	  }

  	  /**
  	   * get the direction between two points
  	   * @param {Number} x
  	   * @param {Number} y
  	   * @return {Number} direction
  	   */
  	  function getDirection(x, y) {
  	    if (x === y) {
  	      return DIRECTION_NONE;
  	    }
  	    if (abs(x) >= abs(y)) {
  	      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  	    }
  	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
  	  }

  	  /**
  	   * calculate the absolute distance between two points
  	   * @param {Object} p1 {x, y}
  	   * @param {Object} p2 {x, y}
  	   * @param {Array} [props] containing x and y keys
  	   * @return {Number} distance
  	   */
  	  function getDistance(p1, p2, props) {
  	    if (!props) {
  	      props = PROPS_XY;
  	    }
  	    var x = p2[props[0]] - p1[props[0]],
  	      y = p2[props[1]] - p1[props[1]];
  	    return Math.sqrt(x * x + y * y);
  	  }

  	  /**
  	   * calculate the angle between two coordinates
  	   * @param {Object} p1
  	   * @param {Object} p2
  	   * @param {Array} [props] containing x and y keys
  	   * @return {Number} angle
  	   */
  	  function getAngle(p1, p2, props) {
  	    if (!props) {
  	      props = PROPS_XY;
  	    }
  	    var x = p2[props[0]] - p1[props[0]],
  	      y = p2[props[1]] - p1[props[1]];
  	    return Math.atan2(y, x) * 180 / Math.PI;
  	  }

  	  /**
  	   * calculate the rotation degrees between two pointersets
  	   * @param {Array} start array of pointers
  	   * @param {Array} end array of pointers
  	   * @return {Number} rotation
  	   */
  	  function getRotation(start, end) {
  	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
  	  }

  	  /**
  	   * calculate the scale factor between two pointersets
  	   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
  	   * @param {Array} start array of pointers
  	   * @param {Array} end array of pointers
  	   * @return {Number} scale
  	   */
  	  function getScale(start, end) {
  	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
  	  }
  	  var MOUSE_INPUT_MAP = {
  	    mousedown: INPUT_START,
  	    mousemove: INPUT_MOVE,
  	    mouseup: INPUT_END
  	  };
  	  var MOUSE_ELEMENT_EVENTS = 'mousedown';
  	  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

  	  /**
  	   * Mouse events input
  	   * @constructor
  	   * @extends Input
  	   */
  	  function MouseInput() {
  	    this.evEl = MOUSE_ELEMENT_EVENTS;
  	    this.evWin = MOUSE_WINDOW_EVENTS;
  	    this.pressed = false; // mousedown state

  	    Input.apply(this, arguments);
  	  }
  	  inherit(MouseInput, Input, {
  	    /**
  	     * handle mouse events
  	     * @param {Object} ev
  	     */
  	    handler: function MEhandler(ev) {
  	      var eventType = MOUSE_INPUT_MAP[ev.type];

  	      // on start we want to have the left mouse button down
  	      if (eventType & INPUT_START && ev.button === 0) {
  	        this.pressed = true;
  	      }
  	      if (eventType & INPUT_MOVE && ev.which !== 1) {
  	        eventType = INPUT_END;
  	      }

  	      // mouse must be down
  	      if (!this.pressed) {
  	        return;
  	      }
  	      if (eventType & INPUT_END) {
  	        this.pressed = false;
  	      }
  	      this.callback(this.manager, eventType, {
  	        pointers: [ev],
  	        changedPointers: [ev],
  	        pointerType: INPUT_TYPE_MOUSE,
  	        srcEvent: ev
  	      });
  	    }
  	  });
  	  var POINTER_INPUT_MAP = {
  	    pointerdown: INPUT_START,
  	    pointermove: INPUT_MOVE,
  	    pointerup: INPUT_END,
  	    pointercancel: INPUT_CANCEL,
  	    pointerout: INPUT_CANCEL
  	  };

  	  // in IE10 the pointer types is defined as an enum
  	  var IE10_POINTER_TYPE_ENUM = {
  	    2: INPUT_TYPE_TOUCH,
  	    3: INPUT_TYPE_PEN,
  	    4: INPUT_TYPE_MOUSE,
  	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
  	  };

  	  var POINTER_ELEMENT_EVENTS = 'pointerdown';
  	  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

  	  // IE10 has prefixed support, and case-sensitive
  	  if (window.MSPointerEvent && !window.PointerEvent) {
  	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
  	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
  	  }

  	  /**
  	   * Pointer events input
  	   * @constructor
  	   * @extends Input
  	   */
  	  function PointerEventInput() {
  	    this.evEl = POINTER_ELEMENT_EVENTS;
  	    this.evWin = POINTER_WINDOW_EVENTS;
  	    Input.apply(this, arguments);
  	    this.store = this.manager.session.pointerEvents = [];
  	  }
  	  inherit(PointerEventInput, Input, {
  	    /**
  	     * handle mouse events
  	     * @param {Object} ev
  	     */
  	    handler: function PEhandler(ev) {
  	      var store = this.store;
  	      var removePointer = false;
  	      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
  	      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
  	      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
  	      var isTouch = pointerType == INPUT_TYPE_TOUCH;

  	      // get index of the event in the store
  	      var storeIndex = inArray(store, ev.pointerId, 'pointerId');

  	      // start and mouse must be down
  	      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
  	        if (storeIndex < 0) {
  	          store.push(ev);
  	          storeIndex = store.length - 1;
  	        }
  	      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
  	        removePointer = true;
  	      }

  	      // it not found, so the pointer hasn't been down (so it's probably a hover)
  	      if (storeIndex < 0) {
  	        return;
  	      }

  	      // update the event in the store
  	      store[storeIndex] = ev;
  	      this.callback(this.manager, eventType, {
  	        pointers: store,
  	        changedPointers: [ev],
  	        pointerType: pointerType,
  	        srcEvent: ev
  	      });
  	      if (removePointer) {
  	        // remove from the store
  	        store.splice(storeIndex, 1);
  	      }
  	    }
  	  });
  	  var SINGLE_TOUCH_INPUT_MAP = {
  	    touchstart: INPUT_START,
  	    touchmove: INPUT_MOVE,
  	    touchend: INPUT_END,
  	    touchcancel: INPUT_CANCEL
  	  };
  	  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
  	  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

  	  /**
  	   * Touch events input
  	   * @constructor
  	   * @extends Input
  	   */
  	  function SingleTouchInput() {
  	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
  	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
  	    this.started = false;
  	    Input.apply(this, arguments);
  	  }
  	  inherit(SingleTouchInput, Input, {
  	    handler: function TEhandler(ev) {
  	      var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

  	      // should we handle the touch events?
  	      if (type === INPUT_START) {
  	        this.started = true;
  	      }
  	      if (!this.started) {
  	        return;
  	      }
  	      var touches = normalizeSingleTouches.call(this, ev, type);

  	      // when done, reset the started state
  	      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
  	        this.started = false;
  	      }
  	      this.callback(this.manager, type, {
  	        pointers: touches[0],
  	        changedPointers: touches[1],
  	        pointerType: INPUT_TYPE_TOUCH,
  	        srcEvent: ev
  	      });
  	    }
  	  });

  	  /**
  	   * @this {TouchInput}
  	   * @param {Object} ev
  	   * @param {Number} type flag
  	   * @returns {undefined|Array} [all, changed]
  	   */
  	  function normalizeSingleTouches(ev, type) {
  	    var all = toArray(ev.touches);
  	    var changed = toArray(ev.changedTouches);
  	    if (type & (INPUT_END | INPUT_CANCEL)) {
  	      all = uniqueArray(all.concat(changed), 'identifier', true);
  	    }
  	    return [all, changed];
  	  }
  	  var TOUCH_INPUT_MAP = {
  	    touchstart: INPUT_START,
  	    touchmove: INPUT_MOVE,
  	    touchend: INPUT_END,
  	    touchcancel: INPUT_CANCEL
  	  };
  	  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

  	  /**
  	   * Multi-user touch events input
  	   * @constructor
  	   * @extends Input
  	   */
  	  function TouchInput() {
  	    this.evTarget = TOUCH_TARGET_EVENTS;
  	    this.targetIds = {};
  	    Input.apply(this, arguments);
  	  }
  	  inherit(TouchInput, Input, {
  	    handler: function MTEhandler(ev) {
  	      var type = TOUCH_INPUT_MAP[ev.type];
  	      var touches = getTouches.call(this, ev, type);
  	      if (!touches) {
  	        return;
  	      }
  	      this.callback(this.manager, type, {
  	        pointers: touches[0],
  	        changedPointers: touches[1],
  	        pointerType: INPUT_TYPE_TOUCH,
  	        srcEvent: ev
  	      });
  	    }
  	  });

  	  /**
  	   * @this {TouchInput}
  	   * @param {Object} ev
  	   * @param {Number} type flag
  	   * @returns {undefined|Array} [all, changed]
  	   */
  	  function getTouches(ev, type) {
  	    var allTouches = toArray(ev.touches);
  	    var targetIds = this.targetIds;

  	    // when there is only one touch, the process can be simplified
  	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
  	      targetIds[allTouches[0].identifier] = true;
  	      return [allTouches, allTouches];
  	    }
  	    var i,
  	      targetTouches,
  	      changedTouches = toArray(ev.changedTouches),
  	      changedTargetTouches = [],
  	      target = this.target;

  	    // get target touches from touches
  	    targetTouches = allTouches.filter(function (touch) {
  	      return hasParent(touch.target, target);
  	    });

  	    // collect touches
  	    if (type === INPUT_START) {
  	      i = 0;
  	      while (i < targetTouches.length) {
  	        targetIds[targetTouches[i].identifier] = true;
  	        i++;
  	      }
  	    }

  	    // filter changed touches to only contain touches that exist in the collected target ids
  	    i = 0;
  	    while (i < changedTouches.length) {
  	      if (targetIds[changedTouches[i].identifier]) {
  	        changedTargetTouches.push(changedTouches[i]);
  	      }

  	      // cleanup removed touches
  	      if (type & (INPUT_END | INPUT_CANCEL)) {
  	        delete targetIds[changedTouches[i].identifier];
  	      }
  	      i++;
  	    }
  	    if (!changedTargetTouches.length) {
  	      return;
  	    }
  	    return [
  	    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
  	    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
  	  }

  	  /**
  	   * Combined touch and mouse input
  	   *
  	   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
  	   * This because touch devices also emit mouse events while doing a touch.
  	   *
  	   * @constructor
  	   * @extends Input
  	   */

  	  var DEDUP_TIMEOUT = 2500;
  	  var DEDUP_DISTANCE = 25;
  	  function TouchMouseInput() {
  	    Input.apply(this, arguments);
  	    var handler = bindFn(this.handler, this);
  	    this.touch = new TouchInput(this.manager, handler);
  	    this.mouse = new MouseInput(this.manager, handler);
  	    this.primaryTouch = null;
  	    this.lastTouches = [];
  	  }
  	  inherit(TouchMouseInput, Input, {
  	    /**
  	     * handle mouse and touch events
  	     * @param {Hammer} manager
  	     * @param {String} inputEvent
  	     * @param {Object} inputData
  	     */
  	    handler: function TMEhandler(manager, inputEvent, inputData) {
  	      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
  	        isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
  	      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
  	        return;
  	      }

  	      // when we're in a touch event, record touches to  de-dupe synthetic mouse event
  	      if (isTouch) {
  	        recordTouches.call(this, inputEvent, inputData);
  	      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
  	        return;
  	      }
  	      this.callback(manager, inputEvent, inputData);
  	    },
  	    /**
  	     * remove the event listeners
  	     */
  	    destroy: function destroy() {
  	      this.touch.destroy();
  	      this.mouse.destroy();
  	    }
  	  });
  	  function recordTouches(eventType, eventData) {
  	    if (eventType & INPUT_START) {
  	      this.primaryTouch = eventData.changedPointers[0].identifier;
  	      setLastTouch.call(this, eventData);
  	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
  	      setLastTouch.call(this, eventData);
  	    }
  	  }
  	  function setLastTouch(eventData) {
  	    var touch = eventData.changedPointers[0];
  	    if (touch.identifier === this.primaryTouch) {
  	      var lastTouch = {
  	        x: touch.clientX,
  	        y: touch.clientY
  	      };
  	      this.lastTouches.push(lastTouch);
  	      var lts = this.lastTouches;
  	      var removeLastTouch = function () {
  	        var i = lts.indexOf(lastTouch);
  	        if (i > -1) {
  	          lts.splice(i, 1);
  	        }
  	      };
  	      setTimeout(removeLastTouch, DEDUP_TIMEOUT);
  	    }
  	  }
  	  function isSyntheticEvent(eventData) {
  	    var x = eventData.srcEvent.clientX,
  	      y = eventData.srcEvent.clientY;
  	    for (var i = 0; i < this.lastTouches.length; i++) {
  	      var t = this.lastTouches[i];
  	      var dx = Math.abs(x - t.x),
  	        dy = Math.abs(y - t.y);
  	      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
  	        return true;
  	      }
  	    }
  	    return false;
  	  }
  	  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
  	  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1;

  	  // magical touchAction value
  	  var TOUCH_ACTION_COMPUTE = 'compute';
  	  var TOUCH_ACTION_AUTO = 'auto';
  	  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
  	  var TOUCH_ACTION_NONE = 'none';
  	  var TOUCH_ACTION_PAN_X = 'pan-x';
  	  var TOUCH_ACTION_PAN_Y = 'pan-y';
  	  var TOUCH_ACTION_MAP = getTouchActionProps();

  	  /**
  	   * Touch Action
  	   * sets the touchAction property or uses the js alternative
  	   * @param {Manager} manager
  	   * @param {String} value
  	   * @constructor
  	   */
  	  function TouchAction(manager, value) {
  	    this.manager = manager;
  	    this.set(value);
  	  }
  	  TouchAction.prototype = {
  	    /**
  	     * set the touchAction value on the element or enable the polyfill
  	     * @param {String} value
  	     */
  	    set: function (value) {
  	      // find out the touch-action by the event handlers
  	      if (value == TOUCH_ACTION_COMPUTE) {
  	        value = this.compute();
  	      }
  	      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
  	        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
  	      }
  	      this.actions = value.toLowerCase().trim();
  	    },
  	    /**
  	     * just re-set the touchAction value
  	     */
  	    update: function () {
  	      this.set(this.manager.options.touchAction);
  	    },
  	    /**
  	     * compute the value for the touchAction property based on the recognizer's settings
  	     * @returns {String} value
  	     */
  	    compute: function () {
  	      var actions = [];
  	      each(this.manager.recognizers, function (recognizer) {
  	        if (boolOrFn(recognizer.options.enable, [recognizer])) {
  	          actions = actions.concat(recognizer.getTouchAction());
  	        }
  	      });
  	      return cleanTouchActions(actions.join(' '));
  	    },
  	    /**
  	     * this method is called on each input cycle and provides the preventing of the browser behavior
  	     * @param {Object} input
  	     */
  	    preventDefaults: function (input) {
  	      var srcEvent = input.srcEvent;
  	      var direction = input.offsetDirection;

  	      // if the touch action did prevented once this session
  	      if (this.manager.session.prevented) {
  	        srcEvent.preventDefault();
  	        return;
  	      }
  	      var actions = this.actions;
  	      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
  	      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
  	      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
  	      if (hasNone) {
  	        //do not prevent defaults if this is a tap gesture

  	        var isTapPointer = input.pointers.length === 1;
  	        var isTapMovement = input.distance < 2;
  	        var isTapTouchTime = input.deltaTime < 250;
  	        if (isTapPointer && isTapMovement && isTapTouchTime) {
  	          return;
  	        }
  	      }
  	      if (hasPanX && hasPanY) {
  	        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
  	        return;
  	      }
  	      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
  	        return this.preventSrc(srcEvent);
  	      }
  	    },
  	    /**
  	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
  	     * @param {Object} srcEvent
  	     */
  	    preventSrc: function (srcEvent) {
  	      this.manager.session.prevented = true;
  	      srcEvent.preventDefault();
  	    }
  	  };

  	  /**
  	   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
  	   * @param {String} actions
  	   * @returns {*}
  	   */
  	  function cleanTouchActions(actions) {
  	    // none
  	    if (inStr(actions, TOUCH_ACTION_NONE)) {
  	      return TOUCH_ACTION_NONE;
  	    }
  	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
  	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

  	    // if both pan-x and pan-y are set (different recognizers
  	    // for different directions, e.g. horizontal pan but vertical swipe?)
  	    // we need none (as otherwise with pan-x pan-y combined none of these
  	    // recognizers will work, since the browser would handle all panning
  	    if (hasPanX && hasPanY) {
  	      return TOUCH_ACTION_NONE;
  	    }

  	    // pan-x OR pan-y
  	    if (hasPanX || hasPanY) {
  	      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  	    }

  	    // manipulation
  	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
  	      return TOUCH_ACTION_MANIPULATION;
  	    }
  	    return TOUCH_ACTION_AUTO;
  	  }
  	  function getTouchActionProps() {
  	    if (!NATIVE_TOUCH_ACTION) {
  	      return false;
  	    }
  	    var touchMap = {};
  	    var cssSupports = window.CSS && window.CSS.supports;
  	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {
  	      // If css.supports is not supported but there is native touch-action assume it supports
  	      // all values. This is the case for IE 10 and 11.
  	      touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
  	    });
  	    return touchMap;
  	  }

  	  /**
  	   * Recognizer flow explained; *
  	   * All recognizers have the initial state of POSSIBLE when a input session starts.
  	   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
  	   * Example session for mouse-input: mousedown -> mousemove -> mouseup
  	   *
  	   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
  	   * which determines with state it should be.
  	   *
  	   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
  	   * POSSIBLE to give it another change on the next cycle.
  	   *
  	   *               Possible
  	   *                  |
  	   *            +-----+---------------+
  	   *            |                     |
  	   *      +-----+-----+               |
  	   *      |           |               |
  	   *   Failed      Cancelled          |
  	   *                          +-------+------+
  	   *                          |              |
  	   *                      Recognized       Began
  	   *                                         |
  	   *                                      Changed
  	   *                                         |
  	   *                                  Ended/Recognized
  	   */
  	  var STATE_POSSIBLE = 1;
  	  var STATE_BEGAN = 2;
  	  var STATE_CHANGED = 4;
  	  var STATE_ENDED = 8;
  	  var STATE_RECOGNIZED = STATE_ENDED;
  	  var STATE_CANCELLED = 16;
  	  var STATE_FAILED = 32;

  	  /**
  	   * Recognizer
  	   * Every recognizer needs to extend from this class.
  	   * @constructor
  	   * @param {Object} options
  	   */
  	  function Recognizer(options) {
  	    this.options = assign({}, this.defaults, options || {});
  	    this.id = uniqueId();
  	    this.manager = null;

  	    // default is enable true
  	    this.options.enable = ifUndefined(this.options.enable, true);
  	    this.state = STATE_POSSIBLE;
  	    this.simultaneous = {};
  	    this.requireFail = [];
  	  }
  	  Recognizer.prototype = {
  	    /**
  	     * @virtual
  	     * @type {Object}
  	     */
  	    defaults: {},
  	    /**
  	     * set options
  	     * @param {Object} options
  	     * @return {Recognizer}
  	     */
  	    set: function (options) {
  	      assign(this.options, options);

  	      // also update the touchAction, in case something changed about the directions/enabled state
  	      this.manager && this.manager.touchAction.update();
  	      return this;
  	    },
  	    /**
  	     * recognize simultaneous with an other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    recognizeWith: function (otherRecognizer) {
  	      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
  	        return this;
  	      }
  	      var simultaneous = this.simultaneous;
  	      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	      if (!simultaneous[otherRecognizer.id]) {
  	        simultaneous[otherRecognizer.id] = otherRecognizer;
  	        otherRecognizer.recognizeWith(this);
  	      }
  	      return this;
  	    },
  	    /**
  	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    dropRecognizeWith: function (otherRecognizer) {
  	      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
  	        return this;
  	      }
  	      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	      delete this.simultaneous[otherRecognizer.id];
  	      return this;
  	    },
  	    /**
  	     * recognizer can only run when an other is failing
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    requireFailure: function (otherRecognizer) {
  	      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
  	        return this;
  	      }
  	      var requireFail = this.requireFail;
  	      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	      if (inArray(requireFail, otherRecognizer) === -1) {
  	        requireFail.push(otherRecognizer);
  	        otherRecognizer.requireFailure(this);
  	      }
  	      return this;
  	    },
  	    /**
  	     * drop the requireFailure link. it does not remove the link on the other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    dropRequireFailure: function (otherRecognizer) {
  	      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
  	        return this;
  	      }
  	      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	      var index = inArray(this.requireFail, otherRecognizer);
  	      if (index > -1) {
  	        this.requireFail.splice(index, 1);
  	      }
  	      return this;
  	    },
  	    /**
  	     * has require failures boolean
  	     * @returns {boolean}
  	     */
  	    hasRequireFailures: function () {
  	      return this.requireFail.length > 0;
  	    },
  	    /**
  	     * if the recognizer can recognize simultaneous with an other recognizer
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Boolean}
  	     */
  	    canRecognizeWith: function (otherRecognizer) {
  	      return !!this.simultaneous[otherRecognizer.id];
  	    },
  	    /**
  	     * You should use `tryEmit` instead of `emit` directly to check
  	     * that all the needed recognizers has failed before emitting.
  	     * @param {Object} input
  	     */
  	    emit: function (input) {
  	      var self = this;
  	      var state = this.state;
  	      function emit(event) {
  	        self.manager.emit(event, input);
  	      }

  	      // 'panstart' and 'panmove'
  	      if (state < STATE_ENDED) {
  	        emit(self.options.event + stateStr(state));
  	      }
  	      emit(self.options.event); // simple 'eventName' events

  	      if (input.additionalEvent) {
  	        // additional event(panleft, panright, pinchin, pinchout...)
  	        emit(input.additionalEvent);
  	      }

  	      // panend and pancancel
  	      if (state >= STATE_ENDED) {
  	        emit(self.options.event + stateStr(state));
  	      }
  	    },
  	    /**
  	     * Check that all the require failure recognizers has failed,
  	     * if true, it emits a gesture event,
  	     * otherwise, setup the state to FAILED.
  	     * @param {Object} input
  	     */
  	    tryEmit: function (input) {
  	      if (this.canEmit()) {
  	        return this.emit(input);
  	      }
  	      // it's failing anyway
  	      this.state = STATE_FAILED;
  	    },
  	    /**
  	     * can we emit?
  	     * @returns {boolean}
  	     */
  	    canEmit: function () {
  	      var i = 0;
  	      while (i < this.requireFail.length) {
  	        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
  	          return false;
  	        }
  	        i++;
  	      }
  	      return true;
  	    },
  	    /**
  	     * update the recognizer
  	     * @param {Object} inputData
  	     */
  	    recognize: function (inputData) {
  	      // make a new copy of the inputData
  	      // so we can change the inputData without messing up the other recognizers
  	      var inputDataClone = assign({}, inputData);

  	      // is is enabled and allow recognizing?
  	      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
  	        this.reset();
  	        this.state = STATE_FAILED;
  	        return;
  	      }

  	      // reset when we've reached the end
  	      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
  	        this.state = STATE_POSSIBLE;
  	      }
  	      this.state = this.process(inputDataClone);

  	      // the recognizer has recognized a gesture
  	      // so trigger an event
  	      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
  	        this.tryEmit(inputDataClone);
  	      }
  	    },
  	    /**
  	     * return the state of the recognizer
  	     * the actual recognizing happens in this method
  	     * @virtual
  	     * @param {Object} inputData
  	     * @returns {Const} STATE
  	     */
  	    process: function (inputData) {},
  	    // jshint ignore:line

  	    /**
  	     * return the preferred touch-action
  	     * @virtual
  	     * @returns {Array}
  	     */
  	    getTouchAction: function () {},
  	    /**
  	     * called when the gesture isn't allowed to recognize
  	     * like when another is being recognized or it is disabled
  	     * @virtual
  	     */
  	    reset: function () {}
  	  };

  	  /**
  	   * get a usable string, used as event postfix
  	   * @param {Const} state
  	   * @returns {String} state
  	   */
  	  function stateStr(state) {
  	    if (state & STATE_CANCELLED) {
  	      return 'cancel';
  	    } else if (state & STATE_ENDED) {
  	      return 'end';
  	    } else if (state & STATE_CHANGED) {
  	      return 'move';
  	    } else if (state & STATE_BEGAN) {
  	      return 'start';
  	    }
  	    return '';
  	  }

  	  /**
  	   * direction cons to string
  	   * @param {Const} direction
  	   * @returns {String}
  	   */
  	  function directionStr(direction) {
  	    if (direction == DIRECTION_DOWN) {
  	      return 'down';
  	    } else if (direction == DIRECTION_UP) {
  	      return 'up';
  	    } else if (direction == DIRECTION_LEFT) {
  	      return 'left';
  	    } else if (direction == DIRECTION_RIGHT) {
  	      return 'right';
  	    }
  	    return '';
  	  }

  	  /**
  	   * get a recognizer by name if it is bound to a manager
  	   * @param {Recognizer|String} otherRecognizer
  	   * @param {Recognizer} recognizer
  	   * @returns {Recognizer}
  	   */
  	  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
  	    var manager = recognizer.manager;
  	    if (manager) {
  	      return manager.get(otherRecognizer);
  	    }
  	    return otherRecognizer;
  	  }

  	  /**
  	   * This recognizer is just used as a base for the simple attribute recognizers.
  	   * @constructor
  	   * @extends Recognizer
  	   */
  	  function AttrRecognizer() {
  	    Recognizer.apply(this, arguments);
  	  }
  	  inherit(AttrRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof AttrRecognizer
  	     */
  	    defaults: {
  	      /**
  	       * @type {Number}
  	       * @default 1
  	       */
  	      pointers: 1
  	    },
  	    /**
  	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
  	     * @memberof AttrRecognizer
  	     * @param {Object} input
  	     * @returns {Boolean} recognized
  	     */
  	    attrTest: function (input) {
  	      var optionPointers = this.options.pointers;
  	      return optionPointers === 0 || input.pointers.length === optionPointers;
  	    },
  	    /**
  	     * Process the input and return the state for the recognizer
  	     * @memberof AttrRecognizer
  	     * @param {Object} input
  	     * @returns {*} State
  	     */
  	    process: function (input) {
  	      var state = this.state;
  	      var eventType = input.eventType;
  	      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
  	      var isValid = this.attrTest(input);

  	      // on cancel input and we've recognized before, return STATE_CANCELLED
  	      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
  	        return state | STATE_CANCELLED;
  	      } else if (isRecognized || isValid) {
  	        if (eventType & INPUT_END) {
  	          return state | STATE_ENDED;
  	        } else if (!(state & STATE_BEGAN)) {
  	          return STATE_BEGAN;
  	        }
  	        return state | STATE_CHANGED;
  	      }
  	      return STATE_FAILED;
  	    }
  	  });

  	  /**
  	   * Pan
  	   * Recognized when the pointer is down and moved in the allowed direction.
  	   * @constructor
  	   * @extends AttrRecognizer
  	   */
  	  function PanRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	    this.pX = null;
  	    this.pY = null;
  	  }
  	  inherit(PanRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PanRecognizer
  	     */
  	    defaults: {
  	      event: 'pan',
  	      threshold: 10,
  	      pointers: 1,
  	      direction: DIRECTION_ALL
  	    },
  	    getTouchAction: function () {
  	      var direction = this.options.direction;
  	      var actions = [];
  	      if (direction & DIRECTION_HORIZONTAL) {
  	        actions.push(TOUCH_ACTION_PAN_Y);
  	      }
  	      if (direction & DIRECTION_VERTICAL) {
  	        actions.push(TOUCH_ACTION_PAN_X);
  	      }
  	      return actions;
  	    },
  	    directionTest: function (input) {
  	      var options = this.options;
  	      var hasMoved = true;
  	      var distance = input.distance;
  	      var direction = input.direction;
  	      var x = input.deltaX;
  	      var y = input.deltaY;

  	      // lock to axis?
  	      if (!(direction & options.direction)) {
  	        if (options.direction & DIRECTION_HORIZONTAL) {
  	          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  	          hasMoved = x != this.pX;
  	          distance = Math.abs(input.deltaX);
  	        } else {
  	          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
  	          hasMoved = y != this.pY;
  	          distance = Math.abs(input.deltaY);
  	        }
  	      }
  	      input.direction = direction;
  	      return hasMoved && distance > options.threshold && direction & options.direction;
  	    },
  	    attrTest: function (input) {
  	      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
  	    },
  	    emit: function (input) {
  	      this.pX = input.deltaX;
  	      this.pY = input.deltaY;
  	      var direction = directionStr(input.direction);
  	      if (direction) {
  	        input.additionalEvent = this.options.event + direction;
  	      }
  	      this._super.emit.call(this, input);
  	    }
  	  });

  	  /**
  	   * Pinch
  	   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
  	   * @constructor
  	   * @extends AttrRecognizer
  	   */
  	  function PinchRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	  }
  	  inherit(PinchRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PinchRecognizer
  	     */
  	    defaults: {
  	      event: 'pinch',
  	      threshold: 0,
  	      pointers: 2
  	    },
  	    getTouchAction: function () {
  	      return [TOUCH_ACTION_NONE];
  	    },
  	    attrTest: function (input) {
  	      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
  	    },
  	    emit: function (input) {
  	      if (input.scale !== 1) {
  	        var inOut = input.scale < 1 ? 'in' : 'out';
  	        input.additionalEvent = this.options.event + inOut;
  	      }
  	      this._super.emit.call(this, input);
  	    }
  	  });

  	  /**
  	   * Press
  	   * Recognized when the pointer is down for x ms without any movement.
  	   * @constructor
  	   * @extends Recognizer
  	   */
  	  function PressRecognizer() {
  	    Recognizer.apply(this, arguments);
  	    this._timer = null;
  	    this._input = null;
  	  }
  	  inherit(PressRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PressRecognizer
  	     */
  	    defaults: {
  	      event: 'press',
  	      pointers: 1,
  	      time: 251,
  	      // minimal time of the pointer to be pressed
  	      threshold: 9 // a minimal movement is ok, but keep it low
  	    },

  	    getTouchAction: function () {
  	      return [TOUCH_ACTION_AUTO];
  	    },
  	    process: function (input) {
  	      var options = this.options;
  	      var validPointers = input.pointers.length === options.pointers;
  	      var validMovement = input.distance < options.threshold;
  	      var validTime = input.deltaTime > options.time;
  	      this._input = input;

  	      // we only allow little movement
  	      // and we've reached an end event, so a tap is possible
  	      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
  	        this.reset();
  	      } else if (input.eventType & INPUT_START) {
  	        this.reset();
  	        this._timer = setTimeoutContext(function () {
  	          this.state = STATE_RECOGNIZED;
  	          this.tryEmit();
  	        }, options.time, this);
  	      } else if (input.eventType & INPUT_END) {
  	        return STATE_RECOGNIZED;
  	      }
  	      return STATE_FAILED;
  	    },
  	    reset: function () {
  	      clearTimeout(this._timer);
  	    },
  	    emit: function (input) {
  	      if (this.state !== STATE_RECOGNIZED) {
  	        return;
  	      }
  	      if (input && input.eventType & INPUT_END) {
  	        this.manager.emit(this.options.event + 'up', input);
  	      } else {
  	        this._input.timeStamp = now();
  	        this.manager.emit(this.options.event, this._input);
  	      }
  	    }
  	  });

  	  /**
  	   * Rotate
  	   * Recognized when two or more pointer are moving in a circular motion.
  	   * @constructor
  	   * @extends AttrRecognizer
  	   */
  	  function RotateRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	  }
  	  inherit(RotateRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof RotateRecognizer
  	     */
  	    defaults: {
  	      event: 'rotate',
  	      threshold: 0,
  	      pointers: 2
  	    },
  	    getTouchAction: function () {
  	      return [TOUCH_ACTION_NONE];
  	    },
  	    attrTest: function (input) {
  	      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
  	    }
  	  });

  	  /**
  	   * Swipe
  	   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
  	   * @constructor
  	   * @extends AttrRecognizer
  	   */
  	  function SwipeRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	  }
  	  inherit(SwipeRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof SwipeRecognizer
  	     */
  	    defaults: {
  	      event: 'swipe',
  	      threshold: 10,
  	      velocity: 0.3,
  	      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
  	      pointers: 1
  	    },
  	    getTouchAction: function () {
  	      return PanRecognizer.prototype.getTouchAction.call(this);
  	    },
  	    attrTest: function (input) {
  	      var direction = this.options.direction;
  	      var velocity;
  	      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
  	        velocity = input.overallVelocity;
  	      } else if (direction & DIRECTION_HORIZONTAL) {
  	        velocity = input.overallVelocityX;
  	      } else if (direction & DIRECTION_VERTICAL) {
  	        velocity = input.overallVelocityY;
  	      }
  	      return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
  	    },
  	    emit: function (input) {
  	      var direction = directionStr(input.offsetDirection);
  	      if (direction) {
  	        this.manager.emit(this.options.event + direction, input);
  	      }
  	      this.manager.emit(this.options.event, input);
  	    }
  	  });

  	  /**
  	   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
  	   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
  	   * a single tap.
  	   *
  	   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
  	   * multi-taps being recognized.
  	   * @constructor
  	   * @extends Recognizer
  	   */
  	  function TapRecognizer() {
  	    Recognizer.apply(this, arguments);

  	    // previous time and center,
  	    // used for tap counting
  	    this.pTime = false;
  	    this.pCenter = false;
  	    this._timer = null;
  	    this._input = null;
  	    this.count = 0;
  	  }
  	  inherit(TapRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PinchRecognizer
  	     */
  	    defaults: {
  	      event: 'tap',
  	      pointers: 1,
  	      taps: 1,
  	      interval: 300,
  	      // max time between the multi-tap taps
  	      time: 250,
  	      // max time of the pointer to be down (like finger on the screen)
  	      threshold: 9,
  	      // a minimal movement is ok, but keep it low
  	      posThreshold: 10 // a multi-tap can be a bit off the initial position
  	    },

  	    getTouchAction: function () {
  	      return [TOUCH_ACTION_MANIPULATION];
  	    },
  	    process: function (input) {
  	      var options = this.options;
  	      var validPointers = input.pointers.length === options.pointers;
  	      var validMovement = input.distance < options.threshold;
  	      var validTouchTime = input.deltaTime < options.time;
  	      this.reset();
  	      if (input.eventType & INPUT_START && this.count === 0) {
  	        return this.failTimeout();
  	      }

  	      // we only allow little movement
  	      // and we've reached an end event, so a tap is possible
  	      if (validMovement && validTouchTime && validPointers) {
  	        if (input.eventType != INPUT_END) {
  	          return this.failTimeout();
  	        }
  	        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
  	        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
  	        this.pTime = input.timeStamp;
  	        this.pCenter = input.center;
  	        if (!validMultiTap || !validInterval) {
  	          this.count = 1;
  	        } else {
  	          this.count += 1;
  	        }
  	        this._input = input;

  	        // if tap count matches we have recognized it,
  	        // else it has began recognizing...
  	        var tapCount = this.count % options.taps;
  	        if (tapCount === 0) {
  	          // no failing requirements, immediately trigger the tap event
  	          // or wait as long as the multitap interval to trigger
  	          if (!this.hasRequireFailures()) {
  	            return STATE_RECOGNIZED;
  	          } else {
  	            this._timer = setTimeoutContext(function () {
  	              this.state = STATE_RECOGNIZED;
  	              this.tryEmit();
  	            }, options.interval, this);
  	            return STATE_BEGAN;
  	          }
  	        }
  	      }
  	      return STATE_FAILED;
  	    },
  	    failTimeout: function () {
  	      this._timer = setTimeoutContext(function () {
  	        this.state = STATE_FAILED;
  	      }, this.options.interval, this);
  	      return STATE_FAILED;
  	    },
  	    reset: function () {
  	      clearTimeout(this._timer);
  	    },
  	    emit: function () {
  	      if (this.state == STATE_RECOGNIZED) {
  	        this._input.tapCount = this.count;
  	        this.manager.emit(this.options.event, this._input);
  	      }
  	    }
  	  });

  	  /**
  	   * Simple way to create a manager with a default set of recognizers.
  	   * @param {HTMLElement} element
  	   * @param {Object} [options]
  	   * @constructor
  	   */
  	  function Hammer(element, options) {
  	    options = options || {};
  	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
  	    return new Manager(element, options);
  	  }

  	  /**
  	   * @const {string}
  	   */
  	  Hammer.VERSION = '2.0.7';

  	  /**
  	   * default settings
  	   * @namespace
  	   */
  	  Hammer.defaults = {
  	    /**
  	     * set if DOM events are being triggered.
  	     * But this is slower and unused by simple implementations, so disabled by default.
  	     * @type {Boolean}
  	     * @default false
  	     */
  	    domEvents: false,
  	    /**
  	     * The value for the touchAction property/fallback.
  	     * When set to `compute` it will magically set the correct value based on the added recognizers.
  	     * @type {String}
  	     * @default compute
  	     */
  	    touchAction: TOUCH_ACTION_COMPUTE,
  	    /**
  	     * @type {Boolean}
  	     * @default true
  	     */
  	    enable: true,
  	    /**
  	     * EXPERIMENTAL FEATURE -- can be removed/changed
  	     * Change the parent input target element.
  	     * If Null, then it is being set the to main element.
  	     * @type {Null|EventTarget}
  	     * @default null
  	     */
  	    inputTarget: null,
  	    /**
  	     * force an input class
  	     * @type {Null|Function}
  	     * @default null
  	     */
  	    inputClass: null,
  	    /**
  	     * Default recognizer setup when calling `Hammer()`
  	     * When creating a new Manager these will be skipped.
  	     * @type {Array}
  	     */
  	    preset: [
  	    // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
  	    [RotateRecognizer, {
  	      enable: false
  	    }], [PinchRecognizer, {
  	      enable: false
  	    }, ['rotate']], [SwipeRecognizer, {
  	      direction: DIRECTION_HORIZONTAL
  	    }], [PanRecognizer, {
  	      direction: DIRECTION_HORIZONTAL
  	    }, ['swipe']], [TapRecognizer], [TapRecognizer, {
  	      event: 'doubletap',
  	      taps: 2
  	    }, ['tap']], [PressRecognizer]],
  	    /**
  	     * Some CSS properties can be used to improve the working of Hammer.
  	     * Add them to this method and they will be set when creating a new Manager.
  	     * @namespace
  	     */
  	    cssProps: {
  	      /**
  	       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
  	       * @type {String}
  	       * @default 'none'
  	       */
  	      userSelect: 'none',
  	      /**
  	       * Disable the Windows Phone grippers when pressing an element.
  	       * @type {String}
  	       * @default 'none'
  	       */
  	      touchSelect: 'none',
  	      /**
  	       * Disables the default callout shown when you touch and hold a touch target.
  	       * On iOS, when you touch and hold a touch target such as a link, Safari displays
  	       * a callout containing information about the link. This property allows you to disable that callout.
  	       * @type {String}
  	       * @default 'none'
  	       */
  	      touchCallout: 'none',
  	      /**
  	       * Specifies whether zooming is enabled. Used by IE10>
  	       * @type {String}
  	       * @default 'none'
  	       */
  	      contentZooming: 'none',
  	      /**
  	       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
  	       * @type {String}
  	       * @default 'none'
  	       */
  	      userDrag: 'none',
  	      /**
  	       * Overrides the highlight color shown when the user taps a link or a JavaScript
  	       * clickable element in iOS. This property obeys the alpha value, if specified.
  	       * @type {String}
  	       * @default 'rgba(0,0,0,0)'
  	       */
  	      tapHighlightColor: 'rgba(0,0,0,0)'
  	    }
  	  };
  	  var STOP = 1;
  	  var FORCED_STOP = 2;

  	  /**
  	   * Manager
  	   * @param {HTMLElement} element
  	   * @param {Object} [options]
  	   * @constructor
  	   */
  	  function Manager(element, options) {
  	    this.options = assign({}, Hammer.defaults, options || {});
  	    this.options.inputTarget = this.options.inputTarget || element;
  	    this.handlers = {};
  	    this.session = {};
  	    this.recognizers = [];
  	    this.oldCssProps = {};
  	    this.element = element;
  	    this.input = createInputInstance(this);
  	    this.touchAction = new TouchAction(this, this.options.touchAction);
  	    toggleCssProps(this, true);
  	    each(this.options.recognizers, function (item) {
  	      var recognizer = this.add(new item[0](item[1]));
  	      item[2] && recognizer.recognizeWith(item[2]);
  	      item[3] && recognizer.requireFailure(item[3]);
  	    }, this);
  	  }
  	  Manager.prototype = {
  	    /**
  	     * set options
  	     * @param {Object} options
  	     * @returns {Manager}
  	     */
  	    set: function (options) {
  	      assign(this.options, options);

  	      // Options that need a little more setup
  	      if (options.touchAction) {
  	        this.touchAction.update();
  	      }
  	      if (options.inputTarget) {
  	        // Clean up existing event listeners and reinitialize
  	        this.input.destroy();
  	        this.input.target = options.inputTarget;
  	        this.input.init();
  	      }
  	      return this;
  	    },
  	    /**
  	     * stop recognizing for this session.
  	     * This session will be discarded, when a new [input]start event is fired.
  	     * When forced, the recognizer cycle is stopped immediately.
  	     * @param {Boolean} [force]
  	     */
  	    stop: function (force) {
  	      this.session.stopped = force ? FORCED_STOP : STOP;
  	    },
  	    /**
  	     * run the recognizers!
  	     * called by the inputHandler function on every movement of the pointers (touches)
  	     * it walks through all the recognizers and tries to detect the gesture that is being made
  	     * @param {Object} inputData
  	     */
  	    recognize: function (inputData) {
  	      var session = this.session;
  	      if (session.stopped) {
  	        return;
  	      }

  	      // run the touch-action polyfill
  	      this.touchAction.preventDefaults(inputData);
  	      var recognizer;
  	      var recognizers = this.recognizers;

  	      // this holds the recognizer that is being recognized.
  	      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
  	      // if no recognizer is detecting a thing, it is set to `null`
  	      var curRecognizer = session.curRecognizer;

  	      // reset when the last recognizer is recognized
  	      // or when we're in a new session
  	      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
  	        curRecognizer = session.curRecognizer = null;
  	      }
  	      var i = 0;
  	      while (i < recognizers.length) {
  	        recognizer = recognizers[i];

  	        // find out if we are allowed try to recognize the input for this one.
  	        // 1.   allow if the session is NOT forced stopped (see the .stop() method)
  	        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
  	        //      that is being recognized.
  	        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
  	        //      this can be setup with the `recognizeWith()` method on the recognizer.
  	        if (session.stopped !== FORCED_STOP && (
  	        // 1
  	        !curRecognizer || recognizer == curRecognizer ||
  	        // 2
  	        recognizer.canRecognizeWith(curRecognizer))) {
  	          // 3
  	          recognizer.recognize(inputData);
  	        } else {
  	          recognizer.reset();
  	        }

  	        // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
  	        // current active recognizer. but only if we don't already have an active recognizer
  	        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
  	          curRecognizer = session.curRecognizer = recognizer;
  	        }
  	        i++;
  	      }
  	    },
  	    /**
  	     * get a recognizer by its event name.
  	     * @param {Recognizer|String} recognizer
  	     * @returns {Recognizer|Null}
  	     */
  	    get: function (recognizer) {
  	      if (recognizer instanceof Recognizer) {
  	        return recognizer;
  	      }
  	      var recognizers = this.recognizers;
  	      for (var i = 0; i < recognizers.length; i++) {
  	        if (recognizers[i].options.event == recognizer) {
  	          return recognizers[i];
  	        }
  	      }
  	      return null;
  	    },
  	    /**
  	     * add a recognizer to the manager
  	     * existing recognizers with the same event name will be removed
  	     * @param {Recognizer} recognizer
  	     * @returns {Recognizer|Manager}
  	     */
  	    add: function (recognizer) {
  	      if (invokeArrayArg(recognizer, 'add', this)) {
  	        return this;
  	      }

  	      // remove existing
  	      var existing = this.get(recognizer.options.event);
  	      if (existing) {
  	        this.remove(existing);
  	      }
  	      this.recognizers.push(recognizer);
  	      recognizer.manager = this;
  	      this.touchAction.update();
  	      return recognizer;
  	    },
  	    /**
  	     * remove a recognizer by name or instance
  	     * @param {Recognizer|String} recognizer
  	     * @returns {Manager}
  	     */
  	    remove: function (recognizer) {
  	      if (invokeArrayArg(recognizer, 'remove', this)) {
  	        return this;
  	      }
  	      recognizer = this.get(recognizer);

  	      // let's make sure this recognizer exists
  	      if (recognizer) {
  	        var recognizers = this.recognizers;
  	        var index = inArray(recognizers, recognizer);
  	        if (index !== -1) {
  	          recognizers.splice(index, 1);
  	          this.touchAction.update();
  	        }
  	      }
  	      return this;
  	    },
  	    /**
  	     * bind event
  	     * @param {String} events
  	     * @param {Function} handler
  	     * @returns {EventEmitter} this
  	     */
  	    on: function (events, handler) {
  	      if (events === undefined$1) {
  	        return;
  	      }
  	      if (handler === undefined$1) {
  	        return;
  	      }
  	      var handlers = this.handlers;
  	      each(splitStr(events), function (event) {
  	        handlers[event] = handlers[event] || [];
  	        handlers[event].push(handler);
  	      });
  	      return this;
  	    },
  	    /**
  	     * unbind event, leave emit blank to remove all handlers
  	     * @param {String} events
  	     * @param {Function} [handler]
  	     * @returns {EventEmitter} this
  	     */
  	    off: function (events, handler) {
  	      if (events === undefined$1) {
  	        return;
  	      }
  	      var handlers = this.handlers;
  	      each(splitStr(events), function (event) {
  	        if (!handler) {
  	          delete handlers[event];
  	        } else {
  	          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
  	        }
  	      });
  	      return this;
  	    },
  	    /**
  	     * emit event to the listeners
  	     * @param {String} event
  	     * @param {Object} data
  	     */
  	    emit: function (event, data) {
  	      // we also want to trigger dom events
  	      if (this.options.domEvents) {
  	        triggerDomEvent(event, data);
  	      }

  	      // no handlers, so skip it all
  	      var handlers = this.handlers[event] && this.handlers[event].slice();
  	      if (!handlers || !handlers.length) {
  	        return;
  	      }
  	      data.type = event;
  	      data.preventDefault = function () {
  	        data.srcEvent.preventDefault();
  	      };
  	      var i = 0;
  	      while (i < handlers.length) {
  	        handlers[i](data);
  	        i++;
  	      }
  	    },
  	    /**
  	     * destroy the manager and unbinds all events
  	     * it doesn't unbind dom events, that is the user own responsibility
  	     */
  	    destroy: function () {
  	      this.element && toggleCssProps(this, false);
  	      this.handlers = {};
  	      this.session = {};
  	      this.input.destroy();
  	      this.element = null;
  	    }
  	  };

  	  /**
  	   * add/remove the css properties as defined in manager.options.cssProps
  	   * @param {Manager} manager
  	   * @param {Boolean} add
  	   */
  	  function toggleCssProps(manager, add) {
  	    var element = manager.element;
  	    if (!element.style) {
  	      return;
  	    }
  	    var prop;
  	    each(manager.options.cssProps, function (value, name) {
  	      prop = prefixed(element.style, name);
  	      if (add) {
  	        manager.oldCssProps[prop] = element.style[prop];
  	        element.style[prop] = value;
  	      } else {
  	        element.style[prop] = manager.oldCssProps[prop] || '';
  	      }
  	    });
  	    if (!add) {
  	      manager.oldCssProps = {};
  	    }
  	  }

  	  /**
  	   * trigger dom event
  	   * @param {String} event
  	   * @param {Object} data
  	   */
  	  function triggerDomEvent(event, data) {
  	    var gestureEvent = document.createEvent('Event');
  	    gestureEvent.initEvent(event, true, true);
  	    gestureEvent.gesture = data;
  	    data.target.dispatchEvent(gestureEvent);
  	  }
  	  assign(Hammer, {
  	    INPUT_START: INPUT_START,
  	    INPUT_MOVE: INPUT_MOVE,
  	    INPUT_END: INPUT_END,
  	    INPUT_CANCEL: INPUT_CANCEL,
  	    STATE_POSSIBLE: STATE_POSSIBLE,
  	    STATE_BEGAN: STATE_BEGAN,
  	    STATE_CHANGED: STATE_CHANGED,
  	    STATE_ENDED: STATE_ENDED,
  	    STATE_RECOGNIZED: STATE_RECOGNIZED,
  	    STATE_CANCELLED: STATE_CANCELLED,
  	    STATE_FAILED: STATE_FAILED,
  	    DIRECTION_NONE: DIRECTION_NONE,
  	    DIRECTION_LEFT: DIRECTION_LEFT,
  	    DIRECTION_RIGHT: DIRECTION_RIGHT,
  	    DIRECTION_UP: DIRECTION_UP,
  	    DIRECTION_DOWN: DIRECTION_DOWN,
  	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
  	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
  	    DIRECTION_ALL: DIRECTION_ALL,
  	    Manager: Manager,
  	    Input: Input,
  	    TouchAction: TouchAction,
  	    TouchInput: TouchInput,
  	    MouseInput: MouseInput,
  	    PointerEventInput: PointerEventInput,
  	    TouchMouseInput: TouchMouseInput,
  	    SingleTouchInput: SingleTouchInput,
  	    Recognizer: Recognizer,
  	    AttrRecognizer: AttrRecognizer,
  	    Tap: TapRecognizer,
  	    Pan: PanRecognizer,
  	    Swipe: SwipeRecognizer,
  	    Pinch: PinchRecognizer,
  	    Rotate: RotateRecognizer,
  	    Press: PressRecognizer,
  	    on: addEventListeners,
  	    off: removeEventListeners,
  	    each: each,
  	    merge: merge,
  	    extend: extend,
  	    assign: assign,
  	    inherit: inherit,
  	    bindFn: bindFn,
  	    prefixed: prefixed
  	  });

  	  // this prevents errors when Hammer is loaded in the presence of an AMD
  	  //  style loader but by script tag, not by the loader.
  	  var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line
  	  freeGlobal.Hammer = Hammer;
  	  if (typeof undefined$1 === 'function' && undefined$1.amd) {
  	    undefined$1(function () {
  	      return Hammer;
  	    });
  	  } else if (module.exports) {
  	    module.exports = Hammer;
  	  } else {
  	    window[exportName] = Hammer;
  	  }
  	})(window, document, 'Hammer');
  } (hammer));

  var Hammer = hammerExports;

  var MIN_ZOOM = 0.2,
    MAX_ZOOM = 4;
  var mouseEvents = ['mousedown', 'mouseup', 'mouseover', 'mouseout', 'click', 'dblclick'];
  function get(service, injector) {
    return injector.get(service, false);
  }
  function stopEvent$1(event) {
    event.preventDefault();
    if (typeof event.stopPropagation === 'function') {
      event.stopPropagation();
    } else if (event.srcEvent && typeof event.srcEvent.stopPropagation === 'function') {
      // iPhone & iPad
      event.srcEvent.stopPropagation();
    }
    if (typeof event.stopImmediatePropagation === 'function') {
      event.stopImmediatePropagation();
    }
  }
  function createTouchRecognizer(node) {
    function stopMouse(event$1) {
      forEach$3(mouseEvents, function (e) {
        event.bind(node, e, stopEvent$1, true);
      });
    }
    function allowMouse(event$1) {
      setTimeout(function () {
        forEach$3(mouseEvents, function (e) {
          event.unbind(node, e, stopEvent$1, true);
        });
      }, 500);
    }
    event.bind(node, 'touchstart', stopMouse, true);
    event.bind(node, 'touchend', allowMouse, true);
    event.bind(node, 'touchcancel', allowMouse, true);

    // A touch event recognizer that handles
    // touch events only (we know, we can already handle
    // mouse events out of the box)

    var recognizer = new Hammer.Manager(node, {
      inputClass: Hammer.TouchInput,
      recognizers: [],
      domEvents: true
    });
    var tap = new Hammer.Tap();
    var pan = new Hammer.Pan({
      threshold: 10
    });
    var press = new Hammer.Press();
    var pinch = new Hammer.Pinch();
    var doubleTap = new Hammer.Tap({
      event: 'doubletap',
      taps: 2
    });
    pinch.requireFailure(pan);
    pinch.requireFailure(press);
    recognizer.add([pan, press, pinch, doubleTap, tap]);
    recognizer.reset = function (force) {
      var recognizers = this.recognizers,
        session = this.session;
      if (session.stopped) {
        return;
      }
      recognizer.stop(force);
      setTimeout(function () {
        var i, r;
        for (i = 0; r = recognizers[i]; i++) {
          r.reset();
          r.state = 8; // FAILED STATE
        }

        session.curRecognizer = null;
      }, 0);
    };
    recognizer.on('hammer.input', function (event) {
      if (event.srcEvent.defaultPrevented) {
        recognizer.reset(true);
      }
    });
    return recognizer;
  }

  /**
   * A plugin that provides touch events for elements.
   *
   * @param {EventBus} eventBus
   * @param {InteractionEvents} interactionEvents
   */
  function TouchInteractionEvents(injector, canvas, eventBus, elementRegistry, interactionEvents) {
    // optional integrations
    var dragging = get('dragging', injector),
      move = get('move', injector),
      contextPad = get('contextPad', injector),
      palette = get('palette', injector);

    // the touch recognizer
    var recognizer;
    function handler(type, buttonType) {
      return function (event) {
        var gfx = getGfx(event.target),
          element = gfx && elementRegistry.get(gfx);

        // translate into an actual mouse click event
        if (buttonType) {
          event.srcEvent.button = buttonType;
        }
        return interactionEvents.fire(type, event, element);
      };
    }
    function getGfx(target) {
      var node = closest(target, 'svg, .djs-element', true);
      return node;
    }
    function initEvents(svg) {
      // touch recognizer
      recognizer = createTouchRecognizer(svg);
      function startGrabCanvas(event) {
        var lx = 0,
          ly = 0;
        function update(e) {
          var dx = e.deltaX - lx,
            dy = e.deltaY - ly;
          canvas.scroll({
            dx: dx,
            dy: dy
          });
          lx = e.deltaX;
          ly = e.deltaY;
        }
        function end(e) {
          recognizer.off('panmove', update);
          recognizer.off('panend', end);
          recognizer.off('pancancel', end);
        }
        recognizer.on('panmove', update);
        recognizer.on('panend', end);
        recognizer.on('pancancel', end);
      }
      function startGrab(event) {
        var gfx = getGfx(event.target),
          element = gfx && elementRegistry.get(gfx);

        // recognizer
        if (move && canvas.getRootElement() !== element) {
          return move.start(event, element, true);
        } else {
          startGrabCanvas();
        }
      }
      function startZoom(e) {
        var zoom = canvas.zoom(),
          mid = e.center;
        function update(e) {
          var ratio = 1 - (1 - e.scale) / 1.50,
            newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom));
          canvas.zoom(newZoom, mid);
          stopEvent$1(e);
        }
        function end(e) {
          recognizer.off('pinchmove', update);
          recognizer.off('pinchend', end);
          recognizer.off('pinchcancel', end);
          recognizer.reset(true);
        }
        recognizer.on('pinchmove', update);
        recognizer.on('pinchend', end);
        recognizer.on('pinchcancel', end);
      }
      recognizer.on('tap', handler('element.click'));
      recognizer.on('doubletap', handler('element.dblclick', 1));
      recognizer.on('panstart', startGrab);
      recognizer.on('press', startGrab);
      recognizer.on('pinchstart', startZoom);
    }
    if (dragging) {
      // simulate hover during dragging
      eventBus.on('drag.move', function (event) {
        var originalEvent = event.originalEvent;
        if (!originalEvent || originalEvent instanceof MouseEvent) {
          return;
        }
        var position = toPoint(originalEvent);

        // this gets really expensive ...
        var node = document.elementFromPoint(position.x, position.y),
          gfx = getGfx(node),
          element = gfx && elementRegistry.get(gfx);
        if (element !== event.hover) {
          if (event.hover) {
            dragging.out(event);
          }
          if (element) {
            dragging.hover({
              element: element,
              gfx: gfx
            });
            event.hover = element;
            event.hoverGfx = gfx;
          }
        }
      });
    }
    if (contextPad) {
      eventBus.on('contextPad.create', function (event) {
        var node = event.pad.html;

        // touch recognizer
        var padRecognizer = createTouchRecognizer(node);
        padRecognizer.on('panstart', function (event) {
          contextPad.trigger('dragstart', event, true);
        });
        padRecognizer.on('press', function (event) {
          contextPad.trigger('dragstart', event, true);
        });
        padRecognizer.on('tap', function (event) {
          contextPad.trigger('click', event);
        });
      });
    }
    if (palette) {
      eventBus.on('palette.create', function (event) {
        var node = event.container;

        // touch recognizer
        var padRecognizer = createTouchRecognizer(node);
        padRecognizer.on('panstart', function (event) {
          palette.trigger('dragstart', event, true);
        });
        padRecognizer.on('press', function (event) {
          palette.trigger('dragstart', event, true);
        });
        padRecognizer.on('tap', function (event) {
          palette.trigger('click', event);
        });
      });
    }
    eventBus.on('canvas.init', function (event) {
      initEvents(event.svg);
    });
  }
  TouchInteractionEvents.$inject = ['injector', 'canvas', 'eventBus', 'elementRegistry', 'interactionEvents', 'touchFix'];

  function TouchFix(canvas, eventBus) {
    var self = this;
    eventBus.on('canvas.init', function (e) {
      self.addBBoxMarker(e.svg);
    });
  }
  TouchFix.$inject = ['canvas', 'eventBus'];

  /**
   * Safari mobile (iOS 7) does not fire touchstart event in <SVG> element
   * if there is no shape between 0,0 and viewport elements origin.
   *
   * So touchstart event is only fired when the <g class="viewport"> element was hit.
   * Putting an element over and below the 'viewport' fixes that behavior.
   */
  TouchFix.prototype.addBBoxMarker = function (svg) {
    var markerStyle = {
      fill: 'none',
      class: 'outer-bound-marker'
    };
    var rect1 = create$2('rect');
    attr(rect1, {
      x: -10000,
      y: 10000,
      width: 10,
      height: 10
    });
    attr(rect1, markerStyle);
    append(svg, rect1);
    var rect2 = create$2('rect');
    attr(rect2, {
      x: 10000,
      y: 10000,
      width: 10,
      height: 10
    });
    attr(rect2, markerStyle);
    append(svg, rect2);
  };

  var TouchModule$1 = {
    __depends__: [InteractionEventsModule],
    __init__: ['touchInteractionEvents'],
    touchInteractionEvents: ['type', TouchInteractionEvents],
    touchFix: ['type', TouchFix]
  };

  var TouchModule = {
    __depends__: [TouchModule$1]
  };

  /**
   * A viewer that includes mouse navigation facilities
   *
   * @param {Object} options
   */
  function NavigatedViewer(options) {
    Viewer$3.call(this, options);
  }
  e$3(NavigatedViewer, Viewer$3);
  NavigatedViewer.prototype._navigationModules = [ZoomScroll, MoveCanvas, TouchModule];
  NavigatedViewer.prototype._modules = [].concat(NavigatedViewer.prototype._modules, NavigatedViewer.prototype._navigationModules);

  function last(arr) {
    return arr && arr[arr.length - 1];
  }
  function sortTopOrMiddle(element) {
    return element.y;
  }
  function sortLeftOrCenter(element) {
    return element.x;
  }

  /**
   * Sorting functions for different types of alignment
   *
   * @type {Object}
   *
   * @return {Function}
   */
  var ALIGNMENT_SORTING = {
    left: sortLeftOrCenter,
    center: sortLeftOrCenter,
    right: function (element) {
      return element.x + element.width;
    },
    top: sortTopOrMiddle,
    middle: sortTopOrMiddle,
    bottom: function (element) {
      return element.y + element.height;
    }
  };
  function AlignElements$1(modeling, rules) {
    this._modeling = modeling;
    this._rules = rules;
  }
  AlignElements$1.$inject = ['modeling', 'rules'];

  /**
   * Get the relevant "axis" and "dimension" related to the current type of alignment
   *
   * @param  {string} type left|right|center|top|bottom|middle
   *
   * @return {Object} { axis, dimension }
   */
  AlignElements$1.prototype._getOrientationDetails = function (type) {
    var vertical = ['top', 'bottom', 'middle'],
      axis = 'x',
      dimension = 'width';
    if (vertical.indexOf(type) !== -1) {
      axis = 'y';
      dimension = 'height';
    }
    return {
      axis: axis,
      dimension: dimension
    };
  };
  AlignElements$1.prototype._isType = function (type, types) {
    return types.indexOf(type) !== -1;
  };

  /**
   * Get a point on the relevant axis where elements should align to
   *
   * @param  {string} type left|right|center|top|bottom|middle
   * @param  {Array} sortedElements
   *
   * @return {Object}
   */
  AlignElements$1.prototype._alignmentPosition = function (type, sortedElements) {
    var orientation = this._getOrientationDetails(type),
      axis = orientation.axis,
      dimension = orientation.dimension,
      alignment = {},
      centers = {},
      hasSharedCenters = false,
      centeredElements,
      firstElement,
      lastElement;
    function getMiddleOrTop(first, last) {
      return Math.round((first[axis] + last[axis] + last[dimension]) / 2);
    }
    if (this._isType(type, ['left', 'top'])) {
      alignment[type] = sortedElements[0][axis];
    } else if (this._isType(type, ['right', 'bottom'])) {
      lastElement = last(sortedElements);
      alignment[type] = lastElement[axis] + lastElement[dimension];
    } else if (this._isType(type, ['center', 'middle'])) {
      // check if there is a center shared by more than one shape
      // if not, just take the middle of the range
      forEach$3(sortedElements, function (element) {
        var center = element[axis] + Math.round(element[dimension] / 2);
        if (centers[center]) {
          centers[center].elements.push(element);
        } else {
          centers[center] = {
            elements: [element],
            center: center
          };
        }
      });
      centeredElements = sortBy(centers, function (center) {
        if (center.elements.length > 1) {
          hasSharedCenters = true;
        }
        return center.elements.length;
      });
      if (hasSharedCenters) {
        alignment[type] = last(centeredElements).center;
        return alignment;
      }
      firstElement = sortedElements[0];
      sortedElements = sortBy(sortedElements, function (element) {
        return element[axis] + element[dimension];
      });
      lastElement = last(sortedElements);
      alignment[type] = getMiddleOrTop(firstElement, lastElement);
    }
    return alignment;
  };

  /**
   * Executes the alignment of a selection of elements
   *
   * @param  {Array} elements
   * @param  {string} type left|right|center|top|bottom|middle
   */
  AlignElements$1.prototype.trigger = function (elements, type) {
    var modeling = this._modeling,
      allowed;

    // filter out elements which cannot be aligned
    var filteredElements = filter$2(elements, function (element) {
      return !(element.waypoints || element.host || element.labelTarget);
    });

    // filter out elements via rules
    allowed = this._rules.allowed('elements.align', {
      elements: filteredElements
    });
    if (isArray$6(allowed)) {
      filteredElements = allowed;
    }
    if (filteredElements.length < 2 || !allowed) {
      return;
    }
    var sortFn = ALIGNMENT_SORTING[type];
    var sortedElements = sortBy(filteredElements, sortFn);
    var alignment = this._alignmentPosition(type, sortedElements);
    modeling.alignElements(sortedElements, alignment);
  };

  var AlignElementsModule = {
    __init__: ['alignElements'],
    alignElements: ['type', AlignElements$1]
  };

  // padding to detect element placement
  var PLACEMENT_DETECTION_PAD = 10;
  var DEFAULT_DISTANCE = 50;
  var DEFAULT_MAX_DISTANCE = 250;

  /**
   * Get free position starting from given position.
   *
   * @param {djs.model.Shape} source
   * @param {djs.model.Shape} element
   * @param {Point} position
   * @param {Function} getNextPosition
   *
   * @return {Point}
   */
  function findFreePosition(source, element, position, getNextPosition) {
    var connectedAtPosition;
    while (connectedAtPosition = getConnectedAtPosition(source, position, element)) {
      position = getNextPosition(element, position, connectedAtPosition);
    }
    return position;
  }

  /**
   * Returns function that returns next position.
   *
   * @param {Object} nextPositionDirection
   * @param {Object} [nextPositionDirection.x]
   * @param {Object} [nextPositionDirection.y]
   *
   * @returns {Function}
   */
  function generateGetNextPosition(nextPositionDirection) {
    return function (element, previousPosition, connectedAtPosition) {
      var nextPosition = {
        x: previousPosition.x,
        y: previousPosition.y
      };
      ['x', 'y'].forEach(function (axis) {
        var nextPositionDirectionForAxis = nextPositionDirection[axis];
        if (!nextPositionDirectionForAxis) {
          return;
        }
        var dimension = axis === 'x' ? 'width' : 'height';
        var margin = nextPositionDirectionForAxis.margin,
          minDistance = nextPositionDirectionForAxis.minDistance;
        if (margin < 0) {
          nextPosition[axis] = Math.min(connectedAtPosition[axis] + margin - element[dimension] / 2, previousPosition[axis] - minDistance + margin);
        } else {
          nextPosition[axis] = Math.max(connectedAtPosition[axis] + connectedAtPosition[dimension] + margin + element[dimension] / 2, previousPosition[axis] + minDistance + margin);
        }
      });
      return nextPosition;
    };
  }

  /**
   * Return target at given position, if defined.
   *
   * This takes connected elements from host and attachers
   * into account, too.
   */
  function getConnectedAtPosition(source, position, element) {
    var bounds = {
      x: position.x - element.width / 2,
      y: position.y - element.height / 2,
      width: element.width,
      height: element.height
    };
    var closure = getAutoPlaceClosure(source);
    return find$2(closure, function (target) {
      if (target === element) {
        return false;
      }
      var orientation = getOrientation(target, bounds, PLACEMENT_DETECTION_PAD);
      return orientation === 'intersect';
    });
  }

  /**
  * Compute optimal distance between source and target based on existing connections to and from source.
  * Assumes left-to-right and top-to-down modeling.
  *
  * @param {djs.model.Shape} source
  * @param {Object} [hints]
  * @param {number} [hints.defaultDistance]
  * @param {string} [hints.direction]
  * @param {Function} [hints.filter]
  * @param {Function} [hints.getWeight]
  * @param {number} [hints.maxDistance]
  * @param {string} [hints.reference]
  *
  * @return {number}
  */
  function getConnectedDistance(source, hints) {
    if (!hints) {
      hints = {};
    }

    // targets > sources by default
    function getDefaultWeight(connection) {
      return connection.source === source ? 1 : -1;
    }
    var defaultDistance = hints.defaultDistance || DEFAULT_DISTANCE,
      direction = hints.direction || 'e',
      filter = hints.filter,
      getWeight = hints.getWeight || getDefaultWeight,
      maxDistance = hints.maxDistance || DEFAULT_MAX_DISTANCE,
      reference = hints.reference || 'start';
    if (!filter) {
      filter = noneFilter;
    }
    function getDistance(a, b) {
      if (direction === 'n') {
        if (reference === 'start') {
          return asTRBL(a).top - asTRBL(b).bottom;
        } else if (reference === 'center') {
          return asTRBL(a).top - getMid(b).y;
        } else {
          return asTRBL(a).top - asTRBL(b).top;
        }
      } else if (direction === 'w') {
        if (reference === 'start') {
          return asTRBL(a).left - asTRBL(b).right;
        } else if (reference === 'center') {
          return asTRBL(a).left - getMid(b).x;
        } else {
          return asTRBL(a).left - asTRBL(b).left;
        }
      } else if (direction === 's') {
        if (reference === 'start') {
          return asTRBL(b).top - asTRBL(a).bottom;
        } else if (reference === 'center') {
          return getMid(b).y - asTRBL(a).bottom;
        } else {
          return asTRBL(b).bottom - asTRBL(a).bottom;
        }
      } else {
        if (reference === 'start') {
          return asTRBL(b).left - asTRBL(a).right;
        } else if (reference === 'center') {
          return getMid(b).x - asTRBL(a).right;
        } else {
          return asTRBL(b).right - asTRBL(a).right;
        }
      }
    }
    var sourcesDistances = source.incoming.filter(filter).map(function (connection) {
      var weight = getWeight(connection);
      var distance = weight < 0 ? getDistance(connection.source, source) : getDistance(source, connection.source);
      return {
        id: connection.source.id,
        distance: distance,
        weight: weight
      };
    });
    var targetsDistances = source.outgoing.filter(filter).map(function (connection) {
      var weight = getWeight(connection);
      var distance = weight > 0 ? getDistance(source, connection.target) : getDistance(connection.target, source);
      return {
        id: connection.target.id,
        distance: distance,
        weight: weight
      };
    });
    var distances = sourcesDistances.concat(targetsDistances).reduce(function (accumulator, currentValue) {
      accumulator[currentValue.id + '__weight_' + currentValue.weight] = currentValue;
      return accumulator;
    }, {});
    var distancesGrouped = reduce(distances, function (accumulator, currentValue) {
      var distance = currentValue.distance,
        weight = currentValue.weight;
      if (distance < 0 || distance > maxDistance) {
        return accumulator;
      }
      if (!accumulator[String(distance)]) {
        accumulator[String(distance)] = 0;
      }
      accumulator[String(distance)] += 1 * weight;
      if (!accumulator.distance || accumulator[accumulator.distance] < accumulator[String(distance)]) {
        accumulator.distance = distance;
      }
      return accumulator;
    }, {});
    return distancesGrouped.distance || defaultDistance;
  }

  /**
   * Returns all connected elements around the given source.
   *
   * This includes:
   *
   *   - connected elements
   *   - host connected elements
   *   - attachers connected elements
   *
   * @param  {djs.model.Shape} source
   *
   * @return {Array<djs.model.Shape>}
   */
  function getAutoPlaceClosure(source) {
    var allConnected = getConnected(source);
    if (source.host) {
      allConnected = allConnected.concat(getConnected(source.host));
    }
    if (source.attachers) {
      allConnected = allConnected.concat(source.attachers.reduce(function (shapes, attacher) {
        return shapes.concat(getConnected(attacher));
      }, []));
    }
    return allConnected;
  }
  function getConnected(element) {
    return getTargets(element).concat(getSources(element));
  }
  function getSources(shape) {
    return shape.incoming.map(function (connection) {
      return connection.source;
    });
  }
  function getTargets(shape) {
    return shape.outgoing.map(function (connection) {
      return connection.target;
    });
  }
  function noneFilter() {
    return true;
  }

  var LOW_PRIORITY$j = 100;

  /**
   * A service that places elements connected to existing ones
   * to an appropriate position in an _automated_ fashion.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function AutoPlace$1(eventBus, modeling, canvas) {
    eventBus.on('autoPlace', LOW_PRIORITY$j, function (context) {
      var shape = context.shape,
        source = context.source;
      return getNewShapePosition$1(source, shape);
    });
    eventBus.on('autoPlace.end', function (event) {
      canvas.scrollToElement(event.shape);
    });

    /**
     * Append shape to source at appropriate position.
     *
     * @param {djs.model.Shape} source
     * @param {djs.model.Shape} shape
     *
     * @return {djs.model.Shape} appended shape
     */
    this.append = function (source, shape, hints) {
      eventBus.fire('autoPlace.start', {
        source: source,
        shape: shape
      });

      // allow others to provide the position
      var position = eventBus.fire('autoPlace', {
        source: source,
        shape: shape
      });
      var newShape = modeling.appendShape(source, shape, position, source.parent, hints);
      eventBus.fire('autoPlace.end', {
        source: source,
        shape: newShape
      });
      return newShape;
    };
  }
  AutoPlace$1.$inject = ['eventBus', 'modeling', 'canvas'];

  // helpers //////////

  /**
   * Find the new position for the target element to
   * connect to source.
   *
   * @param  {djs.model.Shape} source
   * @param  {djs.model.Shape} element
   * @param  {Object} [hints]
   * @param  {Object} [hints.defaultDistance]
   *
   * @returns {Point}
   */
  function getNewShapePosition$1(source, element, hints) {
    if (!hints) {
      hints = {};
    }
    var distance = hints.defaultDistance || DEFAULT_DISTANCE;
    var sourceMid = getMid(source),
      sourceTrbl = asTRBL(source);

    // simply put element right next to source
    return {
      x: sourceTrbl.right + distance + element.width / 2,
      y: sourceMid.y
    };
  }

  /**
   * Select element after auto placement.
   *
   * @param {EventBus} eventBus
   * @param {Selection} selection
   */
  function AutoPlaceSelectionBehavior(eventBus, selection) {
    eventBus.on('autoPlace.end', 500, function (e) {
      selection.select(e.shape);
    });
  }
  AutoPlaceSelectionBehavior.$inject = ['eventBus', 'selection'];

  var AutoPlaceModule$1 = {
    __init__: ['autoPlaceSelectionBehavior'],
    autoPlace: ['type', AutoPlace$1],
    autoPlaceSelectionBehavior: ['type', AutoPlaceSelectionBehavior]
  };

  var BUSINESS_KNOWLEDGE_MODEL_SIZE = {
    width: 135,
    height: 46
  };
  var DECISION_SIZE = {
    width: 180,
    height: 80
  };
  var INPUT_DATA_SIZE = {
    width: 125,
    height: 45
  };
  var KNOWLEDGE_SOURCE_SIZE = {
    width: 100,
    height: 63
  };

  /**
   * A drd-aware factory for diagram-js shapes
   */
  function ElementFactory$2(drdFactory) {
    ElementFactory$3.call(this);
    this._drdFactory = drdFactory;
  }
  e$3(ElementFactory$2, ElementFactory$3);
  ElementFactory$2.$inject = ['drdFactory'];
  ElementFactory$2.prototype.baseCreate = ElementFactory$3.prototype.create;
  ElementFactory$2.prototype.create = function (elementType, attrs) {
    return this.createDrdElement(elementType, attrs);
  };
  ElementFactory$2.prototype.createDrdElement = function (elementType, attrs) {
    var drdFactory = this._drdFactory;
    var size;
    attrs = attrs || {};
    var businessObject = attrs.businessObject;
    if (!businessObject) {
      if (!attrs.type) {
        throw new Error('no shape type specified');
      }
      businessObject = drdFactory.create(attrs.type);
    }
    if (!businessObject.di) {
      if (elementType === 'connection') {
        businessObject.di = drdFactory.createDiEdge(businessObject, []);
      } else if (elementType === 'shape') {
        businessObject.di = drdFactory.createDiShape(businessObject, {});
      }
    }
    size = this._getDefaultSize(businessObject);
    attrs = assign$4({
      businessObject: businessObject,
      id: businessObject.id
    }, size, attrs);
    return this.baseCreate(elementType, attrs);
  };
  ElementFactory$2.prototype._getDefaultSize = function (semantic) {
    if (is(semantic, 'dmn:BusinessKnowledgeModel')) {
      return BUSINESS_KNOWLEDGE_MODEL_SIZE;
    }
    if (is(semantic, 'dmn:Decision')) {
      return DECISION_SIZE;
    }
    if (is(semantic, 'dmn:InputData')) {
      return INPUT_DATA_SIZE;
    }
    if (is(semantic, 'dmn:KnowledgeSource')) {
      return KNOWLEDGE_SOURCE_SIZE;
    }
    return {
      width: 100,
      height: 80
    };
  };

  var DIRECTION_LEFT = 'left',
    DIRECTION_RIGHT = 'right';
  var DRG_ELEMENT_MARGIN = 60,
    DRG_ELEMENT_ROW_SIZE = DECISION_SIZE.width;
  function getNewShapePosition(source, element) {
    if (is(element, 'dmn:TextAnnotation')) {
      return getTextAnnotationPosition(source, element);
    }
    if (is(element, 'dmn:DRGElement')) {
      return getDRGElementPosition(source, element);
    }
  }

  /**
   * Always try to place text annotations top right of source.
   */
  function getTextAnnotationPosition(source, element) {
    var sourceTrbl = asTRBL(source);
    var position = {
      x: sourceTrbl.right + element.width / 2,
      y: sourceTrbl.top - 50 - element.height / 2
    };
    var nextPositionDirection = {
      y: {
        margin: -30,
        minDistance: 20
      }
    };
    return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
  }

  /**
   * Get position for DRG elements.
   *
   * @param {djs.model.Shape} source
   * @param {djs.model.Shape} element
   *
   * @returns {Point}
   */
  function getDRGElementPosition(source, element) {
    var sourceTrbl = asTRBL(source),
      sourceMid = getMid(source);
    function getWeight(connection) {
      return connection.target === source ? 1 : -1;
    }
    var verticalDistance = getConnectedDistance(source, {
      defaultDistance: 180,
      direction: 's',
      getWeight: getWeight,
      filter: filter,
      reference: 'center'
    });
    var position = {
      x: sourceMid.x,
      y: sourceTrbl.bottom + verticalDistance
    };
    return findFreePosition(source, element, position, generateGetNextDRGElementPosition(source));
  }

  // helpers //////////

  function filter(connection) {
    return !is(connection, 'dmn:Association');
  }
  function getHorizontalDistance(a, b) {
    return Math.abs(b.x - a.x);
  }
  function generateGetNextDRGElementPosition(source) {
    var sourceMid = getMid(source);
    var connectedAtPositionLeft, connectedAtPositionRight;
    return function (element, previousPosition, connectedAtPreviousPosition) {
      var direction;

      // (1) get direction
      if (!connectedAtPositionLeft) {
        connectedAtPositionLeft = connectedAtPreviousPosition;
        connectedAtPositionRight = connectedAtPreviousPosition;
        if (getMid(connectedAtPreviousPosition).x - sourceMid.x > 0) {
          direction = DIRECTION_LEFT;
        } else {
          direction = DIRECTION_RIGHT;
        }
      } else {
        if (previousPosition.x < sourceMid.x) {
          connectedAtPositionLeft = connectedAtPreviousPosition;
        } else {
          connectedAtPositionRight = connectedAtPreviousPosition;
        }
        if (getHorizontalDistance(sourceMid, getMid(connectedAtPositionLeft)) < getHorizontalDistance(sourceMid, getMid(connectedAtPositionRight))) {
          direction = DIRECTION_LEFT;
        } else {
          direction = DIRECTION_RIGHT;
        }
      }

      // (2) get next position
      if (direction === DIRECTION_LEFT) {
        return {
          x: Math.min(getMid(connectedAtPositionLeft).x - DRG_ELEMENT_ROW_SIZE - DRG_ELEMENT_MARGIN, asTRBL(connectedAtPositionLeft).left - DRG_ELEMENT_MARGIN - element.width / 2),
          y: previousPosition.y
        };
      } else {
        return {
          x: Math.max(getMid(connectedAtPositionRight).x + DRG_ELEMENT_ROW_SIZE + DRG_ELEMENT_MARGIN, asTRBL(connectedAtPositionRight).right + DRG_ELEMENT_MARGIN + element.width / 2),
          y: previousPosition.y
        };
      }
    };
  }

  /**
   * DMN auto-place behavior.
   *
   * @param {EventBus} eventBus
   */
  function AutoPlace(eventBus) {
    eventBus.on('autoPlace', function (context) {
      var shape = context.shape,
        source = context.source;
      return getNewShapePosition(source, shape);
    });
  }
  AutoPlace.$inject = ['eventBus'];

  var AutoPlaceModule = {
    __depends__: [AutoPlaceModule$1],
    __init__: ['dmnAutoPlace'],
    dmnAutoPlace: ['type', AutoPlace]
  };

  var HIGH_PRIORITY$b = 1500;

  /**
   * Browsers may swallow certain events (hover, out ...) if users are to
   * fast with the mouse.
   *
   * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event
   *
   * The fix implemented in this component ensure that we
   *
   * 1) have a hover state after a successful drag.move event
   * 2) have an out event when dragging leaves an element
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function HoverFix(elementRegistry, eventBus, injector) {
    var self = this;
    var dragging = injector.get('dragging', false);

    /**
     * Make sure we are god damn hovering!
     *
     * @param {Event} dragging event
     */
    function ensureHover(event) {
      if (event.hover) {
        return;
      }
      var originalEvent = event.originalEvent;
      var gfx = self._findTargetGfx(originalEvent);
      var element = gfx && elementRegistry.get(gfx);
      if (gfx && element) {
        // 1) cancel current mousemove
        event.stopPropagation();

        // 2) emit fake hover for new target
        dragging.hover({
          element: element,
          gfx: gfx
        });

        // 3) re-trigger move event
        dragging.move(originalEvent);
      }
    }
    if (dragging) {
      /**
       * We wait for a specific sequence of events before
       * emitting a fake drag.hover event.
       *
       * Event Sequence:
       *
       * drag.start
       * drag.move >> ensure we are hovering
       */
      eventBus.on('drag.start', function (event) {
        eventBus.once('drag.move', HIGH_PRIORITY$b, function (event) {
          ensureHover(event);
        });
      });
    }

    /**
     * We make sure that element.out is always fired, even if the
     * browser swallows an element.out event.
     *
     * Event sequence:
     *
     * element.hover
     * (element.out >> sometimes swallowed)
     * element.hover >> ensure we fired element.out
     */
    (function () {
      var hoverGfx;
      var hover;
      eventBus.on('element.hover', function (event) {
        // (1) remember current hover element
        hoverGfx = event.gfx;
        hover = event.element;
      });
      eventBus.on('element.hover', HIGH_PRIORITY$b, function (event) {
        // (3) am I on an element still?
        if (hover) {
          // (4) that is a problem, gotta "simulate the out"
          eventBus.fire('element.out', {
            element: hover,
            gfx: hoverGfx
          });
        }
      });
      eventBus.on('element.out', function () {
        // (2) unset hover state if we correctly outed us *GG*
        hoverGfx = null;
        hover = null;
      });
    })();
    this._findTargetGfx = function (event) {
      var position, target;
      if (!(event instanceof MouseEvent)) {
        return;
      }
      position = toPoint(event);

      // damn expensive operation, ouch!
      target = document.elementFromPoint(position.x, position.y);
      return getGfx(target);
    };
  }
  HoverFix.$inject = ['elementRegistry', 'eventBus', 'injector'];

  // helpers /////////////////////

  function getGfx(target) {
    return closest(target, 'svg, .djs-element', true);
  }

  var HoverFixModule = {
    __init__: ['hoverFix'],
    hoverFix: ['type', HoverFix]
  };

  var round$8 = Math.round;
  var DRAG_ACTIVE_CLS = 'djs-drag-active';
  function preventDefault$1(event) {
    event.preventDefault();
  }
  function isTouchEvent(event) {
    // check for TouchEvent being available first
    // (i.e. not available on desktop Firefox)
    return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;
  }
  function getLength(point) {
    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
  }

  /**
   * A helper that fires canvas localized drag events and realizes
   * the general "drag-and-drop" look and feel.
   *
   * Calling {@link Dragging#activate} activates dragging on a canvas.
   *
   * It provides the following:
   *
   *   * emits life cycle events, namespaced with a prefix assigned
   *     during dragging activation
   *   * sets and restores the cursor
   *   * sets and restores the selection if elements still exist
   *   * ensures there can be only one drag operation active at a time
   *
   * Dragging may be canceled manually by calling {@link Dragging#cancel}
   * or by pressing ESC.
   *
   *
   * ## Life-cycle events
   *
   * Dragging can be in three different states, off, initialized
   * and active.
   *
   * (1) off: no dragging operation is in progress
   * (2) initialized: a new drag operation got initialized but not yet
   *                  started (i.e. because of no initial move)
   * (3) started: dragging is in progress
   *
   * Eventually dragging will be off again after a drag operation has
   * been ended or canceled via user click or ESC key press.
   *
   * To indicate transitions between these states dragging emits generic
   * life-cycle events with the `drag.` prefix _and_ events namespaced
   * to a prefix choosen by a user during drag initialization.
   *
   * The following events are emitted (appropriately prefixed) via
   * the {@link EventBus}.
   *
   * * `init`
   * * `start`
   * * `move`
   * * `end`
   * * `ended` (dragging already in off state)
   * * `cancel` (only if previously started)
   * * `canceled` (dragging already in off state, only if previously started)
   * * `cleanup`
   *
   *
   * @example
   *
   * function MyDragComponent(eventBus, dragging) {
   *
   *   eventBus.on('mydrag.start', function(event) {
   *     console.log('yes, we start dragging');
   *   });
   *
   *   eventBus.on('mydrag.move', function(event) {
   *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);
   *
   *     // local drag data is passed with the event
   *     event.context.foo; // "BAR"
   *
   *     // the original mouse event, too
   *     event.originalEvent; // MouseEvent(...)
   *   });
   *
   *   eventBus.on('element.click', function(event) {
   *     dragging.init(event, 'mydrag', {
   *       cursor: 'grabbing',
   *       data: {
   *         context: {
   *           foo: "BAR"
   *         }
   *       }
   *     });
   *   });
   * }
   */
  function Dragging(eventBus, canvas, selection, elementRegistry) {
    var defaultOptions = {
      threshold: 5,
      trapClick: true
    };

    // the currently active drag operation
    // dragging is active as soon as this context exists.
    //
    // it is visually _active_ only when a context.active flag is set to true.
    var context;

    /* convert a global event into local coordinates */
    function toLocalPoint(globalPosition) {
      var viewbox = canvas.viewbox();
      var clientRect = canvas._container.getBoundingClientRect();
      return {
        x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,
        y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale
      };
    }

    // helpers

    function fire(type, dragContext) {
      dragContext = dragContext || context;
      var event = eventBus.createEvent(assign$4({}, dragContext.payload, dragContext.data, {
        isTouch: dragContext.isTouch
      }));

      // default integration
      if (eventBus.fire('drag.' + type, event) === false) {
        return false;
      }
      return eventBus.fire(dragContext.prefix + '.' + type, event);
    }
    function restoreSelection(previousSelection) {
      var existingSelection = previousSelection.filter(function (element) {
        return elementRegistry.get(element.id);
      });
      existingSelection.length && selection.select(existingSelection);
    }

    // event listeners

    function move(event, activate) {
      var payload = context.payload,
        displacement = context.displacement;
      var globalStart = context.globalStart,
        globalCurrent = toPoint(event),
        globalDelta = delta(globalCurrent, globalStart);
      var localStart = context.localStart,
        localCurrent = toLocalPoint(globalCurrent),
        localDelta = delta(localCurrent, localStart);

      // activate context explicitly or once threshold is reached
      if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {
        // fire start event with original
        // starting coordinates

        assign$4(payload, {
          x: round$8(localStart.x + displacement.x),
          y: round$8(localStart.y + displacement.y),
          dx: 0,
          dy: 0
        }, {
          originalEvent: event
        });
        if (false === fire('start')) {
          return cancel();
        }
        context.active = true;

        // unset selection and remember old selection
        // the previous (old) selection will always passed
        // with the event via the event.previousSelection property
        if (!context.keepSelection) {
          payload.previousSelection = selection.get();
          selection.select(null);
        }

        // allow custom cursor
        if (context.cursor) {
          set(context.cursor);
        }

        // indicate dragging via marker on root element
        canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);
      }
      stopPropagation$3(event);
      if (context.active) {
        // update payload with actual coordinates
        assign$4(payload, {
          x: round$8(localCurrent.x + displacement.x),
          y: round$8(localCurrent.y + displacement.y),
          dx: round$8(localDelta.x),
          dy: round$8(localDelta.y)
        }, {
          originalEvent: event
        });

        // emit move event
        fire('move');
      }
    }
    function end(event) {
      var previousContext,
        returnValue = true;
      if (context.active) {
        if (event) {
          context.payload.originalEvent = event;

          // suppress original event (click, ...)
          // because we just ended a drag operation
          stopPropagation$3(event);
        }

        // implementations may stop restoring the
        // original state (selections, ...) by preventing the
        // end events default action
        returnValue = fire('end');
      }
      if (returnValue === false) {
        fire('rejected');
      }
      previousContext = cleanup(returnValue !== true);

      // last event to be fired when all drag operations are done
      // at this point in time no drag operation is in progress anymore
      fire('ended', previousContext);
    }

    // cancel active drag operation if the user presses
    // the ESC key on the keyboard

    function checkCancel(event) {
      if (isKey('Escape', event)) {
        preventDefault$1(event);
        cancel();
      }
    }

    // prevent ghost click that might occur after a finished
    // drag and drop session

    function trapClickAndEnd(event) {
      var untrap;

      // trap the click in case we are part of an active
      // drag operation. This will effectively prevent
      // the ghost click that cannot be canceled otherwise.
      if (context.active) {
        untrap = install(eventBus);

        // remove trap after minimal delay
        setTimeout(untrap, 400);

        // prevent default action (click)
        preventDefault$1(event);
      }
      end(event);
    }
    function trapTouch(event) {
      move(event);
    }

    // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)
    // properties during hover and out and fire {prefix}.hover and {prefix}.out properties
    // respectively

    function hover(event) {
      var payload = context.payload;
      payload.hoverGfx = event.gfx;
      payload.hover = event.element;
      fire('hover');
    }
    function out(event) {
      fire('out');
      var payload = context.payload;
      payload.hoverGfx = null;
      payload.hover = null;
    }

    // life-cycle methods

    function cancel(restore) {
      var previousContext;
      if (!context) {
        return;
      }
      var wasActive = context.active;
      if (wasActive) {
        fire('cancel');
      }
      previousContext = cleanup(restore);
      if (wasActive) {
        // last event to be fired when all drag operations are done
        // at this point in time no drag operation is in progress anymore
        fire('canceled', previousContext);
      }
    }
    function cleanup(restore) {
      var previousContext, endDrag;
      fire('cleanup');

      // reset cursor
      unset();
      if (context.trapClick) {
        endDrag = trapClickAndEnd;
      } else {
        endDrag = end;
      }

      // reset dom listeners
      event.unbind(document, 'mousemove', move);
      event.unbind(document, 'dragstart', preventDefault$1);
      event.unbind(document, 'selectstart', preventDefault$1);
      event.unbind(document, 'mousedown', endDrag, true);
      event.unbind(document, 'mouseup', endDrag, true);
      event.unbind(document, 'keyup', checkCancel);
      event.unbind(document, 'touchstart', trapTouch, true);
      event.unbind(document, 'touchcancel', cancel, true);
      event.unbind(document, 'touchmove', move, true);
      event.unbind(document, 'touchend', end, true);
      eventBus.off('element.hover', hover);
      eventBus.off('element.out', out);

      // remove drag marker on root element
      canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);

      // restore selection, unless it has changed
      var previousSelection = context.payload.previousSelection;
      if (restore !== false && previousSelection && !selection.get().length) {
        restoreSelection(previousSelection);
      }
      previousContext = context;
      context = null;
      return previousContext;
    }

    /**
     * Initialize a drag operation.
     *
     * If `localPosition` is given, drag events will be emitted
     * relative to it.
     *
     * @param {MouseEvent|TouchEvent} [event]
     * @param {Point} [localPosition] actual diagram local position this drag operation should start at
     * @param {string} prefix
     * @param {Object} [options]
     */
    function init(event$1, relativeTo, prefix, options) {
      // only one drag operation may be active, at a time
      if (context) {
        cancel(false);
      }
      if (typeof relativeTo === 'string') {
        options = prefix;
        prefix = relativeTo;
        relativeTo = null;
      }
      options = assign$4({}, defaultOptions, options || {});
      var data = options.data || {},
        originalEvent,
        globalStart,
        localStart,
        endDrag,
        isTouch;
      if (options.trapClick) {
        endDrag = trapClickAndEnd;
      } else {
        endDrag = end;
      }
      if (event$1) {
        originalEvent = getOriginal$1(event$1) || event$1;
        globalStart = toPoint(event$1);
        stopPropagation$3(event$1);

        // prevent default browser dragging behavior
        if (originalEvent.type === 'dragstart') {
          preventDefault$1(originalEvent);
        }
      } else {
        originalEvent = null;
        globalStart = {
          x: 0,
          y: 0
        };
      }
      localStart = toLocalPoint(globalStart);
      if (!relativeTo) {
        relativeTo = localStart;
      }
      isTouch = isTouchEvent(originalEvent);
      context = assign$4({
        prefix: prefix,
        data: data,
        payload: {},
        globalStart: globalStart,
        displacement: delta(relativeTo, localStart),
        localStart: localStart,
        isTouch: isTouch
      }, options);

      // skip dom registration if trigger
      // is set to manual (during testing)
      if (!options.manual) {
        // add dom listeners

        if (isTouch) {
          event.bind(document, 'touchstart', trapTouch, true);
          event.bind(document, 'touchcancel', cancel, true);
          event.bind(document, 'touchmove', move, true);
          event.bind(document, 'touchend', end, true);
        } else {
          // assume we use the mouse to interact per default
          event.bind(document, 'mousemove', move);

          // prevent default browser drag and text selection behavior
          event.bind(document, 'dragstart', preventDefault$1);
          event.bind(document, 'selectstart', preventDefault$1);
          event.bind(document, 'mousedown', endDrag, true);
          event.bind(document, 'mouseup', endDrag, true);
        }
        event.bind(document, 'keyup', checkCancel);
        eventBus.on('element.hover', hover);
        eventBus.on('element.out', out);
      }
      fire('init');
      if (options.autoActivate) {
        move(event$1, true);
      }
    }

    // cancel on diagram destruction
    eventBus.on('diagram.destroy', cancel);

    // API

    this.init = init;
    this.move = move;
    this.hover = hover;
    this.out = out;
    this.end = end;
    this.cancel = cancel;

    // for introspection

    this.context = function () {
      return context;
    };
    this.setOptions = function (options) {
      assign$4(defaultOptions, options);
    };
  }
  Dragging.$inject = ['eventBus', 'canvas', 'selection', 'elementRegistry'];

  var DraggingModule = {
    __depends__: [HoverFixModule, SelectionModule],
    dragging: ['type', Dragging]
  };

  /**
   * Initiates canvas scrolling if current cursor point is close to a border.
   * Cancelled when current point moves back inside the scrolling borders
   * or cancelled manually.
   *
   * Default options :
   *   scrollThresholdIn: [ 20, 20, 20, 20 ],
   *   scrollThresholdOut: [ 0, 0, 0, 0 ],
   *   scrollRepeatTimeout: 15,
   *   scrollStep: 10
   *
   * Threshold order:
   *   [ left, top, right, bottom ]
   */
  function AutoScroll(config, eventBus, canvas) {
    this._canvas = canvas;
    this._opts = assign$4({
      scrollThresholdIn: [20, 20, 20, 20],
      scrollThresholdOut: [0, 0, 0, 0],
      scrollRepeatTimeout: 15,
      scrollStep: 10
    }, config);
    var self = this;
    eventBus.on('drag.move', function (e) {
      var point = self._toBorderPoint(e);
      self.startScroll(point);
    });
    eventBus.on(['drag.cleanup'], function () {
      self.stopScroll();
    });
  }
  AutoScroll.$inject = ['config.autoScroll', 'eventBus', 'canvas'];

  /**
   * Starts scrolling loop.
   * Point is given in global scale in canvas container box plane.
   *
   * @param  {Object} point { x: X, y: Y }
   */
  AutoScroll.prototype.startScroll = function (point) {
    var canvas = this._canvas;
    var opts = this._opts;
    var self = this;
    var clientRect = canvas.getContainer().getBoundingClientRect();
    var diff = [point.x, point.y, clientRect.width - point.x, clientRect.height - point.y];
    this.stopScroll();
    var dx = 0,
      dy = 0;
    for (var i = 0; i < 4; i++) {
      if (between(diff[i], opts.scrollThresholdOut[i], opts.scrollThresholdIn[i])) {
        if (i === 0) {
          dx = opts.scrollStep;
        } else if (i == 1) {
          dy = opts.scrollStep;
        } else if (i == 2) {
          dx = -opts.scrollStep;
        } else if (i == 3) {
          dy = -opts.scrollStep;
        }
      }
    }
    if (dx !== 0 || dy !== 0) {
      canvas.scroll({
        dx: dx,
        dy: dy
      });
      this._scrolling = setTimeout(function () {
        self.startScroll(point);
      }, opts.scrollRepeatTimeout);
    }
  };
  function between(val, start, end) {
    if (start < val && val < end) {
      return true;
    }
    return false;
  }

  /**
   * Stops scrolling loop.
   */
  AutoScroll.prototype.stopScroll = function () {
    clearTimeout(this._scrolling);
  };

  /**
   * Overrides defaults options.
   *
   * @param  {Object} options
   */
  AutoScroll.prototype.setOptions = function (options) {
    this._opts = assign$4({}, this._opts, options);
  };

  /**
   * Converts event to a point in canvas container plane in global scale.
   *
   * @param  {Event} event
   * @return {Point}
   */
  AutoScroll.prototype._toBorderPoint = function (event) {
    var clientRect = this._canvas._container.getBoundingClientRect();
    var globalPosition = toPoint(event.originalEvent);
    return {
      x: globalPosition.x - clientRect.left,
      y: globalPosition.y - clientRect.top
    };
  };

  var AutoScrollModule = {
    __depends__: [DraggingModule],
    __init__: ['autoScroll'],
    autoScroll: ['type', AutoScroll]
  };

  /**
   * A service that provides rules for certain diagram actions.
   *
   * The default implementation will hook into the {@link CommandStack}
   * to perform the actual rule evaluation. Make sure to provide the
   * `commandStack` service with this module if you plan to use it.
   *
   * Together with this implementation you may use the {@link RuleProvider}
   * to implement your own rule checkers.
   *
   * This module is ment to be easily replaced, thus the tiny foot print.
   *
   * @param {Injector} injector
   */
  function Rules$6(injector) {
    this._commandStack = injector.get('commandStack', false);
  }
  Rules$6.$inject = ['injector'];

  /**
   * Returns whether or not a given modeling action can be executed
   * in the specified context.
   *
   * This implementation will respond with allow unless anyone
   * objects.
   *
   * @param {string} action the action to be checked
   * @param {Object} [context] the context to check the action in
   *
   * @return {boolean} returns true, false or null depending on whether the
   *                   operation is allowed, not allowed or should be ignored.
   */
  Rules$6.prototype.allowed = function (action, context) {
    var allowed = true;
    var commandStack = this._commandStack;
    if (commandStack) {
      allowed = commandStack.canExecute(action, context);
    }

    // map undefined to true, i.e. no rules
    return allowed === undefined ? true : allowed;
  };

  var Rules$5 = {
    __init__: ['rules'],
    rules: ['type', Rules$6]
  };

  var round$7 = Math.round,
    max$2 = Math.max;
  function circlePath(center, r) {
    var x = center.x,
      y = center.y;
    return [['M', x, y], ['m', 0, -r], ['a', r, r, 0, 1, 1, 0, 2 * r], ['a', r, r, 0, 1, 1, 0, -2 * r], ['z']];
  }
  function linePath(points) {
    var segments = [];
    points.forEach(function (p, idx) {
      segments.push([idx === 0 ? 'M' : 'L', p.x, p.y]);
    });
    return segments;
  }
  var INTERSECTION_THRESHOLD = 10;
  function getBendpointIntersection(waypoints, reference) {
    var i, w;
    for (i = 0; w = waypoints[i]; i++) {
      if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {
        return {
          point: waypoints[i],
          bendpoint: true,
          index: i
        };
      }
    }
    return null;
  }
  function getPathIntersection(waypoints, reference) {
    var intersections = intersectPaths(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));
    var a = intersections[0],
      b = intersections[intersections.length - 1],
      idx;
    if (!a) {
      // no intersection
      return null;
    }
    if (a !== b) {
      if (a.segment2 !== b.segment2) {
        // we use the bendpoint in between both segments
        // as the intersection point

        idx = max$2(a.segment2, b.segment2) - 1;
        return {
          point: waypoints[idx],
          bendpoint: true,
          index: idx
        };
      }
      return {
        point: {
          x: round$7(a.x + b.x) / 2,
          y: round$7(a.y + b.y) / 2
        },
        index: a.segment2
      };
    }
    return {
      point: {
        x: round$7(a.x),
        y: round$7(a.y)
      },
      index: a.segment2
    };
  }

  /**
   * Returns the closest point on the connection towards a given reference point.
   *
   * @param  {Array<Point>} waypoints
   * @param  {Point} reference
   *
   * @return {Object} intersection data (segment, point)
   */
  function getApproxIntersection(waypoints, reference) {
    return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);
  }

  /**
   * Returns the length of a vector
   *
   * @param {Vector}
   * @return {Float}
   */
  function vectorLength(v) {
    return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));
  }

  /**
   * Solves a 2D equation system
   * a + r*b = c, where a,b,c are 2D vectors
   *
   * @param {Vector}
   * @param {Vector}
   * @param {Vector}
   * @return {Float}
   */
  function solveLambaSystem(a, b, c) {
    // the 2d system
    var system = [{
      n: a[0] - c[0],
      lambda: b[0]
    }, {
      n: a[1] - c[1],
      lambda: b[1]
    }];

    // solve
    var n = system[0].n * b[0] + system[1].n * b[1],
      l = system[0].lambda * b[0] + system[1].lambda * b[1];
    return -n / l;
  }

  /**
   * Position of perpendicular foot
   *
   * @param {Point}
   * @param [ {Point}, {Point} ] line defined through two points
   * @return {Point} the perpendicular foot position
   */
  function perpendicularFoot(point, line) {
    var a = line[0],
      b = line[1];

    // relative position of b from a
    var bd = {
      x: b.x - a.x,
      y: b.y - a.y
    };

    // solve equation system to the parametrized vectors param real value
    var r = solveLambaSystem([a.x, a.y], [bd.x, bd.y], [point.x, point.y]);
    return {
      x: a.x + r * bd.x,
      y: a.y + r * bd.y
    };
  }

  /**
   * Calculates the distance between a point and a line
   *
   * @param {Point}
   * @param [ {Point}, {Point} ] line defined through two points
   * @return {Float} distance
   */
  function getDistancePointLine(point, line) {
    var pfPoint = perpendicularFoot(point, line);

    // distance vector
    var connectionVector = {
      x: pfPoint.x - point.x,
      y: pfPoint.y - point.y
    };
    return vectorLength(connectionVector);
  }

  var BENDPOINT_CLS = 'djs-bendpoint';
  var SEGMENT_DRAGGER_CLS = 'djs-segment-dragger';
  function toCanvasCoordinates(canvas, event) {
    var position = toPoint(event),
      clientRect = canvas._container.getBoundingClientRect(),
      offset;

    // canvas relative position

    offset = {
      x: clientRect.left,
      y: clientRect.top
    };

    // update actual event payload with canvas relative measures

    var viewbox = canvas.viewbox();
    return {
      x: viewbox.x + (position.x - offset.x) / viewbox.scale,
      y: viewbox.y + (position.y - offset.y) / viewbox.scale
    };
  }
  function getConnectionIntersection(canvas, waypoints, event) {
    var localPosition = toCanvasCoordinates(canvas, event),
      intersection = getApproxIntersection(waypoints, localPosition);
    return intersection;
  }
  function addBendpoint(parentGfx, cls) {
    var groupGfx = create$2('g');
    classes(groupGfx).add(BENDPOINT_CLS);
    append(parentGfx, groupGfx);
    var visual = create$2('circle');
    attr(visual, {
      cx: 0,
      cy: 0,
      r: 4
    });
    classes(visual).add('djs-visual');
    append(groupGfx, visual);
    var hit = create$2('circle');
    attr(hit, {
      cx: 0,
      cy: 0,
      r: 10
    });
    classes(hit).add('djs-hit');
    append(groupGfx, hit);
    if (cls) {
      classes(groupGfx).add(cls);
    }
    return groupGfx;
  }
  function createParallelDragger(parentGfx, segmentStart, segmentEnd, alignment) {
    var draggerGfx = create$2('g');
    append(parentGfx, draggerGfx);
    var width = 18,
      height = 6,
      padding = 11,
      hitWidth = calculateHitWidth(segmentStart, segmentEnd, alignment),
      hitHeight = height + padding;
    var visual = create$2('rect');
    attr(visual, {
      x: -width / 2,
      y: -height / 2,
      width: width,
      height: height
    });
    classes(visual).add('djs-visual');
    append(draggerGfx, visual);
    var hit = create$2('rect');
    attr(hit, {
      x: -hitWidth / 2,
      y: -hitHeight / 2,
      width: hitWidth,
      height: hitHeight
    });
    classes(hit).add('djs-hit');
    append(draggerGfx, hit);
    rotate(draggerGfx, alignment === 'v' ? 90 : 0);
    return draggerGfx;
  }
  function addSegmentDragger(parentGfx, segmentStart, segmentEnd) {
    var groupGfx = create$2('g'),
      mid = getMidPoint(segmentStart, segmentEnd),
      alignment = pointsAligned(segmentStart, segmentEnd);
    append(parentGfx, groupGfx);
    createParallelDragger(groupGfx, segmentStart, segmentEnd, alignment);
    classes(groupGfx).add(SEGMENT_DRAGGER_CLS);
    classes(groupGfx).add(alignment === 'h' ? 'horizontal' : 'vertical');
    translate$1(groupGfx, mid.x, mid.y);
    return groupGfx;
  }

  /**
   * Calculates region for segment move which is 2/3 of the full segment length
   * @param {number} segmentLength
   *
   * @return {number}
   */
  function calculateSegmentMoveRegion(segmentLength) {
    return Math.abs(Math.round(segmentLength * 2 / 3));
  }

  /**
   * Returns the point with the closest distance that is on the connection path.
   *
   * @param {Point} position
   * @param {djs.Base.Connection} connection
   * @returns {Point}
   */
  function getClosestPointOnConnection(position, connection) {
    var segment = getClosestSegment(position, connection);
    return perpendicularFoot(position, segment);
  }

  // helper //////////

  function calculateHitWidth(segmentStart, segmentEnd, alignment) {
    var segmentLengthXAxis = segmentEnd.x - segmentStart.x,
      segmentLengthYAxis = segmentEnd.y - segmentStart.y;
    return alignment === 'h' ? calculateSegmentMoveRegion(segmentLengthXAxis) : calculateSegmentMoveRegion(segmentLengthYAxis);
  }
  function getClosestSegment(position, connection) {
    var waypoints = connection.waypoints;
    var minDistance = Infinity,
      segmentIndex;
    for (var i = 0; i < waypoints.length - 1; i++) {
      var start = waypoints[i],
        end = waypoints[i + 1],
        distance = getDistancePointLine(position, [start, end]);
      if (distance < minDistance) {
        minDistance = distance;
        segmentIndex = i;
      }
    }
    return [waypoints[segmentIndex], waypoints[segmentIndex + 1]];
  }

  var css_escapeExports = {};
  var css_escape = {
    get exports(){ return css_escapeExports; },
    set exports(v){ css_escapeExports = v; },
  };

  /*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */

  (function (module, exports) {
  	(function (root, factory) {
  	  // https://github.com/umdjs/umd/blob/master/returnExports.js
  	  {
  	    // For Node.js.
  	    module.exports = factory(root);
  	  }
  	})(typeof commonjsGlobal != 'undefined' ? commonjsGlobal : commonjsGlobal, function (root) {
  	  if (root.CSS && root.CSS.escape) {
  	    return root.CSS.escape;
  	  }

  	  // https://drafts.csswg.org/cssom/#serialize-an-identifier
  	  var cssEscape = function (value) {
  	    if (arguments.length == 0) {
  	      throw new TypeError('`CSS.escape` requires an argument.');
  	    }
  	    var string = String(value);
  	    var length = string.length;
  	    var index = -1;
  	    var codeUnit;
  	    var result = '';
  	    var firstCodeUnit = string.charCodeAt(0);
  	    while (++index < length) {
  	      codeUnit = string.charCodeAt(index);
  	      // Note: there’s no need to special-case astral symbols, surrogate
  	      // pairs, or lone surrogates.

  	      // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
  	      // (U+FFFD).
  	      if (codeUnit == 0x0000) {
  	        result += '\uFFFD';
  	        continue;
  	      }
  	      if (
  	      // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
  	      // U+007F, […]
  	      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F ||
  	      // If the character is the first character and is in the range [0-9]
  	      // (U+0030 to U+0039), […]
  	      index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
  	      // If the character is the second character and is in the range [0-9]
  	      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]

  	      index == 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit == 0x002D) {
  	        // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
  	        result += '\\' + codeUnit.toString(16) + ' ';
  	        continue;
  	      }
  	      if (
  	      // If the character is the first character and is a `-` (U+002D), and
  	      // there is no second character, […]
  	      index == 0 && length == 1 && codeUnit == 0x002D) {
  	        result += '\\' + string.charAt(index);
  	        continue;
  	      }

  	      // If the character is not handled by one of the above rules and is
  	      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
  	      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
  	      // U+005A), or [a-z] (U+0061 to U+007A), […]
  	      if (codeUnit >= 0x0080 || codeUnit == 0x002D || codeUnit == 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {
  	        // the character itself
  	        result += string.charAt(index);
  	        continue;
  	      }

  	      // Otherwise, the escaped character.
  	      // https://drafts.csswg.org/cssom/#escape-a-character
  	      result += '\\' + string.charAt(index);
  	    }
  	    return result;
  	  };
  	  if (!root.CSS) {
  	    root.CSS = {};
  	  }
  	  root.CSS.escape = cssEscape;
  	  return cssEscape;
  	});
  } (css_escape));

  var cssEscape = css_escapeExports;

  /**
   * A service that adds editable bendpoints to connections.
   */
  function Bendpoints(eventBus, canvas, interactionEvents, bendpointMove, connectionSegmentMove) {
    /**
     * Returns true if intersection point is inside middle region of segment, adjusted by
     * optional threshold
     */
    function isIntersectionMiddle(intersection, waypoints, treshold) {
      var idx = intersection.index,
        p = intersection.point,
        p0,
        p1,
        mid,
        aligned,
        xDelta,
        yDelta;
      if (idx <= 0 || intersection.bendpoint) {
        return false;
      }
      p0 = waypoints[idx - 1];
      p1 = waypoints[idx];
      mid = getMidPoint(p0, p1), aligned = pointsAligned(p0, p1);
      xDelta = Math.abs(p.x - mid.x);
      yDelta = Math.abs(p.y - mid.y);
      return aligned && xDelta <= treshold && yDelta <= treshold;
    }

    /**
     * Calculates the threshold from a connection's middle which fits the two-third-region
     */
    function calculateIntersectionThreshold(connection, intersection) {
      var waypoints = connection.waypoints,
        relevantSegment,
        alignment,
        segmentLength,
        threshold;
      if (intersection.index <= 0 || intersection.bendpoint) {
        return null;
      }

      // segment relative to connection intersection
      relevantSegment = {
        start: waypoints[intersection.index - 1],
        end: waypoints[intersection.index]
      };
      alignment = pointsAligned(relevantSegment.start, relevantSegment.end);
      if (!alignment) {
        return null;
      }
      if (alignment === 'h') {
        segmentLength = relevantSegment.end.x - relevantSegment.start.x;
      } else {
        segmentLength = relevantSegment.end.y - relevantSegment.start.y;
      }

      // calculate threshold relative to 2/3 of segment length
      threshold = calculateSegmentMoveRegion(segmentLength) / 2;
      return threshold;
    }
    function activateBendpointMove(event, connection) {
      var waypoints = connection.waypoints,
        intersection = getConnectionIntersection(canvas, waypoints, event),
        threshold;
      if (!intersection) {
        return;
      }
      threshold = calculateIntersectionThreshold(connection, intersection);
      if (isIntersectionMiddle(intersection, waypoints, threshold)) {
        connectionSegmentMove.start(event, connection, intersection.index);
      } else {
        bendpointMove.start(event, connection, intersection.index, !intersection.bendpoint);
      }

      // we've handled the event
      return true;
    }
    function bindInteractionEvents(node, eventName, element) {
      event.bind(node, eventName, function (event) {
        interactionEvents.triggerMouseEvent(eventName, event, element);
        event.stopPropagation();
      });
    }
    function getBendpointsContainer(element, create) {
      var layer = canvas.getLayer('overlays'),
        gfx = query('.djs-bendpoints[data-element-id="' + cssEscape(element.id) + '"]', layer);
      if (!gfx && create) {
        gfx = create$2('g');
        attr(gfx, {
          'data-element-id': element.id
        });
        classes(gfx).add('djs-bendpoints');
        append(layer, gfx);
        bindInteractionEvents(gfx, 'mousedown', element);
        bindInteractionEvents(gfx, 'click', element);
        bindInteractionEvents(gfx, 'dblclick', element);
      }
      return gfx;
    }
    function getSegmentDragger(idx, parentGfx) {
      return query('.djs-segment-dragger[data-segment-idx="' + idx + '"]', parentGfx);
    }
    function createBendpoints(gfx, connection) {
      connection.waypoints.forEach(function (p, idx) {
        var bendpoint = addBendpoint(gfx);
        append(gfx, bendpoint);
        translate$1(bendpoint, p.x, p.y);
      });

      // add floating bendpoint
      addBendpoint(gfx, 'floating');
    }
    function createSegmentDraggers(gfx, connection) {
      var waypoints = connection.waypoints;
      var segmentStart, segmentEnd, segmentDraggerGfx;
      for (var i = 1; i < waypoints.length; i++) {
        segmentStart = waypoints[i - 1];
        segmentEnd = waypoints[i];
        if (pointsAligned(segmentStart, segmentEnd)) {
          segmentDraggerGfx = addSegmentDragger(gfx, segmentStart, segmentEnd);
          attr(segmentDraggerGfx, {
            'data-segment-idx': i
          });
          bindInteractionEvents(segmentDraggerGfx, 'mousemove', connection);
        }
      }
    }
    function clearBendpoints(gfx) {
      forEach$3(all('.' + BENDPOINT_CLS, gfx), function (node) {
        remove$2(node);
      });
    }
    function clearSegmentDraggers(gfx) {
      forEach$3(all('.' + SEGMENT_DRAGGER_CLS, gfx), function (node) {
        remove$2(node);
      });
    }
    function addHandles(connection) {
      var gfx = getBendpointsContainer(connection);
      if (!gfx) {
        gfx = getBendpointsContainer(connection, true);
        createBendpoints(gfx, connection);
        createSegmentDraggers(gfx, connection);
      }
      return gfx;
    }
    function updateHandles(connection) {
      var gfx = getBendpointsContainer(connection);
      if (gfx) {
        clearSegmentDraggers(gfx);
        clearBendpoints(gfx);
        createSegmentDraggers(gfx, connection);
        createBendpoints(gfx, connection);
      }
    }
    function updateFloatingBendpointPosition(parentGfx, intersection) {
      var floating = query('.floating', parentGfx),
        point = intersection.point;
      if (!floating) {
        return;
      }
      translate$1(floating, point.x, point.y);
    }
    function updateSegmentDraggerPosition(parentGfx, intersection, waypoints) {
      var draggerGfx = getSegmentDragger(intersection.index, parentGfx),
        segmentStart = waypoints[intersection.index - 1],
        segmentEnd = waypoints[intersection.index],
        point = intersection.point,
        mid = getMidPoint(segmentStart, segmentEnd),
        alignment = pointsAligned(segmentStart, segmentEnd),
        draggerVisual,
        relativePosition;
      if (!draggerGfx) {
        return;
      }
      draggerVisual = getDraggerVisual(draggerGfx);
      relativePosition = {
        x: point.x - mid.x,
        y: point.y - mid.y
      };
      if (alignment === 'v') {
        // rotate position
        relativePosition = {
          x: relativePosition.y,
          y: relativePosition.x
        };
      }
      translate$1(draggerVisual, relativePosition.x, relativePosition.y);
    }
    eventBus.on('connection.changed', function (event) {
      updateHandles(event.element);
    });
    eventBus.on('connection.remove', function (event) {
      var gfx = getBendpointsContainer(event.element);
      if (gfx) {
        remove$2(gfx);
      }
    });
    eventBus.on('element.marker.update', function (event) {
      var element = event.element,
        bendpointsGfx;
      if (!element.waypoints) {
        return;
      }
      bendpointsGfx = addHandles(element);
      if (event.add) {
        classes(bendpointsGfx).add(event.marker);
      } else {
        classes(bendpointsGfx).remove(event.marker);
      }
    });
    eventBus.on('element.mousemove', function (event) {
      var element = event.element,
        waypoints = element.waypoints,
        bendpointsGfx,
        intersection;
      if (waypoints) {
        bendpointsGfx = getBendpointsContainer(element, true);
        intersection = getConnectionIntersection(canvas, waypoints, event.originalEvent);
        if (!intersection) {
          return;
        }
        updateFloatingBendpointPosition(bendpointsGfx, intersection);
        if (!intersection.bendpoint) {
          updateSegmentDraggerPosition(bendpointsGfx, intersection, waypoints);
        }
      }
    });
    eventBus.on('element.mousedown', function (event) {
      if (!isPrimaryButton(event)) {
        return;
      }
      var originalEvent = event.originalEvent,
        element = event.element;
      if (!element.waypoints) {
        return;
      }
      return activateBendpointMove(originalEvent, element);
    });
    eventBus.on('selection.changed', function (event) {
      var newSelection = event.newSelection,
        primary = newSelection[0];
      if (primary && primary.waypoints) {
        addHandles(primary);
      }
    });
    eventBus.on('element.hover', function (event) {
      var element = event.element;
      if (element.waypoints) {
        addHandles(element);
        interactionEvents.registerEvent(event.gfx, 'mousemove', 'element.mousemove');
      }
    });
    eventBus.on('element.out', function (event) {
      interactionEvents.unregisterEvent(event.gfx, 'mousemove', 'element.mousemove');
    });

    // update bendpoint container data attribute on element ID change
    eventBus.on('element.updateId', function (context) {
      var element = context.element,
        newId = context.newId;
      if (element.waypoints) {
        var bendpointContainer = getBendpointsContainer(element);
        if (bendpointContainer) {
          attr(bendpointContainer, {
            'data-element-id': newId
          });
        }
      }
    });

    // API

    this.addHandles = addHandles;
    this.updateHandles = updateHandles;
    this.getBendpointsContainer = getBendpointsContainer;
    this.getSegmentDragger = getSegmentDragger;
  }
  Bendpoints.$inject = ['eventBus', 'canvas', 'interactionEvents', 'bendpointMove', 'connectionSegmentMove'];

  // helper /////////////

  function getDraggerVisual(draggerGfx) {
    return query('.djs-visual', draggerGfx);
  }

  var round$6 = Math.round;
  var RECONNECT_START$2 = 'reconnectStart',
    RECONNECT_END$2 = 'reconnectEnd',
    UPDATE_WAYPOINTS$1 = 'updateWaypoints';

  /**
   * Move bendpoints through drag and drop to add/remove bendpoints or reconnect connection.
   */
  function BendpointMove(injector, eventBus, canvas, dragging, rules, modeling) {
    this._injector = injector;
    this.start = function (event, connection, bendpointIndex, insert) {
      var gfx = canvas.getGraphics(connection),
        source = connection.source,
        target = connection.target,
        waypoints = connection.waypoints,
        type;
      if (!insert && bendpointIndex === 0) {
        type = RECONNECT_START$2;
      } else if (!insert && bendpointIndex === waypoints.length - 1) {
        type = RECONNECT_END$2;
      } else {
        type = UPDATE_WAYPOINTS$1;
      }
      var command = type === UPDATE_WAYPOINTS$1 ? 'connection.updateWaypoints' : 'connection.reconnect';
      var allowed = rules.allowed(command, {
        connection: connection,
        source: source,
        target: target
      });
      if (allowed === false) {
        allowed = rules.allowed(command, {
          connection: connection,
          source: target,
          target: source
        });
      }
      if (allowed === false) {
        return;
      }
      dragging.init(event, 'bendpoint.move', {
        data: {
          connection: connection,
          connectionGfx: gfx,
          context: {
            allowed: allowed,
            bendpointIndex: bendpointIndex,
            connection: connection,
            source: source,
            target: target,
            insert: insert,
            type: type
          }
        }
      });
    };
    eventBus.on('bendpoint.move.hover', function (event) {
      var context = event.context,
        connection = context.connection,
        source = connection.source,
        target = connection.target,
        hover = event.hover,
        type = context.type;

      // cache hover state
      context.hover = hover;
      var allowed;
      if (!hover) {
        return;
      }
      var command = type === UPDATE_WAYPOINTS$1 ? 'connection.updateWaypoints' : 'connection.reconnect';
      allowed = context.allowed = rules.allowed(command, {
        connection: connection,
        source: type === RECONNECT_START$2 ? hover : source,
        target: type === RECONNECT_END$2 ? hover : target
      });
      if (allowed) {
        context.source = type === RECONNECT_START$2 ? hover : source;
        context.target = type === RECONNECT_END$2 ? hover : target;
        return;
      }
      if (allowed === false) {
        allowed = context.allowed = rules.allowed(command, {
          connection: connection,
          source: type === RECONNECT_END$2 ? hover : target,
          target: type === RECONNECT_START$2 ? hover : source
        });
      }
      if (allowed) {
        context.source = type === RECONNECT_END$2 ? hover : target;
        context.target = type === RECONNECT_START$2 ? hover : source;
      }
    });
    eventBus.on(['bendpoint.move.out', 'bendpoint.move.cleanup'], function (event) {
      var context = event.context,
        type = context.type;
      context.hover = null;
      context.source = null;
      context.target = null;
      if (type !== UPDATE_WAYPOINTS$1) {
        context.allowed = false;
      }
    });
    eventBus.on('bendpoint.move.end', function (event) {
      var context = event.context,
        allowed = context.allowed,
        bendpointIndex = context.bendpointIndex,
        connection = context.connection,
        insert = context.insert,
        newWaypoints = connection.waypoints.slice(),
        source = context.source,
        target = context.target,
        type = context.type,
        hints = context.hints || {};

      // ensure integer values (important if zoom level was > 1 during move)
      var docking = {
        x: round$6(event.x),
        y: round$6(event.y)
      };
      if (!allowed) {
        return false;
      }
      if (type === UPDATE_WAYPOINTS$1) {
        if (insert) {
          // insert new bendpoint
          newWaypoints.splice(bendpointIndex, 0, docking);
        } else {
          // swap previous waypoint with moved one
          newWaypoints[bendpointIndex] = docking;
        }

        // pass hints about actual moved bendpoint
        // useful for connection/label layout
        hints.bendpointMove = {
          insert: insert,
          bendpointIndex: bendpointIndex
        };
        newWaypoints = this.cropWaypoints(connection, newWaypoints);
        modeling.updateWaypoints(connection, filterRedundantWaypoints(newWaypoints), hints);
      } else {
        if (type === RECONNECT_START$2) {
          hints.docking = 'source';
          if (isReverse$1(context)) {
            hints.docking = 'target';
            hints.newWaypoints = newWaypoints.reverse();
          }
        } else if (type === RECONNECT_END$2) {
          hints.docking = 'target';
          if (isReverse$1(context)) {
            hints.docking = 'source';
            hints.newWaypoints = newWaypoints.reverse();
          }
        }
        modeling.reconnect(connection, source, target, docking, hints);
      }
    }, this);
  }
  BendpointMove.$inject = ['injector', 'eventBus', 'canvas', 'dragging', 'rules', 'modeling'];
  BendpointMove.prototype.cropWaypoints = function (connection, newWaypoints) {
    var connectionDocking = this._injector.get('connectionDocking', false);
    if (!connectionDocking) {
      return newWaypoints;
    }
    var waypoints = connection.waypoints;
    connection.waypoints = newWaypoints;
    connection.waypoints = connectionDocking.getCroppedWaypoints(connection);
    newWaypoints = connection.waypoints;
    connection.waypoints = waypoints;
    return newWaypoints;
  };

  // helpers //////////

  function isReverse$1(context) {
    var hover = context.hover,
      source = context.source,
      target = context.target,
      type = context.type;
    if (type === RECONNECT_START$2) {
      return hover && target && hover === target && source !== target;
    }
    if (type === RECONNECT_END$2) {
      return hover && source && hover === source && source !== target;
    }
  }

  var RECONNECT_START$1 = 'reconnectStart',
    RECONNECT_END$1 = 'reconnectEnd',
    UPDATE_WAYPOINTS = 'updateWaypoints';
  var MARKER_OK$3 = 'connect-ok',
    MARKER_NOT_OK$3 = 'connect-not-ok',
    MARKER_CONNECT_HOVER$1 = 'connect-hover',
    MARKER_CONNECT_UPDATING$1 = 'djs-updating',
    MARKER_ELEMENT_HIDDEN = 'djs-element-hidden';
  var HIGH_PRIORITY$a = 1100;

  /**
   * Preview connection while moving bendpoints.
   */
  function BendpointMovePreview(bendpointMove, injector, eventBus, canvas) {
    this._injector = injector;
    var connectionPreview = injector.get('connectionPreview', false);
    eventBus.on('bendpoint.move.start', function (event) {
      var context = event.context,
        bendpointIndex = context.bendpointIndex,
        connection = context.connection,
        insert = context.insert,
        waypoints = connection.waypoints,
        newWaypoints = waypoints.slice();
      context.waypoints = waypoints;
      if (insert) {
        // insert placeholder for new bendpoint
        newWaypoints.splice(bendpointIndex, 0, {
          x: event.x,
          y: event.y
        });
      }
      connection.waypoints = newWaypoints;

      // add dragger gfx
      var draggerGfx = context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));
      classes(draggerGfx).add('djs-dragging');
      canvas.addMarker(connection, MARKER_ELEMENT_HIDDEN);
      canvas.addMarker(connection, MARKER_CONNECT_UPDATING$1);
    });
    eventBus.on('bendpoint.move.hover', function (event) {
      var context = event.context,
        allowed = context.allowed,
        hover = context.hover,
        type = context.type;
      if (hover) {
        canvas.addMarker(hover, MARKER_CONNECT_HOVER$1);
        if (type === UPDATE_WAYPOINTS) {
          return;
        }
        if (allowed) {
          canvas.removeMarker(hover, MARKER_NOT_OK$3);
          canvas.addMarker(hover, MARKER_OK$3);
        } else if (allowed === false) {
          canvas.removeMarker(hover, MARKER_OK$3);
          canvas.addMarker(hover, MARKER_NOT_OK$3);
        }
      }
    });
    eventBus.on(['bendpoint.move.out', 'bendpoint.move.cleanup'], HIGH_PRIORITY$a, function (event) {
      var context = event.context,
        hover = context.hover,
        target = context.target;
      if (hover) {
        canvas.removeMarker(hover, MARKER_CONNECT_HOVER$1);
        canvas.removeMarker(hover, target ? MARKER_OK$3 : MARKER_NOT_OK$3);
      }
    });
    eventBus.on('bendpoint.move.move', function (event) {
      var context = event.context,
        allowed = context.allowed,
        bendpointIndex = context.bendpointIndex,
        draggerGfx = context.draggerGfx,
        hover = context.hover,
        type = context.type,
        connection = context.connection,
        source = connection.source,
        target = connection.target,
        newWaypoints = connection.waypoints.slice(),
        bendpoint = {
          x: event.x,
          y: event.y
        },
        hints = context.hints || {},
        drawPreviewHints = {};
      if (connectionPreview) {
        if (hints.connectionStart) {
          drawPreviewHints.connectionStart = hints.connectionStart;
        }
        if (hints.connectionEnd) {
          drawPreviewHints.connectionEnd = hints.connectionEnd;
        }
        if (type === RECONNECT_START$1) {
          if (isReverse$1(context)) {
            drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;
            drawPreviewHints.source = target;
            drawPreviewHints.target = hover || source;
            newWaypoints = newWaypoints.reverse();
          } else {
            drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;
            drawPreviewHints.source = hover || source;
            drawPreviewHints.target = target;
          }
        } else if (type === RECONNECT_END$1) {
          if (isReverse$1(context)) {
            drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;
            drawPreviewHints.source = hover || target;
            drawPreviewHints.target = source;
            newWaypoints = newWaypoints.reverse();
          } else {
            drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;
            drawPreviewHints.source = source;
            drawPreviewHints.target = hover || target;
          }
        } else {
          drawPreviewHints.noCropping = true;
          drawPreviewHints.noLayout = true;
          newWaypoints[bendpointIndex] = bendpoint;
        }
        if (type === UPDATE_WAYPOINTS) {
          newWaypoints = bendpointMove.cropWaypoints(connection, newWaypoints);
        }
        drawPreviewHints.waypoints = newWaypoints;
        connectionPreview.drawPreview(context, allowed, drawPreviewHints);
      }
      translate$1(draggerGfx, event.x, event.y);
    }, this);
    eventBus.on(['bendpoint.move.end', 'bendpoint.move.cancel'], HIGH_PRIORITY$a, function (event) {
      var context = event.context,
        connection = context.connection,
        draggerGfx = context.draggerGfx,
        hover = context.hover,
        target = context.target,
        waypoints = context.waypoints;
      connection.waypoints = waypoints;

      // remove dragger gfx
      remove$2(draggerGfx);
      canvas.removeMarker(connection, MARKER_CONNECT_UPDATING$1);
      canvas.removeMarker(connection, MARKER_ELEMENT_HIDDEN);
      if (hover) {
        canvas.removeMarker(hover, MARKER_OK$3);
        canvas.removeMarker(hover, target ? MARKER_OK$3 : MARKER_NOT_OK$3);
      }
      if (connectionPreview) {
        connectionPreview.cleanUp(context);
      }
    });
  }
  BendpointMovePreview.$inject = ['bendpointMove', 'injector', 'eventBus', 'canvas'];

  var MARKER_CONNECT_HOVER = 'connect-hover',
    MARKER_CONNECT_UPDATING = 'djs-updating';
  function axisAdd(point, axis, delta) {
    return axisSet(point, axis, point[axis] + delta);
  }
  function axisSet(point, axis, value) {
    return {
      x: axis === 'x' ? value : point.x,
      y: axis === 'y' ? value : point.y
    };
  }
  function axisFenced(position, segmentStart, segmentEnd, axis) {
    var maxValue = Math.max(segmentStart[axis], segmentEnd[axis]),
      minValue = Math.min(segmentStart[axis], segmentEnd[axis]);
    var padding = 20;
    var fencedValue = Math.min(Math.max(minValue + padding, position[axis]), maxValue - padding);
    return axisSet(segmentStart, axis, fencedValue);
  }
  function flipAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  /**
   * Get the docking point on the given element.
   *
   * Compute a reasonable docking, if non exists.
   *
   * @param  {Point} point
   * @param  {djs.model.Shape} referenceElement
   * @param  {string} moveAxis (x|y)
   *
   * @return {Point}
   */
  function getDocking$1(point, referenceElement, moveAxis) {
    var referenceMid, inverseAxis;
    if (point.original) {
      return point.original;
    } else {
      referenceMid = getMid(referenceElement);
      inverseAxis = flipAxis(moveAxis);
      return axisSet(point, inverseAxis, referenceMid[inverseAxis]);
    }
  }

  /**
   * A component that implements moving of bendpoints
   */
  function ConnectionSegmentMove(injector, eventBus, canvas, dragging, graphicsFactory, modeling) {
    // optional connection docking integration
    var connectionDocking = injector.get('connectionDocking', false);

    // API

    this.start = function (event, connection, idx) {
      var context,
        gfx = canvas.getGraphics(connection),
        segmentStartIndex = idx - 1,
        segmentEndIndex = idx,
        waypoints = connection.waypoints,
        segmentStart = waypoints[segmentStartIndex],
        segmentEnd = waypoints[segmentEndIndex],
        intersection = getConnectionIntersection(canvas, waypoints, event),
        direction,
        axis,
        dragPosition;
      direction = pointsAligned(segmentStart, segmentEnd);

      // do not move diagonal connection
      if (!direction) {
        return;
      }

      // the axis where we are going to move things
      axis = direction === 'v' ? 'x' : 'y';
      if (segmentStartIndex === 0) {
        segmentStart = getDocking$1(segmentStart, connection.source, axis);
      }
      if (segmentEndIndex === waypoints.length - 1) {
        segmentEnd = getDocking$1(segmentEnd, connection.target, axis);
      }
      if (intersection) {
        dragPosition = intersection.point;
      } else {
        // set to segment center as default
        dragPosition = {
          x: (segmentStart.x + segmentEnd.x) / 2,
          y: (segmentStart.y + segmentEnd.y) / 2
        };
      }
      context = {
        connection: connection,
        segmentStartIndex: segmentStartIndex,
        segmentEndIndex: segmentEndIndex,
        segmentStart: segmentStart,
        segmentEnd: segmentEnd,
        axis: axis,
        dragPosition: dragPosition
      };
      dragging.init(event, dragPosition, 'connectionSegment.move', {
        cursor: axis === 'x' ? 'resize-ew' : 'resize-ns',
        data: {
          connection: connection,
          connectionGfx: gfx,
          context: context
        }
      });
    };

    /**
     * Crop connection if connection cropping is provided.
     *
     * @param {Connection} connection
     * @param {Array<Point>} newWaypoints
     *
     * @return {Array<Point>} cropped connection waypoints
     */
    function cropConnection(connection, newWaypoints) {
      // crop connection, if docking service is provided only
      if (!connectionDocking) {
        return newWaypoints;
      }
      var oldWaypoints = connection.waypoints,
        croppedWaypoints;

      // temporary set new waypoints
      connection.waypoints = newWaypoints;
      croppedWaypoints = connectionDocking.getCroppedWaypoints(connection);

      // restore old waypoints
      connection.waypoints = oldWaypoints;
      return croppedWaypoints;
    }

    // DRAGGING IMPLEMENTATION

    function redrawConnection(data) {
      graphicsFactory.update('connection', data.connection, data.connectionGfx);
    }
    function updateDragger(context, segmentOffset, event) {
      var newWaypoints = context.newWaypoints,
        segmentStartIndex = context.segmentStartIndex + segmentOffset,
        segmentStart = newWaypoints[segmentStartIndex],
        segmentEndIndex = context.segmentEndIndex + segmentOffset,
        segmentEnd = newWaypoints[segmentEndIndex],
        axis = flipAxis(context.axis);

      // make sure the dragger does not move
      // outside the connection
      var draggerPosition = axisFenced(event, segmentStart, segmentEnd, axis);

      // update dragger
      translate$1(context.draggerGfx, draggerPosition.x, draggerPosition.y);
    }

    /**
     * Filter waypoints for redundant ones (i.e. on the same axis).
     * Returns the filtered waypoints and the offset related to the segment move.
     *
     * @param {Array<Point>} waypoints
     * @param {Integer} segmentStartIndex of moved segment start
     *
     * @return {Object} { filteredWaypoints, segmentOffset }
     */
    function filterRedundantWaypoints(waypoints, segmentStartIndex) {
      var segmentOffset = 0;
      var filteredWaypoints = waypoints.filter(function (r, idx) {
        if (pointsOnLine(waypoints[idx - 1], waypoints[idx + 1], r)) {
          // remove point and increment offset
          segmentOffset = idx <= segmentStartIndex ? segmentOffset - 1 : segmentOffset;
          return false;
        }

        // dont remove point
        return true;
      });
      return {
        waypoints: filteredWaypoints,
        segmentOffset: segmentOffset
      };
    }
    eventBus.on('connectionSegment.move.start', function (event) {
      var context = event.context,
        connection = event.connection,
        layer = canvas.getLayer('overlays');
      context.originalWaypoints = connection.waypoints.slice();

      // add dragger gfx
      context.draggerGfx = addSegmentDragger(layer, context.segmentStart, context.segmentEnd);
      classes(context.draggerGfx).add('djs-dragging');
      canvas.addMarker(connection, MARKER_CONNECT_UPDATING);
    });
    eventBus.on('connectionSegment.move.move', function (event) {
      var context = event.context,
        connection = context.connection,
        segmentStartIndex = context.segmentStartIndex,
        segmentEndIndex = context.segmentEndIndex,
        segmentStart = context.segmentStart,
        segmentEnd = context.segmentEnd,
        axis = context.axis;
      var newWaypoints = context.originalWaypoints.slice(),
        newSegmentStart = axisAdd(segmentStart, axis, event['d' + axis]),
        newSegmentEnd = axisAdd(segmentEnd, axis, event['d' + axis]);

      // original waypoint count and added / removed
      // from start waypoint delta. We use the later
      // to retrieve the updated segmentStartIndex / segmentEndIndex
      var waypointCount = newWaypoints.length,
        segmentOffset = 0;

      // move segment start / end by axis delta
      newWaypoints[segmentStartIndex] = newSegmentStart;
      newWaypoints[segmentEndIndex] = newSegmentEnd;
      var sourceToSegmentOrientation, targetToSegmentOrientation;

      // handle first segment
      if (segmentStartIndex < 2) {
        sourceToSegmentOrientation = getOrientation(connection.source, newSegmentStart);

        // first bendpoint, remove first segment if intersecting
        if (segmentStartIndex === 1) {
          if (sourceToSegmentOrientation === 'intersect') {
            newWaypoints.shift();
            newWaypoints[0] = newSegmentStart;
            segmentOffset--;
          }
        }

        // docking point, add segment if not intersecting anymore
        else {
          if (sourceToSegmentOrientation !== 'intersect') {
            newWaypoints.unshift(segmentStart);
            segmentOffset++;
          }
        }
      }

      // handle last segment
      if (segmentEndIndex > waypointCount - 3) {
        targetToSegmentOrientation = getOrientation(connection.target, newSegmentEnd);

        // last bendpoint, remove last segment if intersecting
        if (segmentEndIndex === waypointCount - 2) {
          if (targetToSegmentOrientation === 'intersect') {
            newWaypoints.pop();
            newWaypoints[newWaypoints.length - 1] = newSegmentEnd;
          }
        }

        // last bendpoint, remove last segment if intersecting
        else {
          if (targetToSegmentOrientation !== 'intersect') {
            newWaypoints.push(segmentEnd);
          }
        }
      }

      // update connection waypoints
      context.newWaypoints = connection.waypoints = cropConnection(connection, newWaypoints);

      // update dragger position
      updateDragger(context, segmentOffset, event);

      // save segmentOffset in context
      context.newSegmentStartIndex = segmentStartIndex + segmentOffset;

      // redraw connection
      redrawConnection(event);
    });
    eventBus.on('connectionSegment.move.hover', function (event) {
      event.context.hover = event.hover;
      canvas.addMarker(event.hover, MARKER_CONNECT_HOVER);
    });
    eventBus.on(['connectionSegment.move.out', 'connectionSegment.move.cleanup'], function (event) {
      // remove connect marker
      // if it was added
      var hover = event.context.hover;
      if (hover) {
        canvas.removeMarker(hover, MARKER_CONNECT_HOVER);
      }
    });
    eventBus.on('connectionSegment.move.cleanup', function (event) {
      var context = event.context,
        connection = context.connection;

      // remove dragger gfx
      if (context.draggerGfx) {
        remove$2(context.draggerGfx);
      }
      canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);
    });
    eventBus.on(['connectionSegment.move.cancel', 'connectionSegment.move.end'], function (event) {
      var context = event.context,
        connection = context.connection;
      connection.waypoints = context.originalWaypoints;
      redrawConnection(event);
    });
    eventBus.on('connectionSegment.move.end', function (event) {
      var context = event.context,
        connection = context.connection,
        newWaypoints = context.newWaypoints,
        newSegmentStartIndex = context.newSegmentStartIndex;

      // ensure we have actual pixel values bendpoint
      // coordinates (important when zoom level was > 1 during move)
      newWaypoints = newWaypoints.map(function (p) {
        return {
          original: p.original,
          x: Math.round(p.x),
          y: Math.round(p.y)
        };
      });

      // apply filter redunant waypoints
      var filtered = filterRedundantWaypoints(newWaypoints, newSegmentStartIndex);

      // get filtered waypoints
      var filteredWaypoints = filtered.waypoints,
        croppedWaypoints = cropConnection(connection, filteredWaypoints),
        segmentOffset = filtered.segmentOffset;
      var hints = {
        segmentMove: {
          segmentStartIndex: context.segmentStartIndex,
          newSegmentStartIndex: newSegmentStartIndex + segmentOffset
        }
      };
      modeling.updateWaypoints(connection, croppedWaypoints, hints);
    });
  }
  ConnectionSegmentMove.$inject = ['injector', 'eventBus', 'canvas', 'dragging', 'graphicsFactory', 'modeling'];

  var abs$1 = Math.abs,
    round$5 = Math.round;

  /**
   * Snap value to a collection of reference values.
   *
   * @param  {number} value
   * @param  {Array<number>} values
   * @param  {number} [tolerance=10]
   *
   * @return {number} the value we snapped to or null, if none snapped
   */
  function snapTo(value, values, tolerance) {
    tolerance = tolerance === undefined ? 10 : tolerance;
    var idx, snapValue;
    for (idx = 0; idx < values.length; idx++) {
      snapValue = values[idx];
      if (abs$1(snapValue - value) <= tolerance) {
        return snapValue;
      }
    }
  }
  function topLeft(bounds) {
    return {
      x: bounds.x,
      y: bounds.y
    };
  }
  function bottomRight(bounds) {
    return {
      x: bounds.x + bounds.width,
      y: bounds.y + bounds.height
    };
  }
  function mid$1(bounds, defaultValue) {
    if (!bounds || isNaN(bounds.x) || isNaN(bounds.y)) {
      return defaultValue;
    }
    return {
      x: round$5(bounds.x + bounds.width / 2),
      y: round$5(bounds.y + bounds.height / 2)
    };
  }

  /**
   * Retrieve the snap state of the given event.
   *
   * @param  {Event} event
   * @param  {string} axis
   *
   * @return {boolean} the snapped state
   *
   */
  function isSnapped(event, axis) {
    var snapped = event.snapped;
    if (!snapped) {
      return false;
    }
    if (typeof axis === 'string') {
      return snapped[axis];
    }
    return snapped.x && snapped.y;
  }

  /**
   * Set the given event as snapped.
   *
   * This method may change the x and/or y position of the shape
   * from the given event!
   *
   * @param {Event} event
   * @param {string} axis
   * @param {number|boolean} value
   *
   * @return {number} old value
   */
  function setSnapped(event, axis, value) {
    if (typeof axis !== 'string') {
      throw new Error('axis must be in [x, y]');
    }
    if (typeof value !== 'number' && value !== false) {
      throw new Error('value must be Number or false');
    }
    var delta,
      previousValue = event[axis];
    var snapped = event.snapped = event.snapped || {};
    if (value === false) {
      snapped[axis] = false;
    } else {
      snapped[axis] = true;
      delta = value - previousValue;
      event[axis] += delta;
      event['d' + axis] += delta;
    }
    return previousValue;
  }

  /**
   * Get children of a shape.
   *
   * @param {djs.model.Shape} parent
   *
   * @returns {Array<djs.model.Shape|djs.model.Connection>}
   */
  function getChildren(parent) {
    return parent.children || [];
  }

  var abs = Math.abs,
    round$4 = Math.round;
  var TOLERANCE = 10;
  function BendpointSnapping(eventBus) {
    function snapTo(values, value) {
      if (isArray$6(values)) {
        var i = values.length;
        while (i--) if (abs(values[i] - value) <= TOLERANCE) {
          return values[i];
        }
      } else {
        values = +values;
        var rem = value % values;
        if (rem < TOLERANCE) {
          return value - rem;
        }
        if (rem > values - TOLERANCE) {
          return value - rem + values;
        }
      }
      return value;
    }
    function getSnapPoint(element, event) {
      if (element.waypoints) {
        return getClosestPointOnConnection(event, element);
      }
      if (element.width) {
        return {
          x: round$4(element.width / 2 + element.x),
          y: round$4(element.height / 2 + element.y)
        };
      }
    }

    // connection segment snapping //////////////////////

    function getConnectionSegmentSnaps(event) {
      var context = event.context,
        snapPoints = context.snapPoints,
        connection = context.connection,
        waypoints = connection.waypoints,
        segmentStart = context.segmentStart,
        segmentStartIndex = context.segmentStartIndex,
        segmentEnd = context.segmentEnd,
        segmentEndIndex = context.segmentEndIndex,
        axis = context.axis;
      if (snapPoints) {
        return snapPoints;
      }
      var referenceWaypoints = [waypoints[segmentStartIndex - 1], segmentStart, segmentEnd, waypoints[segmentEndIndex + 1]];
      if (segmentStartIndex < 2) {
        referenceWaypoints.unshift(getSnapPoint(connection.source, event));
      }
      if (segmentEndIndex > waypoints.length - 3) {
        referenceWaypoints.unshift(getSnapPoint(connection.target, event));
      }
      context.snapPoints = snapPoints = {
        horizontal: [],
        vertical: []
      };
      forEach$3(referenceWaypoints, function (p) {
        // we snap on existing bendpoints only,
        // not placeholders that are inserted during add
        if (p) {
          p = p.original || p;
          if (axis === 'y') {
            snapPoints.horizontal.push(p.y);
          }
          if (axis === 'x') {
            snapPoints.vertical.push(p.x);
          }
        }
      });
      return snapPoints;
    }
    eventBus.on('connectionSegment.move.move', 1500, function (event) {
      var snapPoints = getConnectionSegmentSnaps(event),
        x = event.x,
        y = event.y,
        sx,
        sy;
      if (!snapPoints) {
        return;
      }

      // snap
      sx = snapTo(snapPoints.vertical, x);
      sy = snapTo(snapPoints.horizontal, y);

      // correction x/y
      var cx = x - sx,
        cy = y - sy;

      // update delta
      assign$4(event, {
        dx: event.dx - cx,
        dy: event.dy - cy,
        x: sx,
        y: sy
      });

      // only set snapped if actually snapped
      if (cx || snapPoints.vertical.indexOf(x) !== -1) {
        setSnapped(event, 'x', sx);
      }
      if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
        setSnapped(event, 'y', sy);
      }
    });

    // bendpoint snapping //////////////////////

    function getBendpointSnaps(context) {
      var snapPoints = context.snapPoints,
        waypoints = context.connection.waypoints,
        bendpointIndex = context.bendpointIndex;
      if (snapPoints) {
        return snapPoints;
      }
      var referenceWaypoints = [waypoints[bendpointIndex - 1], waypoints[bendpointIndex + 1]];
      context.snapPoints = snapPoints = {
        horizontal: [],
        vertical: []
      };
      forEach$3(referenceWaypoints, function (p) {
        // we snap on existing bendpoints only,
        // not placeholders that are inserted during add
        if (p) {
          p = p.original || p;
          snapPoints.horizontal.push(p.y);
          snapPoints.vertical.push(p.x);
        }
      });
      return snapPoints;
    }

    // Snap Endpoint of new connection
    eventBus.on(['connect.hover', 'connect.move', 'connect.end'], 1500, function (event) {
      var context = event.context,
        hover = context.hover,
        hoverMid = hover && getSnapPoint(hover, event);

      // only snap on connections, elements can have multiple connect endpoints
      if (!isConnection$7(hover) || !hoverMid || !hoverMid.x || !hoverMid.y) {
        return;
      }
      setSnapped(event, 'x', hoverMid.x);
      setSnapped(event, 'y', hoverMid.y);
    });
    eventBus.on(['bendpoint.move.move', 'bendpoint.move.end'], 1500, function (event) {
      var context = event.context,
        snapPoints = getBendpointSnaps(context),
        hover = context.hover,
        hoverMid = hover && getSnapPoint(hover, event),
        x = event.x,
        y = event.y,
        sx,
        sy;
      if (!snapPoints) {
        return;
      }

      // snap to hover mid
      sx = snapTo(hoverMid ? snapPoints.vertical.concat([hoverMid.x]) : snapPoints.vertical, x);
      sy = snapTo(hoverMid ? snapPoints.horizontal.concat([hoverMid.y]) : snapPoints.horizontal, y);

      // correction x/y
      var cx = x - sx,
        cy = y - sy;

      // update delta
      assign$4(event, {
        dx: event.dx - cx,
        dy: event.dy - cy,
        x: event.x - cx,
        y: event.y - cy
      });

      // only set snapped if actually snapped
      if (cx || snapPoints.vertical.indexOf(x) !== -1) {
        setSnapped(event, 'x', sx);
      }
      if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
        setSnapped(event, 'y', sy);
      }
    });
  }
  BendpointSnapping.$inject = ['eventBus'];

  // helpers //////////////////////

  function isConnection$7(element) {
    return element && !!element.waypoints;
  }

  var BendpointsModule = {
    __depends__: [DraggingModule, Rules$5],
    __init__: ['bendpoints', 'bendpointSnapping', 'bendpointMovePreview'],
    bendpoints: ['type', Bendpoints],
    bendpointMove: ['type', BendpointMove],
    bendpointMovePreview: ['type', BendpointMovePreview],
    connectionSegmentMove: ['type', ConnectionSegmentMove],
    bendpointSnapping: ['type', BendpointSnapping]
  };

  var entrySelector = '.entry';
  var DEFAULT_PRIORITY$6 = 1000;
  var CONTEXT_PAD_PADDING = 12;

  /**
   * @typedef {djs.model.Base|djs.model.Base[]} ContextPadTarget
   */

  /**
   * A context pad that displays element specific, contextual actions next
   * to a diagram element.
   *
   * @param {Canvas} canvas
   * @param {Object} config
   * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]
   * @param {number} [config.scale.min]
   * @param {number} [config.scale.max]
   * @param {EventBus} eventBus
   * @param {Overlays} overlays
   */
  function ContextPad(canvas, config, eventBus, overlays) {
    this._canvas = canvas;
    this._eventBus = eventBus;
    this._overlays = overlays;
    var scale = isDefined(config && config.scale) ? config.scale : {
      min: 1,
      max: 1.5
    };
    this._overlaysConfig = {
      scale: scale
    };
    this._current = null;
    this._init();
  }
  ContextPad.$inject = ['canvas', 'config.contextPad', 'eventBus', 'overlays'];

  /**
   * Registers events needed for interaction with other components.
   */
  ContextPad.prototype._init = function () {
    var self = this;
    this._eventBus.on('selection.changed', function (event) {
      var selection = event.newSelection;
      var target = selection.length ? selection.length === 1 ? selection[0] : selection : null;
      if (target) {
        self.open(target, true);
      } else {
        self.close();
      }
    });
    this._eventBus.on('elements.changed', function (event) {
      var elements = event.elements,
        current = self._current;
      if (!current) {
        return;
      }
      var currentTarget = current.target;
      var currentChanged = some(isArray$6(currentTarget) ? currentTarget : [currentTarget], function (element) {
        return includes$3(elements, element);
      });

      // re-open if elements in current selection changed
      if (currentChanged) {
        self.open(currentTarget, true);
      }
    });
  };

  /**
   * Register context pad provider.
   *
   * @param  {number} [priority=1000]
   * @param  {ContextPadProvider} provider
   *
   * @example
   * const contextPadProvider = {
   *   getContextPadEntries: function(element) {
   *     return function(entries) {
   *       return {
   *         ...entries,
   *         'entry-1': {
   *           label: 'My Entry',
   *           action: function() { alert("I have been clicked!"); }
   *         }
   *       };
   *     }
   *   },
   *
   *   getMultiElementContextPadEntries: function(elements) {
   *     // ...
   *   }
   * };
   *
   * contextPad.registerProvider(800, contextPadProvider);
   */
  ContextPad.prototype.registerProvider = function (priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$6;
    }
    this._eventBus.on('contextPad.getProviders', priority, function (event) {
      event.providers.push(provider);
    });
  };

  /**
   * Get context pad entries for given elements.
   *
   * @param {ContextPadTarget} target
   *
   * @return {ContextPadEntryDescriptor[]} list of entries
   */
  ContextPad.prototype.getEntries = function (target) {
    var providers = this._getProviders();
    var provideFn = isArray$6(target) ? 'getMultiElementContextPadEntries' : 'getContextPadEntries';
    var entries = {};

    // loop through all providers and their entries.
    // group entries by id so that overriding an entry is possible
    forEach$3(providers, function (provider) {
      if (!isFunction$2(provider[provideFn])) {
        return;
      }
      var entriesOrUpdater = provider[provideFn](target);
      if (isFunction$2(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$3(entriesOrUpdater, function (entry, id) {
          entries[id] = entry;
        });
      }
    });
    return entries;
  };

  /**
   * Trigger context pad via DOM event.
   *
   * The entry to trigger is determined by the target element.
   *
   * @param  {string} action
   * @param  {Event} event
   * @param  {boolean} [autoActivate=false]
   */
  ContextPad.prototype.trigger = function (action, event, autoActivate) {
    var entry,
      originalEvent,
      button = event.delegateTarget || event.target;
    if (!button) {
      return event.preventDefault();
    }
    entry = attr$1(button, 'data-action');
    originalEvent = event.originalEvent || event;
    return this.triggerEntry(entry, action, originalEvent, autoActivate);
  };

  /**
   * Trigger context pad entry entry.
   *
   * @param {string} entryId
   * @param {string} action
   * @param {Event} event
   * @param {boolean} [autoActivate=false]
   */
  ContextPad.prototype.triggerEntry = function (entryId, action, event, autoActivate) {
    if (!this.isShown()) {
      return;
    }
    var target = this._current.target,
      entries = this._current.entries;
    var entry = entries[entryId];
    if (!entry) {
      return;
    }
    var handler = entry.action;

    // simple action (via callback function)
    if (isFunction$2(handler)) {
      if (action === 'click') {
        return handler(event, target, autoActivate);
      }
    } else {
      if (handler[action]) {
        return handler[action](event, target, autoActivate);
      }
    }

    // silence other actions
    event.preventDefault();
  };

  /**
   * Open the context pad for given elements.
   *
   * @param {ContextPadTarget} target
   * @param {boolean} [force=false] - Force re-opening context pad.
   */
  ContextPad.prototype.open = function (target, force) {
    if (!force && this.isOpen(target)) {
      return;
    }
    this.close();
    this._updateAndOpen(target);
  };
  ContextPad.prototype._getProviders = function () {
    var event = this._eventBus.createEvent({
      type: 'contextPad.getProviders',
      providers: []
    });
    this._eventBus.fire(event);
    return event.providers;
  };

  /**
   * @param {ContextPadTarget} target
   */
  ContextPad.prototype._updateAndOpen = function (target) {
    var entries = this.getEntries(target),
      pad = this.getPad(target),
      html = pad.html,
      image;
    forEach$3(entries, function (entry, id) {
      var grouping = entry.group || 'default',
        control = domify$1(entry.html || '<div class="entry" draggable="true"></div>'),
        container;
      attr$1(control, 'data-action', id);
      container = query('[data-group=' + cssEscape(grouping) + ']', html);
      if (!container) {
        container = domify$1('<div class="group"></div>');
        attr$1(container, 'data-group', grouping);
        html.appendChild(container);
      }
      container.appendChild(control);
      if (entry.className) {
        addClasses$1(control, entry.className);
      }
      if (entry.title) {
        attr$1(control, 'title', entry.title);
      }
      if (entry.imageUrl) {
        image = domify$1('<img>');
        attr$1(image, 'src', entry.imageUrl);
        image.style.width = '100%';
        image.style.height = '100%';
        control.appendChild(image);
      }
    });
    classes$1(html).add('open');
    this._current = {
      target: target,
      entries: entries,
      pad: pad
    };
    this._eventBus.fire('contextPad.open', {
      current: this._current
    });
  };

  /**
   * @param {ContextPadTarget} target
   *
   * @return {Overlay}
   */
  ContextPad.prototype.getPad = function (target) {
    if (this.isOpen()) {
      return this._current.pad;
    }
    var self = this;
    var overlays = this._overlays;
    var html = domify$1('<div class="djs-context-pad"></div>');
    var position = this._getPosition(target);
    var overlaysConfig = assign$4({
      html: html
    }, this._overlaysConfig, position);
    delegate.bind(html, entrySelector, 'click', function (event) {
      self.trigger('click', event);
    });
    delegate.bind(html, entrySelector, 'dragstart', function (event) {
      self.trigger('dragstart', event);
    });

    // stop propagation of mouse events
    event.bind(html, 'mousedown', function (event) {
      event.stopPropagation();
    });
    var activeRootElement = this._canvas.getRootElement();
    this._overlayId = overlays.add(activeRootElement, 'context-pad', overlaysConfig);
    var pad = overlays.get(this._overlayId);
    this._eventBus.fire('contextPad.create', {
      target: target,
      pad: pad
    });
    return pad;
  };

  /**
   * Close the context pad
   */
  ContextPad.prototype.close = function () {
    if (!this.isOpen()) {
      return;
    }
    this._overlays.remove(this._overlayId);
    this._overlayId = null;
    this._eventBus.fire('contextPad.close', {
      current: this._current
    });
    this._current = null;
  };

  /**
   * Check if pad is open.
   *
   * If target is provided, check if it is opened
   * for the given target (single or multiple elements).
   *
   * @param {ContextPadTarget} [target]
   * @return {boolean}
   */
  ContextPad.prototype.isOpen = function (target) {
    var current = this._current;
    if (!current) {
      return false;
    }

    // basic no-args is open check
    if (!target) {
      return true;
    }
    var currentTarget = current.target;

    // strict handling of single vs. multi-selection
    if (isArray$6(target) !== isArray$6(currentTarget)) {
      return false;
    }
    if (isArray$6(target)) {
      return target.length === currentTarget.length && every(target, function (element) {
        return includes$3(currentTarget, element);
      });
    } else {
      return currentTarget === target;
    }
  };

  /**
   * Check if pad is open and not hidden.
   *
   * @return {boolean}
   */
  ContextPad.prototype.isShown = function () {
    return this.isOpen() && this._overlays.isShown();
  };

  /**
   * Get contex pad position.
   *
   * @param {ContextPadTarget} target
   * @return {Bounds}
   */
  ContextPad.prototype._getPosition = function (target) {
    var elements = isArray$6(target) ? target : [target];
    var bBox = getBBox(elements);
    return {
      position: {
        left: bBox.x + bBox.width + CONTEXT_PAD_PADDING,
        top: bBox.y - CONTEXT_PAD_PADDING / 2
      }
    };
  };

  // helpers //////////

  function addClasses$1(element, classNames) {
    var classes = classes$1(element);
    classNames = isArray$6(classNames) ? classNames : classNames.split(/\s+/g);
    classNames.forEach(function (cls) {
      classes.add(cls);
    });
  }

  /**
   * @param {any[]} array
   * @param {any} item
   *
   * @return {boolean}
   */
  function includes$3(array, item) {
    return array.indexOf(item) !== -1;
  }

  var DiagramContextPad = {
    __depends__: [InteractionEventsModule, OverlaysModule],
    contextPad: ['type', ContextPad]
  };

  function Connect(eventBus, dragging, modeling, rules) {
    // rules

    function canConnect(source, target) {
      return rules.allowed('connection.create', {
        source: source,
        target: target
      });
    }
    function canConnectReverse(source, target) {
      return canConnect(target, source);
    }

    // event handlers

    eventBus.on('connect.hover', function (event) {
      var context = event.context,
        start = context.start,
        hover = event.hover,
        canExecute;

      // cache hover state
      context.hover = hover;
      canExecute = context.canExecute = canConnect(start, hover);

      // ignore hover
      if (isNil(canExecute)) {
        return;
      }
      if (canExecute !== false) {
        context.source = start;
        context.target = hover;
        return;
      }
      canExecute = context.canExecute = canConnectReverse(start, hover);

      // ignore hover
      if (isNil(canExecute)) {
        return;
      }
      if (canExecute !== false) {
        context.source = hover;
        context.target = start;
      }
    });
    eventBus.on(['connect.out', 'connect.cleanup'], function (event) {
      var context = event.context;
      context.hover = null;
      context.source = null;
      context.target = null;
      context.canExecute = false;
    });
    eventBus.on('connect.end', function (event) {
      var context = event.context,
        canExecute = context.canExecute,
        connectionStart = context.connectionStart,
        connectionEnd = {
          x: event.x,
          y: event.y
        },
        source = context.source,
        target = context.target;
      if (!canExecute) {
        return false;
      }
      var attrs = null,
        hints = {
          connectionStart: isReverse(context) ? connectionEnd : connectionStart,
          connectionEnd: isReverse(context) ? connectionStart : connectionEnd
        };
      if (isObject$1(canExecute)) {
        attrs = canExecute;
      }
      context.connection = modeling.connect(source, target, attrs, hints);
    });

    // API

    /**
     * Start connect operation.
     *
     * @param {DOMEvent} event
     * @param {djs.model.Base} start
     * @param {Point} [connectionStart]
     * @param {boolean} [autoActivate=false]
     */
    this.start = function (event, start, connectionStart, autoActivate) {
      if (!isObject$1(connectionStart)) {
        autoActivate = connectionStart;
        connectionStart = getMid(start);
      }
      dragging.init(event, 'connect', {
        autoActivate: autoActivate,
        data: {
          shape: start,
          context: {
            start: start,
            connectionStart: connectionStart
          }
        }
      });
    };
  }
  Connect.$inject = ['eventBus', 'dragging', 'modeling', 'rules'];

  // helpers //////////

  function isReverse(context) {
    var hover = context.hover,
      source = context.source,
      target = context.target;
    return hover && source && hover === source && source !== target;
  }

  var HIGH_PRIORITY$9 = 1100,
    LOW_PRIORITY$i = 900;
  var MARKER_OK$2 = 'connect-ok',
    MARKER_NOT_OK$2 = 'connect-not-ok';

  /**
   * Shows connection preview during connect.
   *
   * @param {didi.Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function ConnectPreview(injector, eventBus, canvas) {
    var connectionPreview = injector.get('connectionPreview', false);
    connectionPreview && eventBus.on('connect.move', function (event) {
      var context = event.context,
        canConnect = context.canExecute,
        hover = context.hover,
        source = context.source,
        start = context.start,
        startPosition = context.startPosition,
        target = context.target,
        connectionStart = context.connectionStart || startPosition,
        connectionEnd = context.connectionEnd || {
          x: event.x,
          y: event.y
        },
        previewStart = connectionStart,
        previewEnd = connectionEnd;
      if (isReverse(context)) {
        previewStart = connectionEnd;
        previewEnd = connectionStart;
      }
      connectionPreview.drawPreview(context, canConnect, {
        source: source || start,
        target: target || hover,
        connectionStart: previewStart,
        connectionEnd: previewEnd
      });
    });
    eventBus.on('connect.hover', LOW_PRIORITY$i, function (event) {
      var context = event.context,
        hover = event.hover,
        canExecute = context.canExecute;

      // ignore hover
      if (canExecute === null) {
        return;
      }
      canvas.addMarker(hover, canExecute ? MARKER_OK$2 : MARKER_NOT_OK$2);
    });
    eventBus.on(['connect.out', 'connect.cleanup'], HIGH_PRIORITY$9, function (event) {
      var hover = event.hover;
      if (hover) {
        canvas.removeMarker(hover, MARKER_OK$2);
        canvas.removeMarker(hover, MARKER_NOT_OK$2);
      }
    });
    connectionPreview && eventBus.on('connect.cleanup', function (event) {
      connectionPreview.cleanUp(event.context);
    });
  }
  ConnectPreview.$inject = ['injector', 'eventBus', 'canvas'];

  var DiagramConnect = {
    __depends__: [SelectionModule, Rules$5, DraggingModule],
    __init__: ['connectPreview'],
    connect: ['type', Connect],
    connectPreview: ['type', ConnectPreview]
  };

  var MARKER_TYPES = ['marker-start', 'marker-mid', 'marker-end'];
  var NODES_CAN_HAVE_MARKER = ['circle', 'ellipse', 'line', 'path', 'polygon', 'polyline', 'rect'];

  /**
   * Adds support for previews of moving/resizing elements.
   */
  function PreviewSupport(elementRegistry, eventBus, canvas, styles) {
    this._elementRegistry = elementRegistry;
    this._canvas = canvas;
    this._styles = styles;
    this._clonedMarkers = {};
    var self = this;
    eventBus.on('drag.cleanup', function () {
      forEach$3(self._clonedMarkers, function (clonedMarker) {
        remove$2(clonedMarker);
      });
      self._clonedMarkers = {};
    });
  }
  PreviewSupport.$inject = ['elementRegistry', 'eventBus', 'canvas', 'styles'];

  /**
   * Returns graphics of an element.
   *
   * @param {djs.model.Base} element
   *
   * @return {SVGElement}
   */
  PreviewSupport.prototype.getGfx = function (element) {
    return this._elementRegistry.getGraphics(element);
  };

  /**
   * Adds a move preview of a given shape to a given svg group.
   *
   * @param {djs.model.Base} element
   * @param {SVGElement} group
   * @param {SVGElement} [gfx]
   *
   * @return {SVGElement} dragger
   */
  PreviewSupport.prototype.addDragger = function (element, group, gfx) {
    gfx = gfx || this.getGfx(element);
    var dragger = clone$1(gfx);
    var bbox = gfx.getBoundingClientRect();
    this._cloneMarkers(getVisual(dragger));
    attr(dragger, this._styles.cls('djs-dragger', [], {
      x: bbox.top,
      y: bbox.left
    }));
    append(group, dragger);
    return dragger;
  };

  /**
   * Adds a resize preview of a given shape to a given svg group.
   *
   * @param {djs.model.Base} element
   * @param {SVGElement} group
   *
   * @return {SVGElement} frame
   */
  PreviewSupport.prototype.addFrame = function (shape, group) {
    var frame = create$2('rect', {
      class: 'djs-resize-overlay',
      width: shape.width,
      height: shape.height,
      x: shape.x,
      y: shape.y
    });
    append(group, frame);
    return frame;
  };

  /**
   * Clone all markers referenced by a node and its child nodes.
   *
   * @param {SVGElement} gfx
   */
  PreviewSupport.prototype._cloneMarkers = function (gfx) {
    var self = this;
    if (gfx.childNodes) {
      // TODO: use forEach once we drop PhantomJS
      for (var i = 0; i < gfx.childNodes.length; i++) {
        // recursively clone markers of child nodes
        self._cloneMarkers(gfx.childNodes[i]);
      }
    }
    if (!canHaveMarker(gfx)) {
      return;
    }
    MARKER_TYPES.forEach(function (markerType) {
      if (attr(gfx, markerType)) {
        var marker = getMarker(gfx, markerType, self._canvas.getContainer());
        self._cloneMarker(gfx, marker, markerType);
      }
    });
  };

  /**
   * Clone marker referenced by an element.
   *
   * @param {SVGElement} gfx
   * @param {SVGElement} marker
   * @param {string} markerType
   */
  PreviewSupport.prototype._cloneMarker = function (gfx, marker, markerType) {
    var markerId = marker.id;
    var clonedMarker = this._clonedMarkers[markerId];
    if (!clonedMarker) {
      clonedMarker = clone$1(marker);
      var clonedMarkerId = markerId + '-clone';
      clonedMarker.id = clonedMarkerId;
      classes(clonedMarker).add('djs-dragger').add('djs-dragger-marker');
      this._clonedMarkers[markerId] = clonedMarker;
      var defs = query('defs', this._canvas._svg);
      if (!defs) {
        defs = create$2('defs');
        append(this._canvas._svg, defs);
      }
      append(defs, clonedMarker);
    }
    var reference = idToReference(this._clonedMarkers[markerId].id);
    attr(gfx, markerType, reference);
  };

  // helpers //////////

  /**
   * Get marker of given type referenced by node.
   *
   * @param {Node} node
   * @param {string} markerType
   * @param {Node} [parentNode]
   *
   * @param {Node}
   */
  function getMarker(node, markerType, parentNode) {
    var id = referenceToId(attr(node, markerType));
    return query('marker#' + id, parentNode || document);
  }

  /**
   * Get ID of fragment within current document from its functional IRI reference.
   * References may use single or double quotes.
   *
   * @param {string} reference
   *
   * @returns {string}
   */
  function referenceToId(reference) {
    return reference.match(/url\(['"]?#([^'"]*)['"]?\)/)[1];
  }

  /**
   * Get functional IRI reference for given ID of fragment within current document.
   *
   * @param {string} id
   *
   * @returns {string}
   */
  function idToReference(id) {
    return 'url(#' + id + ')';
  }

  /**
   * Check wether node type can have marker attributes.
   *
   * @param {Node} node
   *
   * @returns {boolean}
   */
  function canHaveMarker(node) {
    return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;
  }

  var PreviewSupportModule = {
    __init__: ['previewSupport'],
    previewSupport: ['type', PreviewSupport]
  };

  var MARKER_OK$1 = 'drop-ok',
    MARKER_NOT_OK$1 = 'drop-not-ok',
    MARKER_ATTACH$1 = 'attach-ok',
    MARKER_NEW_PARENT$1 = 'new-parent';
  var PREFIX = 'create';
  var HIGH_PRIORITY$8 = 2000;

  /**
   * Create new elements through drag and drop.
   *
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function Create(canvas, dragging, eventBus, modeling, rules) {
    // rules //////////

    /**
     * Check wether elements can be created.
     *
     * @param {Array<djs.model.Base>} elements
     * @param {djs.model.Base} target
     * @param {Point} position
     * @param {djs.model.Base} [source]
     *
     * @returns {boolean|null|Object}
     */
    function canCreate(elements, target, position, source, hints) {
      if (!target) {
        return false;
      }

      // ignore child elements and external labels
      elements = filter$2(elements, function (element) {
        var labelTarget = element.labelTarget;
        return !element.parent && !(isLabel$3(element) && elements.indexOf(labelTarget) !== -1);
      });
      var shape = find$2(elements, function (element) {
        return !isConnection$6(element);
      });
      var attach = false,
        connect = false,
        create = false;

      // (1) attaching single shapes
      if (isSingleShape(elements)) {
        attach = rules.allowed('shape.attach', {
          position: position,
          shape: shape,
          target: target
        });
      }
      if (!attach) {
        // (2) creating elements
        if (isSingleShape(elements)) {
          create = rules.allowed('shape.create', {
            position: position,
            shape: shape,
            source: source,
            target: target
          });
        } else {
          create = rules.allowed('elements.create', {
            elements: elements,
            position: position,
            target: target
          });
        }
      }
      var connectionTarget = hints.connectionTarget;

      // (3) appending single shapes
      if (create || attach) {
        if (shape && source) {
          connect = rules.allowed('connection.create', {
            source: connectionTarget === source ? shape : source,
            target: connectionTarget === source ? source : shape,
            hints: {
              targetParent: target,
              targetAttach: attach
            }
          });
        }
        return {
          attach: attach,
          connect: connect
        };
      }

      // ignore wether or not elements can be created
      if (create === null || attach === null) {
        return null;
      }
      return false;
    }
    function setMarker(element, marker) {
      [MARKER_ATTACH$1, MARKER_OK$1, MARKER_NOT_OK$1, MARKER_NEW_PARENT$1].forEach(function (m) {
        if (m === marker) {
          canvas.addMarker(element, m);
        } else {
          canvas.removeMarker(element, m);
        }
      });
    }

    // event handling //////////

    eventBus.on(['create.move', 'create.hover'], function (event) {
      var context = event.context,
        elements = context.elements,
        hover = event.hover,
        source = context.source,
        hints = context.hints || {};
      if (!hover) {
        context.canExecute = false;
        context.target = null;
        return;
      }
      ensureConstraints$1(event);
      var position = {
        x: event.x,
        y: event.y
      };
      var canExecute = context.canExecute = hover && canCreate(elements, hover, position, source, hints);
      if (hover && canExecute !== null) {
        context.target = hover;
        if (canExecute && canExecute.attach) {
          setMarker(hover, MARKER_ATTACH$1);
        } else {
          setMarker(hover, canExecute ? MARKER_NEW_PARENT$1 : MARKER_NOT_OK$1);
        }
      }
    });
    eventBus.on(['create.end', 'create.out', 'create.cleanup'], function (event) {
      var hover = event.hover;
      if (hover) {
        setMarker(hover, null);
      }
    });
    eventBus.on('create.end', function (event) {
      var context = event.context,
        source = context.source,
        shape = context.shape,
        elements = context.elements,
        target = context.target,
        canExecute = context.canExecute,
        attach = canExecute && canExecute.attach,
        connect = canExecute && canExecute.connect,
        hints = context.hints || {};
      if (canExecute === false || !target) {
        return false;
      }
      ensureConstraints$1(event);
      var position = {
        x: event.x,
        y: event.y
      };
      if (connect) {
        shape = modeling.appendShape(source, shape, position, target, {
          attach: attach,
          connection: connect === true ? {} : connect,
          connectionTarget: hints.connectionTarget
        });
      } else {
        elements = modeling.createElements(elements, position, target, assign$4({}, hints, {
          attach: attach
        }));

        // update shape
        shape = find$2(elements, function (element) {
          return !isConnection$6(element);
        });
      }

      // update elements and shape
      assign$4(context, {
        elements: elements,
        shape: shape
      });
      assign$4(event, {
        elements: elements,
        shape: shape
      });
    });
    function cancel() {
      var context = dragging.context();
      if (context && context.prefix === PREFIX) {
        dragging.cancel();
      }
    }

    // cancel on <elements.changed> that is not result of <drag.end>
    eventBus.on('create.init', function () {
      eventBus.on('elements.changed', cancel);
      eventBus.once(['create.cancel', 'create.end'], HIGH_PRIORITY$8, function () {
        eventBus.off('elements.changed', cancel);
      });
    });

    // API //////////

    this.start = function (event, elements, context) {
      if (!isArray$6(elements)) {
        elements = [elements];
      }
      var shape = find$2(elements, function (element) {
        return !isConnection$6(element);
      });
      if (!shape) {
        // at least one shape is required
        return;
      }
      context = assign$4({
        elements: elements,
        hints: {},
        shape: shape
      }, context || {});

      // make sure each element has x and y
      forEach$3(elements, function (element) {
        if (!isNumber$3(element.x)) {
          element.x = 0;
        }
        if (!isNumber$3(element.y)) {
          element.y = 0;
        }
      });
      var visibleElements = filter$2(elements, function (element) {
        return !element.hidden;
      });
      var bbox = getBBox(visibleElements);

      // center elements around cursor
      forEach$3(elements, function (element) {
        if (isConnection$6(element)) {
          element.waypoints = map$2(element.waypoints, function (waypoint) {
            return {
              x: waypoint.x - bbox.x - bbox.width / 2,
              y: waypoint.y - bbox.y - bbox.height / 2
            };
          });
        }
        assign$4(element, {
          x: element.x - bbox.x - bbox.width / 2,
          y: element.y - bbox.y - bbox.height / 2
        });
      });
      dragging.init(event, PREFIX, {
        cursor: 'grabbing',
        autoActivate: true,
        data: {
          shape: shape,
          elements: elements,
          context: context
        }
      });
    };
  }
  Create.$inject = ['canvas', 'dragging', 'eventBus', 'modeling', 'rules'];

  // helpers //////////

  function ensureConstraints$1(event) {
    var context = event.context,
      createConstraints = context.createConstraints;
    if (!createConstraints) {
      return;
    }
    if (createConstraints.left) {
      event.x = Math.max(event.x, createConstraints.left);
    }
    if (createConstraints.right) {
      event.x = Math.min(event.x, createConstraints.right);
    }
    if (createConstraints.top) {
      event.y = Math.max(event.y, createConstraints.top);
    }
    if (createConstraints.bottom) {
      event.y = Math.min(event.y, createConstraints.bottom);
    }
  }
  function isConnection$6(element) {
    return !!element.waypoints;
  }
  function isSingleShape(elements) {
    return elements && elements.length === 1 && !isConnection$6(elements[0]);
  }
  function isLabel$3(element) {
    return !!element.labelTarget;
  }

  var LOW_PRIORITY$h = 750;
  function CreatePreview(canvas, eventBus, graphicsFactory, previewSupport, styles) {
    function createDragGroup(elements) {
      var dragGroup = create$2('g');
      attr(dragGroup, styles.cls('djs-drag-group', ['no-events']));
      var childrenGfx = create$2('g');
      elements.forEach(function (element) {
        // create graphics
        var gfx;
        if (element.hidden) {
          return;
        }
        if (element.waypoints) {
          gfx = graphicsFactory._createContainer('connection', childrenGfx);
          graphicsFactory.drawConnection(getVisual(gfx), element);
        } else {
          gfx = graphicsFactory._createContainer('shape', childrenGfx);
          graphicsFactory.drawShape(getVisual(gfx), element);
          translate$1(gfx, element.x, element.y);
        }

        // add preview
        previewSupport.addDragger(element, dragGroup, gfx);
      });
      return dragGroup;
    }
    eventBus.on('create.move', LOW_PRIORITY$h, function (event) {
      var hover = event.hover,
        context = event.context,
        elements = context.elements,
        dragGroup = context.dragGroup;

      // lazily create previews
      if (!dragGroup) {
        dragGroup = context.dragGroup = createDragGroup(elements);
      }
      var activeLayer;
      if (hover) {
        if (!dragGroup.parentNode) {
          activeLayer = canvas.getActiveLayer();
          append(activeLayer, dragGroup);
        }
        translate$1(dragGroup, event.x, event.y);
      } else {
        remove$2(dragGroup);
      }
    });
    eventBus.on('create.cleanup', function (event) {
      var context = event.context,
        dragGroup = context.dragGroup;
      if (dragGroup) {
        remove$2(dragGroup);
      }
    });
  }
  CreatePreview.$inject = ['canvas', 'eventBus', 'graphicsFactory', 'previewSupport', 'styles'];

  var DiagramCreate = {
    __depends__: [DraggingModule, PreviewSupportModule, Rules$5, SelectionModule],
    __init__: ['create', 'createPreview'],
    create: ['type', Create],
    createPreview: ['type', CreatePreview]
  };

  var n$1,
    l$1,
    u$1,
    t$2,
    o$1,
    f$1 = {},
    e$2 = [],
    c$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  function s$1(n, l) {
    for (var u in l) n[u] = l[u];
    return n;
  }
  function a$1(n) {
    var l = n.parentNode;
    l && l.removeChild(n);
  }
  function h$1(l, u, i) {
    var t,
      o,
      r,
      f = {};
    for (r in u) "key" == r ? t = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
    if (arguments.length > 2 && (f.children = arguments.length > 3 ? n$1.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) void 0 === f[r] && (f[r] = l.defaultProps[r]);
    return v$1(l, f, t, o, null);
  }
  function v$1(n, i, t, o, r) {
    var f = {
      type: n,
      props: i,
      key: t,
      ref: o,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: null == r ? ++u$1 : r
    };
    return null == r && null != l$1.vnode && l$1.vnode(f), f;
  }
  function p$1(n) {
    return n.children;
  }
  function d$1(n, l) {
    this.props = n, this.context = l;
  }
  function _$1(n, l) {
    if (null == l) return n.__ ? _$1(n.__, n.__.__k.indexOf(n) + 1) : null;
    for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
    return "function" == typeof n.type ? _$1(n) : null;
  }
  function k$1(n) {
    var l, u;
    if (null != (n = n.__) && null != n.__c) {
      for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
        n.__e = n.__c.base = u.__e;
        break;
      }
      return k$1(n);
    }
  }
  function b$1(n) {
    (!n.__d && (n.__d = !0) && t$2.push(n) && !g$1.__r++ || o$1 !== l$1.debounceRendering) && ((o$1 = l$1.debounceRendering) || setTimeout)(g$1);
  }
  function g$1() {
    for (var n; g$1.__r = t$2.length;) n = t$2.sort(function (n, l) {
      return n.__v.__b - l.__v.__b;
    }), t$2 = [], n.some(function (n) {
      var l, u, i, t, o, r;
      n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = s$1({}, t)).__v = t.__v + 1, j$1(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? _$1(t) : o, t.__h), z$1(u, t), t.__e != o && k$1(t)));
    });
  }
  function w$1(n, l, u, i, t, o, r, c, s, a) {
    var h,
      y,
      d,
      k,
      b,
      g,
      w,
      x = i && i.__k || e$2,
      C = x.length;
    for (u.__k = [], h = 0; h < l.length; h++) if (null != (k = u.__k[h] = null == (k = l[h]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? v$1(null, k, null, null, k) : Array.isArray(k) ? v$1(p$1, {
      children: k
    }, null, null, null) : k.__b > 0 ? v$1(k.type, k.props, k.key, k.ref ? k.ref : null, k.__v) : k)) {
      if (k.__ = u, k.__b = u.__b + 1, null === (d = x[h]) || d && k.key == d.key && k.type === d.type) x[h] = void 0;else for (y = 0; y < C; y++) {
        if ((d = x[y]) && k.key == d.key && k.type === d.type) {
          x[y] = void 0;
          break;
        }
        d = null;
      }
      j$1(n, k, d = d || f$1, t, o, r, c, s, a), b = k.__e, (y = k.ref) && d.ref != y && (w || (w = []), d.ref && w.push(d.ref, null, k), w.push(y, k.__c || b, k)), null != b ? (null == g && (g = b), "function" == typeof k.type && k.__k === d.__k ? k.__d = s = m$2(k, s, n) : s = A(n, k, d, x, b, s), "function" == typeof u.type && (u.__d = s)) : s && d.__e == s && s.parentNode != n && (s = _$1(d));
    }
    for (u.__e = g, h = C; h--;) null != x[h] && N(x[h], x[h]);
    if (w) for (h = 0; h < w.length; h++) M(w[h], w[++h], w[++h]);
  }
  function m$2(n, l, u) {
    for (var i, t = n.__k, o = 0; t && o < t.length; o++) (i = t[o]) && (i.__ = n, l = "function" == typeof i.type ? m$2(i, l, u) : A(u, i, i, t, i.__e, l));
    return l;
  }
  function A(n, l, u, i, t, o) {
    var r, f, e;
    if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
      for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 1) if (f == t) break n;
      n.insertBefore(t, o), r = o;
    }
    return void 0 !== r ? r : t.nextSibling;
  }
  function C(n, l, u, i, t) {
    var o;
    for (o in u) "children" === o || "key" === o || o in l || H(n, o, null, u[o], i);
    for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || H(n, o, l[o], u[o], i);
  }
  function $(n, l, u) {
    "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || c$1.test(l) ? u : u + "px";
  }
  function H(n, l, u, i, t) {
    var o;
    n: if ("style" === l) {
      if ("string" == typeof u) n.style.cssText = u;else {
        if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || $(n.style, l, "");
        if (u) for (l in u) i && u[l] === i[l] || $(n.style, l, u[l]);
      }
    } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? T$1 : I, o) : n.removeEventListener(l, o ? T$1 : I, o);else if ("dangerouslySetInnerHTML" !== l) {
      if (t) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
        n[l] = null == u ? "" : u;
        break n;
      } catch (n) {}
      "function" == typeof u || (null == u || !1 === u && -1 == l.indexOf("-") ? n.removeAttribute(l) : n.setAttribute(l, u));
    }
  }
  function I(n) {
    this.l[n.type + !1](l$1.event ? l$1.event(n) : n);
  }
  function T$1(n) {
    this.l[n.type + !0](l$1.event ? l$1.event(n) : n);
  }
  function j$1(n, u, i, t, o, r, f, e, c) {
    var a,
      h,
      v,
      y,
      _,
      k,
      b,
      g,
      m,
      x,
      A,
      C,
      $,
      H,
      I,
      T = u.type;
    if (void 0 !== u.constructor) return null;
    null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = l$1.__b) && a(u);
    try {
      n: if ("function" == typeof T) {
        if (g = u.props, m = (a = T.contextType) && t[a.__c], x = a ? m ? m.props.value : a.__ : t, i.__c ? b = (h = u.__c = i.__c).__ = h.__E : ("prototype" in T && T.prototype.render ? u.__c = h = new T(g, x) : (u.__c = h = new d$1(g, x), h.constructor = T, h.render = O), m && m.sub(h), h.props = g, h.state || (h.state = {}), h.context = x, h.__n = t, v = h.__d = !0, h.__h = [], h._sb = []), null == h.__s && (h.__s = h.state), null != T.getDerivedStateFromProps && (h.__s == h.state && (h.__s = s$1({}, h.__s)), s$1(h.__s, T.getDerivedStateFromProps(g, h.__s))), y = h.props, _ = h.state, v) null == T.getDerivedStateFromProps && null != h.componentWillMount && h.componentWillMount(), null != h.componentDidMount && h.__h.push(h.componentDidMount);else {
          if (null == T.getDerivedStateFromProps && g !== y && null != h.componentWillReceiveProps && h.componentWillReceiveProps(g, x), !h.__e && null != h.shouldComponentUpdate && !1 === h.shouldComponentUpdate(g, h.__s, x) || u.__v === i.__v) {
            for (h.props = g, h.state = h.__s, u.__v !== i.__v && (h.__d = !1), h.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
              n && (n.__ = u);
            }), A = 0; A < h._sb.length; A++) h.__h.push(h._sb[A]);
            h._sb = [], h.__h.length && f.push(h);
            break n;
          }
          null != h.componentWillUpdate && h.componentWillUpdate(g, h.__s, x), null != h.componentDidUpdate && h.__h.push(function () {
            h.componentDidUpdate(y, _, k);
          });
        }
        if (h.context = x, h.props = g, h.__v = u, h.__P = n, C = l$1.__r, $ = 0, "prototype" in T && T.prototype.render) {
          for (h.state = h.__s, h.__d = !1, C && C(u), a = h.render(h.props, h.state, h.context), H = 0; H < h._sb.length; H++) h.__h.push(h._sb[H]);
          h._sb = [];
        } else do {
          h.__d = !1, C && C(u), a = h.render(h.props, h.state, h.context), h.state = h.__s;
        } while (h.__d && ++$ < 25);
        h.state = h.__s, null != h.getChildContext && (t = s$1(s$1({}, t), h.getChildContext())), v || null == h.getSnapshotBeforeUpdate || (k = h.getSnapshotBeforeUpdate(y, _)), I = null != a && a.type === p$1 && null == a.key ? a.props.children : a, w$1(n, Array.isArray(I) ? I : [I], u, i, t, o, r, f, e, c), h.base = u.__e, u.__h = null, h.__h.length && f.push(h), b && (h.__E = h.__ = null), h.__e = !1;
      } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = L(i.__e, u, i, t, o, r, f, c);
      (a = l$1.diffed) && a(u);
    } catch (n) {
      u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l$1.__e(n, u, i);
    }
  }
  function z$1(n, u) {
    l$1.__c && l$1.__c(u, n), n.some(function (u) {
      try {
        n = u.__h, u.__h = [], n.some(function (n) {
          n.call(u);
        });
      } catch (n) {
        l$1.__e(n, u.__v);
      }
    });
  }
  function L(l, u, i, t, o, r, e, c) {
    var s,
      h,
      v,
      y = i.props,
      p = u.props,
      d = u.type,
      k = 0;
    if ("svg" === d && (o = !0), null != r) for (; k < r.length; k++) if ((s = r[k]) && "setAttribute" in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
      l = s, r[k] = null;
      break;
    }
    if (null == l) {
      if (null === d) return document.createTextNode(p);
      l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), r = null, c = !1;
    }
    if (null === d) y === p || c && l.data === p || (l.data = p);else {
      if (r = r && n$1.call(l.childNodes), h = (y = i.props || f$1).dangerouslySetInnerHTML, v = p.dangerouslySetInnerHTML, !c) {
        if (null != r) for (y = {}, k = 0; k < l.attributes.length; k++) y[l.attributes[k].name] = l.attributes[k].value;
        (v || h) && (v && (h && v.__html == h.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
      }
      if (C(l, p, y, o, c), v) u.__k = [];else if (k = u.props.children, w$1(l, Array.isArray(k) ? k : [k], u, i, t, o && "foreignObject" !== d, r, e, r ? r[0] : i.__k && _$1(i, 0), c), null != r) for (k = r.length; k--;) null != r[k] && a$1(r[k]);
      c || ("value" in p && void 0 !== (k = p.value) && (k !== l.value || "progress" === d && !k || "option" === d && k !== y.value) && H(l, "value", k, y.value, !1), "checked" in p && void 0 !== (k = p.checked) && k !== l.checked && H(l, "checked", k, y.checked, !1));
    }
    return l;
  }
  function M(n, u, i) {
    try {
      "function" == typeof n ? n(u) : n.current = u;
    } catch (n) {
      l$1.__e(n, i);
    }
  }
  function N(n, u, i) {
    var t, o;
    if (l$1.unmount && l$1.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || M(t, null, u)), null != (t = n.__c)) {
      if (t.componentWillUnmount) try {
        t.componentWillUnmount();
      } catch (n) {
        l$1.__e(n, u);
      }
      t.base = t.__P = null, n.__c = void 0;
    }
    if (t = n.__k) for (o = 0; o < t.length; o++) t[o] && N(t[o], u, i || "function" != typeof n.type);
    i || null == n.__e || a$1(n.__e), n.__ = n.__e = n.__d = void 0;
  }
  function O(n, l, u) {
    return this.constructor(n, u);
  }
  function P(u, i, t) {
    var o, r, e;
    l$1.__ && l$1.__(u, i), r = (o = "function" == typeof t) ? null : t && t.__k || i.__k, e = [], j$1(i, u = (!o && t || i).__k = h$1(p$1, null, [u]), r || f$1, f$1, void 0 !== i.ownerSVGElement, !o && t ? [t] : r ? null : i.firstChild ? n$1.call(i.childNodes) : null, e, !o && t ? t : r ? r.__e : i.firstChild, o), z$1(e, u);
  }
  n$1 = e$2.slice, l$1 = {
    __e: function (n, l, u, i) {
      for (var t, o, r; l = l.__;) if ((t = l.__c) && !t.__) try {
        if ((o = t.constructor) && null != o.getDerivedStateFromError && (t.setState(o.getDerivedStateFromError(n)), r = t.__d), null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), r = t.__d), r) return t.__E = t;
      } catch (l) {
        n = l;
      }
      throw n;
    }
  }, u$1 = 0, d$1.prototype.setState = function (n, l) {
    var u;
    u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s$1({}, this.state), "function" == typeof n && (n = n(s$1({}, u), this.props)), n && s$1(u, n), null != n && this.__v && (l && this._sb.push(l), b$1(this));
  }, d$1.prototype.forceUpdate = function (n) {
    this.__v && (this.__e = !0, n && this.__h.push(n), b$1(this));
  }, d$1.prototype.render = p$1, t$2 = [], g$1.__r = 0;

  var n = function (t, s, r, e) {
      var u;
      s[0] = 0;
      for (var h = 1; h < s.length; h++) {
        var p = s[h++],
          a = s[h] ? (s[0] |= p ? 1 : 2, r[s[h++]]) : s[++h];
        3 === p ? e[0] = a : 4 === p ? e[1] = Object.assign(e[1] || {}, a) : 5 === p ? (e[1] = e[1] || {})[s[++h]] = a : 6 === p ? e[1][s[++h]] += a + "" : p ? (u = t.apply(a, n(t, a, r, ["", null])), e.push(u), a[0] ? s[0] |= 2 : (s[h - 2] = 0, s[h] = u)) : e.push(a);
      }
      return e;
    },
    t$1 = new Map();
  function e$1 (s) {
    var r = t$1.get(this);
    return r || (r = new Map(), t$1.set(this, r)), (r = n(this, r.get(s) || (r.set(s, r = function (n) {
      for (var t, s, r = 1, e = "", u = "", h = [0], p = function (n) {
          1 === r && (n || (e = e.replace(/^\s*\n\s*|\s*\n\s*$/g, ""))) ? h.push(0, n, e) : 3 === r && (n || e) ? (h.push(3, n, e), r = 2) : 2 === r && "..." === e && n ? h.push(4, n, 0) : 2 === r && e && !n ? h.push(5, 0, !0, e) : r >= 5 && ((e || !n && 5 === r) && (h.push(r, 0, e, s), r = 6), n && (h.push(r, n, 0, s), r = 6)), e = "";
        }, a = 0; a < n.length; a++) {
        a && (1 === r && p(), p(a));
        for (var l = 0; l < n[a].length; l++) t = n[a][l], 1 === r ? "<" === t ? (p(), h = [h], r = 3) : e += t : 4 === r ? "--" === e && ">" === t ? (r = 1, e = "") : e = t + e[0] : u ? t === u ? u = "" : e += t : '"' === t || "'" === t ? u = t : ">" === t ? (p(), r = 1) : r && ("=" === t ? (r = 5, s = e, e = "") : "/" === t && (r < 5 || ">" === n[a][l + 1]) ? (p(), 3 === r && (h = h[0]), r = h, (h = h[0]).push(2, 0, r), r = 0) : " " === t || "\t" === t || "\n" === t || "\r" === t ? (p(), r = 2) : e += t), 3 === r && "!--" === e && (r = 4, h = h[0]);
      }
      return p(), h;
    }(s)), r), arguments, [])).length > 1 ? r : r[0];
  }

  var m$1 = e$1.bind(h$1);

  var t,
    r$1,
    u,
    i,
    o = 0,
    f = [],
    c = [],
    e = l$1.__b,
    a = l$1.__r,
    v = l$1.diffed,
    l = l$1.__c,
    m = l$1.unmount;
  function d(t, u) {
    l$1.__h && l$1.__h(r$1, t, o || u), o = 0;
    var i = r$1.__H || (r$1.__H = {
      __: [],
      __h: []
    });
    return t >= i.__.length && i.__.push({
      __V: c
    }), i.__[t];
  }
  function p(n) {
    return o = 1, y(B, n);
  }
  function y(n, u, i) {
    var o = d(t++, 2);
    if (o.t = n, !o.__c && (o.__ = [i ? i(u) : B(void 0, u), function (n) {
      var t = o.__N ? o.__N[0] : o.__[0],
        r = o.t(t, n);
      t !== r && (o.__N = [r, o.__[1]], o.__c.setState({}));
    }], o.__c = r$1, !r$1.u)) {
      r$1.u = !0;
      var f = r$1.shouldComponentUpdate;
      r$1.shouldComponentUpdate = function (n, t, r) {
        if (!o.__c.__H) return !0;
        var u = o.__c.__H.__.filter(function (n) {
          return n.__c;
        });
        if (u.every(function (n) {
          return !n.__N;
        })) return !f || f.call(this, n, t, r);
        var i = !1;
        return u.forEach(function (n) {
          if (n.__N) {
            var t = n.__[0];
            n.__ = n.__N, n.__N = void 0, t !== n.__[0] && (i = !0);
          }
        }), !(!i && o.__c.props === n) && (!f || f.call(this, n, t, r));
      };
    }
    return o.__N || o.__;
  }
  function h(u, i) {
    var o = d(t++, 3);
    !l$1.__s && z(o.__H, i) && (o.__ = u, o.i = i, r$1.__H.__h.push(o));
  }
  function s(u, i) {
    var o = d(t++, 4);
    !l$1.__s && z(o.__H, i) && (o.__ = u, o.i = i, r$1.__h.push(o));
  }
  function _(n) {
    return o = 5, F(function () {
      return {
        current: n
      };
    }, []);
  }
  function F(n, r) {
    var u = d(t++, 7);
    return z(u.__H, r) ? (u.__V = n(), u.i = r, u.__h = n, u.__V) : u.__;
  }
  function T(n, t) {
    return o = 8, F(function () {
      return n;
    }, t);
  }
  function b() {
    for (var t; t = f.shift();) if (t.__P && t.__H) try {
      t.__H.__h.forEach(k), t.__H.__h.forEach(w), t.__H.__h = [];
    } catch (r) {
      t.__H.__h = [], l$1.__e(r, t.__v);
    }
  }
  l$1.__b = function (n) {
    r$1 = null, e && e(n);
  }, l$1.__r = function (n) {
    a && a(n), t = 0;
    var i = (r$1 = n.__c).__H;
    i && (u === r$1 ? (i.__h = [], r$1.__h = [], i.__.forEach(function (n) {
      n.__N && (n.__ = n.__N), n.__V = c, n.__N = n.i = void 0;
    })) : (i.__h.forEach(k), i.__h.forEach(w), i.__h = [])), u = r$1;
  }, l$1.diffed = function (t) {
    v && v(t);
    var o = t.__c;
    o && o.__H && (o.__H.__h.length && (1 !== f.push(o) && i === l$1.requestAnimationFrame || ((i = l$1.requestAnimationFrame) || j)(b)), o.__H.__.forEach(function (n) {
      n.i && (n.__H = n.i), n.__V !== c && (n.__ = n.__V), n.i = void 0, n.__V = c;
    })), u = r$1 = null;
  }, l$1.__c = function (t, r) {
    r.some(function (t) {
      try {
        t.__h.forEach(k), t.__h = t.__h.filter(function (n) {
          return !n.__ || w(n);
        });
      } catch (u) {
        r.some(function (n) {
          n.__h && (n.__h = []);
        }), r = [], l$1.__e(u, t.__v);
      }
    }), l && l(t, r);
  }, l$1.unmount = function (t) {
    m && m(t);
    var r,
      u = t.__c;
    u && u.__H && (u.__H.__.forEach(function (n) {
      try {
        k(n);
      } catch (n) {
        r = n;
      }
    }), u.__H = void 0, r && l$1.__e(r, u.__v));
  };
  var g = "function" == typeof requestAnimationFrame;
  function j(n) {
    var t,
      r = function () {
        clearTimeout(u), g && cancelAnimationFrame(t), setTimeout(n);
      },
      u = setTimeout(r, 100);
    g && (t = requestAnimationFrame(r));
  }
  function k(n) {
    var t = r$1,
      u = n.__c;
    "function" == typeof u && (n.__c = void 0, u()), r$1 = t;
  }
  function w(n) {
    var t = r$1;
    n.__c = n.__(), r$1 = t;
  }
  function z(n, t) {
    return !n || n.length !== t.length || t.some(function (t, r) {
      return t !== n[r];
    });
  }
  function B(n, t) {
    return "function" == typeof t ? t(n) : t;
  }

  function r(e) {
    var t,
      f,
      n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);else for (t in e) e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = ""; f < arguments.length;) (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }

  /**
   * Component that renders a popup menu entry.
   *
   * @param {string} key
   * @param {Object} entry
   * @param {boolean} selected
   * @param {function} onMouseEnter
   * @param {function} onMouseLeave
   * @param {function} onClick
   */
  function PopupMenuItem(props) {
    const {
      entry,
      selected,
      onMouseEnter,
      onMouseLeave,
      onClick
    } = props;
    return m$1`
    <li
      class=${clsx('entry', {
    selected
  })}
      data-id=${entry.id}
      title=${entry.title || entry.label}
      onClick=${onClick}
      onMouseEnter=${onMouseEnter}
      onMouseLeave=${onMouseLeave}
    >
      <div class="djs-popup-entry-content">
        <span
          class=${clsx('djs-popup-entry-name', entry.className)}
        >
          ${entry.imageUrl ? m$1`
            <img class="djs-popup-entry-icon" src=${entry.imageUrl} />
          ` : null}

          ${entry.label ? m$1`
            <span class="djs-popup-label">
              ${entry.label}
            </span>
          ` : null}
        </span>
        ${entry.description && m$1`
          <span
            class="djs-popup-entry-description"
            title=${entry.description}
          >
            ${entry.description}
          </span>
        `}
      </div>
      ${entry.documentationRef && m$1`
        <div class="djs-popup-entry-docs">
          <a
            href="${entry.documentationRef}"
            onClick=${event => event.stopPropagation()}
            title="Open element documentation"
            target="_blank"
            rel="noopener"
          >
            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M10.6368 10.6375V5.91761H11.9995V10.6382C11.9995 10.9973 11.8623 11.3141 11.5878 11.5885C11.3134 11.863 10.9966 12.0002 10.6375 12.0002H1.36266C0.982345 12.0002 0.660159 11.8681 0.396102 11.6041C0.132044 11.34 1.52588e-05 11.0178 1.52588e-05 10.6375V1.36267C1.52588e-05 0.98236 0.132044 0.660173 0.396102 0.396116C0.660159 0.132058 0.982345 2.95639e-05 1.36266 2.95639e-05H5.91624V1.36267H1.36266V10.6375H10.6368ZM12 0H7.2794L7.27873 1.36197H9.68701L3.06507 7.98391L4.01541 8.93425L10.6373 2.31231V4.72059H12V0Z" fill="#818798"/>
            </svg>
          </a>
        </div>
      `}
    </li>
  `;
  }

  /**
   * Component that renders a popup menu entry list.
   *
   * @param {Array} entries
   * @param {Object} selectedEntry
   * @param {function} setSelectedEntry
   * @param {function} onClick
   * @param {Object} resultsRef
   */

  function PopupMenuList(props) {
    const {
      selectedEntry,
      setSelectedEntry,
      onClick,
      entries
    } = props;
    const resultsRef = _();
    const groups = F(() => groupEntries(entries), [entries]);

    // scroll to selected result
    s(() => {
      const containerEl = resultsRef.current;
      if (!containerEl) return;
      const selectedEl = containerEl.querySelector('.selected');
      if (selectedEl) {
        scrollIntoView(selectedEl);
      }
    }, [selectedEntry]);
    return m$1`
    <div class="djs-popup-results" ref=${resultsRef}>
      ${groups.map(group => m$1`
        ${group.name && m$1`
          <div key=${group.id} class="entry-header" title=${group.name}>
            ${group.name}
          </div>
        `}
        <ul class="djs-popup-group" data-group=${group.id}>
          ${group.entries.map(entry => m$1`
            <${PopupMenuItem}
              key=${entry.id}
              entry=${entry}
              selected=${entry === selectedEntry}
              onMouseEnter=${() => setSelectedEntry(entry)}
              onMouseLeave=${() => setSelectedEntry(null)}
              onClick=${onClick}
            />
          `)}
        </ul>
      `)}
    </div>
  `;
  }

  // helpers
  function groupEntries(entries) {
    const groups = [];
    const getGroup = group => groups.find(elem => group.id === elem.id);
    const containsGroup = group => !!getGroup(group);

    // legacy support for provider built for the old popUp menu
    const formatGroup = group => typeof group === 'string' ? {
      id: group
    } : group;
    entries.forEach(entry => {
      // assume a default group when none is provided
      const group = entry.group ? formatGroup(entry.group) : {
        id: 'default'
      };
      if (!containsGroup(group)) {
        groups.push({
          ...group,
          entries: [entry]
        });
      } else {
        getGroup(group).entries.push(entry);
      }
    });
    return groups;
  }

  // helpers ////////////////

  function scrollIntoView(el) {
    if (typeof el.scrollIntoViewIfNeeded === 'function') {
      el.scrollIntoViewIfNeeded();
    } else {
      el.scrollIntoView({
        scrollMode: 'if-needed',
        block: 'nearest'
      });
    }
  }

  /**
   * A component that renders the popup menus.
   *
   * @param {function} onClose
   * @param {function} position
   * @param {string} className
   * @param {Array} entries
   * @param {Array} headerEntries
   * @param {number} scale
   * @param {string} [title]
   * @param {boolean} [search]
   * @param {number} [width]
   */
  function PopupMenuComponent(props) {
    const {
      onClose,
      onSelect,
      className,
      headerEntries,
      position,
      title,
      width,
      scale,
      search,
      entries: originalEntries,
      onOpened,
      onClosed
    } = props;
    const searchable = F(() => {
      if (!isDefined(search)) {
        return false;
      }
      return originalEntries.length > 5;
    }, [search, originalEntries]);
    const inputRef = _();
    const [value, setValue] = p('');
    const [entries, setEntries] = p(originalEntries);
    const [selectedEntry, setSelectedEntry] = p(entries[0]);
    h(() => {
      onOpened();
      return () => {
        onClosed();
      };
    }, []);
    const updateEntries = T(newEntries => {
      // select first entry if non is selected
      if (!selectedEntry || !newEntries.includes(selectedEntry)) {
        setSelectedEntry(newEntries[0]);
      }
      setEntries(newEntries);
    }, [selectedEntry, setEntries, setSelectedEntry]);

    // filter entries on value change
    h(() => {
      if (!searchable) {
        return;
      }
      const filter = entry => {
        if (!value) {
          return true;
        }
        const search = [entry.description || '', entry.label || ''].join('---').toLowerCase();
        return value.toLowerCase().split(/\s/g).every(term => search.includes(term));
      };
      const entries = originalEntries.filter(filter);
      updateEntries(entries);
    }, [value, originalEntries, searchable]);

    // register global <Escape> handler
    h(() => {
      const handleKeyDown = event => {
        if (event.key === 'Escape') {
          event.preventDefault();
          return onClose();
        }
      };
      document.documentElement.addEventListener('keydown', handleKeyDown);
      return () => {
        document.documentElement.removeEventListener('keydown', handleKeyDown);
      };
    }, []);

    // focus input on initial mount
    s(() => {
      inputRef.current && inputRef.current.focus();
    }, []);

    // handle keyboard seleciton
    const keyboardSelect = T(direction => {
      const idx = entries.indexOf(selectedEntry);
      let nextIdx = idx + direction;
      if (nextIdx < 0) {
        nextIdx = entries.length - 1;
      }
      if (nextIdx >= entries.length) {
        nextIdx = 0;
      }
      setSelectedEntry(entries[nextIdx]);
    }, [entries, selectedEntry, setSelectedEntry]);
    const handleKeyDown = T(event => {
      if (event.key === 'Enter' && selectedEntry) {
        return onSelect(event, selectedEntry);
      }
      if (event.key === 'Escape') {
        return onClose();
      }

      // ARROW_UP or SHIFT + TAB navigation
      if (event.key === 'ArrowUp' || event.key === 'Tab' && event.shiftKey) {
        keyboardSelect(-1);
        return event.preventDefault();
      }

      // ARROW_DOWN or TAB navigation
      if (event.key === 'ArrowDown' || event.key === 'Tab') {
        keyboardSelect(1);
        return event.preventDefault();
      }
    }, [onSelect, onClose, selectedEntry, keyboardSelect]);
    const handleKey = T(event => {
      if (matches(event.target, 'input')) {
        setValue(() => event.target.value);
      }
    }, [setValue]);
    const displayHeader = F(() => title || headerEntries.length > 0, [title, headerEntries]);
    return m$1`
    <${PopupMenuWrapper}
      onClose=${onClose}
      onKeyup=${handleKey}
      onKeydown=${handleKeyDown}
      className=${className}
      position=${position}
      width=${width}
      scale=${scale}
    >
      ${displayHeader && m$1`
        <div class="djs-popup-header">
          <h3 class="djs-popup-title" title=${title}>${title}</h3>
          ${headerEntries.map(entry => m$1`
            <span
              class=${getHeaderClasses(entry, entry === selectedEntry)}
              onClick=${event => onSelect(event, entry)}
              title=${entry.title || entry.label}
              data-id=${entry.id}
              onMouseEnter=${() => setSelectedEntry(entry)}
              onMouseLeave=${() => setSelectedEntry(null)}
            >
              ${entry.imageUrl ? m$1`
                <img class="djs-popup-entry-icon" src=${entry.imageUrl} />
              ` : null}

              ${entry.label ? m$1`
                <span class="djs-popup-label">${entry.label}</span>
              ` : null}
            </span>
          `)}
        </div>
      `}
      ${originalEntries.length > 0 && m$1`
        <div class="djs-popup-body">

          ${searchable && m$1`
          <div class="djs-popup-search">
            <svg class="djs-popup-search-icon" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M9.0325 8.5H9.625L13.3675 12.25L12.25 13.3675L8.5 9.625V9.0325L8.2975 8.8225C7.4425 9.5575 6.3325 10 5.125 10C2.4325 10 0.25 7.8175 0.25 5.125C0.25 2.4325 2.4325 0.25 5.125 0.25C7.8175 0.25 10 2.4325 10 5.125C10 6.3325 9.5575 7.4425 8.8225 8.2975L9.0325 8.5ZM1.75 5.125C1.75 6.9925 3.2575 8.5 5.125 8.5C6.9925 8.5 8.5 6.9925 8.5 5.125C8.5 3.2575 6.9925 1.75 5.125 1.75C3.2575 1.75 1.75 3.2575 1.75 5.125Z" fill="#22242A"/>
            </svg>
            <input
                ref=${inputRef}
                type="text"
              />
          </div>
          `}

          <${PopupMenuList}
            entries=${entries}
            selectedEntry=${selectedEntry}
            setSelectedEntry=${setSelectedEntry}
            onClick=${onSelect}
          />
        </div>
        ${entries.length === 0 && m$1`
          <div class="djs-popup-no-results">No matching entries found.</div>
        `}
      `}
    </${PopupMenuWrapper}>
  `;
  }

  /**
   * A component that wraps the popup menu.
   *
   * @param {any} props
   */
  function PopupMenuWrapper(props) {
    const {
      onClose,
      onKeydown,
      onKeyup,
      className,
      children,
      position: positionGetter
    } = props;
    const popupRef = _();
    const checkClose = T(event => {
      const popup = closest(event.target, '.djs-popup', true);
      if (popup) {
        return;
      }
      onClose();
    }, [onClose]);
    s(() => {
      if (typeof positionGetter !== 'function') {
        return;
      }
      const popupEl = popupRef.current;
      const position = positionGetter(popupEl);
      popupEl.style.left = `${position.x}px`;
      popupEl.style.top = `${position.y}px`;
    }, [popupRef.current, positionGetter]);

    // focus popup initially, on mount
    s(() => {
      popupRef.current && popupRef.current.focus();
    }, []);
    return m$1`
    <div
      class="djs-popup-backdrop"
      onClick=${checkClose}
    >
      <div
        class=${clsx('djs-popup', className)}
        style=${getPopupStyle(props)}
        onKeydown=${onKeydown}
        onKeyup=${onKeyup}
        ref=${popupRef}
        tabIndex="-1"
      >
        ${children}
      </div>
    </div>
  `;
  }

  // helpers //////////////////////

  function getPopupStyle(props) {
    return {
      transform: `scale(${props.scale})`,
      width: `${props.width}px`
    };
  }
  function getHeaderClasses(entry, selected) {
    return clsx('entry', entry.className, entry.active ? 'active' : '', entry.disabled ? 'disabled' : '', selected ? 'selected' : '');
  }

  var DATA_REF = 'data-id';
  var CLOSE_EVENTS = ['contextPad.close', 'canvas.viewbox.changing', 'commandStack.changed'];
  var DEFAULT_PRIORITY$5 = 1000;

  /**
   * A popup menu that can be used to display a list of actions anywhere in the canvas.
   *
   * @param {Object} config
   * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]
   * @param {number} [config.scale.min]
   * @param {number} [config.scale.max]
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   *
   * @class
   * @constructor
   */
  function PopupMenu$1(config, eventBus, canvas) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._current = null;
    var scale = isDefined(config && config.scale) ? config.scale : {
      min: 1,
      max: 1.5
    };
    this._config = {
      scale: scale
    };
    eventBus.on('diagram.destroy', () => {
      this.close();
    });
    eventBus.on('element.changed', event => {
      const element = this.isOpen() && this._current.element;
      if (event.element === element) {
        this._render();
      }
    });
  }
  PopupMenu$1.$inject = ['config.popupMenu', 'eventBus', 'canvas'];
  PopupMenu$1.prototype._render = function () {
    const {
      position: _position,
      className,
      entries,
      headerEntries,
      options
    } = this._current;
    const entriesArray = [...Object.entries(entries).map(([key, value]) => ({
      id: key,
      ...value
    }))];
    const headerEntriesArray = [...Object.entries(headerEntries).map(([key, value]) => ({
      id: key,
      ...value
    }))];
    const position = _position && (container => this._ensureVisible(container, _position));
    const scale = this._updateScale(this._current.container);
    const onClose = result => this.close(result);
    const onSelect = (event, entry) => this.trigger(event, entry);
    P(m$1`
      <${PopupMenuComponent}
        onClose=${onClose}
        onSelect=${onSelect}
        position=${position}
        className=${className}
        entries=${entriesArray}
        headerEntries=${headerEntriesArray}
        scale=${scale}
        onOpened=${this._onOpened.bind(this)}
        onClosed=${this._onClosed.bind(this)}
        ...${{
    ...options
  }}
      />
    `, this._current.container);
  };

  /**
   * Create entries and open popup menu at given position
   *
   * @param  {Object} element
   * @param  {string} id provider id
   * @param  {Object} position
   *
   * @return {Object} popup menu instance
   */
  PopupMenu$1.prototype.open = function (element, providerId, position, options) {
    if (!element) {
      throw new Error('Element is missing');
    }
    if (!providerId) {
      throw new Error('No registered providers for: ' + providerId);
    }
    if (!position) {
      throw new Error('the position argument is missing');
    }
    if (this.isOpen()) {
      this.close();
    }
    const {
      entries,
      headerEntries
    } = this._getContext(element, providerId);
    this._current = {
      position,
      className: providerId,
      element,
      entries,
      headerEntries,
      container: this._createContainer({
        provider: providerId
      }),
      options
    };
    this._emit('open');
    this._bindAutoClose();
    this._render();
  };
  PopupMenu$1.prototype._getContext = function (element, provider) {
    const providers = this._getProviders(provider);
    if (!providers || !providers.length) {
      throw new Error('No registered providers for: ' + provider);
    }
    const entries = this._getEntries(element, providers);
    const headerEntries = this._getHeaderEntries(element, providers);
    return {
      entries,
      headerEntries,
      empty: !(Object.keys(entries).length || Object.keys(headerEntries).length)
    };
  };
  PopupMenu$1.prototype.close = function () {
    if (!this.isOpen()) {
      return;
    }
    this._emit('close');
    this.reset();
    this._current = null;
  };
  PopupMenu$1.prototype.reset = function () {
    const container = this._current.container;
    P(null, container);
    remove$4(container);
  };
  PopupMenu$1.prototype._emit = function (event, payload) {
    this._eventBus.fire(`popupMenu.${event}`, payload);
  };
  PopupMenu$1.prototype._onOpened = function () {
    this._emit('opened');
  };
  PopupMenu$1.prototype._onClosed = function () {
    this._emit('closed');
  };
  PopupMenu$1.prototype._createContainer = function (config) {
    let parent = config && config.parent || 'body';
    if (typeof parent === 'string') {
      parent = document.querySelector(parent);
    }
    const container = domify$1(`<div class="djs-popup-parent djs-parent" data-popup=${config.provider}></div>`);
    parent.appendChild(container);
    return container;
  };

  /**
   * Set up listener to close popup automatically on certain events.
   */
  PopupMenu$1.prototype._bindAutoClose = function () {
    this._eventBus.once(CLOSE_EVENTS, this.close, this);
  };

  /**
   * Remove the auto-closing listener.
  */
  PopupMenu$1.prototype._unbindAutoClose = function () {
    this._eventBus.off(CLOSE_EVENTS, this.close, this);
  };

  /**
   * Updates popup style.transform with respect to the config and zoom level.
   *
   * @param {Object} container
   */
  PopupMenu$1.prototype._updateScale = function (container) {
    var zoom = this._canvas.zoom();
    var scaleConfig = this._config.scale,
      minScale,
      maxScale,
      scale = zoom;
    if (scaleConfig !== true) {
      if (scaleConfig === false) {
        minScale = 1;
        maxScale = 1;
      } else {
        minScale = scaleConfig.min;
        maxScale = scaleConfig.max;
      }
      if (isDefined(minScale) && zoom < minScale) {
        scale = minScale;
      }
      if (isDefined(maxScale) && zoom > maxScale) {
        scale = maxScale;
      }
    }
    return scale;
  };
  PopupMenu$1.prototype._ensureVisible = function (container, position) {
    var documentBounds = document.documentElement.getBoundingClientRect();
    var containerBounds = container.getBoundingClientRect();
    var overAxis = {},
      left = position.x,
      top = position.y;
    if (position.x + containerBounds.width > documentBounds.width) {
      overAxis.x = true;
    }
    if (position.y + containerBounds.height > documentBounds.height) {
      overAxis.y = true;
    }
    if (overAxis.x && overAxis.y) {
      left = position.x - containerBounds.width;
      top = position.y - containerBounds.height;
    } else if (overAxis.x) {
      left = position.x - containerBounds.width;
      top = position.y;
    } else if (overAxis.y && position.y < containerBounds.height) {
      left = position.x;
      top = 10;
    } else if (overAxis.y) {
      left = position.x;
      top = position.y - containerBounds.height;
    }
    return {
      x: left,
      y: top
    };
  };
  PopupMenu$1.prototype.isEmpty = function (element, providerId) {
    if (!element) {
      throw new Error('element parameter is missing');
    }
    if (!providerId) {
      throw new Error('providerId parameter is missing');
    }
    const providers = this._getProviders(providerId);
    if (!providers || !providers.length) {
      return true;
    }
    return this._getContext(element, providerId).empty;
  };

  /**
   * Registers a popup menu provider
   *
   * @param  {string} id
   * @param {number} [priority=1000]
   * @param  {Object} provider
   *
   * @example
   * const popupMenuProvider = {
   *   getPopupMenuEntries(element) {
   *     return {
   *       'entry-1': {
   *         label: 'My Entry',
   *         action: function() { alert("I have been clicked!"); }
   *       }
   *     }
   *   }
   * };
   *
   * popupMenu.registerProvider('myMenuID', popupMenuProvider);
   *
   * @example
   * const replacingPopupMenuProvider = {
   *   getPopupMenuEntries(element) {
   *     return (entries) => {
   *       const {
   *         someEntry,
   *         ...remainingEntries
   *       } = entries;
   *
   *       return remainingEntries;
   *     };
   *   }
   * };
   *
   * popupMenu.registerProvider('myMenuID', replacingPopupMenuProvider);
   */
  PopupMenu$1.prototype.registerProvider = function (id, priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$5;
    }
    this._eventBus.on('popupMenu.getProviders.' + id, priority, function (event) {
      event.providers.push(provider);
    });
  };
  PopupMenu$1.prototype._getProviders = function (id) {
    var event = this._eventBus.createEvent({
      type: 'popupMenu.getProviders.' + id,
      providers: []
    });
    this._eventBus.fire(event);
    return event.providers;
  };
  PopupMenu$1.prototype._getEntries = function (element, providers) {
    var entries = {};
    forEach$3(providers, function (provider) {
      // handle legacy method
      if (!provider.getPopupMenuEntries) {
        forEach$3(provider.getEntries(element), function (entry) {
          var id = entry.id;
          if (!id) {
            throw new Error('every entry must have the id property set');
          }
          entries[id] = omit(entry, ['id']);
        });
        return;
      }
      var entriesOrUpdater = provider.getPopupMenuEntries(element);
      if (isFunction$2(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$3(entriesOrUpdater, function (entry, id) {
          entries[id] = entry;
        });
      }
    });
    return entries;
  };
  PopupMenu$1.prototype._getHeaderEntries = function (element, providers) {
    var entries = {};
    forEach$3(providers, function (provider) {
      // handle legacy method
      if (!provider.getPopupMenuHeaderEntries) {
        if (!provider.getHeaderEntries) {
          return;
        }
        forEach$3(provider.getHeaderEntries(element), function (entry) {
          var id = entry.id;
          if (!id) {
            throw new Error('every entry must have the id property set');
          }
          entries[id] = omit(entry, ['id']);
        });
        return;
      }
      var entriesOrUpdater = provider.getPopupMenuHeaderEntries(element);
      if (isFunction$2(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$3(entriesOrUpdater, function (entry, id) {
          entries[id] = entry;
        });
      }
    });
    return entries;
  };

  /**
   * Determine if an open popup menu exist.
   *
   * @return {boolean} true if open
   */
  PopupMenu$1.prototype.isOpen = function () {
    return !!this._current;
  };

  /**
   * Trigger an action associated with an entry.
   *
   * @param {Object} event
   * @param {Object} entry
   *
   * @return the result of the action callback, if any
   */
  PopupMenu$1.prototype.trigger = function (event, entry) {
    // silence other actions
    event.preventDefault();
    if (!entry) {
      let element = closest(event.delegateTarget || event.target, '.entry', true);
      let entryId = attr$1(element, DATA_REF);
      entry = this._getEntry(entryId);
    }
    if (entry.action) {
      return entry.action.call(null, event, entry);
    }
  };

  /**
   * Gets an entry instance (either entry or headerEntry) by id.
   *
   * @param  {string} entryId
   *
   * @return {Object} entry instance
   */
  PopupMenu$1.prototype._getEntry = function (entryId) {
    var entry = this._current.entries[entryId] || this._current.headerEntries[entryId];
    if (!entry) {
      throw new Error('entry not found');
    }
    return entry;
  };

  var DiagramPopupMenu = {
    __init__: ['popupMenu'],
    popupMenu: ['type', PopupMenu$1]
  };

  var round$3 = Math.round;

  /**
   * Service that allow replacing of elements.
   */
  function Replace$1(modeling) {
    this._modeling = modeling;
  }
  Replace$1.$inject = ['modeling'];

  /**
   * @param {Element} oldElement - Element to be replaced
   * @param {Object}  newElementData - Containing information about the new element,
   *                                   for example the new bounds and type.
   * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data
   *                            that is needed in the command chain. For example it could be used in
   *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after
   *                            shape creation.
   */
  Replace$1.prototype.replaceElement = function (oldElement, newElementData, options) {
    if (oldElement.waypoints) {
      // TODO(nikku): we do not replace connections, yet
      return null;
    }
    var modeling = this._modeling;
    var width = newElementData.width || oldElement.width,
      height = newElementData.height || oldElement.height,
      x = newElementData.x || oldElement.x,
      y = newElementData.y || oldElement.y,
      centerX = round$3(x + width / 2),
      centerY = round$3(y + height / 2);

    // modeling API requires center coordinates,
    // account for that when handling shape bounds

    return modeling.replaceShape(oldElement, assign$4({}, newElementData, {
      x: centerX,
      y: centerY,
      width: width,
      height: height
    }), options);
  };

  var DiagramReplace = {
    __init__: ['replace'],
    replace: ['type', Replace$1]
  };

  /**
   * This module takes care of replacing DRD elements
   */
  function DrdReplace(drdFactory, replace, selection, modeling) {
    /**
     * Prepares a new business object for the replacement element
     * and triggers the replace operation.
     *
     * @param  {djs.model.Base} element
     * @param  {Object} target
     * @param  {Object} [hints]
     *
     * @return {djs.model.Base} the newly created element
     */
    function replaceElement(element, target, hints) {
      hints = hints || {};
      var type = target.type,
        oldBusinessObject = element.businessObject;
      var newBusinessObject = drdFactory.create(type);
      var newElement = {
        type: type,
        businessObject: newBusinessObject
      };
      newElement.width = element.width;
      newElement.height = element.height;
      newBusinessObject.name = oldBusinessObject.name;
      if (target.table) {
        var table = drdFactory.create('dmn:DecisionTable');
        newBusinessObject.decisionLogic = table;
        table.$parent = newBusinessObject;
        var output = drdFactory.create('dmn:OutputClause');
        output.typeRef = 'string';
        output.$parent = table;
        table.output = [output];
        var input = drdFactory.create('dmn:InputClause');
        input.$parent = table;
        var inputExpression = drdFactory.create('dmn:LiteralExpression', {
          typeRef: 'string'
        });
        input.inputExpression = inputExpression;
        inputExpression.$parent = input;
        table.input = [input];
      }
      if (target.expression) {
        newBusinessObject.decisionLogic = drdFactory.create('dmn:LiteralExpression');
        newBusinessObject.variable = drdFactory.create('dmn:InformationItem');
      }
      return replace.replaceElement(element, newElement, hints);
    }
    this.replaceElement = replaceElement;
  }
  DrdReplace.$inject = ['drdFactory', 'replace', 'selection', 'modeling'];

  var Replace = {
    __depends__: [DiagramReplace, SelectionModule],
    drdReplace: ['type', DrdReplace]
  };

  var replaceOptions = {
    DECISION: [{
      label: 'Empty',
      actionName: 'replace-with-empty-decision',
      className: 'dmn-icon-clear',
      target: {
        type: 'dmn:Decision',
        table: false,
        expression: false
      }
    }, {
      label: 'Decision Table',
      actionName: 'replace-with-decision-table',
      className: 'dmn-icon-decision-table',
      target: {
        type: 'dmn:Decision',
        table: true,
        expression: false
      }
    }, {
      label: 'Literal Expression',
      actionName: 'replace-with-literal-expression',
      className: 'dmn-icon-literal-expression',
      target: {
        type: 'dmn:Decision',
        table: false,
        expression: true
      }
    }]
  };

  /**
   * This module is an element agnostic replace menu provider for the popup menu.
   */
  function ReplaceMenuProvider(popupMenu, modeling, moddle, drdReplace, rules, translate) {
    this._popupMenu = popupMenu;
    this._modeling = modeling;
    this._moddle = moddle;
    this._drdReplace = drdReplace;
    this._rules = rules;
    this._translate = translate;
    this.register();
  }
  ReplaceMenuProvider.$inject = ['popupMenu', 'modeling', 'moddle', 'drdReplace', 'rules', 'translate'];

  /**
   * Register replace menu provider in the popup menu
   */
  ReplaceMenuProvider.prototype.register = function () {
    this._popupMenu.registerProvider('dmn-replace', this);
  };

  /**
   * Get all entries from replaceOptions for the given element.
   *
   * @param {djs.model.Base} element
   *
   * @return {Array<Object>} a list of menu entry items
   */
  ReplaceMenuProvider.prototype.getEntries = function (element) {
    var businessObject = element.businessObject;
    var rules = this._rules;
    if (!rules.allowed('shape.replace', {
      element: element
    })) {
      return [];
    }
    if (is(businessObject, 'dmn:Decision')) {
      var options = filter$2(replaceOptions.DECISION, function (option) {
        var notEmpty = option.actionName === 'replace-with-empty-decision' && businessObject.decisionLogic;
        var notTable = option.actionName === 'replace-with-decision-table' && !is(businessObject.decisionLogic, 'dmn:DecisionTable');
        var notExp = option.actionName === 'replace-with-literal-expression' && !is(businessObject.decisionLogic, 'dmn:LiteralExpression');
        return notEmpty || notTable || notExp;
      });
      return this._createEntries(element, options);
    }
    return [];
  };

  /**
   * Creates an array of menu entry objects for a given element.
   *
   * @param  {djs.model.Base} element
   * @param  {Object} replaceOptions
   *
   * @return {Array<Object>} a list of menu items
   */
  ReplaceMenuProvider.prototype._createEntries = function (element, replaceOptions) {
    var menuEntries = [];
    var self = this;
    forEach$3(replaceOptions, function (definition) {
      var entry = self._createMenuEntry(definition, element);
      menuEntries.push(entry);
    });
    return menuEntries;
  };

  /**
   * Creates and returns a single menu entry item.
   *
   * @param  {Object} definition a single replace options definition object
   * @param  {djs.model.Base} element
   * @param  {Function} [action] an action callback function which gets called when
   *                             the menu entry is being triggered.
   *
   * @return {Object} menu entry item
   */
  ReplaceMenuProvider.prototype._createMenuEntry = function (definition, element, action) {
    var replaceElement = this._drdReplace.replaceElement;
    var translate = this._translate;
    var replaceAction = function replaceAction() {
      return replaceElement(element, definition.target);
    };
    action = action || replaceAction;
    var menuEntry = {
      label: translate(definition.label),
      className: definition.className,
      id: definition.actionName,
      action: action
    };
    return menuEntry;
  };
  ReplaceMenuProvider.prototype.getHeaderEntries = function (element) {
    return [];
  };

  var PopupMenu = {
    __depends__: [TranslateModule, DiagramPopupMenu, Replace],
    __init__: ['replaceMenuProvider'],
    replaceMenuProvider: ['type', ReplaceMenuProvider]
  };

  /**
  * A provider for DMN elements context pad
  */
  function ContextPadProvider(eventBus, contextPad, modeling, elementFactory, connect, create, rules, popupMenu, canvas, translate, config, injector) {
    config = config || {};
    contextPad.registerProvider(this);
    this._contextPad = contextPad;
    this._modeling = modeling;
    this._elementFactory = elementFactory;
    this._connect = connect;
    this._create = create;
    this._rules = rules;
    this._popupMenu = popupMenu;
    this._canvas = canvas;
    this._translate = translate;
    if (config.autoPlace !== false) {
      this._autoPlace = injector.get('autoPlace', false);
    }
    eventBus.on('create.end', 250, function (event) {
      var shape = event.context.shape;
      if (!hasPrimaryModifier(event)) {
        return;
      }
      var entries = contextPad.getEntries(shape);
      if (entries.replace) {
        entries.replace.action.click(event, shape);
      }
    });
  }
  ContextPadProvider.$inject = ['eventBus', 'contextPad', 'modeling', 'elementFactory', 'connect', 'create', 'rules', 'popupMenu', 'canvas', 'translate', 'config.contextPad', 'injector'];
  ContextPadProvider.prototype.getContextPadEntries = function (element) {
    var modeling = this._modeling,
      elementFactory = this._elementFactory,
      connect = this._connect,
      create = this._create,
      popupMenu = this._popupMenu,
      canvas = this._canvas,
      contextPad = this._contextPad,
      rules = this._rules,
      translate = this._translate,
      autoPlace = this._autoPlace;
    var actions = {};
    if (element.type === 'label') {
      return actions;
    }
    var businessObject = element.businessObject;
    function startConnect(event, element, autoActivate) {
      connect.start(event, element, autoActivate);
    }
    function removeElement(e) {
      modeling.removeElements([element]);
    }
    function getReplaceMenuPosition(element) {
      var Y_OFFSET = 5;
      var diagramContainer = canvas.getContainer(),
        pad = contextPad.getPad(element).html;
      var diagramRect = diagramContainer.getBoundingClientRect(),
        padRect = pad.getBoundingClientRect();
      var top = padRect.top - diagramRect.top;
      var left = padRect.left - diagramRect.left;
      var pos = {
        x: left,
        y: top + padRect.height + Y_OFFSET
      };
      return pos;
    }

    /**
    * Create an append action
    *
    * @param {string} type
    * @param {string} className
    * @param {string} [title]
    * @param {Object} [options]
    *
    * @return {Object} descriptor
    */
    function appendAction(type, className, title, options) {
      if (typeof title !== 'string') {
        options = title;
        title = translate('Append {type}', {
          type: type.replace(/^dmn:/, '')
        });
      }
      function appendStart(event, element) {
        var shape = elementFactory.createShape(assign$4({
          type: type
        }, options));
        create.start(event, shape, {
          source: element,
          hints: {
            connectionTarget: element
          }
        });
      }
      var append = autoPlace ? function (event, element) {
        var shape = elementFactory.createShape(assign$4({
          type: type
        }, options));
        autoPlace.append(element, shape, {
          connectionTarget: element
        });
      } : appendStart;
      return {
        group: 'model',
        className: className,
        title: title,
        action: {
          dragstart: appendStart,
          click: append
        }
      };
    }
    if (is(businessObject, 'dmn:Decision')) {
      assign$4(actions, {
        'append.decision': appendAction('dmn:Decision', 'dmn-icon-decision')
      });
    }
    if (isAny(businessObject, ['dmn:BusinessKnowledgeModel', 'dmn:Decision', 'dmn:KnowledgeSource'])) {
      assign$4(actions, {
        'append.knowledge-source': appendAction('dmn:KnowledgeSource', 'dmn-icon-knowledge-source')
      });
    }
    if (isAny(businessObject, ['dmn:BusinessKnowledgeModel', 'dmn:Decision'])) {
      assign$4(actions, {
        'append.business-knowledge-model': appendAction('dmn:BusinessKnowledgeModel', 'dmn-icon-business-knowledge')
      });
    }
    if (isAny(businessObject, ['dmn:Decision', 'dmn:KnowledgeSource'])) {
      assign$4(actions, {
        'append.input-data': appendAction('dmn:InputData', 'dmn-icon-input-data')
      });
    }
    if (is(businessObject, 'dmn:DRGElement')) {
      assign$4(actions, {
        'append.text-annotation': appendAction('dmn:TextAnnotation', 'dmn-icon-text-annotation'),
        'connect': {
          group: 'connect',
          className: 'dmn-icon-connection-multi',
          title: translate('Connect using Information/Knowledge' + '/Authority Requirement or Association'),
          action: {
            click: startConnect,
            dragstart: startConnect
          }
        }
      });
    }
    if (is(businessObject, 'dmn:TextAnnotation')) {
      assign$4(actions, {
        'connect': {
          group: 'connect',
          className: 'dmn-icon-connection-multi',
          title: translate('Connect using association'),
          action: {
            click: startConnect,
            dragstart: startConnect
          }
        }
      });
    }
    if (!popupMenu.isEmpty(element, 'dmn-replace')) {
      // Replace menu entry
      assign$4(actions, {
        'replace': {
          group: 'edit',
          className: 'dmn-icon-screw-wrench',
          title: translate('Change type'),
          action: {
            click: function click(event, element) {
              var position = assign$4(getReplaceMenuPosition(element), {
                cursor: {
                  x: event.x,
                  y: event.y
                }
              });
              popupMenu.open(element, 'dmn-replace', position);
            }
          }
        }
      });
    }

    // delete element entry, only show if allowed by rules
    var deleteAllowed = rules.allowed('elements.delete', {
      elements: [element]
    });
    if (isArray$6(deleteAllowed)) {
      // was the element returned as a deletion candidate?
      deleteAllowed = deleteAllowed[0] === element;
    }
    if (deleteAllowed) {
      assign$4(actions, {
        'delete': {
          group: 'edit',
          className: 'dmn-icon-trash',
          title: translate('Remove'),
          action: {
            click: removeElement
          }
        }
      });
    }
    return actions;
  };

  var ContextPadModule = {
    __depends__: [TranslateModule, DiagramContextPad, SelectionModule, DiagramConnect, DiagramCreate, PopupMenu],
    __init__: ['contextPadProvider'],
    contextPadProvider: ['type', ContextPadProvider]
  };

  var MARKER_CONNECTION_PREVIEW = 'djs-connection-preview';

  /**
   * Draws connection preview. Optionally, this can use layouter and connection docking to draw
   * better looking previews.
   *
   * @param {didi.Injector} injector
   * @param {Canvas} canvas
   * @param {GraphicsFactory} graphicsFactory
   * @param {ElementFactory} elementFactory
   */
  function ConnectionPreview(injector, canvas, graphicsFactory, elementFactory) {
    this._canvas = canvas;
    this._graphicsFactory = graphicsFactory;
    this._elementFactory = elementFactory;

    // optional components
    this._connectionDocking = injector.get('connectionDocking', false);
    this._layouter = injector.get('layouter', false);
  }
  ConnectionPreview.$inject = ['injector', 'canvas', 'graphicsFactory', 'elementFactory'];

  /**
   * Draw connection preview.
   *
   * Provide at least one of <source, connectionStart> and <target, connectionEnd> to create a preview.
   * In the clean up stage, call `connectionPreview#cleanUp` with the context to remove preview.
   *
   * @param {Object} context
   * @param {Object|boolean} canConnect
   * @param {Object} hints
   * @param {djs.model.shape} [hints.source] source element
   * @param {djs.model.shape} [hints.target] target element
   * @param {Point} [hints.connectionStart] connection preview start
   * @param {Point} [hints.connectionEnd] connection preview end
   * @param {Array<Point>} [hints.waypoints] provided waypoints for preview
   * @param {boolean} [hints.noLayout] true if preview should not be laid out
   * @param {boolean} [hints.noCropping] true if preview should not be cropped
   * @param {boolean} [hints.noNoop] true if simple connection should not be drawn
   */
  ConnectionPreview.prototype.drawPreview = function (context, canConnect, hints) {
    hints = hints || {};
    var connectionPreviewGfx = context.connectionPreviewGfx,
      getConnection = context.getConnection,
      source = hints.source,
      target = hints.target,
      waypoints = hints.waypoints,
      connectionStart = hints.connectionStart,
      connectionEnd = hints.connectionEnd,
      noLayout = hints.noLayout,
      noCropping = hints.noCropping,
      noNoop = hints.noNoop,
      connection;
    var self = this;
    if (!connectionPreviewGfx) {
      connectionPreviewGfx = context.connectionPreviewGfx = this.createConnectionPreviewGfx();
    }
    clear(connectionPreviewGfx);
    if (!getConnection) {
      getConnection = context.getConnection = cacheReturnValues(function (canConnect, source, target) {
        return self.getConnection(canConnect, source, target);
      });
    }
    if (canConnect) {
      connection = getConnection(canConnect, source, target);
    }
    if (!connection) {
      !noNoop && this.drawNoopPreview(connectionPreviewGfx, hints);
      return;
    }
    connection.waypoints = waypoints || [];

    // optional layout
    if (this._layouter && !noLayout) {
      connection.waypoints = this._layouter.layoutConnection(connection, {
        source: source,
        target: target,
        connectionStart: connectionStart,
        connectionEnd: connectionEnd,
        waypoints: hints.waypoints || connection.waypoints
      });
    }

    // fallback if no waypoints were provided nor created with layouter
    if (!connection.waypoints || !connection.waypoints.length) {
      connection.waypoints = [source ? getMid(source) : connectionStart, target ? getMid(target) : connectionEnd];
    }

    // optional cropping
    if (this._connectionDocking && (source || target) && !noCropping) {
      connection.waypoints = this._connectionDocking.getCroppedWaypoints(connection, source, target);
    }
    this._graphicsFactory.drawConnection(connectionPreviewGfx, connection);
  };

  /**
   * Draw simple connection between source and target or provided points.
   *
   * @param {SVGElement} connectionPreviewGfx container for the connection
   * @param {Object} hints
   * @param {djs.model.shape} [hints.source] source element
   * @param {djs.model.shape} [hints.target] target element
   * @param {Point} [hints.connectionStart] required if source is not provided
   * @param {Point} [hints.connectionEnd] required if target is not provided
   */
  ConnectionPreview.prototype.drawNoopPreview = function (connectionPreviewGfx, hints) {
    var source = hints.source,
      target = hints.target,
      start = hints.connectionStart || getMid(source),
      end = hints.connectionEnd || getMid(target);
    var waypoints = this.cropWaypoints(start, end, source, target);
    var connection = this.createNoopConnection(waypoints[0], waypoints[1]);
    append(connectionPreviewGfx, connection);
  };

  /**
   * Return cropped waypoints.
   *
   * @param {Point} start
   * @param {Point} end
   * @param {djs.model.shape} source
   * @param {djs.model.shape} target
   *
   * @returns {Array}
   */
  ConnectionPreview.prototype.cropWaypoints = function (start, end, source, target) {
    var graphicsFactory = this._graphicsFactory,
      sourcePath = source && graphicsFactory.getShapePath(source),
      targetPath = target && graphicsFactory.getShapePath(target),
      connectionPath = graphicsFactory.getConnectionPath({
        waypoints: [start, end]
      });
    start = source && getElementLineIntersection(sourcePath, connectionPath, true) || start;
    end = target && getElementLineIntersection(targetPath, connectionPath, false) || end;
    return [start, end];
  };

  /**
   * Remove connection preview container if it exists.
   *
   * @param {Object} [context]
   * @param {SVGElement} [context.connectionPreviewGfx] preview container
   */
  ConnectionPreview.prototype.cleanUp = function (context) {
    if (context && context.connectionPreviewGfx) {
      remove$2(context.connectionPreviewGfx);
    }
  };

  /**
   * Get connection that connects source and target.
   *
   * @param {Object|boolean} canConnect
   *
   * @returns {djs.model.connection}
   */
  ConnectionPreview.prototype.getConnection = function (canConnect) {
    var attrs = ensureConnectionAttrs(canConnect);
    return this._elementFactory.createConnection(attrs);
  };

  /**
   * Add and return preview graphics.
   *
   * @returns {SVGElement}
   */
  ConnectionPreview.prototype.createConnectionPreviewGfx = function () {
    var gfx = create$2('g');
    attr(gfx, {
      pointerEvents: 'none'
    });
    classes(gfx).add(MARKER_CONNECTION_PREVIEW);
    append(this._canvas.getActiveLayer(), gfx);
    return gfx;
  };

  /**
   * Create and return simple connection.
   *
   * @param {Point} start
   * @param {Point} end
   *
   * @returns {SVGElement}
   */
  ConnectionPreview.prototype.createNoopConnection = function (start, end) {
    var connection = create$2('polyline');
    attr(connection, {
      'stroke': '#333',
      'strokeDasharray': [1],
      'strokeWidth': 2,
      'pointer-events': 'none'
    });
    attr(connection, {
      'points': [start.x, start.y, end.x, end.y]
    });
    return connection;
  };

  // helpers //////////

  /**
   * Returns function that returns cached return values referenced by stringified first argument.
   *
   * @param {Function} fn
   *
   * @return {Function}
   */
  function cacheReturnValues(fn) {
    var returnValues = {};

    /**
     * Return cached return value referenced by stringified first argument.
     *
     * @returns {*}
     */
    return function (firstArgument) {
      var key = JSON.stringify(firstArgument);
      var returnValue = returnValues[key];
      if (!returnValue) {
        returnValue = returnValues[key] = fn.apply(null, arguments);
      }
      return returnValue;
    };
  }

  /**
   * Ensure connection attributes is object.
   *
   * @param {Object|boolean} canConnect
   *
   * @returns {Object}
   */
  function ensureConnectionAttrs(canConnect) {
    if (isObject$1(canConnect)) {
      return canConnect;
    } else {
      return {};
    }
  }

  var ConnectPreviewModule = {
    __init__: ['connectionPreview'],
    connectionPreview: ['type', ConnectionPreview]
  };

  const SPACE_REGEX = /\s/;

  // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
  const QNAME_REGEX = /^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;

  // for ID validation as per BPMN Schema (QName - Namespace)
  const ID_REGEX = /^[a-z_][\w-.]*$/i;
  const PLACEHOLDER_REGEX = /\$\{([^}]*)\}/g;

  /**
   * Validates an ID.
   *
   * @param {ModdleElement} businessObject
   * @param {string} id
   *
   * @return {string} error message
   */
  function validateId(businessObject, id) {
    const assigned = businessObject.$model.ids.assigned(id);
    const idExists = assigned && assigned !== businessObject;
    if (!id) {
      return 'Element must have ID.';
    }
    if (idExists) {
      return 'Element must have unique ID.';
    }
    return validateIdFormat(id);
  }
  function validateIdFormat(id) {
    id = stripPlaceholders(id);
    if (containsSpace(id)) {
      return 'Id must not contain spaces.';
    }
    if (!ID_REGEX.test(id)) {
      if (QNAME_REGEX.test(id)) {
        return 'Id must not contain prefix.';
      }
      return 'Id must be a valid QName.';
    }
  }
  function containsSpace(value) {
    return SPACE_REGEX.test(value);
  }
  function stripPlaceholders(id) {
    // replace expression e.g. ${VERSION_TAG}
    // use only the content between ${}
    // for the REGEX check
    return id.replace(PLACEHOLDER_REGEX, '$1');
  }

  var DEBOUNCE_DELAY = 300;
  function DefinitionIdEdit(eventBus, modeling, canvas, definitionPropertiesView, translate) {
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._canvas = canvas;
    this._definitionPropertiesView = definitionPropertiesView;
    this._translate = translate;
    eventBus.on('definitionIdView.create', function (event) {
      this._container = event.html;
      var nameElement = query('.dmn-definitions-name', this._container),
        idElement = query('.dmn-definitions-id', this._container);
      this._setup(nameElement, 'name');
      this._setup(idElement, 'id');
    }, this);
  }
  DefinitionIdEdit.$inject = ['eventBus', 'modeling', 'canvas', 'definitionPropertiesView', 'translate'];
  DefinitionIdEdit.prototype.update = function (type, newValue) {
    var element = this._canvas.getRootElement();
    var newProperties = {};
    newProperties[type] = newValue;
    if (type === 'id') {
      var errorMessage = validateId(getBusinessObject(element), newValue);
      if (errorMessage) {
        this._addErrorMessage(errorMessage);
        return;
      }
      this._clearErrorMessage();
    }
    this._modeling.updateProperties(element, newProperties);
  };
  DefinitionIdEdit.prototype._setup = function (node, type) {
    var self = this;
    node.setAttribute('contenteditable', true);
    node.addEventListener('input', debounce(function (evt) {
      var value = evt.target.value || evt.target.textContent;
      self.update(type, value.trim());
    }, DEBOUNCE_DELAY));
    node.addEventListener('keydown', function (evt) {
      if (evt.keyCode === 13) {
        node.blur();
        window.getSelection().removeAllRanges();
      }
    });
    node.addEventListener('blur', function () {
      self._clearErrorMessage();
      self._definitionPropertiesView.update();
    });
  };
  DefinitionIdEdit.prototype._addErrorMessage = function (errorMessage) {
    const errorHTML = '<span class="dmn-definitions-error-message">' + this._translate(errorMessage) + '</span>';
    var idElement = query('.dmn-definitions-id', this._container);

    // clear previous error message
    this._clearErrorMessage();

    // add current error message
    classes$1(idElement).add('dmn-definitions-error');
    idElement.parentElement.appendChild(domify$1(errorHTML));
  };
  DefinitionIdEdit.prototype._clearErrorMessage = function () {
    var idElement = query('.dmn-definitions-id', this._container);
    if (classes$1(idElement).has('dmn-definitions-error')) {
      classes$1(idElement).remove('dmn-definitions-error');
      const errorLabel = query('.dmn-definitions-error-message', this._container);
      idElement.parentNode.removeChild(errorLabel);
    }
  };

  var DefinitionPropertiesModule = {
    __depends__: [DefinitionPropertiesViewer],
    __init__: ['definitionPropertiesEdit', 'definitionPropertiesPaletteAdapter'],
    definitionPropertiesEdit: ['type', DefinitionIdEdit],
    definitionPropertiesPaletteAdapter: ['type', PaletteAdapter]
  };

  var AXIS_DIMENSIONS = {
    horizontal: ['x', 'width'],
    vertical: ['y', 'height']
  };
  var THRESHOLD = 5;

  /**
   * Groups and filters elements and then trigger even distribution.
   */
  function DistributeElements$1(modeling, rules) {
    this._modeling = modeling;
    this._filters = [];
    this.registerFilter(function (elements) {
      var allowed = rules.allowed('elements.distribute', {
        elements: elements
      });
      if (isArray$6(allowed)) {
        return allowed;
      }
      return allowed ? elements : [];
    });
  }
  DistributeElements$1.$inject = ['modeling', 'rules'];

  /**
   * Registers filter functions that allow external parties to filter
   * out certain elements.
   *
   * @param  {Function} filterFn
   */
  DistributeElements$1.prototype.registerFilter = function (filterFn) {
    if (typeof filterFn !== 'function') {
      throw new Error('the filter has to be a function');
    }
    this._filters.push(filterFn);
  };

  /**
   * Distributes the elements with a given orientation
   *
   * @param  {Array} elements
   * @param  {string} orientation
   */
  DistributeElements$1.prototype.trigger = function (elements, orientation) {
    var modeling = this._modeling;
    var groups, distributableElements;
    if (elements.length < 3) {
      return;
    }
    this._setOrientation(orientation);
    distributableElements = this._filterElements(elements);
    groups = this._createGroups(distributableElements);

    // nothing to distribute
    if (groups.length <= 2) {
      return;
    }
    modeling.distributeElements(groups, this._axis, this._dimension);
    return groups;
  };

  /**
   * Filters the elements with provided filters by external parties
   *
   * @param  {Array[Elements]} elements
   *
   * @return {Array[Elements]}
   */
  DistributeElements$1.prototype._filterElements = function (elements) {
    var filters = this._filters,
      axis = this._axis,
      dimension = this._dimension,
      distributableElements = [].concat(elements);
    if (!filters.length) {
      return elements;
    }
    forEach$3(filters, function (filterFn) {
      distributableElements = filterFn(distributableElements, axis, dimension);
    });
    return distributableElements;
  };

  /**
   * Create range (min, max) groups. Also tries to group elements
   * together that share the same range.
   *
   * @example
   * 	var distributableElements = [
   * 		{
   * 			range: {
   * 				min: 100,
   * 				max: 200
   * 			},
   * 			elements: [ { id: 'shape1', .. }]
   * 		}
   * 	]
   *
   * @param  {Array} elements
   *
   * @return {Array[Objects]}
   */
  DistributeElements$1.prototype._createGroups = function (elements) {
    var rangeGroups = [],
      self = this,
      axis = this._axis,
      dimension = this._dimension;
    if (!axis) {
      throw new Error('must have a defined "axis" and "dimension"');
    }

    // sort by 'left->right' or 'top->bottom'
    var sortedElements = sortBy(elements, axis);
    forEach$3(sortedElements, function (element, idx) {
      var elementRange = self._findRange(element, axis, dimension),
        range;
      var previous = rangeGroups[rangeGroups.length - 1];
      if (previous && self._hasIntersection(previous.range, elementRange)) {
        rangeGroups[rangeGroups.length - 1].elements.push(element);
      } else {
        range = {
          range: elementRange,
          elements: [element]
        };
        rangeGroups.push(range);
      }
    });
    return rangeGroups;
  };

  /**
   * Maps a direction to the according axis and dimension
   *
   * @param  {string} direction 'horizontal' or 'vertical'
   */
  DistributeElements$1.prototype._setOrientation = function (direction) {
    var orientation = AXIS_DIMENSIONS[direction];
    this._axis = orientation[0];
    this._dimension = orientation[1];
  };

  /**
   * Checks if the two ranges intercept each other
   *
   * @param  {Object} rangeA {min, max}
   * @param  {Object} rangeB {min, max}
   *
   * @return {boolean}
   */
  DistributeElements$1.prototype._hasIntersection = function (rangeA, rangeB) {
    return Math.max(rangeA.min, rangeA.max) >= Math.min(rangeB.min, rangeB.max) && Math.min(rangeA.min, rangeA.max) <= Math.max(rangeB.min, rangeB.max);
  };

  /**
   * Returns the min and max values for an element
   *
   * @param  {Bounds} element
   * @param  {string} axis
   * @param  {string} dimension
   *
   * @return {{ min: number, max: number }}
   */
  DistributeElements$1.prototype._findRange = function (element) {
    var axis = element[this._axis],
      dimension = element[this._dimension];
    return {
      min: axis + THRESHOLD,
      max: axis + dimension - THRESHOLD
    };
  };

  var DistributeElementsModule$1 = {
    __init__: ['distributeElements'],
    distributeElements: ['type', DistributeElements$1]
  };

  /**
   * Registers element exclude filters for elements that
   * currently do not support distribution.
   */
  function DrdDistributeElements(distributeElements) {
    distributeElements.registerFilter(function (elements) {
      return filter$2(elements, function (element) {
        var cannotDistribute = isAny(element, ['dmn:AuthorityRequirement', 'dmn:InformationRequirement', 'dmn:KnowledgeRequirement', 'dmn:Association', 'dmn:TextAnnotation']);
        return !(element.labelTarget || cannotDistribute);
      });
    });
  }
  DrdDistributeElements.$inject = ['distributeElements'];

  var DistributeElementsModule = {
    __depends__: [DistributeElementsModule$1],
    __init__: ['drdDistributeElements'],
    drdDistributeElements: ['type', DrdDistributeElements]
  };

  var NOT_REGISTERED_ERROR$2 = 'is not a registered action',
    IS_REGISTERED_ERROR$2 = 'is already registered';

  /**
   * An interface that provides access to modeling actions by decoupling
   * the one who requests the action to be triggered and the trigger itself.
   *
   * It's possible to add new actions by registering them with ´registerAction´
   * and likewise unregister existing ones with ´unregisterAction´.
   *
   *
   * ## Life-Cycle and configuration
   *
   * The editor actions will wait for diagram initialization before
   * registering default actions _and_ firing an `editorActions.init` event.
   *
   * Interested parties may listen to the `editorActions.init` event with
   * low priority to check, which actions got registered. Other components
   * may use the event to register their own actions via `registerAction`.
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function EditorActions$3(eventBus, injector) {
    // initialize actions
    this._actions = {};
    var self = this;
    eventBus.on('diagram.init', function () {
      // all diagram modules got loaded; check which ones
      // are available and register the respective default actions
      self._registerDefaultActions(injector);

      // ask interested parties to register available editor
      // actions on diagram initialization
      eventBus.fire('editorActions.init', {
        editorActions: self
      });
    });
  }
  EditorActions$3.$inject = ['eventBus', 'injector'];

  /**
   * Register default actions.
   *
   * @param {Injector} injector
   */
  EditorActions$3.prototype._registerDefaultActions = function (injector) {
    // (1) retrieve optional components to integrate with

    var commandStack = injector.get('commandStack', false);
    var modeling = injector.get('modeling', false);
    var selection = injector.get('selection', false);
    var zoomScroll = injector.get('zoomScroll', false);
    var copyPaste = injector.get('copyPaste', false);
    var canvas = injector.get('canvas', false);
    var rules = injector.get('rules', false);
    var keyboardMove = injector.get('keyboardMove', false);
    var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);

    // (2) check components and register actions

    if (commandStack) {
      this.register('undo', function () {
        commandStack.undo();
      });
      this.register('redo', function () {
        commandStack.redo();
      });
    }
    if (copyPaste && selection) {
      this.register('copy', function () {
        var selectedElements = selection.get();
        if (selectedElements.length) {
          return copyPaste.copy(selectedElements);
        }
      });
    }
    if (copyPaste) {
      this.register('paste', function () {
        copyPaste.paste();
      });
    }
    if (zoomScroll) {
      this.register('stepZoom', function (opts) {
        zoomScroll.stepZoom(opts.value);
      });
    }
    if (canvas) {
      this.register('zoom', function (opts) {
        canvas.zoom(opts.value);
      });
    }
    if (modeling && selection && rules) {
      this.register('removeSelection', function () {
        var selectedElements = selection.get();
        if (!selectedElements.length) {
          return;
        }
        var allowed = rules.allowed('elements.delete', {
            elements: selectedElements
          }),
          removableElements;
        if (allowed === false) {
          return;
        } else if (isArray$6(allowed)) {
          removableElements = allowed;
        } else {
          removableElements = selectedElements;
        }
        if (removableElements.length) {
          modeling.removeElements(removableElements.slice());
        }
      });
    }
    if (keyboardMove) {
      this.register('moveCanvas', function (opts) {
        keyboardMove.moveCanvas(opts);
      });
    }
    if (keyboardMoveSelection) {
      this.register('moveSelection', function (opts) {
        keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);
      });
    }
  };

  /**
   * Triggers a registered action
   *
   * @param  {string} action
   * @param  {Object} opts
   *
   * @return {Unknown} Returns what the registered listener returns
   */
  EditorActions$3.prototype.trigger = function (action, opts) {
    if (!this._actions[action]) {
      throw error$2(action, NOT_REGISTERED_ERROR$2);
    }
    return this._actions[action](opts);
  };

  /**
   * Registers a collections of actions.
   * The key of the object will be the name of the action.
   *
   * @example
   * ´´´
   * var actions = {
   *   spaceTool: function() {
   *     spaceTool.activateSelection();
   *   },
   *   lassoTool: function() {
   *     lassoTool.activateSelection();
   *   }
   * ];
   *
   * editorActions.register(actions);
   *
   * editorActions.isRegistered('spaceTool'); // true
   * ´´´
   *
   * @param  {Object} actions
   */
  EditorActions$3.prototype.register = function (actions, listener) {
    var self = this;
    if (typeof actions === 'string') {
      return this._registerAction(actions, listener);
    }
    forEach$3(actions, function (listener, action) {
      self._registerAction(action, listener);
    });
  };

  /**
   * Registers a listener to an action key
   *
   * @param  {string} action
   * @param  {Function} listener
   */
  EditorActions$3.prototype._registerAction = function (action, listener) {
    if (this.isRegistered(action)) {
      throw error$2(action, IS_REGISTERED_ERROR$2);
    }
    this._actions[action] = listener;
  };

  /**
   * Unregister an existing action
   *
   * @param {string} action
   */
  EditorActions$3.prototype.unregister = function (action) {
    if (!this.isRegistered(action)) {
      throw error$2(action, NOT_REGISTERED_ERROR$2);
    }
    this._actions[action] = undefined;
  };

  /**
   * Returns the number of actions that are currently registered
   *
   * @return {number}
   */
  EditorActions$3.prototype.getActions = function () {
    return Object.keys(this._actions);
  };

  /**
   * Checks wether the given action is registered
   *
   * @param {string} action
   *
   * @return {boolean}
   */
  EditorActions$3.prototype.isRegistered = function (action) {
    return !!this._actions[action];
  };
  function error$2(action, message) {
    return new Error(action + ' ' + message);
  }

  var EditorActionsModule$1 = {
    __init__: ['editorActions'],
    editorActions: ['type', EditorActions$3]
  };

  function DrdEditorActions(injector) {
    injector.invoke(EditorActions$3, this);
  }
  e$3(DrdEditorActions, EditorActions$3);
  DrdEditorActions.$inject = ['injector'];

  /**
   * Register default actions.
   *
   * @param {Injector} injector
   */
  DrdEditorActions.prototype._registerDefaultActions = function (injector) {
    // (0) invoke super method

    EditorActions$3.prototype._registerDefaultActions.call(this, injector);

    // (1) retrieve optional components to integrate with

    var canvas = injector.get('canvas', false);
    var elementRegistry = injector.get('elementRegistry', false);
    var selection = injector.get('selection', false);
    var lassoTool = injector.get('lassoTool', false);
    var handTool = injector.get('handTool', false);
    var directEditing = injector.get('directEditing', false);
    var distributeElements = injector.get('distributeElements', false);
    var alignElements = injector.get('alignElements', false);

    // (2) check components and register actions

    if (canvas && elementRegistry && selection) {
      this._registerAction('selectElements', function () {
        // select all elements except for the invisible
        // root element
        var rootElement = canvas.getRootElement();
        var elements = elementRegistry.filter(function (element) {
          return element !== rootElement;
        });
        selection.select(elements);
        return elements;
      });
    }
    if (selection && distributeElements) {
      this._registerAction('distributeElements', function (opts) {
        var currentSelection = selection.get(),
          type = opts.type;
        if (currentSelection.length > 2) {
          distributeElements.trigger(currentSelection, type);
        }
      });
    }
    if (selection && alignElements) {
      this._registerAction('alignElements', function (opts) {
        var currentSelection = selection.get(),
          type = opts.type;
        if (currentSelection.length > 1) {
          alignElements.trigger(currentSelection, type);
        }
      });
    }
    if (lassoTool) {
      this._registerAction('lassoTool', function () {
        lassoTool.toggle();
      });
    }
    if (handTool) {
      this._registerAction('handTool', function () {
        handTool.toggle();
      });
    }
    if (selection && directEditing) {
      this._registerAction('directEditing', function () {
        var currentSelection = selection.get();
        if (currentSelection.length) {
          directEditing.activate(currentSelection[0]);
        }
      });
    }
  };

  var EditorActionsModule = {
    __depends__: [EditorActionsModule$1],
    editorActions: ['type', DrdEditorActions]
  };

  /**
   * Does the definitions element contain graphical information?
   *
   * @param  {ModdleElement} definitions
   *
   * @return {boolean} true, if the definitions contains graphical information
   */
  function containsDi(definitions) {
    return definitions.dmnDI && definitions.dmnDI.diagrams && definitions.dmnDI.diagrams[0];
  }

  /**
   * Generates missing DI on import.
   *
   * @param {DrdFactory} drdFactory
   * @param {ElementFactory} elementFactory
   * @param {EventBus} eventBus
   */
  function DiGenerator(drdFactory, elementFactory, eventBus, drdUpdater) {
    function createDi(definitions) {
      // retrieve or create dmnDI
      var dmnDI = definitions.dmnDI;
      if (!dmnDI) {
        dmnDI = drdFactory.create('dmndi:DMNDI');
        definitions.set('dmnDI', dmnDI);
      }
      var diagram = drdFactory.create('dmndi:DMNDiagram');
      dmnDI.set('diagrams', [diagram]);
      var index = 0;
      forEach$3(definitions.get('drgElement'), function (drgElement) {
        // generate DI for decisions only
        if (!is(drgElement, 'dmn:Decision')) {
          return;
        }
        var dimensions = elementFactory._getDefaultSize(drgElement);
        var di = drdFactory.createDiShape(drgElement, {
          x: 150 + index * 30,
          y: 150 + index * 30,
          width: dimensions.width,
          height: dimensions.height
        });
        drdUpdater.updateDiParent(di, diagram);
        index++;
      });
    }
    eventBus.on('import.start', _ref => {
      let definitions = _ref.definitions;
      if (!containsDi(definitions)) {
        createDi(definitions);
      }
    });
  }
  DiGenerator.$inject = ['drdFactory', 'elementFactory', 'eventBus', 'drdUpdater'];

  var GenerateDiModule = {
    __init__: ['diGenerator'],
    diGenerator: ['type', DiGenerator]
  };

  var SPACING = 10;
  function quantize$1(value, quantum, fn) {
    if (!fn) {
      fn = 'round';
    }
    return Math[fn](value / quantum) * quantum;
  }

  var LOWER_PRIORITY$1 = 1200;
  var LOW_PRIORITY$g = 800;

  /**
   * Basic grid snapping that covers connecting, creating, moving, resizing shapes, moving bendpoints
   * and connection segments.
   */
  function GridSnapping(elementRegistry, eventBus, config) {
    var active = !config || config.active !== false;
    this._eventBus = eventBus;
    var self = this;
    eventBus.on('diagram.init', LOW_PRIORITY$g, function () {
      self.setActive(active);
    });
    eventBus.on(['create.move', 'create.end', 'bendpoint.move.move', 'bendpoint.move.end', 'connect.move', 'connect.end', 'connectionSegment.move.move', 'connectionSegment.move.end', 'resize.move', 'resize.end', 'shape.move.move', 'shape.move.end'], LOWER_PRIORITY$1, function (event) {
      var originalEvent = event.originalEvent;
      if (!self.active || originalEvent && isCmd$4(originalEvent)) {
        return;
      }
      var context = event.context,
        gridSnappingContext = context.gridSnappingContext;
      if (!gridSnappingContext) {
        gridSnappingContext = context.gridSnappingContext = {};
      }
      ['x', 'y'].forEach(function (axis) {
        var options = {};

        // allow snapping with offset
        var snapOffset = getSnapOffset(event, axis, elementRegistry);
        if (snapOffset) {
          options.offset = snapOffset;
        }

        // allow snapping with min and max
        var snapConstraints = getSnapConstraints(event, axis);
        if (snapConstraints) {
          assign$4(options, snapConstraints);
        }
        if (!isSnapped(event, axis)) {
          self.snapEvent(event, axis, options);
        }
      });
    });
  }

  /**
   * Snap an events x or y with optional min, max and offset.
   *
   * @param {Object} event
   * @param {string} axis
   * @param {number} [options.min]
   * @param {number} [options.max]
   * @param {number} [options.offset]
   */
  GridSnapping.prototype.snapEvent = function (event, axis, options) {
    var snappedValue = this.snapValue(event[axis], options);
    setSnapped(event, axis, snappedValue);
  };

  /**
   * Expose grid spacing for third parties (i.e. extensions).
   *
   * @return {number} spacing of grid dots
   */
  GridSnapping.prototype.getGridSpacing = function () {
    return SPACING;
  };

  /**
   * Snap value with optional min, max and offset.
   *
   * @param {number} value
   * @param {Object} options
   * @param {number} [options.min]
   * @param {number} [options.max]
   * @param {number} [options.offset]
   */
  GridSnapping.prototype.snapValue = function (value, options) {
    var offset = 0;
    if (options && options.offset) {
      offset = options.offset;
    }
    value += offset;
    value = quantize$1(value, SPACING);
    var min, max;
    if (options && options.min) {
      min = options.min;
      if (isNumber$3(min)) {
        min = quantize$1(min + offset, SPACING, 'ceil');
        value = Math.max(value, min);
      }
    }
    if (options && options.max) {
      max = options.max;
      if (isNumber$3(max)) {
        max = quantize$1(max + offset, SPACING, 'floor');
        value = Math.min(value, max);
      }
    }
    value -= offset;
    return value;
  };
  GridSnapping.prototype.isActive = function () {
    return this.active;
  };
  GridSnapping.prototype.setActive = function (active) {
    this.active = active;
    this._eventBus.fire('gridSnapping.toggle', {
      active: active
    });
  };
  GridSnapping.prototype.toggleActive = function () {
    this.setActive(!this.active);
  };
  GridSnapping.$inject = ['elementRegistry', 'eventBus', 'config.gridSnapping'];

  // helpers //////////

  /**
   * Get minimum and maximum snap constraints.
   * Constraints are cached.
   *
   * @param {Object} event
   * @param {Object} event.context
   * @param {string} axis
   *
   * @returns {boolean|Object}
   */
  function getSnapConstraints(event, axis) {
    var context = event.context,
      createConstraints = context.createConstraints,
      resizeConstraints = context.resizeConstraints || {},
      gridSnappingContext = context.gridSnappingContext,
      snapConstraints = gridSnappingContext.snapConstraints;

    // cache snap constraints
    if (snapConstraints && snapConstraints[axis]) {
      return snapConstraints[axis];
    }
    if (!snapConstraints) {
      snapConstraints = gridSnappingContext.snapConstraints = {};
    }
    if (!snapConstraints[axis]) {
      snapConstraints[axis] = {};
    }
    var direction = context.direction;

    // create
    if (createConstraints) {
      if (isHorizontal$1(axis)) {
        snapConstraints.x.min = createConstraints.left;
        snapConstraints.x.max = createConstraints.right;
      } else {
        snapConstraints.y.min = createConstraints.top;
        snapConstraints.y.max = createConstraints.bottom;
      }
    }

    // resize
    var minResizeConstraints = resizeConstraints.min,
      maxResizeConstraints = resizeConstraints.max;
    if (minResizeConstraints) {
      if (isHorizontal$1(axis)) {
        if (isWest(direction)) {
          snapConstraints.x.max = minResizeConstraints.left;
        } else {
          snapConstraints.x.min = minResizeConstraints.right;
        }
      } else {
        if (isNorth(direction)) {
          snapConstraints.y.max = minResizeConstraints.top;
        } else {
          snapConstraints.y.min = minResizeConstraints.bottom;
        }
      }
    }
    if (maxResizeConstraints) {
      if (isHorizontal$1(axis)) {
        if (isWest(direction)) {
          snapConstraints.x.min = maxResizeConstraints.left;
        } else {
          snapConstraints.x.max = maxResizeConstraints.right;
        }
      } else {
        if (isNorth(direction)) {
          snapConstraints.y.min = maxResizeConstraints.top;
        } else {
          snapConstraints.y.max = maxResizeConstraints.bottom;
        }
      }
    }
    return snapConstraints[axis];
  }

  /**
   * Get snap offset.
   * Offset is cached.
   *
   * @param {Object} event
   * @param {string} axis
   * @param {ElementRegistry} elementRegistry
   *
   * @returns {number}
   */
  function getSnapOffset(event, axis, elementRegistry) {
    var context = event.context,
      shape = event.shape,
      gridSnappingContext = context.gridSnappingContext,
      snapLocation = gridSnappingContext.snapLocation,
      snapOffset = gridSnappingContext.snapOffset;

    // cache snap offset
    if (snapOffset && isNumber$3(snapOffset[axis])) {
      return snapOffset[axis];
    }
    if (!snapOffset) {
      snapOffset = gridSnappingContext.snapOffset = {};
    }
    if (!isNumber$3(snapOffset[axis])) {
      snapOffset[axis] = 0;
    }
    if (!shape) {
      return snapOffset[axis];
    }
    if (!elementRegistry.get(shape.id)) {
      if (isHorizontal$1(axis)) {
        snapOffset[axis] += shape[axis] + shape.width / 2;
      } else {
        snapOffset[axis] += shape[axis] + shape.height / 2;
      }
    }
    if (!snapLocation) {
      return snapOffset[axis];
    }
    if (axis === 'x') {
      if (/left/.test(snapLocation)) {
        snapOffset[axis] -= shape.width / 2;
      } else if (/right/.test(snapLocation)) {
        snapOffset[axis] += shape.width / 2;
      }
    } else {
      if (/top/.test(snapLocation)) {
        snapOffset[axis] -= shape.height / 2;
      } else if (/bottom/.test(snapLocation)) {
        snapOffset[axis] += shape.height / 2;
      }
    }
    return snapOffset[axis];
  }
  function isHorizontal$1(axis) {
    return axis === 'x';
  }
  function isNorth(direction) {
    return direction.indexOf('n') !== -1;
  }
  function isWest(direction) {
    return direction.indexOf('w') !== -1;
  }

  var DEFAULT_PRIORITY$4 = 1000;

  /**
   * A utility that can be used to plug-in into the command execution for
   * extension and/or validation.
   *
   * @param {EventBus} eventBus
   *
   * @example
   *
   * import inherits from 'inherits-browser';
   *
   * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
   *
   * function CommandLogger(eventBus) {
   *   CommandInterceptor.call(this, eventBus);
   *
   *   this.preExecute(function(event) {
   *     console.log('command pre-execute', event);
   *   });
   * }
   *
   * inherits(CommandLogger, CommandInterceptor);
   *
   */
  function CommandInterceptor(eventBus) {
    this._eventBus = eventBus;
  }
  CommandInterceptor.$inject = ['eventBus'];
  function unwrapEvent(fn, that) {
    return function (event) {
      return fn.call(that || null, event.context, event.command, event);
    };
  }

  /**
   * Register an interceptor for a command execution
   *
   * @param {string|Array<string>} [events] list of commands to register on
   * @param {string} [hook] command hook, i.e. preExecute, executed to listen on
   * @param {number} [priority] the priority on which to hook into the execution
   * @param {Function} handlerFn interceptor to be invoked with (event)
   * @param {boolean} unwrap if true, unwrap the event and pass (context, command, event) to the
   *                          listener instead
   * @param {Object} [that] Pass context (`this`) to the handler function
   */
  CommandInterceptor.prototype.on = function (events, hook, priority, handlerFn, unwrap, that) {
    if (isFunction$2(hook) || isNumber$3(hook)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = hook;
      hook = null;
    }
    if (isFunction$2(priority)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = DEFAULT_PRIORITY$4;
    }
    if (isObject$1(unwrap)) {
      that = unwrap;
      unwrap = false;
    }
    if (!isFunction$2(handlerFn)) {
      throw new Error('handlerFn must be a function');
    }
    if (!isArray$6(events)) {
      events = [events];
    }
    var eventBus = this._eventBus;
    forEach$3(events, function (event) {
      // concat commandStack(.event)?(.hook)?
      var fullEvent = ['commandStack', event, hook].filter(function (e) {
        return e;
      }).join('.');
      eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
    });
  };
  var hooks = ['canExecute', 'preExecute', 'preExecuted', 'execute', 'executed', 'postExecute', 'postExecuted', 'revert', 'reverted'];

  /*
   * Install hook shortcuts
   *
   * This will generate the CommandInterceptor#(preExecute|...|reverted) methods
   * which will in term forward to CommandInterceptor#on.
   */
  forEach$3(hooks, function (hook) {
    /**
     * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}
     *
     * A named hook for plugging into the command execution
     *
     * @param {string|Array<string>} [events] list of commands to register on
     * @param {number} [priority] the priority on which to hook into the execution
     * @param {Function} handlerFn interceptor to be invoked with (event)
     * @param {boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the
     *                          listener instead
     * @param {Object} [that] Pass context (`this`) to the handler function
     */
    CommandInterceptor.prototype[hook] = function (events, priority, handlerFn, unwrap, that) {
      if (isFunction$2(events) || isNumber$3(events)) {
        that = unwrap;
        unwrap = handlerFn;
        handlerFn = priority;
        priority = events;
        events = null;
      }
      this.on(events, hook, priority, handlerFn, unwrap, that);
    };
  });

  /**
   * Integrates resizing with grid snapping.
   */
  function ResizeBehavior(eventBus, gridSnapping) {
    CommandInterceptor.call(this, eventBus);
    this._gridSnapping = gridSnapping;
    var self = this;
    this.preExecute('shape.resize', function (event) {
      var context = event.context,
        hints = context.hints || {},
        autoResize = hints.autoResize;
      if (!autoResize) {
        return;
      }
      var shape = context.shape,
        newBounds = context.newBounds;
      if (isString$4(autoResize)) {
        context.newBounds = self.snapComplex(newBounds, autoResize);
      } else {
        context.newBounds = self.snapSimple(shape, newBounds);
      }
    });
  }
  ResizeBehavior.$inject = ['eventBus', 'gridSnapping', 'modeling'];
  e$3(ResizeBehavior, CommandInterceptor);

  /**
   * Snap width and height in relation to center.
   *
   * @param {djs.model.shape} shape
   * @param {Bounds} newBounds
   *
   * @returns {Bounds} Snapped bounds.
   */
  ResizeBehavior.prototype.snapSimple = function (shape, newBounds) {
    var gridSnapping = this._gridSnapping;
    newBounds.width = gridSnapping.snapValue(newBounds.width, {
      min: newBounds.width
    });
    newBounds.height = gridSnapping.snapValue(newBounds.height, {
      min: newBounds.height
    });
    newBounds.x = shape.x + shape.width / 2 - newBounds.width / 2;
    newBounds.y = shape.y + shape.height / 2 - newBounds.height / 2;
    return newBounds;
  };

  /**
   * Snap x, y, width and height according to given directions.
   *
   * @param {Bounds} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @returns {Bounds} Snapped bounds.
   */
  ResizeBehavior.prototype.snapComplex = function (newBounds, directions) {
    if (/w|e/.test(directions)) {
      newBounds = this.snapHorizontally(newBounds, directions);
    }
    if (/n|s/.test(directions)) {
      newBounds = this.snapVertically(newBounds, directions);
    }
    return newBounds;
  };

  /**
   * Snap in one or both directions horizontally.
   *
   * @param {Bounds} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @returns {Bounds} Snapped bounds.
   */
  ResizeBehavior.prototype.snapHorizontally = function (newBounds, directions) {
    var gridSnapping = this._gridSnapping,
      west = /w/.test(directions),
      east = /e/.test(directions);
    var snappedNewBounds = {};
    snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {
      min: newBounds.width
    });
    if (east) {
      // handle <we>
      if (west) {
        snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {
          max: newBounds.x
        });
        snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {
          min: newBounds.x - snappedNewBounds.x
        });
      }

      // handle <e>
      else {
        newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;
      }
    }

    // assign snapped x and width
    assign$4(newBounds, snappedNewBounds);
    return newBounds;
  };

  /**
   * Snap in one or both directions vertically.
   *
   * @param {Bounds} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @returns {Bounds} Snapped bounds.
   */
  ResizeBehavior.prototype.snapVertically = function (newBounds, directions) {
    var gridSnapping = this._gridSnapping,
      north = /n/.test(directions),
      south = /s/.test(directions);
    var snappedNewBounds = {};
    snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {
      min: newBounds.height
    });
    if (north) {
      // handle <ns>
      if (south) {
        snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {
          max: newBounds.y
        });
        snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {
          min: newBounds.y - snappedNewBounds.y
        });
      }

      // handle <n>
      else {
        newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;
      }
    }

    // assign snapped y and height
    assign$4(newBounds, snappedNewBounds);
    return newBounds;
  };

  var HIGH_PRIORITY$7 = 2000;

  /**
   * Integrates space tool with grid snapping.
   */
  function SpaceToolBehavior(eventBus, gridSnapping) {
    eventBus.on(['spaceTool.move', 'spaceTool.end'], HIGH_PRIORITY$7, function (event) {
      var context = event.context;
      if (!context.initialized) {
        return;
      }
      var axis = context.axis;
      var snapped;
      if (axis === 'x') {
        // snap delta x to multiple of 10
        snapped = gridSnapping.snapValue(event.dx);
        event.x = event.x + snapped - event.dx;
        event.dx = snapped;
      } else {
        // snap delta y to multiple of 10
        snapped = gridSnapping.snapValue(event.dy);
        event.y = event.y + snapped - event.dy;
        event.dy = snapped;
      }
    });
  }
  SpaceToolBehavior.$inject = ['eventBus', 'gridSnapping'];

  var GridSnappingBehaviorModule = {
    __init__: ['gridSnappingResizeBehavior', 'gridSnappingSpaceToolBehavior'],
    gridSnappingResizeBehavior: ['type', ResizeBehavior],
    gridSnappingSpaceToolBehavior: ['type', SpaceToolBehavior]
  };

  var GridSnappingModule = {
    __depends__: [GridSnappingBehaviorModule],
    __init__: ['gridSnapping'],
    gridSnapping: ['type', GridSnapping]
  };

  var KEYDOWN_EVENT = 'keyboard.keydown',
    KEYUP_EVENT = 'keyboard.keyup';
  var HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';
  var DEFAULT_PRIORITY$3 = 1000;

  /**
   * A keyboard abstraction that may be activated and
   * deactivated by users at will, consuming global key events
   * and triggering diagram actions.
   *
   * For keys pressed down, keyboard fires `keyboard.keydown` event.
   * The event context contains one field which is `KeyboardEvent` event.
   *
   * The implementation fires the following key events that allow
   * other components to hook into key handling:
   *
   *  - keyboard.bind
   *  - keyboard.unbind
   *  - keyboard.init
   *  - keyboard.destroy
   *
   * All events contain one field which is node.
   *
   * A default binding for the keyboard may be specified via the
   * `keyboard.bindTo` configuration option.
   *
   * @param {Config} config
   * @param {EventBus} eventBus
   */
  function Keyboard$2(config, eventBus) {
    var self = this;
    this._config = config || {};
    this._eventBus = eventBus;
    this._keydownHandler = this._keydownHandler.bind(this);
    this._keyupHandler = this._keyupHandler.bind(this);

    // properly clean dom registrations
    eventBus.on('diagram.destroy', function () {
      self._fire('destroy');
      self.unbind();
    });
    eventBus.on('diagram.init', function () {
      self._fire('init');
    });
    eventBus.on('attach', function () {
      if (config && config.bindTo) {
        self.bind(config.bindTo);
      }
    });
    eventBus.on('detach', function () {
      self.unbind();
    });
  }
  Keyboard$2.$inject = ['config.keyboard', 'eventBus'];
  Keyboard$2.prototype._keydownHandler = function (event) {
    this._keyHandler(event, KEYDOWN_EVENT);
  };
  Keyboard$2.prototype._keyupHandler = function (event) {
    this._keyHandler(event, KEYUP_EVENT);
  };
  Keyboard$2.prototype._keyHandler = function (event, type) {
    var eventBusResult;
    if (this._isEventIgnored(event)) {
      return;
    }
    var context = {
      keyEvent: event
    };
    eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);
    if (eventBusResult) {
      event.preventDefault();
    }
  };
  Keyboard$2.prototype._isEventIgnored = function (event) {
    if (event.defaultPrevented) {
      return true;
    }
    return isInput(event.target) && this._isModifiedKeyIgnored(event);
  };
  Keyboard$2.prototype._isModifiedKeyIgnored = function (event) {
    if (!isCmd$4(event)) {
      return true;
    }
    var allowedModifiers = this._getAllowedModifiers(event.target);
    return allowedModifiers.indexOf(event.key) === -1;
  };
  Keyboard$2.prototype._getAllowedModifiers = function (element) {
    var modifierContainer = closest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);
    if (!modifierContainer || this._node && !this._node.contains(modifierContainer)) {
      return [];
    }
    return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');
  };
  Keyboard$2.prototype.bind = function (node) {
    // make sure that the keyboard is only bound once to the DOM
    this.unbind();
    this._node = node;

    // bind key events
    event.bind(node, 'keydown', this._keydownHandler);
    event.bind(node, 'keyup', this._keyupHandler);
    this._fire('bind');
  };
  Keyboard$2.prototype.getBinding = function () {
    return this._node;
  };
  Keyboard$2.prototype.unbind = function () {
    var node = this._node;
    if (node) {
      this._fire('unbind');

      // unbind key events
      event.unbind(node, 'keydown', this._keydownHandler);
      event.unbind(node, 'keyup', this._keyupHandler);
    }
    this._node = null;
  };
  Keyboard$2.prototype._fire = function (event) {
    this._eventBus.fire('keyboard.' + event, {
      node: this._node
    });
  };

  /**
   * Add a listener function that is notified with `KeyboardEvent` whenever
   * the keyboard is bound and the user presses a key. If no priority is
   * provided, the default value of 1000 is used.
   *
   * @param {number} [priority]
   * @param {Function} listener
   * @param {string} type
   */
  Keyboard$2.prototype.addListener = function (priority, listener, type) {
    if (isFunction$2(priority)) {
      type = listener;
      listener = priority;
      priority = DEFAULT_PRIORITY$3;
    }
    this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);
  };
  Keyboard$2.prototype.removeListener = function (listener, type) {
    this._eventBus.off(type || KEYDOWN_EVENT, listener);
  };
  Keyboard$2.prototype.hasModifier = hasModifier;
  Keyboard$2.prototype.isCmd = isCmd$4;
  Keyboard$2.prototype.isShift = isShift$2;
  Keyboard$2.prototype.isKey = isKey;

  // helpers ///////

  function isInput(target) {
    return target && (matches(target, 'input, textarea') || target.contentEditable === 'true');
  }

  var LOW_PRIORITY$f = 500;

  /**
   * Adds default keyboard bindings.
   *
   * This does not pull in any features will bind only actions that
   * have previously been registered against the editorActions component.
   *
   * @param {EventBus} eventBus
   * @param {Keyboard} keyboard
   */
  function KeyboardBindings(eventBus, keyboard) {
    var self = this;
    eventBus.on('editorActions.init', LOW_PRIORITY$f, function (event) {
      var editorActions = event.editorActions;
      self.registerBindings(keyboard, editorActions);
    });
  }
  KeyboardBindings.$inject = ['eventBus', 'keyboard'];

  /**
   * Register available keyboard bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  KeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {
    /**
     * Add keyboard binding if respective editor action
     * is registered.
     *
     * @param {string} action name
     * @param {Function} fn that implements the key binding
     */
    function addListener(action, fn) {
      if (editorActions.isRegistered(action)) {
        keyboard.addListener(fn);
      }
    }

    // undo
    // (CTRL|CMD) + Z
    addListener('undo', function (context) {
      var event = context.keyEvent;
      if (isUndo(event)) {
        editorActions.trigger('undo');
        return true;
      }
    });

    // redo
    // CTRL + Y
    // CMD + SHIFT + Z
    addListener('redo', function (context) {
      var event = context.keyEvent;
      if (isRedo(event)) {
        editorActions.trigger('redo');
        return true;
      }
    });

    // copy
    // CTRL/CMD + C
    addListener('copy', function (context) {
      var event = context.keyEvent;
      if (isCopy(event)) {
        editorActions.trigger('copy');
        return true;
      }
    });

    // paste
    // CTRL/CMD + V
    addListener('paste', function (context) {
      var event = context.keyEvent;
      if (isPaste(event)) {
        editorActions.trigger('paste');
        return true;
      }
    });

    // zoom in one step
    // CTRL/CMD + +
    addListener('stepZoom', function (context) {
      var event = context.keyEvent;

      // quirk: it has to be triggered by `=` as well to work on international keyboard layout
      // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754
      if (isKey(['+', 'Add', '='], event) && isCmd$4(event)) {
        editorActions.trigger('stepZoom', {
          value: 1
        });
        return true;
      }
    });

    // zoom out one step
    // CTRL + -
    addListener('stepZoom', function (context) {
      var event = context.keyEvent;
      if (isKey(['-', 'Subtract'], event) && isCmd$4(event)) {
        editorActions.trigger('stepZoom', {
          value: -1
        });
        return true;
      }
    });

    // zoom to the default level
    // CTRL + 0
    addListener('zoom', function (context) {
      var event = context.keyEvent;
      if (isKey('0', event) && isCmd$4(event)) {
        editorActions.trigger('zoom', {
          value: 1
        });
        return true;
      }
    });

    // delete selected element
    // DEL
    addListener('removeSelection', function (context) {
      var event = context.keyEvent;
      if (isKey(['Backspace', 'Delete', 'Del'], event)) {
        editorActions.trigger('removeSelection');
        return true;
      }
    });
  };

  var KeyboardModule$2 = {
    __init__: ['keyboard', 'keyboardBindings'],
    keyboard: ['type', Keyboard$2],
    keyboardBindings: ['type', KeyboardBindings]
  };

  /**
   * DRD specific key bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  function DrdKeyboardBindings(injector) {
    injector.invoke(KeyboardBindings, this);
  }
  e$3(DrdKeyboardBindings, KeyboardBindings);
  DrdKeyboardBindings.$inject = ['injector'];

  /**
   * Register available keyboard bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  DrdKeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {
    // inherit default bindings
    KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);

    /**
     * Add keyboard binding if respective editor action
     * is registered.
     *
     * @param {string} action name
     * @param {Function} fn that implements the key binding
     */
    function addListener(action, fn) {
      if (editorActions.isRegistered(action)) {
        keyboard.addListener(fn);
      }
    }

    // select all elements
    // CTRL + A
    addListener('selectElements', function (context) {
      var event = context.keyEvent;
      if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {
        editorActions.trigger('selectElements');
        return true;
      }
    });

    // activate lasso tool
    // L
    addListener('lassoTool', function (context) {
      var event = context.keyEvent;
      if (keyboard.hasModifier(event)) {
        return;
      }
      if (keyboard.isKey(['l', 'L'], event)) {
        editorActions.trigger('lassoTool');
        return true;
      }
    });

    // activate hand tool
    // H
    addListener('handTool', function (context) {
      var event = context.keyEvent;
      if (keyboard.hasModifier(event)) {
        return;
      }
      if (keyboard.isKey(['h', 'H'], event)) {
        editorActions.trigger('handTool');
        return true;
      }
    });

    // activate direct editing
    // E
    addListener('directEditing', function (context) {
      var event = context.keyEvent;
      if (keyboard.hasModifier(event)) {
        return;
      }
      if (keyboard.isKey(['e', 'E'], event)) {
        editorActions.trigger('directEditing');
        return true;
      }
    });
  };

  var KeyboardModule$1 = {
    __depends__: [KeyboardModule$2],
    __init__: ['keyboardBindings'],
    keyboardBindings: ['type', DrdKeyboardBindings]
  };

  var DEFAULT_CONFIG$1 = {
    moveSpeed: 50,
    moveSpeedAccelerated: 200
  };

  /**
   * A feature that allows users to move the canvas using the keyboard.
   *
   * @param {Object} config
   * @param {number} [config.moveSpeed=50]
   * @param {number} [config.moveSpeedAccelerated=200]
   * @param {Keyboard} keyboard
   * @param {Canvas} canvas
   */
  function KeyboardMove(config, keyboard, canvas) {
    var self = this;
    this._config = assign$4({}, DEFAULT_CONFIG$1, config || {});
    keyboard.addListener(arrowsListener);
    function arrowsListener(context) {
      var event = context.keyEvent,
        config = self._config;
      if (!keyboard.isCmd(event)) {
        return;
      }
      if (keyboard.isKey(['ArrowLeft', 'Left', 'ArrowUp', 'Up', 'ArrowDown', 'Down', 'ArrowRight', 'Right'], event)) {
        var speed = keyboard.isShift(event) ? config.moveSpeedAccelerated : config.moveSpeed;
        var direction;
        switch (event.key) {
          case 'ArrowLeft':
          case 'Left':
            direction = 'left';
            break;
          case 'ArrowUp':
          case 'Up':
            direction = 'up';
            break;
          case 'ArrowRight':
          case 'Right':
            direction = 'right';
            break;
          case 'ArrowDown':
          case 'Down':
            direction = 'down';
            break;
        }
        self.moveCanvas({
          speed: speed,
          direction: direction
        });
        return true;
      }
    }
    this.moveCanvas = function (opts) {
      var dx = 0,
        dy = 0,
        speed = opts.speed;
      var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);
      switch (opts.direction) {
        case 'left':
          // Left
          dx = actualSpeed;
          break;
        case 'up':
          // Up
          dy = actualSpeed;
          break;
        case 'right':
          // Right
          dx = -actualSpeed;
          break;
        case 'down':
          // Down
          dy = -actualSpeed;
          break;
      }
      canvas.scroll({
        dx: dx,
        dy: dy
      });
    };
  }
  KeyboardMove.$inject = ['config.keyboardMove', 'keyboard', 'canvas'];

  var KeyboardMoveModule = {
    __depends__: [KeyboardModule$2],
    __init__: ['keyboardMove'],
    keyboardMove: ['type', KeyboardMove]
  };

  var DEFAULT_CONFIG = {
    moveSpeed: 1,
    moveSpeedAccelerated: 10
  };
  var HIGHER_PRIORITY$4 = 1500;
  var LEFT$1 = 'left';
  var UP = 'up';
  var RIGHT$1 = 'right';
  var DOWN = 'down';
  var KEY_TO_DIRECTION = {
    ArrowLeft: LEFT$1,
    Left: LEFT$1,
    ArrowUp: UP,
    Up: UP,
    ArrowRight: RIGHT$1,
    Right: RIGHT$1,
    ArrowDown: DOWN,
    Down: DOWN
  };
  var DIRECTIONS_DELTA = {
    left: function (speed) {
      return {
        x: -speed,
        y: 0
      };
    },
    up: function (speed) {
      return {
        x: 0,
        y: -speed
      };
    },
    right: function (speed) {
      return {
        x: speed,
        y: 0
      };
    },
    down: function (speed) {
      return {
        x: 0,
        y: speed
      };
    }
  };

  /**
   * Enables to move selection with keyboard arrows.
   * Use with Shift for modified speed (default=1, with Shift=10).
   * Pressed Cmd/Ctrl turns the feature off.
   *
   * @param {Object} config
   * @param {number} [config.moveSpeed=1]
   * @param {number} [config.moveSpeedAccelerated=10]
   * @param {Keyboard} keyboard
   * @param {Modeling} modeling
   * @param {Selection} selection
   */
  function KeyboardMoveSelection(config, keyboard, modeling, rules, selection) {
    var self = this;
    this._config = assign$4({}, DEFAULT_CONFIG, config || {});
    keyboard.addListener(HIGHER_PRIORITY$4, function (event) {
      var keyEvent = event.keyEvent;
      var direction = KEY_TO_DIRECTION[keyEvent.key];
      if (!direction) {
        return;
      }
      if (keyboard.isCmd(keyEvent)) {
        return;
      }
      var accelerated = keyboard.isShift(keyEvent);
      self.moveSelection(direction, accelerated);
      return true;
    });

    /**
     * Move selected elements in the given direction,
     * optionally specifying accelerated movement.
     *
     * @param {string} direction
     * @param {boolean} [accelerated=false]
     */
    this.moveSelection = function (direction, accelerated) {
      var selectedElements = selection.get();
      if (!selectedElements.length) {
        return;
      }
      var speed = this._config[accelerated ? 'moveSpeedAccelerated' : 'moveSpeed'];
      var delta = DIRECTIONS_DELTA[direction](speed);
      var canMove = rules.allowed('elements.move', {
        shapes: selectedElements
      });
      if (canMove) {
        modeling.moveElements(selectedElements, delta);
      }
    };
  }
  KeyboardMoveSelection.$inject = ['config.keyboardMoveSelection', 'keyboard', 'modeling', 'rules', 'selection'];

  var KeyboardMoveSelectionModule = {
    __depends__: [KeyboardModule$2, SelectionModule],
    __init__: ['keyboardMoveSelection'],
    keyboardMoveSelection: ['type', KeyboardMoveSelection]
  };

  /**
   * A service that offers un- and redoable execution of commands.
   *
   * The command stack is responsible for executing modeling actions
   * in a un- and redoable manner. To do this it delegates the actual
   * command execution to {@link CommandHandler}s.
   *
   * Command handlers provide {@link CommandHandler#execute(ctx)} and
   * {@link CommandHandler#revert(ctx)} methods to un- and redo a command
   * identified by a command context.
   *
   *
   * ## Life-Cycle events
   *
   * In the process the command stack fires a number of life-cycle events
   * that other components to participate in the command execution.
   *
   *    * preExecute
   *    * preExecuted
   *    * execute
   *    * executed
   *    * postExecute
   *    * postExecuted
   *    * revert
   *    * reverted
   *
   * A special event is used for validating, whether a command can be
   * performed prior to its execution.
   *
   *    * canExecute
   *
   * Each of the events is fired as `commandStack.{eventName}` and
   * `commandStack.{commandName}.{eventName}`, respectively. This gives
   * components fine grained control on where to hook into.
   *
   * The event object fired transports `command`, the name of the
   * command and `context`, the command context.
   *
   *
   * ## Creating Command Handlers
   *
   * Command handlers should provide the {@link CommandHandler#execute(ctx)}
   * and {@link CommandHandler#revert(ctx)} methods to implement
   * redoing and undoing of a command.
   *
   * A command handler _must_ ensure undo is performed properly in order
   * not to break the undo chain. It must also return the shapes that
   * got changed during the `execute` and `revert` operations.
   *
   * Command handlers may execute other modeling operations (and thus
   * commands) in their `preExecute` and `postExecute` phases. The command
   * stack will properly group all commands together into a logical unit
   * that may be re- and undone atomically.
   *
   * Command handlers must not execute other commands from within their
   * core implementation (`execute`, `revert`).
   *
   *
   * ## Change Tracking
   *
   * During the execution of the CommandStack it will keep track of all
   * elements that have been touched during the command's execution.
   *
   * At the end of the CommandStack execution it will notify interested
   * components via an 'elements.changed' event with all the dirty
   * elements.
   *
   * The event can be picked up by components that are interested in the fact
   * that elements have been changed. One use case for this is updating
   * their graphical representation after moving / resizing or deletion.
   *
   * @see CommandHandler
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function CommandStack$1(eventBus, injector) {
    /**
     * A map of all registered command handlers.
     *
     * @type {Object}
     */
    this._handlerMap = {};

    /**
     * A stack containing all re/undoable actions on the diagram
     *
     * @type {Array<Object>}
     */
    this._stack = [];

    /**
     * The current index on the stack
     *
     * @type {number}
     */
    this._stackIdx = -1;

    /**
     * Current active commandStack execution
     *
     * @type {Object}
     * @property {Object[]} actions
     * @property {Object[]} dirty
     * @property { 'undo' | 'redo' | 'clear' | 'execute' | null } trigger the cause of the current excecution
     */
    this._currentExecution = {
      actions: [],
      dirty: [],
      trigger: null
    };
    this._injector = injector;
    this._eventBus = eventBus;
    this._uid = 1;
    eventBus.on(['diagram.destroy', 'diagram.clear'], function () {
      this.clear(false);
    }, this);
  }
  CommandStack$1.$inject = ['eventBus', 'injector'];

  /**
   * Execute a command
   *
   * @param {string} command the command to execute
   * @param {Object} context the environment to execute the command in
   */
  CommandStack$1.prototype.execute = function (command, context) {
    if (!command) {
      throw new Error('command required');
    }
    this._currentExecution.trigger = 'execute';
    const action = {
      command: command,
      context: context
    };
    this._pushAction(action);
    this._internalExecute(action);
    this._popAction(action);
  };

  /**
   * Ask whether a given command can be executed.
   *
   * Implementors may hook into the mechanism on two ways:
   *
   *   * in event listeners:
   *
   *     Users may prevent the execution via an event listener.
   *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.
   *
   *   * in command handlers:
   *
   *     If the method {@link CommandHandler#canExecute} is implemented in a handler
   *     it will be called to figure out whether the execution is allowed.
   *
   * @param  {string} command the command to execute
   * @param  {Object} context the environment to execute the command in
   *
   * @return {boolean} true if the command can be executed
   */
  CommandStack$1.prototype.canExecute = function (command, context) {
    const action = {
      command: command,
      context: context
    };
    const handler = this._getHandler(command);
    let result = this._fire(command, 'canExecute', action);

    // handler#canExecute will only be called if no listener
    // decided on a result already
    if (result === undefined) {
      if (!handler) {
        return false;
      }
      if (handler.canExecute) {
        result = handler.canExecute(context);
      }
    }
    return result;
  };

  /**
   * Clear the command stack, erasing all undo / redo history
   */
  CommandStack$1.prototype.clear = function (emit) {
    this._stack.length = 0;
    this._stackIdx = -1;
    if (emit !== false) {
      this._fire('changed', {
        trigger: 'clear'
      });
    }
  };

  /**
   * Undo last command(s)
   */
  CommandStack$1.prototype.undo = function () {
    let action = this._getUndoAction(),
      next;
    if (action) {
      this._currentExecution.trigger = 'undo';
      this._pushAction(action);
      while (action) {
        this._internalUndo(action);
        next = this._getUndoAction();
        if (!next || next.id !== action.id) {
          break;
        }
        action = next;
      }
      this._popAction();
    }
  };

  /**
   * Redo last command(s)
   */
  CommandStack$1.prototype.redo = function () {
    let action = this._getRedoAction(),
      next;
    if (action) {
      this._currentExecution.trigger = 'redo';
      this._pushAction(action);
      while (action) {
        this._internalExecute(action, true);
        next = this._getRedoAction();
        if (!next || next.id !== action.id) {
          break;
        }
        action = next;
      }
      this._popAction();
    }
  };

  /**
   * Register a handler instance with the command stack
   *
   * @param {string} command
   * @param {CommandHandler} handler
   */
  CommandStack$1.prototype.register = function (command, handler) {
    this._setHandler(command, handler);
  };

  /**
   * Register a handler type with the command stack
   * by instantiating it and injecting its dependencies.
   *
   * @param {string} command
   * @param {Function} a constructor for a {@link CommandHandler}
   */
  CommandStack$1.prototype.registerHandler = function (command, handlerCls) {
    if (!command || !handlerCls) {
      throw new Error('command and handlerCls must be defined');
    }
    const handler = this._injector.instantiate(handlerCls);
    this.register(command, handler);
  };
  CommandStack$1.prototype.canUndo = function () {
    return !!this._getUndoAction();
  };
  CommandStack$1.prototype.canRedo = function () {
    return !!this._getRedoAction();
  };

  // stack access  //////////////////////

  CommandStack$1.prototype._getRedoAction = function () {
    return this._stack[this._stackIdx + 1];
  };
  CommandStack$1.prototype._getUndoAction = function () {
    return this._stack[this._stackIdx];
  };

  // internal functionality //////////////////////

  CommandStack$1.prototype._internalUndo = function (action) {
    const command = action.command,
      context = action.context;
    const handler = this._getHandler(command);

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {
      this._fire(command, 'revert', action);
      if (handler.revert) {
        this._markDirty(handler.revert(context));
      }
      this._revertedAction(action);
      this._fire(command, 'reverted', action);
    });
  };
  CommandStack$1.prototype._fire = function (command, qualifier, event) {
    if (arguments.length < 3) {
      event = qualifier;
      qualifier = null;
    }
    const names = qualifier ? [command + '.' + qualifier, qualifier] : [command];
    let result;
    event = this._eventBus.createEvent(event);
    for (const name of names) {
      result = this._eventBus.fire('commandStack.' + name, event);
      if (event.cancelBubble) {
        break;
      }
    }
    return result;
  };
  CommandStack$1.prototype._createId = function () {
    return this._uid++;
  };
  CommandStack$1.prototype._atomicDo = function (fn) {
    const execution = this._currentExecution;
    execution.atomic = true;
    try {
      fn();
    } finally {
      execution.atomic = false;
    }
  };
  CommandStack$1.prototype._internalExecute = function (action, redo) {
    const command = action.command,
      context = action.context;
    const handler = this._getHandler(command);
    if (!handler) {
      throw new Error('no command handler registered for <' + command + '>');
    }
    this._pushAction(action);
    if (!redo) {
      this._fire(command, 'preExecute', action);
      if (handler.preExecute) {
        handler.preExecute(context);
      }
      this._fire(command, 'preExecuted', action);
    }

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {
      this._fire(command, 'execute', action);
      if (handler.execute) {
        // actual execute + mark return results as dirty
        this._markDirty(handler.execute(context));
      }

      // log to stack
      this._executedAction(action, redo);
      this._fire(command, 'executed', action);
    });
    if (!redo) {
      this._fire(command, 'postExecute', action);
      if (handler.postExecute) {
        handler.postExecute(context);
      }
      this._fire(command, 'postExecuted', action);
    }
    this._popAction(action);
  };
  CommandStack$1.prototype._pushAction = function (action) {
    const execution = this._currentExecution,
      actions = execution.actions;
    const baseAction = actions[0];
    if (execution.atomic) {
      throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');
    }
    if (!action.id) {
      action.id = baseAction && baseAction.id || this._createId();
    }
    actions.push(action);
  };
  CommandStack$1.prototype._popAction = function () {
    const execution = this._currentExecution,
      trigger = execution.trigger,
      actions = execution.actions,
      dirty = execution.dirty;
    actions.pop();
    if (!actions.length) {
      this._eventBus.fire('elements.changed', {
        elements: uniqueBy('id', dirty.reverse())
      });
      dirty.length = 0;
      this._fire('changed', {
        trigger: trigger
      });
      execution.trigger = null;
    }
  };
  CommandStack$1.prototype._markDirty = function (elements) {
    const execution = this._currentExecution;
    if (!elements) {
      return;
    }
    elements = isArray$6(elements) ? elements : [elements];
    execution.dirty = execution.dirty.concat(elements);
  };
  CommandStack$1.prototype._executedAction = function (action, redo) {
    const stackIdx = ++this._stackIdx;
    if (!redo) {
      this._stack.splice(stackIdx, this._stack.length, action);
    }
  };
  CommandStack$1.prototype._revertedAction = function (action) {
    this._stackIdx--;
  };
  CommandStack$1.prototype._getHandler = function (command) {
    return this._handlerMap[command];
  };
  CommandStack$1.prototype._setHandler = function (command, handler) {
    if (!command || !handler) {
      throw new Error('command and handler required');
    }
    if (this._handlerMap[command]) {
      throw new Error('overriding handler for command <' + command + '>');
    }
    this._handlerMap[command] = handler;
  };

  var CommandStack = {
    commandStack: ['type', CommandStack$1]
  };

  /**
   * Adds change support to the diagram, including
   *
   * <ul>
   *   <li>redrawing shapes and connections on change</li>
   * </ul>
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   * @param {GraphicsFactory} graphicsFactory
   */
  function ChangeSupport$2(eventBus, canvas, elementRegistry, graphicsFactory) {
    // redraw shapes / connections on change

    eventBus.on('element.changed', function (event) {
      var element = event.element;

      // element might have been deleted and replaced by new element with same ID
      // thus check for parent of element except for root element
      if (element.parent || element === canvas.getRootElement()) {
        event.gfx = elementRegistry.getGraphics(element);
      }

      // shape + gfx may have been deleted
      if (!event.gfx) {
        return;
      }
      eventBus.fire(getType$1(element) + '.changed', event);
    });
    eventBus.on('elements.changed', function (event) {
      var elements = event.elements;
      elements.forEach(function (e) {
        eventBus.fire('element.changed', {
          element: e
        });
      });
      graphicsFactory.updateContainments(elements);
    });
    eventBus.on('shape.changed', function (event) {
      graphicsFactory.update('shape', event.element, event.gfx);
    });
    eventBus.on('connection.changed', function (event) {
      graphicsFactory.update('connection', event.element, event.gfx);
    });
  }
  ChangeSupport$2.$inject = ['eventBus', 'canvas', 'elementRegistry', 'graphicsFactory'];

  var DiagramChangeSupport = {
    __init__: ['changeSupport'],
    changeSupport: ['type', ChangeSupport$2]
  };

  var min$1 = Math.min,
    max$1 = Math.max;
  function preventDefault(e) {
    e.preventDefault();
  }
  function stopPropagation$2(e) {
    e.stopPropagation();
  }
  function isTextNode(node) {
    return node.nodeType === Node.TEXT_NODE;
  }
  function toArray(nodeList) {
    return [].slice.call(nodeList);
  }

  /**
   * Initializes a container for a content editable div.
   *
   * Structure:
   *
   * container
   *   parent
   *     content
   *     resize-handle
   *
   * @param {object} options
   * @param {DOMElement} options.container The DOM element to append the contentContainer to
   * @param {Function} options.keyHandler Handler for key events
   * @param {Function} options.resizeHandler Handler for resize events
   */
  function TextBox(options) {
    this.container = options.container;
    this.parent = domify$1('<div class="djs-direct-editing-parent">' + '<div class="djs-direct-editing-content" contenteditable="true"></div>' + '</div>');
    this.content = query('[contenteditable]', this.parent);
    this.keyHandler = options.keyHandler || function () {};
    this.resizeHandler = options.resizeHandler || function () {};
    this.autoResize = bind$3(this.autoResize, this);
    this.handlePaste = bind$3(this.handlePaste, this);
  }

  /**
   * Create a text box with the given position, size, style and text content
   *
   * @param {Object} bounds
   * @param {Number} bounds.x absolute x position
   * @param {Number} bounds.y absolute y position
   * @param {Number} [bounds.width] fixed width value
   * @param {Number} [bounds.height] fixed height value
   * @param {Number} [bounds.maxWidth] maximum width value
   * @param {Number} [bounds.maxHeight] maximum height value
   * @param {Number} [bounds.minWidth] minimum width value
   * @param {Number} [bounds.minHeight] minimum height value
   * @param {Object} [style]
   * @param {String} value text content
   *
   * @return {DOMElement} The created content DOM element
   */
  TextBox.prototype.create = function (bounds, style, value, options) {
    var self = this;
    var parent = this.parent,
      content = this.content,
      container = this.container;
    options = this.options = options || {};
    style = this.style = style || {};
    var parentStyle = pick$1(style, ['width', 'height', 'maxWidth', 'maxHeight', 'minWidth', 'minHeight', 'left', 'top', 'backgroundColor', 'position', 'overflow', 'border', 'wordWrap', 'textAlign', 'outline', 'transform']);
    assign$4(parent.style, {
      width: bounds.width + 'px',
      height: bounds.height + 'px',
      maxWidth: bounds.maxWidth + 'px',
      maxHeight: bounds.maxHeight + 'px',
      minWidth: bounds.minWidth + 'px',
      minHeight: bounds.minHeight + 'px',
      left: bounds.x + 'px',
      top: bounds.y + 'px',
      backgroundColor: '#ffffff',
      position: 'absolute',
      overflow: 'visible',
      border: '1px solid #ccc',
      boxSizing: 'border-box',
      wordWrap: 'normal',
      textAlign: 'center',
      outline: 'none'
    }, parentStyle);
    var contentStyle = pick$1(style, ['fontFamily', 'fontSize', 'fontWeight', 'lineHeight', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft']);
    assign$4(content.style, {
      boxSizing: 'border-box',
      width: '100%',
      outline: 'none',
      wordWrap: 'break-word'
    }, contentStyle);
    if (options.centerVertically) {
      assign$4(content.style, {
        position: 'absolute',
        top: '50%',
        transform: 'translate(0, -50%)'
      }, contentStyle);
    }
    content.innerText = value;
    event.bind(content, 'keydown', this.keyHandler);
    event.bind(content, 'mousedown', stopPropagation$2);
    event.bind(content, 'paste', self.handlePaste);
    if (options.autoResize) {
      event.bind(content, 'input', this.autoResize);
    }
    if (options.resizable) {
      this.resizable(style);
    }
    container.appendChild(parent);

    // set selection to end of text
    this.setSelection(content.lastChild, content.lastChild && content.lastChild.length);
    return parent;
  };

  /**
   * Intercept paste events to remove formatting from pasted text.
   */
  TextBox.prototype.handlePaste = function (e) {
    var options = this.options,
      style = this.style;
    e.preventDefault();
    var text;
    if (e.clipboardData) {
      // Chrome, Firefox, Safari
      text = e.clipboardData.getData('text/plain');
    } else {
      // Internet Explorer
      text = window.clipboardData.getData('Text');
    }
    this.insertText(text);
    if (options.autoResize) {
      var hasResized = this.autoResize(style);
      if (hasResized) {
        this.resizeHandler(hasResized);
      }
    }
  };
  TextBox.prototype.insertText = function (text) {
    text = normalizeEndOfLineSequences(text);

    // insertText command not supported by Internet Explorer
    var success = document.execCommand('insertText', false, text);
    if (success) {
      return;
    }
    this._insertTextIE(text);
  };
  TextBox.prototype._insertTextIE = function (text) {
    // Internet Explorer
    var range = this.getSelection(),
      startContainer = range.startContainer,
      endContainer = range.endContainer,
      startOffset = range.startOffset,
      endOffset = range.endOffset,
      commonAncestorContainer = range.commonAncestorContainer;
    var childNodesArray = toArray(commonAncestorContainer.childNodes);
    var container, offset;
    if (isTextNode(commonAncestorContainer)) {
      var containerTextContent = startContainer.textContent;
      startContainer.textContent = containerTextContent.substring(0, startOffset) + text + containerTextContent.substring(endOffset);
      container = startContainer;
      offset = startOffset + text.length;
    } else if (startContainer === this.content && endContainer === this.content) {
      var textNode = document.createTextNode(text);
      this.content.insertBefore(textNode, childNodesArray[startOffset]);
      container = textNode;
      offset = textNode.textContent.length;
    } else {
      var startContainerChildIndex = childNodesArray.indexOf(startContainer),
        endContainerChildIndex = childNodesArray.indexOf(endContainer);
      childNodesArray.forEach(function (childNode, index) {
        if (index === startContainerChildIndex) {
          childNode.textContent = startContainer.textContent.substring(0, startOffset) + text + endContainer.textContent.substring(endOffset);
        } else if (index > startContainerChildIndex && index <= endContainerChildIndex) {
          remove$4(childNode);
        }
      });
      container = startContainer;
      offset = startOffset + text.length;
    }
    if (container && offset !== undefined) {
      // is necessary in Internet Explorer
      setTimeout(function () {
        self.setSelection(container, offset);
      });
    }
  };

  /**
   * Automatically resize element vertically to fit its content.
   */
  TextBox.prototype.autoResize = function () {
    var parent = this.parent,
      content = this.content;
    var fontSize = parseInt(this.style.fontSize) || 12;
    if (content.scrollHeight > parent.offsetHeight || content.scrollHeight < parent.offsetHeight - fontSize) {
      var bounds = parent.getBoundingClientRect();
      var height = content.scrollHeight;
      parent.style.height = height + 'px';
      this.resizeHandler({
        width: bounds.width,
        height: bounds.height,
        dx: 0,
        dy: height - bounds.height
      });
    }
  };

  /**
   * Make an element resizable by adding a resize handle.
   */
  TextBox.prototype.resizable = function () {
    var self = this;
    var parent = this.parent,
      resizeHandle = this.resizeHandle;
    var minWidth = parseInt(this.style.minWidth) || 0,
      minHeight = parseInt(this.style.minHeight) || 0,
      maxWidth = parseInt(this.style.maxWidth) || Infinity,
      maxHeight = parseInt(this.style.maxHeight) || Infinity;
    if (!resizeHandle) {
      resizeHandle = this.resizeHandle = domify$1('<div class="djs-direct-editing-resize-handle"></div>');
      var startX, startY, startWidth, startHeight;
      var onMouseDown = function (e) {
        preventDefault(e);
        stopPropagation$2(e);
        startX = e.clientX;
        startY = e.clientY;
        var bounds = parent.getBoundingClientRect();
        startWidth = bounds.width;
        startHeight = bounds.height;
        event.bind(document, 'mousemove', onMouseMove);
        event.bind(document, 'mouseup', onMouseUp);
      };
      var onMouseMove = function (e) {
        preventDefault(e);
        stopPropagation$2(e);
        var newWidth = min$1(max$1(startWidth + e.clientX - startX, minWidth), maxWidth);
        var newHeight = min$1(max$1(startHeight + e.clientY - startY, minHeight), maxHeight);
        parent.style.width = newWidth + 'px';
        parent.style.height = newHeight + 'px';
        self.resizeHandler({
          width: startWidth,
          height: startHeight,
          dx: e.clientX - startX,
          dy: e.clientY - startY
        });
      };
      var onMouseUp = function (e) {
        preventDefault(e);
        stopPropagation$2(e);
        event.unbind(document, 'mousemove', onMouseMove, false);
        event.unbind(document, 'mouseup', onMouseUp, false);
      };
      event.bind(resizeHandle, 'mousedown', onMouseDown);
    }
    assign$4(resizeHandle.style, {
      position: 'absolute',
      bottom: '0px',
      right: '0px',
      cursor: 'nwse-resize',
      width: '0',
      height: '0',
      borderTop: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent',
      borderRight: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
      borderBottom: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
      borderLeft: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent'
    });
    parent.appendChild(resizeHandle);
  };

  /**
   * Clear content and style of the textbox, unbind listeners and
   * reset CSS style.
   */
  TextBox.prototype.destroy = function () {
    var parent = this.parent,
      content = this.content,
      resizeHandle = this.resizeHandle;

    // clear content
    content.innerText = '';

    // clear styles
    parent.removeAttribute('style');
    content.removeAttribute('style');
    event.unbind(content, 'keydown', this.keyHandler);
    event.unbind(content, 'mousedown', stopPropagation$2);
    event.unbind(content, 'input', this.autoResize);
    event.unbind(content, 'paste', this.handlePaste);
    if (resizeHandle) {
      resizeHandle.removeAttribute('style');
      remove$4(resizeHandle);
    }
    remove$4(parent);
  };
  TextBox.prototype.getValue = function () {
    return this.content.innerText.trim();
  };
  TextBox.prototype.getSelection = function () {
    var selection = window.getSelection(),
      range = selection.getRangeAt(0);
    return range;
  };
  TextBox.prototype.setSelection = function (container, offset) {
    var range = document.createRange();
    if (container === null) {
      range.selectNodeContents(this.content);
    } else {
      range.setStart(container, offset);
      range.setEnd(container, offset);
    }
    var selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
  };

  // helpers //////////

  function normalizeEndOfLineSequences(string) {
    return string.replace(/\r\n|\r|\n/g, '\n');
  }

  /**
   * A direct editing component that allows users
   * to edit an elements text directly in the diagram
   *
   * @param {EventBus} eventBus the event bus
   */
  function DirectEditing(eventBus, canvas) {
    this._eventBus = eventBus;
    this._providers = [];
    this._textbox = new TextBox({
      container: canvas.getContainer(),
      keyHandler: bind$3(this._handleKey, this),
      resizeHandler: bind$3(this._handleResize, this)
    });
  }
  DirectEditing.$inject = ['eventBus', 'canvas'];

  /**
   * Register a direct editing provider

   * @param {Object} provider the provider, must expose an #activate(element) method that returns
   *                          an activation context ({ bounds: {x, y, width, height }, text }) if
   *                          direct editing is available for the given element.
   *                          Additionally the provider must expose a #update(element, value) method
   *                          to receive direct editing updates.
   */
  DirectEditing.prototype.registerProvider = function (provider) {
    this._providers.push(provider);
  };

  /**
   * Returns true if direct editing is currently active
   *
   * @param {djs.model.Base} [element]
   *
   * @return {boolean}
   */
  DirectEditing.prototype.isActive = function (element) {
    return !!(this._active && (!element || this._active.element === element));
  };

  /**
   * Cancel direct editing, if it is currently active
   */
  DirectEditing.prototype.cancel = function () {
    if (!this._active) {
      return;
    }
    this._fire('cancel');
    this.close();
  };
  DirectEditing.prototype._fire = function (event, context) {
    this._eventBus.fire('directEditing.' + event, context || {
      active: this._active
    });
  };
  DirectEditing.prototype.close = function () {
    this._textbox.destroy();
    this._fire('deactivate');
    this._active = null;
    this.resizable = undefined;
  };
  DirectEditing.prototype.complete = function () {
    var active = this._active;
    if (!active) {
      return;
    }
    var containerBounds,
      previousBounds = active.context.bounds,
      newBounds = this.$textbox.getBoundingClientRect(),
      newText = this.getValue(),
      previousText = active.context.text;
    if (newText !== previousText || newBounds.height !== previousBounds.height || newBounds.width !== previousBounds.width) {
      containerBounds = this._textbox.container.getBoundingClientRect();
      active.provider.update(active.element, newText, active.context.text, {
        x: newBounds.left - containerBounds.left,
        y: newBounds.top - containerBounds.top,
        width: newBounds.width,
        height: newBounds.height
      });
    }
    this._fire('complete');
    this.close();
  };
  DirectEditing.prototype.getValue = function () {
    return this._textbox.getValue();
  };
  DirectEditing.prototype._handleKey = function (e) {
    // stop bubble
    e.stopPropagation();
    var key = e.keyCode || e.charCode;

    // ESC
    if (key === 27) {
      e.preventDefault();
      return this.cancel();
    }

    // Enter
    if (key === 13 && !e.shiftKey) {
      e.preventDefault();
      return this.complete();
    }
  };
  DirectEditing.prototype._handleResize = function (event) {
    this._fire('resize', event);
  };

  /**
   * Activate direct editing on the given element
   *
   * @param {Object} ElementDescriptor the descriptor for a shape or connection
   * @return {Boolean} true if the activation was possible
   */
  DirectEditing.prototype.activate = function (element) {
    if (this.isActive()) {
      this.cancel();
    }

    // the direct editing context
    var context;
    var provider = find$2(this._providers, function (p) {
      return (context = p.activate(element)) ? p : null;
    });

    // check if activation took place
    if (context) {
      this.$textbox = this._textbox.create(context.bounds, context.style, context.text, context.options);
      this._active = {
        element: element,
        context: context,
        provider: provider
      };
      if (context.options && context.options.resizable) {
        this.resizable = true;
      }
      this._fire('activate');
    }
    return !!context;
  };

  var DiagramDirectEditing = {
    __depends__: [InteractionEventsModule],
    __init__: ['directEditing'],
    directEditing: ['type', DirectEditing]
  };

  function getLabelAttr(semantic) {
    if (is(semantic, 'dmn:Decision') || is(semantic, 'dmn:BusinessKnowledgeModel') || is(semantic, 'dmn:InputData') || is(semantic, 'dmn:KnowledgeSource')) {
      return 'name';
    }
    if (is(semantic, 'dmn:TextAnnotation')) {
      return 'text';
    }
  }
  function getLabel(element) {
    var semantic = element.businessObject,
      attr = getLabelAttr(semantic);
    if (attr) {
      return semantic[attr] || '';
    }
  }
  function setLabel(element, text, isExternal) {
    var semantic = element.businessObject,
      attr = getLabelAttr(semantic);
    if (attr) {
      semantic[attr] = text;
    }

    // show external label if not empty
    if (isExternal) {
      element.hidden = !text;
    }
    return element;
  }

  function LabelEditingProvider(canvas, directEditing, eventBus, modeling, textRenderer) {
    this._canvas = canvas;
    this._modeling = modeling;
    this._textRenderer = textRenderer;
    directEditing.registerProvider(this);

    // listen to dblclick on non-root elements
    eventBus.on('element.dblclick', function (event) {
      directEditing.activate(event.element);
    });

    // complete on followup canvas operation
    eventBus.on(['autoPlace.start', 'canvas.viewbox.changing', 'drag.init', 'drillDown.click', 'element.mousedown', 'popupMenu.open', 'selection.changed'], function () {
      directEditing.complete();
    });

    // cancel on command stack changes
    eventBus.on(['commandStack.changed'], function () {
      directEditing.cancel();
    });
    eventBus.on('create.end', 500, function (e) {
      var element = e.shape;
      if (is(element, 'dmn:Decision') || is(element, 'dmn:InputData') || is(element, 'dmn:BusinessKnowledgeModel') || is(element, 'dmn:KnowledgeSource') || is(element, 'dmn:TextAnnotation')) {
        directEditing.activate(element);
      }
    });
    eventBus.on('autoPlace.end', 500, function (event) {
      directEditing.activate(event.shape);
    });
  }
  LabelEditingProvider.$inject = ['canvas', 'directEditing', 'eventBus', 'modeling', 'textRenderer'];

  /**
   * Activate direct editing for drgs and text annotations.
   *
   * @param  {djs.model.Base} element
   *
   * @return {Object} an object with properties bounds (position and size) and text
   */
  LabelEditingProvider.prototype.activate = function (element) {
    var text = getLabel(element);
    if (!isDefined(text)) {
      return;
    }
    var context = {
      text: text
    };
    var editingBBox = this.getEditingBBox(element);
    assign$4(context, editingBBox);
    var options = {};

    // DRG elements
    if (is(element, 'dmn:DRGElement')) {
      assign$4(options, {
        centerVertically: true
      });
    }

    // text annotations
    if (is(element, 'dmn:TextAnnotation')) {
      assign$4(options, {
        resizable: true
      });
    }
    assign$4(context, {
      options: options
    });
    return context;
  };

  /**
   * Get the editing bounding box based on the element's size and position
   *
   * @param  {djs.model.Base} element
   *
   * @return {Object}
   *         an object containing information about position and
   *         size (fixed or minimum and/or maximum)
   */
  LabelEditingProvider.prototype.getEditingBBox = function (element) {
    var canvas = this._canvas;
    var target = element.label || element;
    var bbox = canvas.getAbsoluteBBox(target);

    // default position
    var bounds = {
      x: bbox.x,
      y: bbox.y
    };
    var zoom = canvas.zoom();
    var defaultStyle = this._textRenderer.getDefaultStyle();

    // take zoom into account
    var defaultFontSize = defaultStyle.fontSize * zoom,
      defaultLineHeight = defaultStyle.lineHeight;
    var style = {
      fontFamily: this._textRenderer.getDefaultStyle().fontFamily,
      fontWeight: this._textRenderer.getDefaultStyle().fontWeight
    };

    // DRG elements
    if (is(element, 'dmn:DRGElement')) {
      assign$4(bounds, {
        width: bbox.width,
        height: bbox.height
      });
      assign$4(style, {
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight,
        paddingTop: 7 * zoom + 'px',
        paddingBottom: 7 * zoom + 'px',
        paddingLeft: 5 * zoom + 'px',
        paddingRight: 5 * zoom + 'px'
      });
    }

    // text annotations
    if (is(element, 'dmn:TextAnnotation')) {
      assign$4(bounds, {
        width: bbox.width,
        height: bbox.height,
        minWidth: 30 * zoom,
        minHeight: 10 * zoom
      });
      assign$4(style, {
        textAlign: 'left',
        paddingTop: 5 * zoom + 'px',
        paddingBottom: 7 * zoom + 'px',
        paddingLeft: 7 * zoom + 'px',
        paddingRight: 5 * zoom + 'px',
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight
      });
    }
    return {
      bounds: bounds,
      style: style
    };
  };
  LabelEditingProvider.prototype.update = function (element, newLabel, activeContextText, bounds) {
    var newBounds, bbox;
    if (is(element, 'dmn:TextAnnotation')) {
      bbox = this._canvas.getAbsoluteBBox(element);
      newBounds = {
        x: element.x,
        y: element.y,
        width: element.width / bbox.width * bounds.width,
        height: element.height / bbox.height * bounds.height
      };
    }
    if (isEmptyText(newLabel)) {
      newLabel = null;
    }
    this._modeling.updateLabel(element, newLabel, newBounds);
  };

  // helpers //////////

  function isEmptyText(label) {
    return !label || !label.trim();
  }

  var LabelEditingModule = {
    __depends__: [CommandStack, DiagramChangeSupport, DiagramDirectEditing],
    __init__: ['labelEditingProvider'],
    labelEditingProvider: ['type', LabelEditingProvider]
  };

  /**
   * Creates DMN-specific refs for new connection.
   *
   * @param {DrdFactory} drdFactory
   * @param {Injector} injector
   */
  function CreateConnectionBehavior(drdFactory, injector) {
    injector.invoke(CommandInterceptor, this);
    this.preExecute('connection.create', function (context) {
      var connection = context.connection,
        connectionBo = connection.businessObject,
        source = context.source,
        target = context.target,
        elementRef,
        sourceRef,
        targetRef;
      if (is(connection, 'dmn:Association')) {
        sourceRef = connectionBo.sourceRef = drdFactory.create('dmn:DMNElementReference', {
          href: '#' + source.id
        });
        sourceRef.$parent = connectionBo;
        targetRef = connectionBo.targetRef = drdFactory.create('dmn:DMNElementReference', {
          href: '#' + target.id
        });
        targetRef.$parent = connectionBo;
      } else {
        elementRef = connectionBo['required' + getRequirementType(source)] = drdFactory.create('dmn:DMNElementReference', {
          href: '#' + source.id
        });
        elementRef.$parent = connectionBo;
      }
    }, true);
  }
  CreateConnectionBehavior.$inject = ['drdFactory', 'injector'];
  e$3(CreateConnectionBehavior, CommandInterceptor);

  // helpers //////////

  function getRequirementType(source) {
    if (is(source, 'dmn:BusinessKnowledgeModel')) {
      return 'Knowledge';
    } else if (is(source, 'dmn:Decision')) {
      return 'Decision';
    } else if (is(source, 'dmn:InputData')) {
      return 'Input';
    } else if (is(source, 'dmn:KnowledgeSource')) {
      return 'Authority';
    }
  }

  var LOW_PRIORITY$e = 500;
  function LayoutConnectionBehavior(injector, layouter, modeling, rules) {
    injector.invoke(CommandInterceptor, this);

    // specify connection start and end on connection create
    this.preExecute(['connection.create', 'connection.reconnect'], function (context) {
      var connection = context.connection,
        source = context.newSource || context.source,
        target = context.newTarget || context.target;
      if (is(connection, 'dmn:InformationRequirement') && !rules.allowed('connection.connect', {
        connection: connection,
        source: source,
        target: target
      })) {
        return;
      }
      if (!is(connection, 'dmn:InformationRequirement')) {
        return;
      }
      var orientation = getOrientation(source, target);
      if (!context.hints) {
        context.hints = {};
      }
      assign$4(context.hints, getConnectionHints(source, target, orientation));
    }, true);

    /**
     * Update incoming information requirements.
     *
     * @param {djs.model.Shape} target
     * @param {Array<djs.model.Connection>} [informationRequirements]
     * @param {string} [orientation]
     */
    function updateInformationRequirements(target, informationRequirements, orientation) {
      // (1) get information requirements
      if (!informationRequirements) {
        informationRequirements = target.incoming.filter(function (incoming) {
          return is(incoming, 'dmn:InformationRequirement');
        });
      }
      var incomingInformationRequirementsByOrientation = {};

      // (2) get information requirements per orientation
      if (orientation) {
        incomingInformationRequirementsByOrientation[orientation] = informationRequirements;
      } else {
        incomingInformationRequirementsByOrientation = getInformationRequirementsByOrientation(target, informationRequirements);
      }

      // (3) update information requirements per orientation
      forEach$3(incomingInformationRequirementsByOrientation, function (informationRequirements, orientation) {
        // (3.1) sort information requirements
        informationRequirements = sortInformationRequirements(informationRequirements, orientation);

        // (3.2) get new connection start and end
        var connectionStartEnd = getConnectionsStartEnd(informationRequirements, target, orientation);

        // (3.3) update information requirements
        informationRequirements.forEach((informationRequirement, index) => {
          var connectionStart = connectionStartEnd[index].start,
            connectionEnd = connectionStartEnd[index].end;
          var waypoints = layouter.layoutConnection(informationRequirement, {
            connectionStart: connectionStart,
            connectionEnd: connectionEnd
          });
          modeling.updateWaypoints(informationRequirement, waypoints);
        });
      });
    }

    // update information requirements on connection create and delete
    // update information requirements of new target on connection reconnect
    this.postExecuted(['connection.create', 'connection.delete', 'connection.reconnect'], function (context) {
      var connection = context.connection,
        source = connection.source || context.source,
        target = connection.target || context.target;
      if (!is(connection, 'dmn:InformationRequirement')) {
        return;
      }
      var orientation = getOrientation(source, target);

      // update all information requirements with same orientation
      var informationRequirements = target.incoming.filter(incoming => {
        var incomingOrientation = getOrientation(incoming.source, incoming.target);
        return is(incoming, 'dmn:InformationRequirement') && isSameOrientation(incomingOrientation, orientation);
      });
      if (!informationRequirements.length) {
        return;
      }
      updateInformationRequirements(target, informationRequirements, orientation);
    }, true);

    // update information requirements of old target on connection reconnect
    this.preExecute('connection.reconnect', function (context) {
      var connection = context.connection,
        source = connection.source,
        target = connection.target;
      if (!is(connection, 'dmn:InformationRequirement')) {
        return;
      }
      var orientation = getOrientation(source, target);

      // update all information requirements with same orientation except reconnected
      var informationRequirements = target.incoming.filter(incoming => {
        var incomingOrientation = getOrientation(incoming.source, incoming.target);
        return incoming !== connection && is(incoming, 'dmn:InformationRequirement') && isSameOrientation(incomingOrientation, orientation);
      });
      if (!informationRequirements.length) {
        return;
      }
      updateInformationRequirements(target, informationRequirements, orientation);
    }, true);

    // update information requirements on elements move
    this.postExecuted('elements.move', LOW_PRIORITY$e, function (context) {
      var shapes = context.shapes,
        closure = context.closure,
        enclosedConnections = closure.enclosedConnections;
      shapes.forEach(function (shape) {
        if (!isAny(shape, ['dmn:Decision', 'dmn:InputData'])) {
          return;
        }

        // (1) update incoming information requirements
        var incomingInformationRequirements = shape.incoming.filter(function (incoming) {
          return is(incoming, 'dmn:InformationRequirement') && !enclosedConnections[incoming.id];
        });
        if (incomingInformationRequirements.length) {
          updateInformationRequirements(shape, incomingInformationRequirements);
        }

        // (2) update outgoing information requirements
        shape.outgoing.forEach(function (outgoing) {
          if (!is(outgoing, 'dmn:InformationRequirement') || enclosedConnections[outgoing.id]) {
            return;
          }
          updateInformationRequirements(outgoing.target);
        });
      });
    }, true);
  }
  LayoutConnectionBehavior.$inject = ['injector', 'layouter', 'modeling', 'rules'];
  e$3(LayoutConnectionBehavior, CommandInterceptor);

  // helpers //////////

  function getConnectionHints(source, target, orientation) {
    var connectionStart = getMid(source),
      connectionEnd = getMid(target);
    if (orientation.includes('bottom')) {
      connectionStart.y = source.y;
      connectionEnd.y = target.y + target.height;
    } else if (orientation.includes('top')) {
      connectionStart.y = source.y + source.height;
      connectionEnd.y = target.y;
    } else if (orientation.includes('right')) {
      connectionStart.x = source.x;
      connectionEnd.x = target.x + target.width;
    } else {
      connectionStart.x = source.x + source.width;
      connectionEnd.x = target.x;
    }
    return {
      connectionStart: connectionStart,
      connectionEnd: connectionEnd
    };
  }

  /**
   * Get connections start and end based on number of information requirements and
   * orientation.
   *
   * @param {Array<djs.model.Connection>} informationRequirements
   * @param {djs.model.Shape} target
   * @param {string} orientation
   *
   * @returns {Array<Object>}
   */
  function getConnectionsStartEnd(informationRequirements, target, orientation) {
    return informationRequirements.map(function (informationRequirement, index) {
      var source = informationRequirement.source,
        sourceMid = getMid(source),
        sourceTrbl = asTRBL(source),
        targetTrbl = asTRBL(target);
      var length = informationRequirements.length;
      if (orientation.includes('bottom')) {
        return {
          start: {
            x: sourceMid.x,
            y: sourceTrbl.top
          },
          end: {
            x: targetTrbl.left + target.width / (length + 1) * (index + 1),
            y: targetTrbl.bottom
          }
        };
      } else if (orientation.includes('top')) {
        return {
          start: {
            x: sourceMid.x,
            y: sourceTrbl.bottom
          },
          end: {
            x: targetTrbl.left + target.width / (length + 1) * (index + 1),
            y: targetTrbl.top
          }
        };
      } else if (orientation.includes('right')) {
        return {
          start: {
            x: sourceTrbl.left,
            y: sourceMid.y
          },
          end: {
            x: targetTrbl.right,
            y: targetTrbl.top + target.height / (length + 1) * (index + 1)
          }
        };
      } else {
        return {
          start: {
            x: sourceTrbl.right,
            y: sourceMid.y
          },
          end: {
            x: targetTrbl.left,
            y: targetTrbl.top + target.height / (length + 1) * (index + 1)
          }
        };
      }
    });
  }

  /**
   * Get information requirements by orientation.
   *
   * @param {djs.model.shape} target
   * @param {Array<djs.model.Connection>} informationRequirements
   *
   * @returns {Object}
   */
  function getInformationRequirementsByOrientation(target, informationRequirements) {
    var incomingInformationRequirementsByOrientation = {};
    informationRequirements.forEach(function (incoming) {
      var orientation = getOrientation(incoming.source, target).split('-').shift();
      if (!incomingInformationRequirementsByOrientation[orientation]) {
        incomingInformationRequirementsByOrientation[orientation] = [];
      }
      incomingInformationRequirementsByOrientation[orientation].push(incoming);
    });
    return incomingInformationRequirementsByOrientation;
  }
  function isSameOrientation(orientationA, orientationB) {
    return orientationA && orientationB && orientationA.split('-').shift() === orientationB.split('-').shift();
  }
  function sortInformationRequirements(informationRequirements, orientation) {
    var axis;
    if (orientation.includes('top') || orientation.includes('bottom')) {
      axis = 'x';
    } else {
      axis = 'y';
    }
    return informationRequirements.sort(function (a, b) {
      return getMid(a.source)[axis] - getMid(b.source)[axis];
    });
  }

  function ReplaceConnectionBehavior(injector, modeling, rules) {
    injector.invoke(CommandInterceptor, this);
    this.preExecute('connection.reconnect', function (context) {
      var connection = context.connection,
        source = context.newSource || connection.source,
        target = context.newTarget || connection.target,
        waypoints = connection.waypoints.slice();
      var allowed = rules.allowed('connection.reconnect', {
        connection: connection,
        source: source,
        target: target
      });
      if (!allowed || allowed.type === connection.type) {
        return;
      }
      context.connection = modeling.connect(source, target, {
        type: allowed.type,
        waypoints: waypoints
      });
      modeling.removeConnection(connection);
    }, true);
  }
  e$3(ReplaceConnectionBehavior, CommandInterceptor);
  ReplaceConnectionBehavior.$inject = ['injector', 'modeling', 'rules'];

  /**
   * Defines the behaviour of what happens to the elements inside a container
   * that morphs into another DRD element
   */
  function ReplaceElementBehaviour(eventBus, modeling, selection) {
    CommandInterceptor.call(this, eventBus);
    this._modeling = modeling;
    this.postExecuted(['shape.replace'], 1500, function (e) {
      var context = e.context,
        oldShape = context.oldShape,
        newShape = context.newShape;
      modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);
      modeling.updateProperties(newShape, {
        id: oldShape.id
      });
      selection.select(newShape);
    });
  }
  e$3(ReplaceElementBehaviour, CommandInterceptor);
  ReplaceElementBehaviour.$inject = ['eventBus', 'modeling', 'selection'];

  const ID$2 = 'id';
  class IdChangeBehavior extends CommandInterceptor {
    constructor(eventBus) {
      super(eventBus);
      this.executed('element.updateProperties', this.updateIds.bind(this));
    }
    updateIds(_ref) {
      let context = _ref.context;
      const element = context.element,
        oldProperties = context.oldProperties,
        properties = context.properties;
      const bo = getBusinessObject(element);
      if (this.shouldSkipUpdate(bo, oldProperties, properties)) {
        return;
      }
      const definitions = getDefinitions$2(bo);
      const drgElements = definitions.get('drgElement');
      drgElements.forEach(drgElement => {
        updateElementReferences(drgElement, oldProperties.id, properties.id);
      });
      const artifacts = definitions.get('artifact');
      artifacts.forEach(artifact => {
        updateAssociationReferences(artifact, oldProperties.id, properties.id);
      });
    }
    shouldSkipUpdate(bo, oldProperties, newProperties) {
      return !isIdChange$2(oldProperties, newProperties) || !is(bo, 'dmn:DRGElement') && !is(bo, 'dmn:TextAnnotation');
    }
  }
  IdChangeBehavior.$inject = ['eventBus'];

  // helpers //////////////////////

  function isIdChange$2(oldProperties, properties) {
    return ID$2 in oldProperties && ID$2 in properties;
  }

  /**
   * Walk up the tree until at the root to get to dmn:Definitions.
   *
   * @param {ModdleElement} element
   */
  function getDefinitions$2(element) {
    let definitions = element;
    while (!is(definitions, 'dmn:Definitions')) {
      definitions = definitions.$parent;
    }
    return definitions;
  }
  function updateElementReferences(element, oldId, id) {
    const handlers = {
      authorityRequirement: () => {
        element.authorityRequirement.forEach(authorityRequirement => {
          const requiredAuthority = authorityRequirement.requiredAuthority,
            requiredDecision = authorityRequirement.requiredDecision,
            requiredInput = authorityRequirement.requiredInput;
          if (requiredAuthority && requiredAuthority.href === "#".concat(oldId)) {
            requiredAuthority.href = "#".concat(id);
          }
          if (requiredDecision && requiredDecision.href === "#".concat(oldId)) {
            requiredDecision.href = "#".concat(id);
          }
          if (requiredInput && requiredInput.href === "#".concat(oldId)) {
            requiredInput.href = "#".concat(id);
          }
        });
      },
      informationRequirement: () => {
        element.informationRequirement.forEach(informationRequirement => {
          const requiredDecision = informationRequirement.requiredDecision,
            requiredInput = informationRequirement.requiredInput;
          if (requiredDecision && requiredDecision.href === "#".concat(oldId)) {
            requiredDecision.href = "#".concat(id);
          }
          if (requiredInput && requiredInput.href === "#".concat(oldId)) {
            requiredInput.href = "#".concat(id);
          }
        });
      },
      knowledgeRequirement: () => {
        element.knowledgeRequirement.forEach(knowledgeRequirement => {
          const requiredKnowledge = knowledgeRequirement.requiredKnowledge;
          if (requiredKnowledge && requiredKnowledge.href === "#".concat(oldId)) {
            requiredKnowledge.href = "#".concat(id);
          }
        });
      }
    };
    forEach$3(handlers, (handler, key) => {
      if (element[key]) {
        handler();
      }
    });
  }
  function updateAssociationReferences(element, oldId, id) {
    const handlers = {
      sourceRef: () => {
        const sourceRef = element.sourceRef;
        if (sourceRef.href === "#".concat(oldId)) {
          sourceRef.href = "#".concat(id);
        }
      },
      targetRef: () => {
        const targetRef = element.targetRef;
        if (targetRef.href === "#".concat(oldId)) {
          targetRef.href = "#".concat(id);
        }
      }
    };
    forEach$3(handlers, (handler, key) => {
      if (element[key]) {
        handler();
      }
    });
  }

  var ModelingBehavior = {
    __init__: ['createConnectionBehavior', 'idChangeBehavior', 'layoutConnectionBehavior', 'replaceConnectionBehavior', 'replaceElementBehavior'],
    createConnectionBehavior: ['type', CreateConnectionBehavior],
    idChangeBehavior: ['type', IdChangeBehavior],
    layoutConnectionBehavior: ['type', LayoutConnectionBehavior],
    replaceConnectionBehavior: ['type', ReplaceConnectionBehavior],
    replaceElementBehavior: ['type', ReplaceElementBehaviour]
  };

  /**
   * A basic provider that may be extended to implement modeling rules.
   *
   * Extensions should implement the init method to actually add their custom
   * modeling checks. Checks may be added via the #addRule(action, fn) method.
   *
   * @param {EventBus} eventBus
   */
  function RuleProvider(eventBus) {
    CommandInterceptor.call(this, eventBus);
    this.init();
  }
  RuleProvider.$inject = ['eventBus'];
  e$3(RuleProvider, CommandInterceptor);

  /**
   * Adds a modeling rule for the given action, implemented through
   * a callback function.
   *
   * The function will receive the modeling specific action context
   * to perform its check. It must return `false` to disallow the
   * action from happening or `true` to allow the action.
   *
   * A rule provider may pass over the evaluation to lower priority
   * rules by returning return nothing (or <code>undefined</code>).
   *
   * @example
   *
   * ResizableRules.prototype.init = function() {
   *
   *   \/**
   *    * Return `true`, `false` or nothing to denote
   *    * _allowed_, _not allowed_ and _continue evaluating_.
   *    *\/
   *   this.addRule('shape.resize', function(context) {
   *
   *     var shape = context.shape;
   *
   *     if (!context.newBounds) {
   *       // check general resizability
   *       if (!shape.resizable) {
   *         return false;
   *       }
   *
   *       // not returning anything (read: undefined)
   *       // will continue the evaluation of other rules
   *       // (with lower priority)
   *       return;
   *     } else {
   *       // element must have minimum size of 10*10 points
   *       return context.newBounds.width > 10 && context.newBounds.height > 10;
   *     }
   *   });
   * };
   *
   * @param {string|Array<string>} actions the identifier for the modeling action to check
   * @param {number} [priority] the priority at which this rule is being applied
   * @param {Function} fn the callback function that performs the actual check
   */
  RuleProvider.prototype.addRule = function (actions, priority, fn) {
    var self = this;
    if (typeof actions === 'string') {
      actions = [actions];
    }
    actions.forEach(function (action) {
      self.canExecute(action, priority, function (context, action, event) {
        return fn(context);
      }, true);
    });
  };

  /**
   * Implement this method to add new rules during provider initialization.
   */
  RuleProvider.prototype.init = function () {};

  /**
   * DRD modeling rules.
   */
  function DrdRules(injector) {
    injector.invoke(RuleProvider, this);
  }
  e$3(DrdRules, RuleProvider);
  DrdRules.$inject = ['injector'];
  DrdRules.prototype.init = function () {
    this.addRule('connection.create', function (context) {
      var source = context.source,
        target = context.target;
      return canConnect(source, target);
    });
    this.addRule('connection.reconnect', function (context) {
      context.connection;
        var source = context.source,
        target = context.target;
      return canConnect(source, target);
    });
    this.addRule('connection.updateWaypoints', function (context) {
      const connection = context.connection;
      return {
        type: connection.type,
        businessObject: connection.businessObject
      };
    });
    this.addRule('elements.move', function (context) {
      var target = context.target,
        shapes = context.shapes;
        context.position;
      return canMove(shapes, target);
    });
    this.addRule('shape.create', function (context) {
      var shape = context.shape,
        target = context.target;
      return canCreate(shape, target);
    });
    this.addRule('shape.resize', function (context) {
      var shape = context.shape;
      return is(shape, 'dmn:TextAnnotation');
    });
  };
  DrdRules.prototype.canConnect = canConnect;
  DrdRules.prototype.canCreate = canCreate;
  DrdRules.prototype.canMove = canMove;
  function canConnect(source, target) {
    if (!source || isLabel$2(source) || !target || isLabel$2(target)) {
      return null;
    }
    if (source === target) {
      return false;
    }
    if (is(source, 'dmn:BusinessKnowledgeModel') && isAny(target, ['dmn:BusinessKnowledgeModel', 'dmn:Decision'])) {
      return {
        type: 'dmn:KnowledgeRequirement'
      };
    }
    if (is(source, 'dmn:Decision')) {
      if (is(target, 'dmn:Decision')) {
        return {
          type: 'dmn:InformationRequirement'
        };
      }
      if (is(target, 'dmn:KnowledgeSource')) {
        return {
          type: 'dmn:AuthorityRequirement'
        };
      }
    }
    if (is(source, 'dmn:Definitions') || is(target, 'dmn:Definitions')) {
      return false;
    }
    if (is(source, 'dmn:InputData')) {
      if (is(target, 'dmn:Decision')) {
        return {
          type: 'dmn:InformationRequirement'
        };
      }
      if (is(target, 'dmn:KnowledgeSource')) {
        return {
          type: 'dmn:AuthorityRequirement'
        };
      }
    }
    if (is(source, 'dmn:KnowledgeSource') && isAny(target, ['dmn:BusinessKnowledgeModel', 'dmn:Decision', 'dmn:KnowledgeSource'])) {
      return {
        type: 'dmn:AuthorityRequirement'
      };
    }
    if (is(source, 'dmn:TextAnnotation') && !is(target, 'dmn:TextAnnotation') || !is(source, 'dmn:TextAnnotation') && is(target, 'dmn:TextAnnotation')) {
      return {
        type: 'dmn:Association'
      };
    }
    return false;
  }
  function canCreate(shape, target) {
    return isAny(shape, ['dmn:BusinessKnowledgeModel', 'dmn:Decision', 'dmn:InputData', 'dmn:KnowledgeSource', 'dmn:TextAnnotation']) && is(target, 'dmn:Definitions');
  }
  function canMove(elements, target) {
    if (!isArray$6(elements)) {
      elements = [elements];
    }

    // allow default move check to start move operation
    if (!target) {
      return true;
    }
    if (every(elements, function (element) {
      return isAny(element, ['dmn:BusinessKnowledgeModel', 'dmn:Decision', 'dmn:InputData', 'dmn:KnowledgeSource', 'dmn:TextAnnotation', 'dmn:InformationRequirement', 'dmn:AuthorityRequirement', 'dmn:KnowledgeRequirement', 'dmn:Association']);
    }) && is(target, 'dmn:Definitions')) {
      return true;
    }
    return false;
  }
  function isLabel$2(element) {
    return !!element.labelTarget;
  }

  var Rules$4 = {
    __depends__: [Rules$5],
    __init__: ['drdRules'],
    drdRules: ['type', DrdRules]
  };

  function DrdFactory(moddle) {
    this._model = moddle;
  }
  DrdFactory.$inject = ['moddle'];
  DrdFactory.prototype._needsId = function (element) {
    return isAny(element, ['dmn:Artifact', 'dmn:DMNElement', 'dmn:DRGElement', 'dmndi:DMNDiagram', 'dmndi:DMNDiagramElement']);
  };
  DrdFactory.prototype._ensureId = function (element) {
    var prefix = (element.$type || '').replace(/^[^:]*:/g, '') + '_';
    if (!element.id && this._needsId(element)) {
      element.id = this._model.ids.nextPrefixed(prefix, element);
    }
  };
  DrdFactory.prototype.create = function (type, attrs) {
    var element = this._model.create(type, attrs || {});
    this._ensureId(element);
    return element;
  };
  DrdFactory.prototype.createDiShape = function (semantic, bounds, attrs) {
    return this.create('dmndi:DMNShape', assign$4({
      dmnElementRef: semantic,
      bounds: this.createDiBounds(bounds)
    }, attrs));
  };
  DrdFactory.prototype.createDiBounds = function (bounds) {
    return this.create('dc:Bounds', bounds);
  };
  DrdFactory.prototype.createDiEdge = function (semantic, waypoints, attrs) {
    return this.create('dmndi:DMNEdge', {
      dmnElementRef: semantic,
      waypoint: this.createDiWaypoints(waypoints)
    }, attrs);
  };
  DrdFactory.prototype.createDiWaypoints = function (waypoints) {
    var self = this;
    return waypoints.map(function (waypoint) {
      return self.createDiWaypoint(waypoint);
    });
  };
  DrdFactory.prototype.createDiWaypoint = function (waypoint) {
    return this.create('dc:Point', pick$1(waypoint, ['x', 'y']));
  };
  DrdFactory.prototype.createExtensionElements = function () {
    return this.create('dmn:ExtensionElements', {
      values: []
    });
  };

  /**
   * Update DMN 1.3 information.
   */
  function DrdUpdater(connectionDocking, definitionPropertiesView, drdFactory, drdRules, injector) {
    injector.invoke(CommandInterceptor, this);
    this._definitionPropertiesView = definitionPropertiesView;
    this._drdFactory = drdFactory;
    this._drdRules = drdRules;
    var self = this;
    function cropConnection(context) {
      var connection = context.connection,
        cropped = context.cropped;
      if (!cropped) {
        connection.waypoints = connectionDocking.getCroppedWaypoints(connection);
        context.cropped = true;
      }
    }
    this.executed(['connection.create', 'connection.layout'], cropConnection, true);
    this.reverted(['connection.layout'], function (context) {
      delete context.cropped;
    }, true);
    function updateParent(context) {
      var connection = context.connection,
        parent = context.parent,
        shape = context.shape;
      if (connection && !is(connection, 'dmn:Association')) {
        parent = connection.target;
      }
      self.updateParent(shape || connection, parent);
    }
    function reverseUpdateParent(context) {
      var connection = context.connection,
        shape = context.shape;
      var oldParent = context.parent || context.newParent;
      if (connection && !is(connection, 'dmn:Association')) {
        oldParent = connection.target;
      }
      self.updateParent(shape || connection, oldParent);
    }
    this.executed(['connection.create', 'connection.delete', 'connection.move', 'shape.create', 'shape.delete'], updateParent, true);
    this.reverted(['connection.create', 'connection.delete', 'connection.move', 'shape.create', 'shape.delete'], reverseUpdateParent, true);
    function updateBounds(context) {
      var shape = context.shape;
      if (!(is(shape, 'dmn:DRGElement') || is(shape, 'dmn:TextAnnotation'))) {
        return;
      }
      self.updateBounds(shape);
    }
    this.executed(['shape.create', 'shape.move', 'shape.resize'], updateBounds, true);
    this.reverted(['shape.create', 'shape.move', 'shape.resize'], updateBounds, true);
    function updateConnectionWaypoints(context) {
      self.updateConnectionWaypoints(context);
    }
    this.executed(['connection.create', 'connection.layout', 'connection.move', 'connection.updateWaypoints'], updateConnectionWaypoints, true);
    this.reverted(['connection.create', 'connection.layout', 'connection.move', 'connection.updateWaypoints'], updateConnectionWaypoints, true);
    this.executed('connection.create', function (context) {
      var connection = context.connection,
        connectionBo = connection.businessObject,
        target = context.target,
        targetBo = target.businessObject;
      if (is(connection, 'dmn:Association')) {
        updateParent(context);
      } else {
        // parent is target
        self.updateSemanticParent(connectionBo, targetBo);
      }
    }, true);
    this.reverted('connection.create', function (context) {
      reverseUpdateParent(context);
    }, true);
    this.executed('connection.reconnect', function (context) {
      var connection = context.connection,
        connectionBo = connection.businessObject,
        newTarget = context.newTarget,
        newTargetBo = newTarget.businessObject;
      if (is(connectionBo, 'dmn:Association')) {
        return;
      }
      self.updateSemanticParent(connectionBo, newTargetBo);
    }, true);
    this.reverted('connection.reconnect', function (context) {
      var connection = context.connection,
        connectionBo = connection.businessObject,
        oldTarget = context.oldTarget,
        oldTargetBo = oldTarget.businessObject;
      if (is(connectionBo, 'dmn:Association')) {
        return;
      }
      self.updateSemanticParent(connectionBo, oldTargetBo);
    }, true);
    this.executed('element.updateProperties', function (context) {
      definitionPropertiesView.update();
    }, true);
    this.reverted('element.updateProperties', function (context) {
      definitionPropertiesView.update();
    }, true);
  }
  e$3(DrdUpdater, CommandInterceptor);
  DrdUpdater.$inject = ['connectionDocking', 'definitionPropertiesView', 'drdFactory', 'drdRules', 'injector'];
  DrdUpdater.prototype.updateBounds = function (shape) {
    var businessObject = shape.businessObject,
      bounds = businessObject.di.bounds;

    // update bounds
    assign$4(bounds, {
      x: shape.x,
      y: shape.y,
      width: shape.width,
      height: shape.height
    });
  };
  DrdUpdater.prototype.updateConnectionWaypoints = function (context) {
    var drdFactory = this._drdFactory;
    var connection = context.connection,
      businessObject = connection.businessObject,
      edge = businessObject.di;
    edge.waypoint = drdFactory.createDiWaypoints(connection.waypoints).map(function (waypoint) {
      waypoint.$parent = edge;
      return waypoint;
    });
  };
  DrdUpdater.prototype.updateParent = function (element, oldParent) {
    var parent = element.parent;
    if (!is(element, 'dmn:DRGElement') && !is(element, 'dmn:Artifact')) {
      parent = oldParent;
    }
    var businessObject = element.businessObject,
      parentBo = parent && parent.businessObject;
    this.updateSemanticParent(businessObject, parentBo);
    this.updateDiParent(businessObject.di, parentBo && parentBo.di);
  };
  DrdUpdater.prototype.updateSemanticParent = function (businessObject, parent) {
    var children, containment;
    if (businessObject.$parent === parent) {
      return;
    }
    if (is(businessObject, 'dmn:DRGElement')) {
      containment = 'drgElement';
    } else if (is(businessObject, 'dmn:Artifact')) {
      containment = 'artifact';
    } else if (is(businessObject, 'dmn:InformationRequirement')) {
      containment = 'informationRequirement';
    } else if (is(businessObject, 'dmn:AuthorityRequirement')) {
      containment = 'authorityRequirement';
    } else if (is(businessObject, 'dmn:KnowledgeRequirement')) {
      containment = 'knowledgeRequirement';
    }
    if (businessObject.$parent) {
      // remove from old parent
      children = businessObject.$parent.get(containment);
      remove$1(children, businessObject);
    }
    if (parent) {
      // add to new parent
      children = parent.get(containment);
      if (children) {
        children.push(businessObject);
        businessObject.$parent = parent;
      }
    } else {
      businessObject.$parent = null;
    }
  };
  DrdUpdater.prototype.updateDiParent = function (di, parentDi) {
    if (di.$parent === parentDi) {
      return;
    }
    if (isAny(di, ['dmndi:DMNEdge', 'dmndi:DMNShape'])) {
      var diagram = parentDi || di;
      while (!is(diagram, 'dmndi:DMNDiagram')) {
        diagram = diagram.$parent;
      }
      var diagramElements = diagram.get('diagramElements');
      if (parentDi) {
        di.$parent = diagram;
        add$1(diagramElements, di);
      } else {
        di.$parent = null;
        remove$1(diagramElements, di);
      }
    } else {
      throw new Error('unsupported');
    }
  };

  /**
   * A handler that align elements in a certain way.
   *
   */
  function AlignElements(modeling, canvas) {
    this._modeling = modeling;
    this._canvas = canvas;
  }
  AlignElements.$inject = ['modeling', 'canvas'];
  AlignElements.prototype.preExecute = function (context) {
    var modeling = this._modeling;
    var elements = context.elements,
      alignment = context.alignment;
    forEach$3(elements, function (element) {
      var delta = {
        x: 0,
        y: 0
      };
      if (alignment.left) {
        delta.x = alignment.left - element.x;
      } else if (alignment.right) {
        delta.x = alignment.right - element.width - element.x;
      } else if (alignment.center) {
        delta.x = alignment.center - Math.round(element.width / 2) - element.x;
      } else if (alignment.top) {
        delta.y = alignment.top - element.y;
      } else if (alignment.bottom) {
        delta.y = alignment.bottom - element.height - element.y;
      } else if (alignment.middle) {
        delta.y = alignment.middle - Math.round(element.height / 2) - element.y;
      }
      modeling.moveElements([element], delta, element.parent);
    });
  };
  AlignElements.prototype.postExecute = function (context) {};

  /**
   * A handler that implements reversible appending of shapes
   * to a source shape.
   *
   * @param {canvas} Canvas
   * @param {elementFactory} ElementFactory
   * @param {modeling} Modeling
   */
  function AppendShapeHandler(modeling) {
    this._modeling = modeling;
  }
  AppendShapeHandler.$inject = ['modeling'];

  // api //////////////////////

  /**
   * Creates a new shape
   *
   * @param {Object} context
   * @param {ElementDescriptor} context.shape the new shape
   * @param {ElementDescriptor} context.source the source object
   * @param {ElementDescriptor} context.parent the parent object
   * @param {Point} context.position position of the new element
   */
  AppendShapeHandler.prototype.preExecute = function (context) {
    var source = context.source;
    if (!source) {
      throw new Error('source required');
    }
    var target = context.target || source.parent,
      shape = context.shape,
      hints = context.hints || {};
    shape = context.shape = this._modeling.createShape(shape, context.position, target, {
      attach: hints.attach
    });
    context.shape = shape;
  };
  AppendShapeHandler.prototype.postExecute = function (context) {
    var hints = context.hints || {};
    if (!existsConnection(context.source, context.shape)) {
      // create connection
      if (hints.connectionTarget === context.source) {
        this._modeling.connect(context.shape, context.source, context.connection);
      } else {
        this._modeling.connect(context.source, context.shape, context.connection);
      }
    }
  };
  function existsConnection(source, target) {
    return some(source.outgoing, function (c) {
      return c.target === target;
    });
  }

  function CreateConnectionHandler(canvas, layouter) {
    this._canvas = canvas;
    this._layouter = layouter;
  }
  CreateConnectionHandler.$inject = ['canvas', 'layouter'];

  // api //////////////////////

  /**
   * Appends a shape to a target shape
   *
   * @param {Object} context
   * @param {djs.element.Base} context.source the source object
   * @param {djs.element.Base} context.target the parent object
   * @param {Point} context.position position of the new element
   */
  CreateConnectionHandler.prototype.execute = function (context) {
    var connection = context.connection,
      source = context.source,
      target = context.target,
      parent = context.parent,
      parentIndex = context.parentIndex,
      hints = context.hints;
    if (!source || !target) {
      throw new Error('source and target required');
    }
    if (!parent) {
      throw new Error('parent required');
    }
    connection.source = source;
    connection.target = target;
    if (!connection.waypoints) {
      connection.waypoints = this._layouter.layoutConnection(connection, hints);
    }

    // add connection
    this._canvas.addConnection(connection, parent, parentIndex);
    return connection;
  };
  CreateConnectionHandler.prototype.revert = function (context) {
    var connection = context.connection;
    this._canvas.removeConnection(connection);
    connection.source = null;
    connection.target = null;
    return connection;
  };

  var round$2 = Math.round;
  function CreateElementsHandler(modeling) {
    this._modeling = modeling;
  }
  CreateElementsHandler.$inject = ['modeling'];
  CreateElementsHandler.prototype.preExecute = function (context) {
    var elements = context.elements,
      parent = context.parent,
      parentIndex = context.parentIndex,
      position = context.position,
      hints = context.hints;
    var modeling = this._modeling;

    // make sure each element has x and y
    forEach$3(elements, function (element) {
      if (!isNumber$3(element.x)) {
        element.x = 0;
      }
      if (!isNumber$3(element.y)) {
        element.y = 0;
      }
    });
    var visibleElements = filter$2(elements, function (element) {
      return !element.hidden;
    });
    var bbox = getBBox(visibleElements);

    // center elements around position
    forEach$3(elements, function (element) {
      if (isConnection$5(element)) {
        element.waypoints = map$2(element.waypoints, function (waypoint) {
          return {
            x: round$2(waypoint.x - bbox.x - bbox.width / 2 + position.x),
            y: round$2(waypoint.y - bbox.y - bbox.height / 2 + position.y)
          };
        });
      }
      assign$4(element, {
        x: round$2(element.x - bbox.x - bbox.width / 2 + position.x),
        y: round$2(element.y - bbox.y - bbox.height / 2 + position.y)
      });
    });
    var parents = getParents(elements);
    var cache = {};
    forEach$3(elements, function (element) {
      if (isConnection$5(element)) {
        cache[element.id] = isNumber$3(parentIndex) ? modeling.createConnection(cache[element.source.id], cache[element.target.id], parentIndex, element, element.parent || parent, hints) : modeling.createConnection(cache[element.source.id], cache[element.target.id], element, element.parent || parent, hints);
        return;
      }
      var createShapeHints = assign$4({}, hints);
      if (parents.indexOf(element) === -1) {
        createShapeHints.autoResize = false;
      }
      cache[element.id] = isNumber$3(parentIndex) ? modeling.createShape(element, pick$1(element, ['x', 'y', 'width', 'height']), element.parent || parent, parentIndex, createShapeHints) : modeling.createShape(element, pick$1(element, ['x', 'y', 'width', 'height']), element.parent || parent, createShapeHints);
    });
    context.elements = values$1(cache);
  };

  // helpers //////////

  function isConnection$5(element) {
    return !!element.waypoints;
  }

  var round$1 = Math.round;

  /**
   * A handler that implements reversible addition of shapes.
   *
   * @param {canvas} Canvas
   */
  function CreateShapeHandler(canvas) {
    this._canvas = canvas;
  }
  CreateShapeHandler.$inject = ['canvas'];

  // api //////////////////////

  /**
   * Appends a shape to a target shape
   *
   * @param {Object} context
   * @param {djs.model.Base} context.parent the parent object
   * @param {Point} context.position position of the new element
   */
  CreateShapeHandler.prototype.execute = function (context) {
    var shape = context.shape,
      positionOrBounds = context.position,
      parent = context.parent,
      parentIndex = context.parentIndex;
    if (!parent) {
      throw new Error('parent required');
    }
    if (!positionOrBounds) {
      throw new Error('position required');
    }

    // (1) add at event center position _or_ at given bounds
    if (positionOrBounds.width !== undefined) {
      assign$4(shape, positionOrBounds);
    } else {
      assign$4(shape, {
        x: positionOrBounds.x - round$1(shape.width / 2),
        y: positionOrBounds.y - round$1(shape.height / 2)
      });
    }

    // (2) add to canvas
    this._canvas.addShape(shape, parent, parentIndex);
    return shape;
  };

  /**
   * Undo append by removing the shape
   */
  CreateShapeHandler.prototype.revert = function (context) {
    var shape = context.shape;

    // (3) remove form canvas
    this._canvas.removeShape(shape);
    return shape;
  };

  /**
   * A handler that attaches a label to a given target shape.
   *
   * @param {Canvas} canvas
   */
  function CreateLabelHandler(canvas) {
    CreateShapeHandler.call(this, canvas);
  }
  e$3(CreateLabelHandler, CreateShapeHandler);
  CreateLabelHandler.$inject = ['canvas'];

  // api //////////////////////

  var originalExecute = CreateShapeHandler.prototype.execute;

  /**
   * Appends a label to a target shape.
   *
   * @method CreateLabelHandler#execute
   *
   * @param {Object} context
   * @param {ElementDescriptor} context.target the element the label is attached to
   * @param {ElementDescriptor} context.parent the parent object
   * @param {Point} context.position position of the new element
   */
  CreateLabelHandler.prototype.execute = function (context) {
    var label = context.shape;
    ensureValidDimensions(label);
    label.labelTarget = context.labelTarget;
    return originalExecute.call(this, context);
  };
  var originalRevert = CreateShapeHandler.prototype.revert;

  /**
   * Undo append by removing the shape
   */
  CreateLabelHandler.prototype.revert = function (context) {
    context.shape.labelTarget = null;
    return originalRevert.call(this, context);
  };

  // helpers //////////////////////

  function ensureValidDimensions(label) {
    // make sure a label has valid { width, height } dimensions
    ['width', 'height'].forEach(function (prop) {
      if (typeof label[prop] === 'undefined') {
        label[prop] = 0;
      }
    });
  }

  /**
   * Remove from the beginning of a collection until it is empty.
   *
   * This is a null-safe operation that ensures elements
   * are being removed from the given collection until the
   * collection is empty.
   *
   * The implementation deals with the fact that a remove operation
   * may touch, i.e. remove multiple elements in the collection
   * at a time.
   *
   * @param {Array<Object>} [collection]
   * @param {Function} removeFn
   *
   * @return {Array<Object>} the cleared collection
   */
  function saveClear(collection, removeFn) {
    if (typeof removeFn !== 'function') {
      throw new Error('removeFn iterator must be a function');
    }
    if (!collection) {
      return;
    }
    var e;
    while (e = collection[0]) {
      removeFn(e);
    }
    return collection;
  }

  /**
   * A handler that implements reversible deletion of Connections.
   */
  function DeleteConnectionHandler(canvas, modeling) {
    this._canvas = canvas;
    this._modeling = modeling;
  }
  DeleteConnectionHandler.$inject = ['canvas', 'modeling'];

  /**
   * - Remove connections
   */
  DeleteConnectionHandler.prototype.preExecute = function (context) {
    var modeling = this._modeling;
    var connection = context.connection;

    // remove connections
    saveClear(connection.incoming, function (connection) {
      // To make sure that the connection isn't removed twice
      // For example if a container is removed
      modeling.removeConnection(connection, {
        nested: true
      });
    });
    saveClear(connection.outgoing, function (connection) {
      modeling.removeConnection(connection, {
        nested: true
      });
    });
  };
  DeleteConnectionHandler.prototype.execute = function (context) {
    var connection = context.connection,
      parent = connection.parent;
    context.parent = parent;

    // remember containment
    context.parentIndex = indexOf(parent.children, connection);
    context.source = connection.source;
    context.target = connection.target;
    this._canvas.removeConnection(connection);
    connection.source = null;
    connection.target = null;
    return connection;
  };

  /**
   * Command revert implementation.
   */
  DeleteConnectionHandler.prototype.revert = function (context) {
    var connection = context.connection,
      parent = context.parent,
      parentIndex = context.parentIndex;
    connection.source = context.source;
    connection.target = context.target;

    // restore containment
    add$1(parent.children, connection, parentIndex);
    this._canvas.addConnection(connection, parent);
    return connection;
  };

  function DeleteElementsHandler(modeling, elementRegistry) {
    this._modeling = modeling;
    this._elementRegistry = elementRegistry;
  }
  DeleteElementsHandler.$inject = ['modeling', 'elementRegistry'];
  DeleteElementsHandler.prototype.postExecute = function (context) {
    var modeling = this._modeling,
      elementRegistry = this._elementRegistry,
      elements = context.elements;
    forEach$3(elements, function (element) {
      // element may have been removed with previous
      // remove operations already (e.g. in case of nesting)
      if (!elementRegistry.get(element.id)) {
        return;
      }
      if (element.waypoints) {
        modeling.removeConnection(element);
      } else {
        modeling.removeShape(element);
      }
    });
  };

  /**
   * A handler that implements reversible deletion of shapes.
   *
   */
  function DeleteShapeHandler(canvas, modeling) {
    this._canvas = canvas;
    this._modeling = modeling;
  }
  DeleteShapeHandler.$inject = ['canvas', 'modeling'];

  /**
   * - Remove connections
   * - Remove all direct children
   */
  DeleteShapeHandler.prototype.preExecute = function (context) {
    var modeling = this._modeling;
    var shape = context.shape;

    // remove connections
    saveClear(shape.incoming, function (connection) {
      // To make sure that the connection isn't removed twice
      // For example if a container is removed
      modeling.removeConnection(connection, {
        nested: true
      });
    });
    saveClear(shape.outgoing, function (connection) {
      modeling.removeConnection(connection, {
        nested: true
      });
    });

    // remove child shapes and connections
    saveClear(shape.children, function (child) {
      if (isConnection$4(child)) {
        modeling.removeConnection(child, {
          nested: true
        });
      } else {
        modeling.removeShape(child, {
          nested: true
        });
      }
    });
  };

  /**
   * Remove shape and remember the parent
   */
  DeleteShapeHandler.prototype.execute = function (context) {
    var canvas = this._canvas;
    var shape = context.shape,
      oldParent = shape.parent;
    context.oldParent = oldParent;

    // remove containment
    context.oldParentIndex = indexOf(oldParent.children, shape);

    // remove shape
    canvas.removeShape(shape);
    return shape;
  };

  /**
   * Command revert implementation
   */
  DeleteShapeHandler.prototype.revert = function (context) {
    var canvas = this._canvas;
    var shape = context.shape,
      oldParent = context.oldParent,
      oldParentIndex = context.oldParentIndex;

    // restore containment
    add$1(oldParent.children, shape, oldParentIndex);
    canvas.addShape(shape, oldParent);
    return shape;
  };
  function isConnection$4(element) {
    return element.waypoints;
  }

  /**
   * A handler that distributes elements evenly.
   */
  function DistributeElements(modeling) {
    this._modeling = modeling;
  }
  DistributeElements.$inject = ['modeling'];
  var OFF_AXIS = {
    x: 'y',
    y: 'x'
  };
  DistributeElements.prototype.preExecute = function (context) {
    var modeling = this._modeling;
    var groups = context.groups,
      axis = context.axis,
      dimension = context.dimension;
    function updateRange(group, element) {
      group.range.min = Math.min(element[axis], group.range.min);
      group.range.max = Math.max(element[axis] + element[dimension], group.range.max);
    }
    function center(element) {
      return element[axis] + element[dimension] / 2;
    }
    function lastIdx(arr) {
      return arr.length - 1;
    }
    function rangeDiff(range) {
      return range.max - range.min;
    }
    function centerElement(refCenter, element) {
      var delta = {
        y: 0
      };
      delta[axis] = refCenter - center(element);
      if (delta[axis]) {
        delta[OFF_AXIS[axis]] = 0;
        modeling.moveElements([element], delta, element.parent);
      }
    }
    var firstGroup = groups[0],
      lastGroupIdx = lastIdx(groups),
      lastGroup = groups[lastGroupIdx];
    var margin,
      spaceInBetween,
      groupsSize = 0; // the size of each range

    forEach$3(groups, function (group, idx) {
      var sortedElements, refElem, refCenter;
      if (group.elements.length < 2) {
        if (idx && idx !== groups.length - 1) {
          updateRange(group, group.elements[0]);
          groupsSize += rangeDiff(group.range);
        }
        return;
      }
      sortedElements = sortBy(group.elements, axis);
      refElem = sortedElements[0];
      if (idx === lastGroupIdx) {
        refElem = sortedElements[lastIdx(sortedElements)];
      }
      refCenter = center(refElem);

      // wanna update the ranges after the shapes have been centered
      group.range = null;
      forEach$3(sortedElements, function (element) {
        centerElement(refCenter, element);
        if (group.range === null) {
          group.range = {
            min: element[axis],
            max: element[axis] + element[dimension]
          };
          return;
        }

        // update group's range after centering the range elements
        updateRange(group, element);
      });
      if (idx && idx !== groups.length - 1) {
        groupsSize += rangeDiff(group.range);
      }
    });
    spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);
    margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));
    if (margin < groups.length - 1) {
      return;
    }
    forEach$3(groups, function (group, groupIdx) {
      var delta = {},
        prevGroup;
      if (group === firstGroup || group === lastGroup) {
        return;
      }
      prevGroup = groups[groupIdx - 1];
      group.range.max = 0;
      forEach$3(group.elements, function (element, idx) {
        delta[OFF_AXIS[axis]] = 0;
        delta[axis] = prevGroup.range.max - element[axis] + margin;
        if (group.range.min !== element[axis]) {
          delta[axis] += element[axis] - group.range.min;
        }
        if (delta[axis]) {
          modeling.moveElements([element], delta, element.parent);
        }
        group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);
      });
    });
  };
  DistributeElements.prototype.postExecute = function (context) {};

  /**
   * A handler that implements reversible moving of shapes.
   */
  function LayoutConnectionHandler(layouter, canvas) {
    this._layouter = layouter;
    this._canvas = canvas;
  }
  LayoutConnectionHandler.$inject = ['layouter', 'canvas'];
  LayoutConnectionHandler.prototype.execute = function (context) {
    var connection = context.connection;
    var oldWaypoints = connection.waypoints;
    assign$4(context, {
      oldWaypoints: oldWaypoints
    });
    connection.waypoints = this._layouter.layoutConnection(connection, context.hints);
    return connection;
  };
  LayoutConnectionHandler.prototype.revert = function (context) {
    var connection = context.connection;
    connection.waypoints = context.oldWaypoints;
    return connection;
  };

  /**
   * A handler that implements reversible moving of connections.
   *
   * The handler differs from the layout connection handler in a sense
   * that it preserves the connection layout.
   */
  function MoveConnectionHandler() {}
  MoveConnectionHandler.prototype.execute = function (context) {
    var connection = context.connection,
      delta = context.delta;
    var newParent = context.newParent || connection.parent,
      newParentIndex = context.newParentIndex,
      oldParent = connection.parent;

    // save old parent in context
    context.oldParent = oldParent;
    context.oldParentIndex = remove$1(oldParent.children, connection);

    // add to new parent at position
    add$1(newParent.children, connection, newParentIndex);

    // update parent
    connection.parent = newParent;

    // update waypoint positions
    forEach$3(connection.waypoints, function (p) {
      p.x += delta.x;
      p.y += delta.y;
      if (p.original) {
        p.original.x += delta.x;
        p.original.y += delta.y;
      }
    });
    return connection;
  };
  MoveConnectionHandler.prototype.revert = function (context) {
    var connection = context.connection,
      newParent = connection.parent,
      oldParent = context.oldParent,
      oldParentIndex = context.oldParentIndex,
      delta = context.delta;

    // remove from newParent
    remove$1(newParent.children, connection);

    // restore previous location in old parent
    add$1(oldParent.children, connection, oldParentIndex);

    // restore parent
    connection.parent = oldParent;

    // revert to old waypoint positions
    forEach$3(connection.waypoints, function (p) {
      p.x -= delta.x;
      p.y -= delta.y;
      if (p.original) {
        p.original.x -= delta.x;
        p.original.y -= delta.y;
      }
    });
    return connection;
  };

  /**
   * Calculates the absolute point relative to the new element's position
   *
   * @param {point} point [absolute]
   * @param {bounds} oldBounds
   * @param {bounds} newBounds
   *
   * @return {point} point [absolute]
   */
  function getNewAttachPoint(point, oldBounds, newBounds) {
    var oldCenter = center(oldBounds),
      newCenter = center(newBounds),
      oldDelta = delta(point, oldCenter);
    var newDelta = {
      x: oldDelta.x * (newBounds.width / oldBounds.width),
      y: oldDelta.y * (newBounds.height / oldBounds.height)
    };
    return roundPoint({
      x: newCenter.x + newDelta.x,
      y: newCenter.y + newDelta.y
    });
  }

  function getResizedSourceAnchor(connection, shape, oldBounds) {
    var waypoints = safeGetWaypoints(connection),
      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
      oldAnchor = waypoints[0];

    // new anchor is the last waypoint enclosed be resized source
    if (waypointsInsideNewBounds.length) {
      return waypointsInsideNewBounds[waypointsInsideNewBounds.length - 1];
    }
    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
  }
  function getResizedTargetAnchor(connection, shape, oldBounds) {
    var waypoints = safeGetWaypoints(connection),
      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
      oldAnchor = waypoints[waypoints.length - 1];

    // new anchor is the first waypoint enclosed be resized target
    if (waypointsInsideNewBounds.length) {
      return waypointsInsideNewBounds[0];
    }
    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
  }
  function getMovedSourceAnchor(connection, source, moveDelta) {
    var waypoints = safeGetWaypoints(connection),
      oldBounds = subtract(source, moveDelta),
      oldAnchor = waypoints[0];
    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);
  }
  function getMovedTargetAnchor(connection, target, moveDelta) {
    var waypoints = safeGetWaypoints(connection),
      oldBounds = subtract(target, moveDelta),
      oldAnchor = waypoints[waypoints.length - 1];
    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);
  }

  // helpers //////////////////////

  function subtract(bounds, delta) {
    return {
      x: bounds.x - delta.x,
      y: bounds.y - delta.y,
      width: bounds.width,
      height: bounds.height
    };
  }

  /**
   * Return waypoints of given connection; throw if non exists (should not happen!!).
   *
   * @param {Connection} connection
   *
   * @return {Array<Point>}
   */
  function safeGetWaypoints(connection) {
    var waypoints = connection.waypoints;
    if (!waypoints.length) {
      throw new Error('connection#' + connection.id + ': no waypoints');
    }
    return waypoints;
  }
  function getWaypointsInsideBounds(waypoints, bounds) {
    var originalWaypoints = map$2(waypoints, getOriginal);
    return filter$2(originalWaypoints, function (waypoint) {
      return isInsideBounds(waypoint, bounds);
    });
  }

  /**
   * Checks if point is inside bounds, incl. edges.
   *
   * @param {Point} point
   * @param {Bounds} bounds
   */
  function isInsideBounds(point, bounds) {
    return getOrientation(bounds, point, 1) === 'intersect';
  }
  function getOriginal(point) {
    return point.original || point;
  }

  function MoveClosure() {
    this.allShapes = {};
    this.allConnections = {};
    this.enclosedElements = {};
    this.enclosedConnections = {};
    this.topLevel = {};
  }
  MoveClosure.prototype.add = function (element, isTopLevel) {
    return this.addAll([element], isTopLevel);
  };
  MoveClosure.prototype.addAll = function (elements, isTopLevel) {
    var newClosure = getClosure(elements, !!isTopLevel, this);
    assign$4(this, newClosure);
    return this;
  };

  /**
   * A helper that is able to carry out serialized move
   * operations on multiple elements.
   *
   * @param {Modeling} modeling
   */
  function MoveHelper(modeling) {
    this._modeling = modeling;
  }

  /**
   * Move the specified elements and all children by the given delta.
   *
   * This moves all enclosed connections, too and layouts all affected
   * external connections.
   *
   * @param  {Array<djs.model.Base>} elements
   * @param  {Point} delta
   * @param  {djs.model.Base} newParent applied to the first level of shapes
   *
   * @return {Array<djs.model.Base>} list of touched elements
   */
  MoveHelper.prototype.moveRecursive = function (elements, delta, newParent) {
    if (!elements) {
      return [];
    } else {
      return this.moveClosure(this.getClosure(elements), delta, newParent);
    }
  };

  /**
   * Move the given closure of elmements.
   *
   * @param {Object} closure
   * @param {Point} delta
   * @param {djs.model.Base} [newParent]
   * @param {djs.model.Base} [newHost]
   */
  MoveHelper.prototype.moveClosure = function (closure, delta, newParent, newHost, primaryShape) {
    var modeling = this._modeling;
    var allShapes = closure.allShapes,
      allConnections = closure.allConnections,
      enclosedConnections = closure.enclosedConnections,
      topLevel = closure.topLevel,
      keepParent = false;
    if (primaryShape && primaryShape.parent === newParent) {
      keepParent = true;
    }

    // move all shapes
    forEach$3(allShapes, function (shape) {
      // move the element according to the given delta
      modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {
        recurse: false,
        layout: false
      });
    });

    // move all child connections / layout external connections
    forEach$3(allConnections, function (c) {
      var sourceMoved = !!allShapes[c.source.id],
        targetMoved = !!allShapes[c.target.id];
      if (enclosedConnections[c.id] && sourceMoved && targetMoved) {
        modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);
      } else {
        modeling.layoutConnection(c, {
          connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),
          connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)
        });
      }
    });
  };

  /**
   * Returns the closure for the selected elements
   *
   * @param  {Array<djs.model.Base>} elements
   * @return {MoveClosure} closure
   */
  MoveHelper.prototype.getClosure = function (elements) {
    return new MoveClosure().addAll(elements, true);
  };

  /**
   * A handler that implements reversible moving of shapes.
   */
  function MoveElementsHandler(modeling) {
    this._helper = new MoveHelper(modeling);
  }
  MoveElementsHandler.$inject = ['modeling'];
  MoveElementsHandler.prototype.preExecute = function (context) {
    context.closure = this._helper.getClosure(context.shapes);
  };
  MoveElementsHandler.prototype.postExecute = function (context) {
    var hints = context.hints,
      primaryShape;
    if (hints && hints.primaryShape) {
      primaryShape = hints.primaryShape;
      hints.oldParent = primaryShape.parent;
    }
    this._helper.moveClosure(context.closure, context.delta, context.newParent, context.newHost, primaryShape);
  };

  /**
   * A handler that implements reversible moving of shapes.
   */
  function MoveShapeHandler(modeling) {
    this._modeling = modeling;
    this._helper = new MoveHelper(modeling);
  }
  MoveShapeHandler.$inject = ['modeling'];
  MoveShapeHandler.prototype.execute = function (context) {
    var shape = context.shape,
      delta = context.delta,
      newParent = context.newParent || shape.parent,
      newParentIndex = context.newParentIndex,
      oldParent = shape.parent;
    context.oldBounds = pick$1(shape, ['x', 'y', 'width', 'height']);

    // save old parent in context
    context.oldParent = oldParent;
    context.oldParentIndex = remove$1(oldParent.children, shape);

    // add to new parent at position
    add$1(newParent.children, shape, newParentIndex);

    // update shape parent + position
    assign$4(shape, {
      parent: newParent,
      x: shape.x + delta.x,
      y: shape.y + delta.y
    });
    return shape;
  };
  MoveShapeHandler.prototype.postExecute = function (context) {
    var shape = context.shape,
      delta = context.delta,
      hints = context.hints;
    var modeling = this._modeling;
    if (hints.layout !== false) {
      forEach$3(shape.incoming, function (c) {
        modeling.layoutConnection(c, {
          connectionEnd: getMovedTargetAnchor(c, shape, delta)
        });
      });
      forEach$3(shape.outgoing, function (c) {
        modeling.layoutConnection(c, {
          connectionStart: getMovedSourceAnchor(c, shape, delta)
        });
      });
    }
    if (hints.recurse !== false) {
      this.moveChildren(context);
    }
  };
  MoveShapeHandler.prototype.revert = function (context) {
    var shape = context.shape,
      oldParent = context.oldParent,
      oldParentIndex = context.oldParentIndex,
      delta = context.delta;

    // restore previous location in old parent
    add$1(oldParent.children, shape, oldParentIndex);

    // revert to old position and parent
    assign$4(shape, {
      parent: oldParent,
      x: shape.x - delta.x,
      y: shape.y - delta.y
    });
    return shape;
  };
  MoveShapeHandler.prototype.moveChildren = function (context) {
    var delta = context.delta,
      shape = context.shape;
    this._helper.moveRecursive(shape.children, delta, null);
  };
  MoveShapeHandler.prototype.getNewParent = function (context) {
    return context.newParent || context.shape.parent;
  };

  /**
   * Reconnect connection handler
   */
  function ReconnectConnectionHandler(modeling) {
    this._modeling = modeling;
  }
  ReconnectConnectionHandler.$inject = ['modeling'];
  ReconnectConnectionHandler.prototype.execute = function (context) {
    var newSource = context.newSource,
      newTarget = context.newTarget,
      connection = context.connection,
      dockingOrPoints = context.dockingOrPoints;
    if (!newSource && !newTarget) {
      throw new Error('newSource or newTarget required');
    }
    if (isArray$6(dockingOrPoints)) {
      context.oldWaypoints = connection.waypoints;
      connection.waypoints = dockingOrPoints;
    }
    if (newSource) {
      context.oldSource = connection.source;
      connection.source = newSource;
    }
    if (newTarget) {
      context.oldTarget = connection.target;
      connection.target = newTarget;
    }
    return connection;
  };
  ReconnectConnectionHandler.prototype.postExecute = function (context) {
    var connection = context.connection,
      newSource = context.newSource,
      newTarget = context.newTarget,
      dockingOrPoints = context.dockingOrPoints,
      hints = context.hints || {};
    var layoutConnectionHints = {};
    if (hints.connectionStart) {
      layoutConnectionHints.connectionStart = hints.connectionStart;
    }
    if (hints.connectionEnd) {
      layoutConnectionHints.connectionEnd = hints.connectionEnd;
    }
    if (hints.layoutConnection === false) {
      return;
    }
    if (newSource && (!newTarget || hints.docking === 'source')) {
      layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart || getDocking(isArray$6(dockingOrPoints) ? dockingOrPoints[0] : dockingOrPoints);
    }
    if (newTarget && (!newSource || hints.docking === 'target')) {
      layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd || getDocking(isArray$6(dockingOrPoints) ? dockingOrPoints[dockingOrPoints.length - 1] : dockingOrPoints);
    }
    if (hints.newWaypoints) {
      layoutConnectionHints.waypoints = hints.newWaypoints;
    }
    this._modeling.layoutConnection(connection, layoutConnectionHints);
  };
  ReconnectConnectionHandler.prototype.revert = function (context) {
    var oldSource = context.oldSource,
      oldTarget = context.oldTarget,
      oldWaypoints = context.oldWaypoints,
      connection = context.connection;
    if (oldSource) {
      connection.source = oldSource;
    }
    if (oldTarget) {
      connection.target = oldTarget;
    }
    if (oldWaypoints) {
      connection.waypoints = oldWaypoints;
    }
    return connection;
  };

  // helpers //////////

  function getDocking(point) {
    return point.original || point;
  }

  /**
   * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will
   * be kept if possible.
   *
   * @class
   * @constructor
   *
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function ReplaceShapeHandler(modeling, rules) {
    this._modeling = modeling;
    this._rules = rules;
  }
  ReplaceShapeHandler.$inject = ['modeling', 'rules'];

  /**
   * Add new shape.
   *
   * @param {Object} context
   * @param {djs.model.Shape} context.oldShape
   * @param {Object} context.newData
   * @param {string} context.newData.type
   * @param {number} context.newData.x
   * @param {number} context.newData.y
   * @param {Object} [hints]
   */
  ReplaceShapeHandler.prototype.preExecute = function (context) {
    var self = this,
      modeling = this._modeling,
      rules = this._rules;
    var oldShape = context.oldShape,
      newData = context.newData,
      hints = context.hints || {},
      newShape;
    function canReconnect(source, target, connection) {
      return rules.allowed('connection.reconnect', {
        connection: connection,
        source: source,
        target: target
      });
    }

    // (1) add new shape at given position
    var position = {
      x: newData.x,
      y: newData.y
    };
    var oldBounds = {
      x: oldShape.x,
      y: oldShape.y,
      width: oldShape.width,
      height: oldShape.height
    };
    newShape = context.newShape = context.newShape || self.createShape(newData, position, oldShape.parent, hints);

    // (2) update host
    if (oldShape.host) {
      modeling.updateAttachment(newShape, oldShape.host);
    }

    // (3) adopt all children from old shape
    var children;
    if (hints.moveChildren !== false) {
      children = oldShape.children.slice();
      modeling.moveElements(children, {
        x: 0,
        y: 0
      }, newShape, hints);
    }

    // (4) reconnect connections to new shape if possible
    var incoming = oldShape.incoming.slice(),
      outgoing = oldShape.outgoing.slice();
    forEach$3(incoming, function (connection) {
      var source = connection.source,
        allowed = canReconnect(source, newShape, connection);
      if (allowed) {
        self.reconnectEnd(connection, newShape, getResizedTargetAnchor(connection, newShape, oldBounds), hints);
      }
    });
    forEach$3(outgoing, function (connection) {
      var target = connection.target,
        allowed = canReconnect(newShape, target, connection);
      if (allowed) {
        self.reconnectStart(connection, newShape, getResizedSourceAnchor(connection, newShape, oldBounds), hints);
      }
    });
  };

  /**
   * Remove old shape.
   */
  ReplaceShapeHandler.prototype.postExecute = function (context) {
    var oldShape = context.oldShape;
    this._modeling.removeShape(oldShape);
  };
  ReplaceShapeHandler.prototype.execute = function (context) {};
  ReplaceShapeHandler.prototype.revert = function (context) {};
  ReplaceShapeHandler.prototype.createShape = function (shape, position, target, hints) {
    return this._modeling.createShape(shape, position, target, hints);
  };
  ReplaceShapeHandler.prototype.reconnectStart = function (connection, newSource, dockingPoint, hints) {
    this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);
  };
  ReplaceShapeHandler.prototype.reconnectEnd = function (connection, newTarget, dockingPoint, hints) {
    this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);
  };

  /**
   * A handler that implements reversible resizing of shapes.
   *
   * @param {Modeling} modeling
   */
  function ResizeShapeHandler(modeling) {
    this._modeling = modeling;
  }
  ResizeShapeHandler.$inject = ['modeling'];

  /**
   * {
   *   shape: {....}
   *   newBounds: {
   *     width:  20,
   *     height: 40,
   *     x:       5,
   *     y:      10
   *   }
   *
   * }
   */
  ResizeShapeHandler.prototype.execute = function (context) {
    var shape = context.shape,
      newBounds = context.newBounds,
      minBounds = context.minBounds;
    if (newBounds.x === undefined || newBounds.y === undefined || newBounds.width === undefined || newBounds.height === undefined) {
      throw new Error('newBounds must have {x, y, width, height} properties');
    }
    if (minBounds && (newBounds.width < minBounds.width || newBounds.height < minBounds.height)) {
      throw new Error('width and height cannot be less than minimum height and width');
    } else if (!minBounds && newBounds.width < 10 || newBounds.height < 10) {
      throw new Error('width and height cannot be less than 10px');
    }

    // save old bbox in context
    context.oldBounds = {
      width: shape.width,
      height: shape.height,
      x: shape.x,
      y: shape.y
    };

    // update shape
    assign$4(shape, {
      width: newBounds.width,
      height: newBounds.height,
      x: newBounds.x,
      y: newBounds.y
    });
    return shape;
  };
  ResizeShapeHandler.prototype.postExecute = function (context) {
    var modeling = this._modeling;
    var shape = context.shape,
      oldBounds = context.oldBounds,
      hints = context.hints || {};
    if (hints.layout === false) {
      return;
    }
    forEach$3(shape.incoming, function (c) {
      modeling.layoutConnection(c, {
        connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)
      });
    });
    forEach$3(shape.outgoing, function (c) {
      modeling.layoutConnection(c, {
        connectionStart: getResizedSourceAnchor(c, shape, oldBounds)
      });
    });
  };
  ResizeShapeHandler.prototype.revert = function (context) {
    var shape = context.shape,
      oldBounds = context.oldBounds;

    // restore previous bbox
    assign$4(shape, {
      width: oldBounds.width,
      height: oldBounds.height,
      x: oldBounds.x,
      y: oldBounds.y
    });
    return shape;
  };

  /**
   * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start
   * or end is to be moved or resized.
   *
   * @param {Array<djs.model.Shape} movingShapes
   * @param {Array<djs.model.Shape} resizingShapes
   *
   * @returns {Array<djs.model.Connection>}
   */
  function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {
    var waypointsUpdatingConnections = [];
    forEach$3(movingShapes.concat(resizingShapes), function (shape) {
      var incoming = shape.incoming,
        outgoing = shape.outgoing;
      forEach$3(incoming.concat(outgoing), function (connection) {
        var source = connection.source,
          target = connection.target;
        if (includes$2(movingShapes, source) || includes$2(movingShapes, target) || includes$2(resizingShapes, source) || includes$2(resizingShapes, target)) {
          if (!includes$2(waypointsUpdatingConnections, connection)) {
            waypointsUpdatingConnections.push(connection);
          }
        }
      });
    });
    return waypointsUpdatingConnections;
  }
  function includes$2(array, item) {
    return array.indexOf(item) !== -1;
  }

  /**
   * Resize bounds.
   *
   * @param {Object} bounds
   * @param {number} bounds.x
   * @param {number} bounds.y
   * @param {number} bounds.width
   * @param {number} bounds.height
   * @param {string} direction
   * @param {Object} delta
   * @param {number} delta.x
   * @param {number} delta.y
   *
   * @return {Object}
   */
  function resizeBounds$1(bounds, direction, delta) {
    var x = bounds.x,
      y = bounds.y,
      width = bounds.width,
      height = bounds.height,
      dx = delta.x,
      dy = delta.y;
    switch (direction) {
      case 'n':
        return {
          x: x,
          y: y + dy,
          width: width,
          height: height - dy
        };
      case 's':
        return {
          x: x,
          y: y,
          width: width,
          height: height + dy
        };
      case 'w':
        return {
          x: x + dx,
          y: y,
          width: width - dx,
          height: height
        };
      case 'e':
        return {
          x: x,
          y: y,
          width: width + dx,
          height: height
        };
      default:
        throw new Error('unknown direction: ' + direction);
    }
  }

  /**
   * Add or remove space by moving and resizing shapes and updating connection waypoints.
   */
  function SpaceToolHandler(modeling) {
    this._modeling = modeling;
  }
  SpaceToolHandler.$inject = ['modeling'];
  SpaceToolHandler.prototype.preExecute = function (context) {
    var delta = context.delta,
      direction = context.direction,
      movingShapes = context.movingShapes,
      resizingShapes = context.resizingShapes,
      start = context.start,
      oldBounds = {};

    // (1) move shapes
    this.moveShapes(movingShapes, delta);

    // (2a) save old bounds of resized shapes
    forEach$3(resizingShapes, function (shape) {
      oldBounds[shape.id] = getBounds(shape);
    });

    // (2b) resize shapes
    this.resizeShapes(resizingShapes, delta, direction);

    // (3) update connection waypoints
    this.updateConnectionWaypoints(getWaypointsUpdatingConnections(movingShapes, resizingShapes), delta, direction, start, movingShapes, resizingShapes, oldBounds);
  };
  SpaceToolHandler.prototype.execute = function () {};
  SpaceToolHandler.prototype.revert = function () {};
  SpaceToolHandler.prototype.moveShapes = function (shapes, delta) {
    var self = this;
    forEach$3(shapes, function (element) {
      self._modeling.moveShape(element, delta, null, {
        autoResize: false,
        layout: false,
        recurse: false
      });
    });
  };
  SpaceToolHandler.prototype.resizeShapes = function (shapes, delta, direction) {
    var self = this;
    forEach$3(shapes, function (shape) {
      var newBounds = resizeBounds$1(shape, direction, delta);
      self._modeling.resizeShape(shape, newBounds, null, {
        attachSupport: false,
        autoResize: false,
        layout: false
      });
    });
  };

  /**
   * Update connections waypoints according to the rules:
   *   1. Both source and target are moved/resized => move waypoints by the delta
   *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end
   */
  SpaceToolHandler.prototype.updateConnectionWaypoints = function (connections, delta, direction, start, movingShapes, resizingShapes, oldBounds) {
    var self = this,
      affectedShapes = movingShapes.concat(resizingShapes);
    forEach$3(connections, function (connection) {
      var source = connection.source,
        target = connection.target,
        waypoints = copyWaypoints(connection),
        axis = getAxisFromDirection(direction),
        layoutHints = {};
      if (includes$1(affectedShapes, source) && includes$1(affectedShapes, target)) {
        // move waypoints
        waypoints = map$2(waypoints, function (waypoint) {
          if (shouldMoveWaypoint(waypoint, start, direction)) {
            // move waypoint
            waypoint[axis] = waypoint[axis] + delta[axis];
          }
          if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {
            // move waypoint original
            waypoint.original[axis] = waypoint.original[axis] + delta[axis];
          }
          return waypoint;
        });
        self._modeling.updateWaypoints(connection, waypoints, {
          labelBehavior: false
        });
      } else if (includes$1(affectedShapes, source) || includes$1(affectedShapes, target)) {
        // re-layout connection with moved start/end
        if (includes$1(movingShapes, source)) {
          layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);
        } else if (includes$1(movingShapes, target)) {
          layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);
        } else if (includes$1(resizingShapes, source)) {
          layoutHints.connectionStart = getResizedSourceAnchor(connection, source, oldBounds[source.id]);
        } else if (includes$1(resizingShapes, target)) {
          layoutHints.connectionEnd = getResizedTargetAnchor(connection, target, oldBounds[target.id]);
        }
        self._modeling.layoutConnection(connection, layoutHints);
      }
    });
  };

  // helpers //////////

  function copyWaypoint(waypoint) {
    return assign$4({}, waypoint);
  }
  function copyWaypoints(connection) {
    return map$2(connection.waypoints, function (waypoint) {
      waypoint = copyWaypoint(waypoint);
      if (waypoint.original) {
        waypoint.original = copyWaypoint(waypoint.original);
      }
      return waypoint;
    });
  }
  function getAxisFromDirection(direction) {
    switch (direction) {
      case 'n':
        return 'y';
      case 'w':
        return 'x';
      case 's':
        return 'y';
      case 'e':
        return 'x';
    }
  }
  function shouldMoveWaypoint(waypoint, start, direction) {
    var relevantAxis = getAxisFromDirection(direction);
    if (/e|s/.test(direction)) {
      return waypoint[relevantAxis] > start;
    } else if (/n|w/.test(direction)) {
      return waypoint[relevantAxis] < start;
    }
  }
  function includes$1(array, item) {
    return array.indexOf(item) !== -1;
  }
  function getBounds(shape) {
    return {
      x: shape.x,
      y: shape.y,
      height: shape.height,
      width: shape.width
    };
  }

  /**
   * A handler that toggles the collapsed state of an element
   * and the visibility of all its children.
   *
   * @param {Modeling} modeling
   */
  function ToggleShapeCollapseHandler(modeling) {
    this._modeling = modeling;
  }
  ToggleShapeCollapseHandler.$inject = ['modeling'];
  ToggleShapeCollapseHandler.prototype.execute = function (context) {
    var shape = context.shape,
      children = shape.children;

    // recursively remember previous visibility of children
    context.oldChildrenVisibility = getElementsVisibilityRecursive(children);

    // toggle state
    shape.collapsed = !shape.collapsed;

    // recursively hide/show children
    var result = setHiddenRecursive(children, shape.collapsed);
    return [shape].concat(result);
  };
  ToggleShapeCollapseHandler.prototype.revert = function (context) {
    var shape = context.shape,
      oldChildrenVisibility = context.oldChildrenVisibility;
    var children = shape.children;

    // recursively set old visability of children
    var result = restoreVisibilityRecursive(children, oldChildrenVisibility);

    // retoggle state
    shape.collapsed = !shape.collapsed;
    return [shape].concat(result);
  };

  // helpers //////////////////////

  /**
   * Return a map { elementId -> hiddenState}.
   *
   * @param {Array<djs.model.Shape>} elements
   *
   * @return {Object}
   */
  function getElementsVisibilityRecursive(elements) {
    var result = {};
    forEach$3(elements, function (element) {
      result[element.id] = element.hidden;
      if (element.children) {
        result = assign$4({}, result, getElementsVisibilityRecursive(element.children));
      }
    });
    return result;
  }
  function setHiddenRecursive(elements, newHidden) {
    var result = [];
    forEach$3(elements, function (element) {
      element.hidden = newHidden;
      result = result.concat(element);
      if (element.children) {
        result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));
      }
    });
    return result;
  }
  function restoreVisibilityRecursive(elements, lastState) {
    var result = [];
    forEach$3(elements, function (element) {
      element.hidden = lastState[element.id];
      result = result.concat(element);
      if (element.children) {
        result = result.concat(restoreVisibilityRecursive(element.children, lastState));
      }
    });
    return result;
  }

  /**
   * A handler that implements reversible attaching/detaching of shapes.
   */
  function UpdateAttachmentHandler(modeling) {
    this._modeling = modeling;
  }
  UpdateAttachmentHandler.$inject = ['modeling'];
  UpdateAttachmentHandler.prototype.execute = function (context) {
    var shape = context.shape,
      newHost = context.newHost,
      oldHost = shape.host;

    // (0) detach from old host
    context.oldHost = oldHost;
    context.attacherIdx = removeAttacher(oldHost, shape);

    // (1) attach to new host
    addAttacher(newHost, shape);

    // (2) update host
    shape.host = newHost;
    return shape;
  };
  UpdateAttachmentHandler.prototype.revert = function (context) {
    var shape = context.shape,
      newHost = context.newHost,
      oldHost = context.oldHost,
      attacherIdx = context.attacherIdx;

    // (2) update host
    shape.host = oldHost;

    // (1) attach to new host
    removeAttacher(newHost, shape);

    // (0) detach from old host
    addAttacher(oldHost, shape, attacherIdx);
    return shape;
  };
  function removeAttacher(host, attacher) {
    // remove attacher from host
    return remove$1(host && host.attachers, attacher);
  }
  function addAttacher(host, attacher, idx) {
    if (!host) {
      return;
    }
    var attachers = host.attachers;
    if (!attachers) {
      host.attachers = attachers = [];
    }
    add$1(attachers, attacher, idx);
  }

  function UpdateWaypointsHandler() {}
  UpdateWaypointsHandler.prototype.execute = function (context) {
    var connection = context.connection,
      newWaypoints = context.newWaypoints;
    context.oldWaypoints = connection.waypoints;
    connection.waypoints = newWaypoints;
    return connection;
  };
  UpdateWaypointsHandler.prototype.revert = function (context) {
    var connection = context.connection,
      oldWaypoints = context.oldWaypoints;
    connection.waypoints = oldWaypoints;
    return connection;
  };

  /**
   * The basic modeling entry point.
   *
   * @param {EventBus} eventBus
   * @param {ElementFactory} elementFactory
   * @param {CommandStack} commandStack
   */
  function Modeling$4(eventBus, elementFactory, commandStack) {
    this._eventBus = eventBus;
    this._elementFactory = elementFactory;
    this._commandStack = commandStack;
    var self = this;
    eventBus.on('diagram.init', function () {
      // register modeling handlers
      self.registerHandlers(commandStack);
    });
  }
  Modeling$4.$inject = ['eventBus', 'elementFactory', 'commandStack'];
  Modeling$4.prototype.getHandlers = function () {
    return {
      'shape.append': AppendShapeHandler,
      'shape.create': CreateShapeHandler,
      'shape.delete': DeleteShapeHandler,
      'shape.move': MoveShapeHandler,
      'shape.resize': ResizeShapeHandler,
      'shape.replace': ReplaceShapeHandler,
      'shape.toggleCollapse': ToggleShapeCollapseHandler,
      'spaceTool': SpaceToolHandler,
      'label.create': CreateLabelHandler,
      'connection.create': CreateConnectionHandler,
      'connection.delete': DeleteConnectionHandler,
      'connection.move': MoveConnectionHandler,
      'connection.layout': LayoutConnectionHandler,
      'connection.updateWaypoints': UpdateWaypointsHandler,
      'connection.reconnect': ReconnectConnectionHandler,
      'elements.create': CreateElementsHandler,
      'elements.move': MoveElementsHandler,
      'elements.delete': DeleteElementsHandler,
      'elements.distribute': DistributeElements,
      'elements.align': AlignElements,
      'element.updateAttachment': UpdateAttachmentHandler
    };
  };

  /**
   * Register handlers with the command stack
   *
   * @param {CommandStack} commandStack
   */
  Modeling$4.prototype.registerHandlers = function (commandStack) {
    forEach$3(this.getHandlers(), function (handler, id) {
      commandStack.registerHandler(id, handler);
    });
  };

  // modeling helpers //////////////////////

  Modeling$4.prototype.moveShape = function (shape, delta, newParent, newParentIndex, hints) {
    if (typeof newParentIndex === 'object') {
      hints = newParentIndex;
      newParentIndex = null;
    }
    var context = {
      shape: shape,
      delta: delta,
      newParent: newParent,
      newParentIndex: newParentIndex,
      hints: hints || {}
    };
    this._commandStack.execute('shape.move', context);
  };

  /**
   * Update the attachment of the given shape.
   *
   * @param {djs.mode.Base} shape
   * @param {djs.model.Base} [newHost]
   */
  Modeling$4.prototype.updateAttachment = function (shape, newHost) {
    var context = {
      shape: shape,
      newHost: newHost
    };
    this._commandStack.execute('element.updateAttachment', context);
  };

  /**
   * Move a number of shapes to a new target, either setting it as
   * the new parent or attaching it.
   *
   * @param {Array<djs.mode.Base>} shapes
   * @param {Point} delta
   * @param {djs.model.Base} [target]
   * @param {Object} [hints]
   * @param {boolean} [hints.attach=false]
   */
  Modeling$4.prototype.moveElements = function (shapes, delta, target, hints) {
    hints = hints || {};
    var attach = hints.attach;
    var newParent = target,
      newHost;
    if (attach === true) {
      newHost = target;
      newParent = target.parent;
    } else if (attach === false) {
      newHost = null;
    }
    var context = {
      shapes: shapes,
      delta: delta,
      newParent: newParent,
      newHost: newHost,
      hints: hints
    };
    this._commandStack.execute('elements.move', context);
  };
  Modeling$4.prototype.moveConnection = function (connection, delta, newParent, newParentIndex, hints) {
    if (typeof newParentIndex === 'object') {
      hints = newParentIndex;
      newParentIndex = undefined;
    }
    var context = {
      connection: connection,
      delta: delta,
      newParent: newParent,
      newParentIndex: newParentIndex,
      hints: hints || {}
    };
    this._commandStack.execute('connection.move', context);
  };
  Modeling$4.prototype.layoutConnection = function (connection, hints) {
    var context = {
      connection: connection,
      hints: hints || {}
    };
    this._commandStack.execute('connection.layout', context);
  };

  /**
   * Create connection.
   *
   * @param {djs.model.Base} source
   * @param {djs.model.Base} target
   * @param {number} [parentIndex]
   * @param {Object|djs.model.Connection} connection
   * @param {djs.model.Base} parent
   * @param {Object} hints
   *
   * @return {djs.model.Connection} the created connection.
   */
  Modeling$4.prototype.createConnection = function (source, target, parentIndex, connection, parent, hints) {
    if (typeof parentIndex === 'object') {
      hints = parent;
      parent = connection;
      connection = parentIndex;
      parentIndex = undefined;
    }
    connection = this._create('connection', connection);
    var context = {
      source: source,
      target: target,
      parent: parent,
      parentIndex: parentIndex,
      connection: connection,
      hints: hints
    };
    this._commandStack.execute('connection.create', context);
    return context.connection;
  };

  /**
   * Create a shape at the specified position.
   *
   * @param {djs.model.Shape|Object} shape
   * @param {Point} position
   * @param {djs.model.Shape|djs.model.Root} target
   * @param {number} [parentIndex] position in parents children list
   * @param {Object} [hints]
   * @param {boolean} [hints.attach] whether to attach to target or become a child
   *
   * @return {djs.model.Shape} the created shape
   */
  Modeling$4.prototype.createShape = function (shape, position, target, parentIndex, hints) {
    if (typeof parentIndex !== 'number') {
      hints = parentIndex;
      parentIndex = undefined;
    }
    hints = hints || {};
    var attach = hints.attach,
      parent,
      host;
    shape = this._create('shape', shape);
    if (attach) {
      parent = target.parent;
      host = target;
    } else {
      parent = target;
    }
    var context = {
      position: position,
      shape: shape,
      parent: parent,
      parentIndex: parentIndex,
      host: host,
      hints: hints
    };
    this._commandStack.execute('shape.create', context);
    return context.shape;
  };
  Modeling$4.prototype.createElements = function (elements, position, parent, parentIndex, hints) {
    if (!isArray$6(elements)) {
      elements = [elements];
    }
    if (typeof parentIndex !== 'number') {
      hints = parentIndex;
      parentIndex = undefined;
    }
    hints = hints || {};
    var context = {
      position: position,
      elements: elements,
      parent: parent,
      parentIndex: parentIndex,
      hints: hints
    };
    this._commandStack.execute('elements.create', context);
    return context.elements;
  };
  Modeling$4.prototype.createLabel = function (labelTarget, position, label, parent) {
    label = this._create('label', label);
    var context = {
      labelTarget: labelTarget,
      position: position,
      parent: parent || labelTarget.parent,
      shape: label
    };
    this._commandStack.execute('label.create', context);
    return context.shape;
  };

  /**
   * Append shape to given source, drawing a connection
   * between source and the newly created shape.
   *
   * @param {djs.model.Shape} source
   * @param {djs.model.Shape|Object} shape
   * @param {Point} position
   * @param {djs.model.Shape} target
   * @param {Object} [hints]
   * @param {boolean} [hints.attach]
   * @param {djs.model.Connection|Object} [hints.connection]
   * @param {djs.model.Base} [hints.connectionParent]
   *
   * @return {djs.model.Shape} the newly created shape
   */
  Modeling$4.prototype.appendShape = function (source, shape, position, target, hints) {
    hints = hints || {};
    shape = this._create('shape', shape);
    var context = {
      source: source,
      position: position,
      target: target,
      shape: shape,
      connection: hints.connection,
      connectionParent: hints.connectionParent,
      hints: hints
    };
    this._commandStack.execute('shape.append', context);
    return context.shape;
  };
  Modeling$4.prototype.removeElements = function (elements) {
    var context = {
      elements: elements
    };
    this._commandStack.execute('elements.delete', context);
  };
  Modeling$4.prototype.distributeElements = function (groups, axis, dimension) {
    var context = {
      groups: groups,
      axis: axis,
      dimension: dimension
    };
    this._commandStack.execute('elements.distribute', context);
  };
  Modeling$4.prototype.removeShape = function (shape, hints) {
    var context = {
      shape: shape,
      hints: hints || {}
    };
    this._commandStack.execute('shape.delete', context);
  };
  Modeling$4.prototype.removeConnection = function (connection, hints) {
    var context = {
      connection: connection,
      hints: hints || {}
    };
    this._commandStack.execute('connection.delete', context);
  };
  Modeling$4.prototype.replaceShape = function (oldShape, newShape, hints) {
    var context = {
      oldShape: oldShape,
      newData: newShape,
      hints: hints || {}
    };
    this._commandStack.execute('shape.replace', context);
    return context.newShape;
  };
  Modeling$4.prototype.alignElements = function (elements, alignment) {
    var context = {
      elements: elements,
      alignment: alignment
    };
    this._commandStack.execute('elements.align', context);
  };
  Modeling$4.prototype.resizeShape = function (shape, newBounds, minBounds, hints) {
    var context = {
      shape: shape,
      newBounds: newBounds,
      minBounds: minBounds,
      hints: hints
    };
    this._commandStack.execute('shape.resize', context);
  };
  Modeling$4.prototype.createSpace = function (movingShapes, resizingShapes, delta, direction, start) {
    var context = {
      delta: delta,
      direction: direction,
      movingShapes: movingShapes,
      resizingShapes: resizingShapes,
      start: start
    };
    this._commandStack.execute('spaceTool', context);
  };
  Modeling$4.prototype.updateWaypoints = function (connection, newWaypoints, hints) {
    var context = {
      connection: connection,
      newWaypoints: newWaypoints,
      hints: hints || {}
    };
    this._commandStack.execute('connection.updateWaypoints', context);
  };
  Modeling$4.prototype.reconnect = function (connection, source, target, dockingOrPoints, hints) {
    var context = {
      connection: connection,
      newSource: source,
      newTarget: target,
      dockingOrPoints: dockingOrPoints,
      hints: hints || {}
    };
    this._commandStack.execute('connection.reconnect', context);
  };
  Modeling$4.prototype.reconnectStart = function (connection, newSource, dockingOrPoints, hints) {
    if (!hints) {
      hints = {};
    }
    this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign$4(hints, {
      docking: 'source'
    }));
  };
  Modeling$4.prototype.reconnectEnd = function (connection, newTarget, dockingOrPoints, hints) {
    if (!hints) {
      hints = {};
    }
    this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign$4(hints, {
      docking: 'target'
    }));
  };
  Modeling$4.prototype.connect = function (source, target, attrs, hints) {
    return this.createConnection(source, target, attrs || {}, source.parent, hints);
  };
  Modeling$4.prototype._create = function (type, attrs) {
    if (attrs instanceof Base$1) {
      return attrs;
    } else {
      return this._elementFactory.create(type, attrs);
    }
  };
  Modeling$4.prototype.toggleCollapse = function (shape, hints) {
    var context = {
      shape: shape,
      hints: hints || {}
    };
    this._commandStack.execute('shape.toggleCollapse', context);
  };

  function IdClaimHandler$1(moddle) {
    this._moddle = moddle;
  }
  IdClaimHandler$1.$inject = ['moddle'];
  IdClaimHandler$1.prototype.execute = function (context) {
    var ids = this._moddle.ids,
      id = context.id,
      element = context.element,
      claiming = context.claiming;
    if (claiming) {
      ids.claim(id, element);
    } else {
      ids.unclaim(id);
    }
  };

  /**
   * Command revert implementation.
   */
  IdClaimHandler$1.prototype.revert = function (context) {
    var ids = this._moddle.ids,
      id = context.id,
      element = context.element,
      claiming = context.claiming;
    if (claiming) {
      ids.unclaim(id);
    } else {
      ids.claim(id, element);
    }
  };

  /**
   * A handler that updates the name of a DMN element.
   */
  function UpdateLabelHandler() {
    /**
     * Set the label and return the changed elements.
     *
     * Element parameter can be label itself or connection (i.e. sequence flow).
     *
     * @param {djs.model.Base} element
     * @param {string} text
     */
    function setText(element, text) {
      // external label if present
      var label = element.label || element;
      var labelTarget = element.labelTarget || element;
      setLabel(label, text, labelTarget !== label);
      return [label, labelTarget];
    }
    function execute(ctx) {
      ctx.oldLabel = getLabel(ctx.element);
      return setText(ctx.element, ctx.newLabel);
    }
    function revert(ctx) {
      return setText(ctx.element, ctx.oldLabel);
    }

    // API

    this.execute = execute;
    this.revert = revert;
  }

  var NAME = 'name',
    ID$1 = 'id';

  /**
   * A handler that implements a DMN property update.
   *
   * This should be used to set simple properties on elements with
   * an underlying DMN business object.
   *
   * Use respective diagram-js provided handlers if you would
   * like to perform automated modeling.
   */
  function UpdatePropertiesHandler(elementRegistry, moddle) {
    this._elementRegistry = elementRegistry;
    this._moddle = moddle;
  }
  UpdatePropertiesHandler.$inject = ['elementRegistry', 'moddle'];

  /**
   * Updates a DMN element with a list of new properties
   *
   * @param {Object} context
   * @param {djs.model.Base} context.element the element to update
   * @param {Object} context.properties a list of properties to set on the element's
   *                                    businessObject (the DMN model element)
   *
   * @return {Array<djs.model.Base>} the updated element
   */
  UpdatePropertiesHandler.prototype.execute = function (context) {
    var element = context.element,
      changed = [element];
    if (!element) {
      throw new Error('element required');
    }
    var elementRegistry = this._elementRegistry,
      ids = this._moddle.ids;
    var businessObject = element.businessObject,
      properties = context.properties,
      oldProperties = context.oldProperties || getProperties(businessObject, keys(properties));
    if (isIdChange$1(properties, businessObject)) {
      ids.unclaim(businessObject[ID$1]);
      elementRegistry.updateId(element, properties[ID$1]);
      ids.claim(properties[ID$1], businessObject);
    }
    if (NAME in properties && element.label) {
      changed.push(element.label);
    }

    // update properties
    setProperties(businessObject, properties);

    // store old values
    context.oldProperties = oldProperties;
    context.changed = changed;

    // indicate changed on objects affected by the update
    return changed;
  };

  /**
   * Reverts the update on a DMN elements properties.
   *
   * @param  {Object} context
   *
   * @return {djs.model.Base} the updated element
   */
  UpdatePropertiesHandler.prototype.revert = function (context) {
    var element = context.element,
      properties = context.properties,
      oldProperties = context.oldProperties,
      businessObject = element.businessObject,
      elementRegistry = this._elementRegistry,
      ids = this._moddle.ids;

    // update properties
    setProperties(businessObject, oldProperties);
    if (isIdChange$1(properties, businessObject)) {
      ids.unclaim(properties[ID$1]);
      elementRegistry.updateId(element, oldProperties[ID$1]);
      ids.claim(oldProperties[ID$1], businessObject);
    }
    return context.changed;
  };
  function isIdChange$1(properties, businessObject) {
    return ID$1 in properties && properties[ID$1] !== businessObject[ID$1];
  }
  function getProperties(businessObject, propertyNames) {
    return reduce(propertyNames, function (result, key) {
      result[key] = businessObject.get(key);
      return result;
    }, {});
  }
  function setProperties(businessObject, properties) {
    forEach$3(properties, function (value, key) {
      businessObject.set(key, value);
    });
  }

  /**
   * DMN modeling.
   *
   * @param {Canvas} canvas
   * @param {CommandStack} commandStack
   * @param {DrdRules} drdRules
   * @param {ElementFactory} elementFactory
   * @param {EventBus} eventBus
   */
  function Modeling$3(canvas, drdRules, injector) {
    this._canvas = canvas;
    this._drdRules = drdRules;
    injector.invoke(Modeling$4, this);
  }
  e$3(Modeling$3, Modeling$4);
  Modeling$3.$inject = ['canvas', 'drdRules', 'injector'];
  Modeling$3.prototype.claimId = function (id, moddleElement) {
    this._commandStack.execute('id.updateClaim', {
      id: id,
      element: moddleElement,
      claiming: true
    });
  };
  Modeling$3.prototype.connect = function (source, target, attrs, hints) {
    var drdRules = this._drdRules,
      rootElement = this._canvas.getRootElement();
    if (!attrs) {
      attrs = drdRules.canConnect(source, target) || {
        type: 'dmn:Association'
      };
    }
    return this.createConnection(source, target, attrs, rootElement, hints);
  };
  Modeling$3.prototype.getHandlers = function () {
    var handlers = Modeling$4.prototype.getHandlers.call(this);
    handlers['id.updateClaim'] = IdClaimHandler$1;
    handlers['element.updateLabel'] = UpdateLabelHandler;
    handlers['element.updateProperties'] = UpdatePropertiesHandler;
    return handlers;
  };
  Modeling$3.prototype.unclaimId = function (id, moddleElement) {
    this._commandStack.execute('id.updateClaim', {
      id: id,
      element: moddleElement
    });
  };
  Modeling$3.prototype.updateProperties = function (element, properties) {
    this._commandStack.execute('element.updateProperties', {
      element: element,
      properties: properties
    });
  };
  Modeling$3.prototype.updateLabel = function (element, newLabel, newBounds, hints) {
    this._commandStack.execute('element.updateLabel', {
      element: element,
      newLabel: newLabel,
      newBounds: newBounds,
      hints: hints || {}
    });
  };

  /**
   * A base connection layouter implementation
   * that layouts the connection by directly connecting
   * mid(source) + mid(target).
   */
  function BaseLayouter() {}

  /**
   * Return the new layouted waypoints for the given connection.
   *
   * The connection passed is still unchanged; you may figure out about
   * the new connection start / end via the layout hints provided.
   *
   * @param {djs.model.Connection} connection
   * @param {Object} [hints]
   * @param {Point} [hints.connectionStart]
   * @param {Point} [hints.connectionEnd]
   * @param {Point} [hints.source]
   * @param {Point} [hints.target]
   *
   * @return {Array<Point>} the layouted connection waypoints
   */
  BaseLayouter.prototype.layoutConnection = function (connection, hints) {
    hints = hints || {};
    return [hints.connectionStart || getMid(hints.source || connection.source), hints.connectionEnd || getMid(hints.target || connection.target)];
  };

  var ADDITIONAL_WAYPOINT_DISTANCE = 20;
  function DrdLayouter(connectionDocking) {
    this._connectionDocking = connectionDocking;
  }
  e$3(DrdLayouter, BaseLayouter);
  DrdLayouter.$inject = ['connectionDocking'];
  DrdLayouter.prototype.layoutConnection = function (connection, hints) {
    var connectionDocking = this._connectionDocking;
    if (!hints) {
      hints = {};
    }
    var source = hints.source || connection.source,
      target = hints.target || connection.target,
      waypoints = hints.waypoints || connection.waypoints || [],
      connectionStart = hints.connectionStart,
      connectionEnd = hints.connectionEnd,
      orientation = getOrientation(source, target);
    if (!connectionStart) {
      connectionStart = getConnectionDocking(waypoints[0], source);
    }
    if (!connectionEnd) {
      connectionEnd = getConnectionDocking(waypoints[waypoints.length - 1], target);
    }
    if (is(connection, 'dmn:InformationRequirement')) {
      waypoints = [connectionStart, connectionEnd];
      var croppedWaypoints = connectionDocking.getCroppedWaypoints(assign$4({}, connection, {
        waypoints: waypoints
      }), source, target);
      connectionEnd = croppedWaypoints.pop();
      var additionalWaypoint = {
        x: connectionEnd.x,
        y: connectionEnd.y
      };
      if (orientation.includes('bottom')) {
        additionalWaypoint.y += ADDITIONAL_WAYPOINT_DISTANCE;
      } else if (orientation.includes('top')) {
        additionalWaypoint.y -= ADDITIONAL_WAYPOINT_DISTANCE;
      } else if (orientation.includes('right')) {
        additionalWaypoint.x += ADDITIONAL_WAYPOINT_DISTANCE;
      } else {
        additionalWaypoint.x -= ADDITIONAL_WAYPOINT_DISTANCE;
      }
      waypoints = croppedWaypoints.concat([additionalWaypoint, connectionEnd]);
      return waypoints;
    }
    return [connectionStart, connectionEnd];
  };
  function getConnectionDocking(point, shape) {
    return point ? point.original || point : getMid(shape);
  }

  function dockingToPoint(docking) {
    // use the dockings actual point and
    // retain the original docking
    return assign$4({
      original: docking.point.original || docking.point
    }, docking.actual);
  }

  /**
   * A {@link ConnectionDocking} that crops connection waypoints based on
   * the path(s) of the connection source and target.
   *
   * @param {djs.core.ElementRegistry} elementRegistry
   */
  function CroppingConnectionDocking(elementRegistry, graphicsFactory) {
    this._elementRegistry = elementRegistry;
    this._graphicsFactory = graphicsFactory;
  }
  CroppingConnectionDocking.$inject = ['elementRegistry', 'graphicsFactory'];

  /**
   * @inheritDoc ConnectionDocking#getCroppedWaypoints
   */
  CroppingConnectionDocking.prototype.getCroppedWaypoints = function (connection, source, target) {
    source = source || connection.source;
    target = target || connection.target;
    var sourceDocking = this.getDockingPoint(connection, source, true),
      targetDocking = this.getDockingPoint(connection, target);
    var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);
    croppedWaypoints.unshift(dockingToPoint(sourceDocking));
    croppedWaypoints.push(dockingToPoint(targetDocking));
    return croppedWaypoints;
  };

  /**
   * Return the connection docking point on the specified shape
   *
   * @inheritDoc ConnectionDocking#getDockingPoint
   */
  CroppingConnectionDocking.prototype.getDockingPoint = function (connection, shape, dockStart) {
    var waypoints = connection.waypoints,
      dockingIdx,
      dockingPoint,
      croppedPoint;
    dockingIdx = dockStart ? 0 : waypoints.length - 1;
    dockingPoint = waypoints[dockingIdx];
    croppedPoint = this._getIntersection(shape, connection, dockStart);
    return {
      point: dockingPoint,
      actual: croppedPoint || dockingPoint,
      idx: dockingIdx
    };
  };

  // helpers //////////////////////

  CroppingConnectionDocking.prototype._getIntersection = function (shape, connection, takeFirst) {
    var shapePath = this._getShapePath(shape),
      connectionPath = this._getConnectionPath(connection);
    return getElementLineIntersection(shapePath, connectionPath, takeFirst);
  };
  CroppingConnectionDocking.prototype._getConnectionPath = function (connection) {
    return this._graphicsFactory.getConnectionPath(connection);
  };
  CroppingConnectionDocking.prototype._getShapePath = function (shape) {
    return this._graphicsFactory.getShapePath(shape);
  };
  CroppingConnectionDocking.prototype._getGfx = function (element) {
    return this._elementRegistry.getGraphics(element);
  };

  var ModelingModule$1 = {
    __init__: ['modeling', 'drdUpdater'],
    __depends__: [ModelingBehavior, Rules$4, DefinitionPropertiesViewer, CommandStack, SelectionModule, DiagramChangeSupport],
    drdFactory: ['type', DrdFactory],
    drdUpdater: ['type', DrdUpdater],
    elementFactory: ['type', ElementFactory$2],
    modeling: ['type', Modeling$3],
    layouter: ['type', DrdLayouter],
    connectionDocking: ['type', CroppingConnectionDocking]
  };

  var LOW_PRIORITY$d = 500,
    MEDIUM_PRIORITY = 1250,
    HIGH_PRIORITY$6 = 1500;
  var round = Math.round;
  function mid(element) {
    return {
      x: element.x + round(element.width / 2),
      y: element.y + round(element.height / 2)
    };
  }

  /**
   * A plugin that makes shapes draggable / droppable.
   *
   * @param {EventBus} eventBus
   * @param {Dragging} dragging
   * @param {Modeling} modeling
   * @param {Selection} selection
   * @param {Rules} rules
   */
  function MoveEvents(eventBus, dragging, modeling, selection, rules) {
    // rules

    function canMove(shapes, delta, position, target) {
      return rules.allowed('elements.move', {
        shapes: shapes,
        delta: delta,
        position: position,
        target: target
      });
    }

    // move events

    // assign a high priority to this handler to setup the environment
    // others may hook up later, e.g. at default priority and modify
    // the move environment.
    //
    // This sets up the context with
    //
    // * shape: the primary shape being moved
    // * shapes: a list of shapes to be moved
    // * validatedShapes: a list of shapes that are being checked
    //                    against the rules before and during move
    //
    eventBus.on('shape.move.start', HIGH_PRIORITY$6, function (event) {
      var context = event.context,
        shape = event.shape,
        shapes = selection.get().slice();

      // move only single shape if the dragged element
      // is not part of the current selection
      if (shapes.indexOf(shape) === -1) {
        shapes = [shape];
      }

      // ensure we remove nested elements in the collection
      // and add attachers for a proper dragger
      shapes = removeNested(shapes);

      // attach shapes to drag context
      assign$4(context, {
        shapes: shapes,
        validatedShapes: shapes,
        shape: shape
      });
    });

    // assign a high priority to this handler to setup the environment
    // others may hook up later, e.g. at default priority and modify
    // the move environment
    //
    eventBus.on('shape.move.start', MEDIUM_PRIORITY, function (event) {
      var context = event.context,
        validatedShapes = context.validatedShapes,
        canExecute;
      canExecute = context.canExecute = canMove(validatedShapes);

      // check if we can move the elements
      if (!canExecute) {
        return false;
      }
    });

    // assign a low priority to this handler
    // to let others modify the move event before we update
    // the context
    //
    eventBus.on('shape.move.move', LOW_PRIORITY$d, function (event) {
      var context = event.context,
        validatedShapes = context.validatedShapes,
        hover = event.hover,
        delta = {
          x: event.dx,
          y: event.dy
        },
        position = {
          x: event.x,
          y: event.y
        },
        canExecute;

      // check if we can move the elements
      canExecute = canMove(validatedShapes, delta, position, hover);
      context.delta = delta;
      context.canExecute = canExecute;

      // simply ignore move over
      if (canExecute === null) {
        context.target = null;
        return;
      }
      context.target = hover;
    });
    eventBus.on('shape.move.end', function (event) {
      var context = event.context;
      var delta = context.delta,
        canExecute = context.canExecute,
        isAttach = canExecute === 'attach',
        shapes = context.shapes;
      if (canExecute === false) {
        return false;
      }

      // ensure we have actual pixel values deltas
      // (important when zoom level was > 1 during move)
      delta.x = round(delta.x);
      delta.y = round(delta.y);
      if (delta.x === 0 && delta.y === 0) {
        // didn't move
        return;
      }
      modeling.moveElements(shapes, delta, context.target, {
        primaryShape: context.shape,
        attach: isAttach
      });
    });

    // move activation

    eventBus.on('element.mousedown', function (event) {
      if (!isPrimaryButton(event)) {
        return;
      }
      var originalEvent = getOriginal$1(event);
      if (!originalEvent) {
        throw new Error('must supply DOM mousedown event');
      }
      return start(originalEvent, event.element);
    });

    /**
     * Start move.
     *
     * @param {MouseEvent} event
     * @param {djs.model.Shape} shape
     * @param {boolean} [activate]
     * @param {Object} [context]
     */
    function start(event, element, activate, context) {
      if (isObject$1(activate)) {
        context = activate;
        activate = false;
      }

      // do not move connections or the root element
      if (element.waypoints || !element.parent) {
        return;
      }

      // ignore non-draggable hits
      if (classes(event.target).has('djs-hit-no-move')) {
        return;
      }
      var referencePoint = mid(element);
      dragging.init(event, referencePoint, 'shape.move', {
        cursor: 'grabbing',
        autoActivate: activate,
        data: {
          shape: element,
          context: context || {}
        }
      });

      // we've handled the event
      return true;
    }

    // API

    this.start = start;
  }
  MoveEvents.$inject = ['eventBus', 'dragging', 'modeling', 'selection', 'rules'];

  /**
   * Return a filtered list of elements that do not contain
   * those nested into others.
   *
   * @param  {Array<djs.model.Base>} elements
   *
   * @return {Array<djs.model.Base>} filtered
   */
  function removeNested(elements) {
    var ids = groupBy(elements, 'id');
    return filter$2(elements, function (element) {
      while (element = element.parent) {
        // parent in selection
        if (ids[element.id]) {
          return false;
        }
      }
      return true;
    });
  }

  var LOW_PRIORITY$c = 499;
  var MARKER_DRAGGING = 'djs-dragging',
    MARKER_OK = 'drop-ok',
    MARKER_NOT_OK = 'drop-not-ok',
    MARKER_NEW_PARENT = 'new-parent',
    MARKER_ATTACH = 'attach-ok';

  /**
   * Provides previews for moving shapes when moving.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Canvas} canvas
   * @param {Styles} styles
   */
  function MovePreview(eventBus, canvas, styles, previewSupport) {
    function getVisualDragShapes(shapes) {
      var elements = getAllDraggedElements(shapes);
      var filteredElements = removeEdges(elements);
      return filteredElements;
    }
    function getAllDraggedElements(shapes) {
      var allShapes = selfAndAllChildren(shapes, true);
      var allConnections = map$2(allShapes, function (shape) {
        return (shape.incoming || []).concat(shape.outgoing || []);
      });
      return flatten$1(allShapes.concat(allConnections));
    }

    /**
     * Sets drop marker on an element.
     */
    function setMarker(element, marker) {
      [MARKER_ATTACH, MARKER_OK, MARKER_NOT_OK, MARKER_NEW_PARENT].forEach(function (m) {
        if (m === marker) {
          canvas.addMarker(element, m);
        } else {
          canvas.removeMarker(element, m);
        }
      });
    }

    /**
     * Make an element draggable.
     *
     * @param {Object} context
     * @param {djs.model.Base} element
     * @param {boolean} addMarker
     */
    function makeDraggable(context, element, addMarker) {
      previewSupport.addDragger(element, context.dragGroup);
      if (addMarker) {
        canvas.addMarker(element, MARKER_DRAGGING);
      }
      if (context.allDraggedElements) {
        context.allDraggedElements.push(element);
      } else {
        context.allDraggedElements = [element];
      }
    }

    // assign a low priority to this handler
    // to let others modify the move context before
    // we draw things
    eventBus.on('shape.move.start', LOW_PRIORITY$c, function (event) {
      var context = event.context,
        dragShapes = context.shapes,
        allDraggedElements = context.allDraggedElements;
      var visuallyDraggedShapes = getVisualDragShapes(dragShapes);
      if (!context.dragGroup) {
        var dragGroup = create$2('g');
        attr(dragGroup, styles.cls('djs-drag-group', ['no-events']));
        var activeLayer = canvas.getActiveLayer();
        append(activeLayer, dragGroup);
        context.dragGroup = dragGroup;
      }

      // add previews
      visuallyDraggedShapes.forEach(function (shape) {
        previewSupport.addDragger(shape, context.dragGroup);
      });

      // cache all dragged elements / gfx
      // so that we can quickly undo their state changes later
      if (!allDraggedElements) {
        allDraggedElements = getAllDraggedElements(dragShapes);
      } else {
        allDraggedElements = flatten$1([allDraggedElements, getAllDraggedElements(dragShapes)]);
      }

      // add dragging marker
      forEach$3(allDraggedElements, function (e) {
        canvas.addMarker(e, MARKER_DRAGGING);
      });
      context.allDraggedElements = allDraggedElements;

      // determine, if any of the dragged elements have different parents
      context.differentParents = haveDifferentParents(dragShapes);
    });

    // update previews
    eventBus.on('shape.move.move', LOW_PRIORITY$c, function (event) {
      var context = event.context,
        dragGroup = context.dragGroup,
        target = context.target,
        parent = context.shape.parent,
        canExecute = context.canExecute;
      if (target) {
        if (canExecute === 'attach') {
          setMarker(target, MARKER_ATTACH);
        } else if (context.canExecute && target && target.id !== parent.id) {
          setMarker(target, MARKER_NEW_PARENT);
        } else {
          setMarker(target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);
        }
      }
      translate$1(dragGroup, event.dx, event.dy);
    });
    eventBus.on(['shape.move.out', 'shape.move.cleanup'], function (event) {
      var context = event.context,
        target = context.target;
      if (target) {
        setMarker(target, null);
      }
    });

    // remove previews
    eventBus.on('shape.move.cleanup', function (event) {
      var context = event.context,
        allDraggedElements = context.allDraggedElements,
        dragGroup = context.dragGroup;

      // remove dragging marker
      forEach$3(allDraggedElements, function (e) {
        canvas.removeMarker(e, MARKER_DRAGGING);
      });
      if (dragGroup) {
        remove$2(dragGroup);
      }
    });

    // API //////////////////////

    /**
     * Make an element draggable.
     *
     * @param {Object} context
     * @param {djs.model.Base} element
     * @param {boolean} addMarker
     */
    this.makeDraggable = makeDraggable;
  }
  MovePreview.$inject = ['eventBus', 'canvas', 'styles', 'previewSupport'];

  // helpers //////////////////////

  /**
   * returns elements minus all connections
   * where source or target is not elements
   */
  function removeEdges(elements) {
    var filteredElements = filter$2(elements, function (element) {
      if (!isConnection$3(element)) {
        return true;
      } else {
        return find$2(elements, matchPattern({
          id: element.source.id
        })) && find$2(elements, matchPattern({
          id: element.target.id
        }));
      }
    });
    return filteredElements;
  }
  function haveDifferentParents(elements) {
    return size(groupBy(elements, function (e) {
      return e.parent && e.parent.id;
    })) !== 1;
  }

  /**
   * Checks if an element is a connection.
   */
  function isConnection$3(element) {
    return element.waypoints;
  }

  var MoveModule = {
    __depends__: [InteractionEventsModule, SelectionModule, OutlineModule, Rules$5, DraggingModule, PreviewSupportModule],
    __init__: ['move', 'movePreview'],
    move: ['type', MoveEvents],
    movePreview: ['type', MovePreview]
  };

  var TOGGLE_SELECTOR = '.djs-palette-toggle',
    ENTRY_SELECTOR = '.entry',
    ELEMENT_SELECTOR$1 = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;
  var PALETTE_PREFIX = 'djs-palette-',
    PALETTE_SHOWN_CLS = 'shown',
    PALETTE_OPEN_CLS = 'open',
    PALETTE_TWO_COLUMN_CLS = 'two-column';
  var DEFAULT_PRIORITY$2 = 1000;

  /**
   * A palette containing modeling elements.
   */
  function Palette(eventBus, canvas) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    var self = this;
    eventBus.on('tool-manager.update', function (event) {
      var tool = event.tool;
      self.updateToolHighlight(tool);
    });
    eventBus.on('i18n.changed', function () {
      self._update();
    });
    eventBus.on('diagram.init', function () {
      self._diagramInitialized = true;
      self._rebuild();
    });
  }
  Palette.$inject = ['eventBus', 'canvas'];

  /**
   * Register a provider with the palette
   *
   * @param  {number} [priority=1000]
   * @param  {PaletteProvider} provider
   *
   * @example
   * const paletteProvider = {
   *   getPaletteEntries: function() {
   *     return function(entries) {
   *       return {
   *         ...entries,
   *         'entry-1': {
   *           label: 'My Entry',
   *           action: function() { alert("I have been clicked!"); }
   *         }
   *       };
   *     }
   *   }
   * };
   *
   * palette.registerProvider(800, paletteProvider);
   */
  Palette.prototype.registerProvider = function (priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$2;
    }
    this._eventBus.on('palette.getProviders', priority, function (event) {
      event.providers.push(provider);
    });
    this._rebuild();
  };

  /**
   * Returns the palette entries
   *
   * @return {Object<string, PaletteEntryDescriptor>} map of entries
   */
  Palette.prototype.getEntries = function () {
    var providers = this._getProviders();
    return providers.reduce(addPaletteEntries, {});
  };
  Palette.prototype._rebuild = function () {
    if (!this._diagramInitialized) {
      return;
    }
    var providers = this._getProviders();
    if (!providers.length) {
      return;
    }
    if (!this._container) {
      this._init();
    }
    this._update();
  };

  /**
   * Initialize
   */
  Palette.prototype._init = function () {
    var self = this;
    var eventBus = this._eventBus;
    var parentContainer = this._getParentContainer();
    var container = this._container = domify$1(Palette.HTML_MARKUP);
    parentContainer.appendChild(container);
    classes$1(parentContainer).add(PALETTE_PREFIX + PALETTE_SHOWN_CLS);
    delegate.bind(container, ELEMENT_SELECTOR$1, 'click', function (event) {
      var target = event.delegateTarget;
      if (matches(target, TOGGLE_SELECTOR)) {
        return self.toggle();
      }
      self.trigger('click', event);
    });

    // prevent drag propagation
    event.bind(container, 'mousedown', function (event) {
      event.stopPropagation();
    });

    // prevent drag propagation
    delegate.bind(container, ENTRY_SELECTOR, 'dragstart', function (event) {
      self.trigger('dragstart', event);
    });
    eventBus.on('canvas.resized', this._layoutChanged, this);
    eventBus.fire('palette.create', {
      container: container
    });
  };
  Palette.prototype._getProviders = function (id) {
    var event = this._eventBus.createEvent({
      type: 'palette.getProviders',
      providers: []
    });
    this._eventBus.fire(event);
    return event.providers;
  };

  /**
   * Update palette state.
   *
   * @param  {Object} [state] { open, twoColumn }
   */
  Palette.prototype._toggleState = function (state) {
    state = state || {};
    var parent = this._getParentContainer(),
      container = this._container;
    var eventBus = this._eventBus;
    var twoColumn;
    var cls = classes$1(container),
      parentCls = classes$1(parent);
    if ('twoColumn' in state) {
      twoColumn = state.twoColumn;
    } else {
      twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});
    }

    // always update two column
    cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);
    parentCls.toggle(PALETTE_PREFIX + PALETTE_TWO_COLUMN_CLS, twoColumn);
    if ('open' in state) {
      cls.toggle(PALETTE_OPEN_CLS, state.open);
      parentCls.toggle(PALETTE_PREFIX + PALETTE_OPEN_CLS, state.open);
    }
    eventBus.fire('palette.changed', {
      twoColumn: twoColumn,
      open: this.isOpen()
    });
  };
  Palette.prototype._update = function () {
    var entriesContainer = query('.djs-palette-entries', this._container),
      entries = this._entries = this.getEntries();
    clear$1(entriesContainer);
    forEach$3(entries, function (entry, id) {
      var grouping = entry.group || 'default';
      var container = query('[data-group=' + cssEscape(grouping) + ']', entriesContainer);
      if (!container) {
        container = domify$1('<div class="group"></div>');
        attr$1(container, 'data-group', grouping);
        entriesContainer.appendChild(container);
      }
      var html = entry.html || (entry.separator ? '<hr class="separator" />' : '<div class="entry" draggable="true"></div>');
      var control = domify$1(html);
      container.appendChild(control);
      if (!entry.separator) {
        attr$1(control, 'data-action', id);
        if (entry.title) {
          attr$1(control, 'title', entry.title);
        }
        if (entry.className) {
          addClasses(control, entry.className);
        }
        if (entry.imageUrl) {
          var image = domify$1('<img>');
          attr$1(image, 'src', entry.imageUrl);
          control.appendChild(image);
        }
      }
    });

    // open after update
    this.open();
  };

  /**
   * Trigger an action available on the palette
   *
   * @param  {string} action
   * @param  {Event} event
   */
  Palette.prototype.trigger = function (action, event, autoActivate) {
    var entries = this._entries,
      entry,
      handler,
      originalEvent,
      button = event.delegateTarget || event.target;
    if (!button) {
      return event.preventDefault();
    }
    entry = entries[attr$1(button, 'data-action')];

    // when user clicks on the palette and not on an action
    if (!entry) {
      return;
    }
    handler = entry.action;
    originalEvent = event.originalEvent || event;

    // simple action (via callback function)
    if (isFunction$2(handler)) {
      if (action === 'click') {
        handler(originalEvent, autoActivate);
      }
    } else {
      if (handler[action]) {
        handler[action](originalEvent, autoActivate);
      }
    }

    // silence other actions
    event.preventDefault();
  };
  Palette.prototype._layoutChanged = function () {
    this._toggleState({});
  };

  /**
   * Do we need to collapse to two columns?
   *
   * @param {number} availableHeight
   * @param {Object} entries
   *
   * @return {boolean}
   */
  Palette.prototype._needsCollapse = function (availableHeight, entries) {
    // top margin + bottom toggle + bottom margin
    // implementors must override this method if they
    // change the palette styles
    var margin = 20 + 10 + 20;
    var entriesHeight = Object.keys(entries).length * 46;
    return availableHeight < entriesHeight + margin;
  };

  /**
   * Close the palette
   */
  Palette.prototype.close = function () {
    this._toggleState({
      open: false,
      twoColumn: false
    });
  };

  /**
   * Open the palette
   */
  Palette.prototype.open = function () {
    this._toggleState({
      open: true
    });
  };
  Palette.prototype.toggle = function (open) {
    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };
  Palette.prototype.isActiveTool = function (tool) {
    return tool && this._activeTool === tool;
  };
  Palette.prototype.updateToolHighlight = function (name) {
    var entriesContainer, toolsContainer;
    if (!this._toolsContainer) {
      entriesContainer = query('.djs-palette-entries', this._container);
      this._toolsContainer = query('[data-group=tools]', entriesContainer);
    }
    toolsContainer = this._toolsContainer;
    forEach$3(toolsContainer.children, function (tool) {
      var actionName = tool.getAttribute('data-action');
      if (!actionName) {
        return;
      }
      var toolClasses = classes$1(tool);
      actionName = actionName.replace('-tool', '');
      if (toolClasses.contains('entry') && actionName === name) {
        toolClasses.add('highlighted-entry');
      } else {
        toolClasses.remove('highlighted-entry');
      }
    });
  };

  /**
   * Return true if the palette is opened.
   *
   * @example
   *
   * palette.open();
   *
   * if (palette.isOpen()) {
   *   // yes, we are open
   * }
   *
   * @return {boolean} true if palette is opened
   */
  Palette.prototype.isOpen = function () {
    return classes$1(this._container).has(PALETTE_OPEN_CLS);
  };

  /**
   * Get container the palette lives in.
   *
   * @return {Element}
   */
  Palette.prototype._getParentContainer = function () {
    return this._canvas.getContainer();
  };

  /* markup definition */

  Palette.HTML_MARKUP = '<div class="djs-palette">' + '<div class="djs-palette-entries"></div>' + '<div class="djs-palette-toggle"></div>' + '</div>';

  // helpers //////////////////////

  function addClasses(element, classNames) {
    var classes = classes$1(element);
    var actualClassNames = isArray$6(classNames) ? classNames : classNames.split(/\s+/g);
    actualClassNames.forEach(function (cls) {
      classes.add(cls);
    });
  }
  function addPaletteEntries(entries, provider) {
    var entriesOrUpdater = provider.getPaletteEntries();
    if (isFunction$2(entriesOrUpdater)) {
      return entriesOrUpdater(entries);
    }
    forEach$3(entriesOrUpdater, function (entry, id) {
      entries[id] = entry;
    });
    return entries;
  }

  var DiagramPalette = {
    __init__: ['palette'],
    palette: ['type', Palette]
  };

  var LOW_PRIORITY$b = 250;

  /**
   * The tool manager acts as middle-man between the available tool's and the Palette,
   * it takes care of making sure that the correct active state is set.
   *
   * @param  {Object}    eventBus
   * @param  {Object}    dragging
   */
  function ToolManager(eventBus, dragging) {
    this._eventBus = eventBus;
    this._dragging = dragging;
    this._tools = [];
    this._active = null;
  }
  ToolManager.$inject = ['eventBus', 'dragging'];
  ToolManager.prototype.registerTool = function (name, events) {
    var tools = this._tools;
    if (!events) {
      throw new Error('A tool has to be registered with it\'s "events"');
    }
    tools.push(name);
    this.bindEvents(name, events);
  };
  ToolManager.prototype.isActive = function (tool) {
    return tool && this._active === tool;
  };
  ToolManager.prototype.length = function (tool) {
    return this._tools.length;
  };
  ToolManager.prototype.setActive = function (tool) {
    var eventBus = this._eventBus;
    if (this._active !== tool) {
      this._active = tool;
      eventBus.fire('tool-manager.update', {
        tool: tool
      });
    }
  };
  ToolManager.prototype.bindEvents = function (name, events) {
    var eventBus = this._eventBus,
      dragging = this._dragging;
    var eventsToRegister = [];
    eventBus.on(events.tool + '.init', function (event) {
      var context = event.context;

      // Active tools that want to reactivate themselves must do this explicitly
      if (!context.reactivate && this.isActive(name)) {
        this.setActive(null);
        dragging.cancel();
        return;
      }
      this.setActive(name);
    }, this);

    // Todo[ricardo]: add test cases
    forEach$3(events, function (event) {
      eventsToRegister.push(event + '.ended');
      eventsToRegister.push(event + '.canceled');
    });
    eventBus.on(eventsToRegister, LOW_PRIORITY$b, function (event) {
      // We defer the de-activation of the tool to the .activate phase,
      // so we're able to check if we want to toggle off the current
      // active tool or switch to a new one
      if (!this._active) {
        return;
      }
      if (isPaletteClick(event)) {
        return;
      }
      this.setActive(null);
    }, this);
  };

  // helpers ///////////////

  /**
   * Check if a given event is a palette click event.
   *
   * @param {EventBus.Event} event
   *
   * @return {boolean}
   */
  function isPaletteClick(event) {
    var target = event.originalEvent && event.originalEvent.target;
    return target && closest(target, '.group[data-group="tools"]');
  }

  var ToolManagerModule = {
    __depends__: [DraggingModule],
    __init__: ['toolManager'],
    toolManager: ['type', ToolManager]
  };

  function Mouse(eventBus) {
    var self = this;
    this._lastMoveEvent = null;
    function setLastMoveEvent(mousemoveEvent) {
      self._lastMoveEvent = mousemoveEvent;
    }
    eventBus.on('canvas.init', function (context) {
      var svg = self._svg = context.svg;
      svg.addEventListener('mousemove', setLastMoveEvent);
    });
    eventBus.on('canvas.destroy', function () {
      self._lastMouseEvent = null;
      self._svg.removeEventListener('mousemove', setLastMoveEvent);
    });
  }
  Mouse.$inject = ['eventBus'];
  Mouse.prototype.getLastMoveEvent = function () {
    return this._lastMoveEvent || createMoveEvent(0, 0);
  };

  // helpers //////////

  function createMoveEvent(x, y) {
    var event = document.createEvent('MouseEvent');
    var screenX = x,
      screenY = y,
      clientX = x,
      clientY = y;
    if (event.initMouseEvent) {
      event.initMouseEvent('mousemove', true, true, window, 0, screenX, screenY, clientX, clientY, false, false, false, false, 0, null);
    }
    return event;
  }

  var MouseModule = {
    __init__: ['mouse'],
    mouse: ['type', Mouse]
  };

  var LASSO_TOOL_CURSOR = 'crosshair';
  function LassoTool(eventBus, canvas, dragging, elementRegistry, selection, toolManager, mouse) {
    this._selection = selection;
    this._dragging = dragging;
    this._mouse = mouse;
    var self = this;

    // lasso visuals implementation

    /**
    * A helper that realizes the selection box visual
    */
    var visuals = {
      create: function (context) {
        var container = canvas.getActiveLayer(),
          frame;
        frame = context.frame = create$2('rect');
        attr(frame, {
          class: 'djs-lasso-overlay',
          width: 1,
          height: 1,
          x: 0,
          y: 0
        });
        append(container, frame);
      },
      update: function (context) {
        var frame = context.frame,
          bbox = context.bbox;
        attr(frame, {
          x: bbox.x,
          y: bbox.y,
          width: bbox.width,
          height: bbox.height
        });
      },
      remove: function (context) {
        if (context.frame) {
          remove$2(context.frame);
        }
      }
    };
    toolManager.registerTool('lasso', {
      tool: 'lasso.selection',
      dragging: 'lasso'
    });
    eventBus.on('lasso.selection.end', function (event) {
      var target = event.originalEvent.target;

      // only reactive on diagram click
      // on some occasions, event.hover is not set and we have to check if the target is an svg
      if (!event.hover && !(target instanceof SVGElement)) {
        return;
      }
      eventBus.once('lasso.selection.ended', function () {
        self.activateLasso(event.originalEvent, true);
      });
    });

    // lasso interaction implementation

    eventBus.on('lasso.end', function (event) {
      var bbox = toBBox(event);
      var elements = elementRegistry.filter(function (element) {
        return element;
      });
      self.select(elements, bbox);
    });
    eventBus.on('lasso.start', function (event) {
      var context = event.context;
      context.bbox = toBBox(event);
      visuals.create(context);
    });
    eventBus.on('lasso.move', function (event) {
      var context = event.context;
      context.bbox = toBBox(event);
      visuals.update(context);
    });
    eventBus.on('lasso.cleanup', function (event) {
      var context = event.context;
      visuals.remove(context);
    });

    // event integration

    eventBus.on('element.mousedown', 1500, function (event) {
      if (!hasSecondaryModifier(event)) {
        return;
      }
      self.activateLasso(event.originalEvent);

      // we've handled the event
      return true;
    });
  }
  LassoTool.$inject = ['eventBus', 'canvas', 'dragging', 'elementRegistry', 'selection', 'toolManager', 'mouse'];
  LassoTool.prototype.activateLasso = function (event, autoActivate) {
    this._dragging.init(event, 'lasso', {
      autoActivate: autoActivate,
      cursor: LASSO_TOOL_CURSOR,
      data: {
        context: {}
      }
    });
  };
  LassoTool.prototype.activateSelection = function (event, autoActivate) {
    this._dragging.init(event, 'lasso.selection', {
      trapClick: false,
      autoActivate: autoActivate,
      cursor: LASSO_TOOL_CURSOR,
      data: {
        context: {}
      }
    });
  };
  LassoTool.prototype.select = function (elements, bbox) {
    var selectedElements = getEnclosedElements(elements, bbox);
    this._selection.select(values$1(selectedElements));
  };
  LassoTool.prototype.toggle = function () {
    if (this.isActive()) {
      return this._dragging.cancel();
    }
    var mouseEvent = this._mouse.getLastMoveEvent();
    this.activateSelection(mouseEvent, !!mouseEvent);
  };
  LassoTool.prototype.isActive = function () {
    var context = this._dragging.context();
    return context && /^lasso/.test(context.prefix);
  };
  function toBBox(event) {
    var start = {
      x: event.x - event.dx,
      y: event.y - event.dy
    };
    var end = {
      x: event.x,
      y: event.y
    };
    var bbox;
    if (start.x <= end.x && start.y < end.y || start.x < end.x && start.y <= end.y) {
      bbox = {
        x: start.x,
        y: start.y,
        width: end.x - start.x,
        height: end.y - start.y
      };
    } else if (start.x >= end.x && start.y < end.y || start.x > end.x && start.y <= end.y) {
      bbox = {
        x: end.x,
        y: start.y,
        width: start.x - end.x,
        height: end.y - start.y
      };
    } else if (start.x <= end.x && start.y > end.y || start.x < end.x && start.y >= end.y) {
      bbox = {
        x: start.x,
        y: end.y,
        width: end.x - start.x,
        height: start.y - end.y
      };
    } else if (start.x >= end.x && start.y > end.y || start.x > end.x && start.y >= end.y) {
      bbox = {
        x: end.x,
        y: end.y,
        width: start.x - end.x,
        height: start.y - end.y
      };
    } else {
      bbox = {
        x: end.x,
        y: end.y,
        width: 0,
        height: 0
      };
    }
    return bbox;
  }

  var DiagramLasso = {
    __depends__: [ToolManagerModule, MouseModule],
    __init__: ['lassoTool'],
    lassoTool: ['type', LassoTool]
  };

  var HIGH_PRIORITY$5 = 1500;
  var HAND_CURSOR = 'grab';
  function HandTool(eventBus, canvas, dragging, injector, toolManager, mouse) {
    this._dragging = dragging;
    this._mouse = mouse;
    var self = this,
      keyboard = injector.get('keyboard', false);
    toolManager.registerTool('hand', {
      tool: 'hand',
      dragging: 'hand.move'
    });
    eventBus.on('element.mousedown', HIGH_PRIORITY$5, function (event) {
      if (!hasPrimaryModifier(event)) {
        return;
      }
      self.activateMove(event.originalEvent, true);
      return false;
    });
    keyboard && keyboard.addListener(HIGH_PRIORITY$5, function (e) {
      if (!isSpace(e.keyEvent) || self.isActive()) {
        return;
      }
      var mouseEvent = self._mouse.getLastMoveEvent();
      self.activateMove(mouseEvent, !!mouseEvent);
    }, 'keyboard.keydown');
    keyboard && keyboard.addListener(HIGH_PRIORITY$5, function (e) {
      if (!isSpace(e.keyEvent) || !self.isActive()) {
        return;
      }
      self.toggle();
    }, 'keyboard.keyup');
    eventBus.on('hand.end', function (event) {
      var target = event.originalEvent.target;

      // only reactive on diagram click
      // on some occasions, event.hover is not set and we have to check if the target is an svg
      if (!event.hover && !(target instanceof SVGElement)) {
        return false;
      }
      eventBus.once('hand.ended', function () {
        self.activateMove(event.originalEvent, {
          reactivate: true
        });
      });
    });
    eventBus.on('hand.move.move', function (event) {
      var scale = canvas.viewbox().scale;
      canvas.scroll({
        dx: event.dx * scale,
        dy: event.dy * scale
      });
    });
    eventBus.on('hand.move.end', function (event) {
      var context = event.context,
        reactivate = context.reactivate;

      // Don't reactivate if the user is using the keyboard keybinding
      if (!hasPrimaryModifier(event) && reactivate) {
        eventBus.once('hand.move.ended', function (event) {
          self.activateHand(event.originalEvent, true, true);
        });
      }
      return false;
    });
  }
  HandTool.$inject = ['eventBus', 'canvas', 'dragging', 'injector', 'toolManager', 'mouse'];
  HandTool.prototype.activateMove = function (event, autoActivate, context) {
    if (typeof autoActivate === 'object') {
      context = autoActivate;
      autoActivate = false;
    }
    this._dragging.init(event, 'hand.move', {
      autoActivate: autoActivate,
      cursor: HAND_CURSOR,
      data: {
        context: context || {}
      }
    });
  };
  HandTool.prototype.activateHand = function (event, autoActivate, reactivate) {
    this._dragging.init(event, 'hand', {
      trapClick: false,
      autoActivate: autoActivate,
      cursor: HAND_CURSOR,
      data: {
        context: {
          reactivate: reactivate
        }
      }
    });
  };
  HandTool.prototype.toggle = function () {
    if (this.isActive()) {
      return this._dragging.cancel();
    }
    var mouseEvent = this._mouse.getLastMoveEvent();
    this.activateHand(mouseEvent, !!mouseEvent);
  };
  HandTool.prototype.isActive = function () {
    var context = this._dragging.context();
    if (context) {
      return /^(hand|hand\.move)$/.test(context.prefix);
    }
    return false;
  };

  // helpers //////////

  function isSpace(keyEvent) {
    return isKey('Space', keyEvent);
  }

  var DiagramHand = {
    __depends__: [ToolManagerModule, MouseModule],
    __init__: ['handTool'],
    handTool: ['type', HandTool]
  };

  /**
   * A palette provider for DMN elements.
   */
  function PaletteProvider(palette, create, elementFactory, handTool, lassoTool, translate) {
    this._palette = palette;
    this._create = create;
    this._elementFactory = elementFactory;
    this._handTool = handTool;
    this._lassoTool = lassoTool;
    this._translate = translate;
    palette.registerProvider(this);
  }
  PaletteProvider.$inject = ['palette', 'create', 'elementFactory', 'handTool', 'lassoTool', 'translate'];
  PaletteProvider.prototype.getPaletteEntries = function (element) {
    var actions = {},
      create = this._create,
      elementFactory = this._elementFactory,
      handTool = this._handTool,
      lassoTool = this._lassoTool,
      translate = this._translate;
    function createAction(type, group, className, title, options) {
      function createListener(event) {
        var shape = elementFactory.createShape(assign$4({
          type: type
        }, options));
        create.start(event, shape);
      }
      return {
        group: group,
        className: className,
        title: title,
        action: {
          dragstart: createListener,
          click: createListener
        }
      };
    }
    assign$4(actions, {
      'hand-tool': {
        group: 'tools',
        className: 'dmn-icon-hand-tool',
        title: translate('Activate the hand tool'),
        action: {
          click: function click(event) {
            handTool.activateHand(event);
          }
        }
      },
      'lasso-tool': {
        group: 'tools',
        className: 'dmn-icon-lasso-tool',
        title: translate('Activate the lasso tool'),
        action: {
          click: function click(event) {
            lassoTool.activateSelection(event);
          }
        }
      },
      'tool-separator': {
        group: 'tools',
        separator: true
      },
      'create.decision': createAction('dmn:Decision', 'drd', 'dmn-icon-decision', translate('Create Decision')),
      'create.input-data': createAction('dmn:InputData', 'drd', 'dmn-icon-input-data', translate('Create Input Data')),
      'create.knowledge-source': createAction('dmn:KnowledgeSource', 'drd', 'dmn-icon-knowledge-source', translate('Create Knowledge Source')),
      'create.business-knowledge-model': createAction('dmn:BusinessKnowledgeModel', 'drd', 'dmn-icon-business-knowledge', translate('Create Knowledge Model'))
    });
    return actions;
  };

  var PaletteModule = {
    __depends__: [TranslateModule, DiagramPalette, DiagramCreate, DiagramLasso, DiagramHand],
    __init__: ['paletteProvider'],
    paletteProvider: ['type', PaletteProvider]
  };

  var max = Math.max,
    min = Math.min;
  var DEFAULT_CHILD_BOX_PADDING = 20;

  /**
   * Resize the given bounds by the specified delta from a given anchor point.
   *
   * @param {Bounds} bounds the bounding box that should be resized
   * @param {string} direction in which the element is resized (nw, ne, se, sw)
   * @param {Point} delta of the resize operation
   *
   * @return {Bounds} resized bounding box
   */
  function resizeBounds(bounds, direction, delta) {
    var dx = delta.x,
      dy = delta.y;
    var newBounds = {
      x: bounds.x,
      y: bounds.y,
      width: bounds.width,
      height: bounds.height
    };
    if (direction.indexOf('n') !== -1) {
      newBounds.y = bounds.y + dy;
      newBounds.height = bounds.height - dy;
    } else if (direction.indexOf('s') !== -1) {
      newBounds.height = bounds.height + dy;
    }
    if (direction.indexOf('e') !== -1) {
      newBounds.width = bounds.width + dx;
    } else if (direction.indexOf('w') !== -1) {
      newBounds.x = bounds.x + dx;
      newBounds.width = bounds.width - dx;
    }
    return newBounds;
  }
  function applyConstraints(attr, trbl, resizeConstraints) {
    var value = trbl[attr],
      minValue = resizeConstraints.min && resizeConstraints.min[attr],
      maxValue = resizeConstraints.max && resizeConstraints.max[attr];
    if (isNumber$3(minValue)) {
      value = (/top|left/.test(attr) ? min : max)(value, minValue);
    }
    if (isNumber$3(maxValue)) {
      value = (/top|left/.test(attr) ? max : min)(value, maxValue);
    }
    return value;
  }
  function ensureConstraints(currentBounds, resizeConstraints) {
    if (!resizeConstraints) {
      return currentBounds;
    }
    var currentTrbl = asTRBL(currentBounds);
    return asBounds({
      top: applyConstraints('top', currentTrbl, resizeConstraints),
      right: applyConstraints('right', currentTrbl, resizeConstraints),
      bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),
      left: applyConstraints('left', currentTrbl, resizeConstraints)
    });
  }
  function getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {
    var currentBox = asTRBL(currentBounds);
    var minBox = {
      top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,
      left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,
      bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,
      right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right
    };
    var childrenBox = childrenBounds ? asTRBL(childrenBounds) : minBox;
    var combinedBox = {
      top: min(minBox.top, childrenBox.top),
      left: min(minBox.left, childrenBox.left),
      bottom: max(minBox.bottom, childrenBox.bottom),
      right: max(minBox.right, childrenBox.right)
    };
    return asBounds(combinedBox);
  }
  function asPadding(mayBePadding, defaultValue) {
    if (typeof mayBePadding !== 'undefined') {
      return mayBePadding;
    } else {
      return DEFAULT_CHILD_BOX_PADDING;
    }
  }
  function addPadding(bbox, padding) {
    var left, right, top, bottom;
    if (typeof padding === 'object') {
      left = asPadding(padding.left);
      right = asPadding(padding.right);
      top = asPadding(padding.top);
      bottom = asPadding(padding.bottom);
    } else {
      left = right = top = bottom = asPadding(padding);
    }
    return {
      x: bbox.x - left,
      y: bbox.y - top,
      width: bbox.width + left + right,
      height: bbox.height + top + bottom
    };
  }

  /**
   * Is the given element part of the resize
   * targets min boundary box?
   *
   * This is the default implementation which excludes
   * connections and labels.
   *
   * @param {djs.model.Base} element
   */
  function isBBoxChild(element) {
    // exclude connections
    if (element.waypoints) {
      return false;
    }

    // exclude labels
    if (element.type === 'label') {
      return false;
    }
    return true;
  }

  /**
   * Return children bounding computed from a shapes children
   * or a list of prefiltered children.
   *
   * @param  {djs.model.Shape|Array<djs.model.Shape>} shapeOrChildren
   * @param  {number|Object} padding
   *
   * @return {Bounds}
   */
  function computeChildrenBBox(shapeOrChildren, padding) {
    var elements;

    // compute based on shape
    if (shapeOrChildren.length === undefined) {
      // grab all the children that are part of the
      // parents children box
      elements = filter$2(shapeOrChildren.children, isBBoxChild);
    } else {
      elements = shapeOrChildren;
    }
    if (elements.length) {
      return addPadding(getBBox(elements), padding);
    }
  }

  var DEFAULT_MIN_WIDTH = 10;

  /**
   * A component that provides resizing of shapes on the canvas.
   *
   * The following components are part of shape resize:
   *
   *  * adding resize handles,
   *  * creating a visual during resize
   *  * checking resize rules
   *  * committing a change once finished
   *
   *
   * ## Customizing
   *
   * It's possible to customize the resizing behaviour by intercepting 'resize.start'
   * and providing the following parameters through the 'context':
   *
   *   * minDimensions ({ width, height }): minimum shape dimensions
   *
   *   * childrenBoxPadding ({ left, top, bottom, right } || number):
   *     gap between the minimum bounding box and the container
   *
   * f.ex:
   *
   * ```javascript
   * eventBus.on('resize.start', 1500, function(event) {
   *   var context = event.context,
   *
   *  context.minDimensions = { width: 140, height: 120 };
   *
   *  // Passing general padding
   *  context.childrenBoxPadding = 30;
   *
   *  // Passing padding to a specific side
   *  context.childrenBoxPadding.left = 20;
   * });
   * ```
   */
  function Resize(eventBus, rules, modeling, dragging) {
    this._dragging = dragging;
    this._rules = rules;
    var self = this;

    /**
     * Handle resize move by specified delta.
     *
     * @param {Object} context
     * @param {Point} delta
     */
    function handleMove(context, delta) {
      var shape = context.shape,
        direction = context.direction,
        resizeConstraints = context.resizeConstraints,
        newBounds;
      context.delta = delta;
      newBounds = resizeBounds(shape, direction, delta);

      // ensure constraints during resize
      context.newBounds = ensureConstraints(newBounds, resizeConstraints);

      // update + cache executable state
      context.canExecute = self.canResize(context);
    }

    /**
     * Handle resize start.
     *
     * @param  {Object} context
     */
    function handleStart(context) {
      var resizeConstraints = context.resizeConstraints,
        // evaluate minBounds for backwards compatibility
        minBounds = context.minBounds;
      if (resizeConstraints !== undefined) {
        return;
      }
      if (minBounds === undefined) {
        minBounds = self.computeMinResizeBox(context);
      }
      context.resizeConstraints = {
        min: asTRBL(minBounds)
      };
    }

    /**
     * Handle resize end.
     *
     * @param  {Object} context
     */
    function handleEnd(context) {
      var shape = context.shape,
        canExecute = context.canExecute,
        newBounds = context.newBounds;
      if (canExecute) {
        // ensure we have actual pixel values for new bounds
        // (important when zoom level was > 1 during move)
        newBounds = roundBounds(newBounds);
        if (!boundsChanged(shape, newBounds)) {
          // no resize necessary
          return;
        }

        // perform the actual resize
        modeling.resizeShape(shape, newBounds);
      }
    }
    eventBus.on('resize.start', function (event) {
      handleStart(event.context);
    });
    eventBus.on('resize.move', function (event) {
      var delta = {
        x: event.dx,
        y: event.dy
      };
      handleMove(event.context, delta);
    });
    eventBus.on('resize.end', function (event) {
      handleEnd(event.context);
    });
  }
  Resize.prototype.canResize = function (context) {
    var rules = this._rules;
    var ctx = pick$1(context, ['newBounds', 'shape', 'delta', 'direction']);
    return rules.allowed('shape.resize', ctx);
  };

  /**
   * Activate a resize operation.
   *
   * You may specify additional contextual information and must specify a
   * resize direction during activation of the resize event.
   *
   * @param {MouseEvent} event
   * @param {djs.model.Shape} shape
   * @param {Object|string} contextOrDirection
   */
  Resize.prototype.activate = function (event, shape, contextOrDirection) {
    var dragging = this._dragging,
      context,
      direction;
    if (typeof contextOrDirection === 'string') {
      contextOrDirection = {
        direction: contextOrDirection
      };
    }
    context = assign$4({
      shape: shape
    }, contextOrDirection);
    direction = context.direction;
    if (!direction) {
      throw new Error('must provide a direction (n|w|s|e|nw|se|ne|sw)');
    }
    dragging.init(event, getReferencePoint(shape, direction), 'resize', {
      autoActivate: true,
      cursor: getCursor(direction),
      data: {
        shape: shape,
        context: context
      }
    });
  };
  Resize.prototype.computeMinResizeBox = function (context) {
    var shape = context.shape,
      direction = context.direction,
      minDimensions,
      childrenBounds;
    minDimensions = context.minDimensions || {
      width: DEFAULT_MIN_WIDTH,
      height: DEFAULT_MIN_WIDTH
    };

    // get children bounds
    childrenBounds = computeChildrenBBox(shape, context.childrenBoxPadding);

    // get correct minimum bounds from given resize direction
    // basically ensures that the minBounds is max(childrenBounds, minDimensions)
    return getMinResizeBounds(direction, shape, minDimensions, childrenBounds);
  };
  Resize.$inject = ['eventBus', 'rules', 'modeling', 'dragging'];

  // helpers //////////

  function boundsChanged(shape, newBounds) {
    return shape.x !== newBounds.x || shape.y !== newBounds.y || shape.width !== newBounds.width || shape.height !== newBounds.height;
  }
  function getReferencePoint(shape, direction) {
    var mid = getMid(shape),
      trbl = asTRBL(shape);
    var referencePoint = {
      x: mid.x,
      y: mid.y
    };
    if (direction.indexOf('n') !== -1) {
      referencePoint.y = trbl.top;
    } else if (direction.indexOf('s') !== -1) {
      referencePoint.y = trbl.bottom;
    }
    if (direction.indexOf('e') !== -1) {
      referencePoint.x = trbl.right;
    } else if (direction.indexOf('w') !== -1) {
      referencePoint.x = trbl.left;
    }
    return referencePoint;
  }
  function getCursor(direction) {
    var prefix = 'resize-';
    if (direction === 'n' || direction === 's') {
      return prefix + 'ns';
    } else if (direction === 'e' || direction === 'w') {
      return prefix + 'ew';
    } else if (direction === 'nw' || direction === 'se') {
      return prefix + 'nwse';
    } else {
      return prefix + 'nesw';
    }
  }

  var MARKER_RESIZING = 'djs-resizing',
    MARKER_RESIZE_NOT_OK = 'resize-not-ok';
  var LOW_PRIORITY$a = 500;

  /**
   * Provides previews for resizing shapes when resizing.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {PreviewSupport} previewSupport
   */
  function ResizePreview(eventBus, canvas, previewSupport) {
    /**
     * Update resizer frame.
     *
     * @param {Object} context
     */
    function updateFrame(context) {
      var shape = context.shape,
        bounds = context.newBounds,
        frame = context.frame;
      if (!frame) {
        frame = context.frame = previewSupport.addFrame(shape, canvas.getActiveLayer());
        canvas.addMarker(shape, MARKER_RESIZING);
      }
      if (bounds.width > 5) {
        attr(frame, {
          x: bounds.x,
          width: bounds.width
        });
      }
      if (bounds.height > 5) {
        attr(frame, {
          y: bounds.y,
          height: bounds.height
        });
      }
      if (context.canExecute) {
        classes(frame).remove(MARKER_RESIZE_NOT_OK);
      } else {
        classes(frame).add(MARKER_RESIZE_NOT_OK);
      }
    }

    /**
     * Remove resizer frame.
     *
     * @param {Object} context
     */
    function removeFrame(context) {
      var shape = context.shape,
        frame = context.frame;
      if (frame) {
        remove$2(context.frame);
      }
      canvas.removeMarker(shape, MARKER_RESIZING);
    }

    // add and update previews
    eventBus.on('resize.move', LOW_PRIORITY$a, function (event) {
      updateFrame(event.context);
    });

    // remove previews
    eventBus.on('resize.cleanup', function (event) {
      removeFrame(event.context);
    });
  }
  ResizePreview.$inject = ['eventBus', 'canvas', 'previewSupport'];

  var HANDLE_OFFSET = -6,
    HANDLE_SIZE = 8,
    HANDLE_HIT_SIZE = 20;
  var CLS_RESIZER = 'djs-resizer';
  var directions = ['n', 'w', 's', 'e', 'nw', 'ne', 'se', 'sw'];

  /**
   * This component is responsible for adding resize handles.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Selection} selection
   * @param {Resize} resize
   */
  function ResizeHandles(eventBus, canvas, selection, resize) {
    this._resize = resize;
    this._canvas = canvas;
    var self = this;
    eventBus.on('selection.changed', function (e) {
      var newSelection = e.newSelection;

      // remove old selection markers
      self.removeResizers();

      // add new selection markers ONLY if single selection
      if (newSelection.length === 1) {
        forEach$3(newSelection, bind$3(self.addResizer, self));
      }
    });
    eventBus.on('shape.changed', function (e) {
      var shape = e.element;
      if (selection.isSelected(shape)) {
        self.removeResizers();
        self.addResizer(shape);
      }
    });
  }
  ResizeHandles.prototype.makeDraggable = function (element, gfx, direction) {
    var resize = this._resize;
    function startResize(event) {
      // only trigger on left mouse button
      if (isPrimaryButton(event)) {
        resize.activate(event, element, direction);
      }
    }
    event.bind(gfx, 'mousedown', startResize);
    event.bind(gfx, 'touchstart', startResize);
  };
  ResizeHandles.prototype._createResizer = function (element, x, y, direction) {
    var resizersParent = this._getResizersParent();
    var offset = getHandleOffset(direction);
    var group = create$2('g');
    classes(group).add(CLS_RESIZER);
    classes(group).add(CLS_RESIZER + '-' + element.id);
    classes(group).add(CLS_RESIZER + '-' + direction);
    append(resizersParent, group);
    var visual = create$2('rect');
    attr(visual, {
      x: -HANDLE_SIZE / 2 + offset.x,
      y: -HANDLE_SIZE / 2 + offset.y,
      width: HANDLE_SIZE,
      height: HANDLE_SIZE
    });
    classes(visual).add(CLS_RESIZER + '-visual');
    append(group, visual);
    var hit = create$2('rect');
    attr(hit, {
      x: -HANDLE_HIT_SIZE / 2 + offset.x,
      y: -HANDLE_HIT_SIZE / 2 + offset.y,
      width: HANDLE_HIT_SIZE,
      height: HANDLE_HIT_SIZE
    });
    classes(hit).add(CLS_RESIZER + '-hit');
    append(group, hit);
    transform(group, x, y);
    return group;
  };
  ResizeHandles.prototype.createResizer = function (element, direction) {
    var point = getReferencePoint(element, direction);
    var resizer = this._createResizer(element, point.x, point.y, direction);
    this.makeDraggable(element, resizer, direction);
  };

  // resize handles implementation ///////////////////////////////

  /**
   * Add resizers for a given element.
   *
   * @param {djs.model.Element} element
   */
  ResizeHandles.prototype.addResizer = function (element) {
    var self = this;
    if (isConnection$2(element) || !this._resize.canResize({
      shape: element
    })) {
      return;
    }
    forEach$3(directions, function (direction) {
      self.createResizer(element, direction);
    });
  };

  /**
   * Remove all resizers
   */
  ResizeHandles.prototype.removeResizers = function () {
    var resizersParent = this._getResizersParent();
    clear(resizersParent);
  };
  ResizeHandles.prototype._getResizersParent = function () {
    return this._canvas.getLayer('resizers');
  };
  ResizeHandles.$inject = ['eventBus', 'canvas', 'selection', 'resize'];

  // helpers //////////

  function getHandleOffset(direction) {
    var offset = {
      x: 0,
      y: 0
    };
    if (direction.indexOf('e') !== -1) {
      offset.x = -HANDLE_OFFSET;
    } else if (direction.indexOf('w') !== -1) {
      offset.x = HANDLE_OFFSET;
    }
    if (direction.indexOf('s') !== -1) {
      offset.y = -HANDLE_OFFSET;
    } else if (direction.indexOf('n') !== -1) {
      offset.y = HANDLE_OFFSET;
    }
    return offset;
  }
  function isConnection$2(element) {
    return !!element.waypoints;
  }

  var ResizeModule = {
    __depends__: [Rules$5, DraggingModule, PreviewSupportModule],
    __init__: ['resize', 'resizePreview', 'resizeHandles'],
    resize: ['type', Resize],
    resizePreview: ['type', ResizePreview],
    resizeHandles: ['type', ResizeHandles]
  };

  var RECONNECT_START = 'reconnectStart',
    RECONNECT_END = 'reconnectEnd';
  var HIGH_PRIORITY$4 = 2000;
  function DrdBendpointSnapping(eventBus) {
    eventBus.on(['bendpoint.move.move', 'bendpoint.move.end'], HIGH_PRIORITY$4, function (event) {
      var context = event.context,
        allowed = context.allowed,
        hover = context.hover,
        source = context.source,
        target = context.target,
        type = context.type;
      if (!context.hints) {
        context.hints = {};
      }
      delete context.hints.connectionStart;
      delete context.hints.connectionEnd;
      if (allowed && allowed.type !== 'dmn:InformationRequirement') {
        return;
      }
      if (!hover || !isAny(hover, ['dmn:Decision', 'dmn:InputData'])) {
        return;
      }
      if (source === target) {
        return;
      }
      var reconnect = type === RECONNECT_START || type === RECONNECT_END;
      var orientation = getOrientation(source, target);
      if (reconnect && hover === source) {
        // (1) snap event to source
        snapToSource(event, orientation);

        // (2) set connection end to target
        context.hints.connectionEnd = getConnectionEnd(target, orientation);
      } else if (reconnect && hover === target) {
        // (1) set connection start to source
        context.hints.connectionStart = getConnectionStart(source, orientation);

        // (2) snap event to target
        snapToTarget(event, orientation);
      }
    });
  }
  DrdBendpointSnapping.$inject = ['eventBus'];

  // helpers //////////

  function getConnectionStart(source, orientation) {
    var sourceTrbl = asTRBL(source);
    var connectionStart = getMid(source);
    if (orientation.includes('bottom')) {
      connectionStart.y = sourceTrbl.top;
    } else if (orientation.includes('top')) {
      connectionStart.y = sourceTrbl.bottom;
    } else if (orientation.includes('right')) {
      connectionStart.x = sourceTrbl.left;
    } else {
      connectionStart.x = sourceTrbl.right;
    }
    return connectionStart;
  }
  function getConnectionEnd(target, orientation) {
    var targetTrbl = asTRBL(target);
    var connectionEnd = getMid(target);
    if (orientation.includes('bottom')) {
      connectionEnd.y = targetTrbl.bottom;
    } else if (orientation.includes('top')) {
      connectionEnd.y = targetTrbl.top;
    } else if (orientation.includes('right')) {
      connectionEnd.x = targetTrbl.right;
    } else {
      connectionEnd.x = targetTrbl.left;
    }
    return connectionEnd;
  }
  function snapToSource(event, orientation) {
    var context = event.context,
      source = context.source;
    var connectionStart = getConnectionStart(source, orientation);
    var dx = event.x - connectionStart.x,
      dy = event.y - connectionStart.y;
    event.x -= dx;
    event.y -= dy;
    event.dx -= dx;
    event.dy -= dy;
  }
  function snapToTarget(event, orientation) {
    var context = event.context,
      target = context.target;
    var connectionEnd = getConnectionEnd(target, orientation);
    var dx = 0,
      dy = 0;
    if (orientation.includes('top') || orientation.includes('bottom')) {
      dy = event.y - connectionEnd.y;
    } else {
      dx = event.x - connectionEnd.x;
    }
    event.x -= dx;
    event.y -= dy;
    event.dx -= dx;
    event.dy -= dy;
  }

  var LOW_PRIORITY$9 = 250;
  function DrdConnectSnapping(eventBus) {
    eventBus.on(['connect.hover', 'connect.move', 'connect.end'], LOW_PRIORITY$9, function (event) {
      var context = event.context,
        canExecute = context.canExecute,
        hover = context.hover,
        source = context.source,
        target = context.target;
      if (canExecute && canExecute.type === 'dmn:InformationRequirement') {
        var orientation = getOrientation(source, target);

        // snap source
        context.connectionStart = getMid(source);

        // snap target
        if (hover === source) {
          context.connectionEnd = getMid(target);
        } else {
          context.connectionEnd = {
            x: event.x,
            y: event.y
          };
        }
        if (orientation.includes('bottom')) {
          context.connectionStart.y = asTRBL(source).top;
          context.connectionEnd.y = asTRBL(target).bottom;
        } else if (orientation.includes('top')) {
          context.connectionStart.y = asTRBL(source).bottom;
          context.connectionEnd.y = asTRBL(target).top;
        } else if (orientation.includes('right')) {
          context.connectionStart.x = asTRBL(source).left;
          context.connectionEnd.x = asTRBL(target).right;
        } else {
          context.connectionStart.x = asTRBL(source).right;
          context.connectionEnd.x = asTRBL(target).left;
        }
      } else {
        delete context.connectionStart;
        delete context.connectionEnd;
      }
    });
  }
  DrdConnectSnapping.$inject = ['eventBus'];

  /**
   * A snap context, containing the (possibly incomplete)
   * mappings of drop targets (to identify the snapping)
   * to computed snap points.
   */
  function SnapContext() {
    /**
     * Map<String, SnapPoints> mapping drop targets to
     * a list of possible snappings.
     *
     * @type {Object}
     */
    this._targets = {};

    /**
     * Map<String, Point> initial positioning of element
     * regarding various snap directions.
     *
     * @type {Object}
     */
    this._snapOrigins = {};

    /**
     * List of snap locations
     *
     * @type {Array<string>}
     */
    this._snapLocations = [];

    /**
     * Map<String, Array<Point>> of default snapping locations
     *
     * @type {Object}
     */
    this._defaultSnaps = {};
  }
  SnapContext.prototype.getSnapOrigin = function (snapLocation) {
    return this._snapOrigins[snapLocation];
  };
  SnapContext.prototype.setSnapOrigin = function (snapLocation, initialValue) {
    this._snapOrigins[snapLocation] = initialValue;
    if (this._snapLocations.indexOf(snapLocation) === -1) {
      this._snapLocations.push(snapLocation);
    }
  };
  SnapContext.prototype.addDefaultSnap = function (type, point) {
    var snapValues = this._defaultSnaps[type];
    if (!snapValues) {
      snapValues = this._defaultSnaps[type] = [];
    }
    snapValues.push(point);
  };

  /**
   * Return a number of initialized snaps, i.e. snap locations such as
   * top-left, mid, bottom-right and so forth.
   *
   * @return {Array<string>} snapLocations
   */
  SnapContext.prototype.getSnapLocations = function () {
    return this._snapLocations;
  };

  /**
   * Set the snap locations for this context.
   *
   * The order of locations determines precedence.
   *
   * @param {Array<string>} snapLocations
   */
  SnapContext.prototype.setSnapLocations = function (snapLocations) {
    this._snapLocations = snapLocations;
  };

  /**
   * Get snap points for a given target
   *
   * @param {Element|string} target
   */
  SnapContext.prototype.pointsForTarget = function (target) {
    var targetId = target.id || target;
    var snapPoints = this._targets[targetId];
    if (!snapPoints) {
      snapPoints = this._targets[targetId] = new SnapPoints();
      snapPoints.initDefaults(this._defaultSnaps);
    }
    return snapPoints;
  };

  /**
   * Creates the snap points and initializes them with the
   * given default values.
   *
   * @param {Object<string, Array<Point>>} [defaultPoints]
   */
  function SnapPoints(defaultSnaps) {
    /**
     * Map<String, Map<(x|y), Array<number>>> mapping snap locations,
     * i.e. top-left, bottom-right, center to actual snap values.
     *
     * @type {Object}
     */
    this._snapValues = {};
  }
  SnapPoints.prototype.add = function (snapLocation, point) {
    var snapValues = this._snapValues[snapLocation];
    if (!snapValues) {
      snapValues = this._snapValues[snapLocation] = {
        x: [],
        y: []
      };
    }
    if (snapValues.x.indexOf(point.x) === -1) {
      snapValues.x.push(point.x);
    }
    if (snapValues.y.indexOf(point.y) === -1) {
      snapValues.y.push(point.y);
    }
  };
  SnapPoints.prototype.snap = function (point, snapLocation, axis, tolerance) {
    var snappingValues = this._snapValues[snapLocation];
    return snappingValues && snapTo(point[axis], snappingValues[axis], tolerance);
  };

  /**
   * Initialize a number of default snapping points.
   *
   * @param  {Object} defaultSnaps
   */
  SnapPoints.prototype.initDefaults = function (defaultSnaps) {
    var self = this;
    forEach$3(defaultSnaps || {}, function (snapPoints, snapLocation) {
      forEach$3(snapPoints, function (point) {
        self.add(snapLocation, point);
      });
    });
  };

  var HIGHER_PRIORITY$3 = 1250;

  /**
   * Snap during create and move.
   *
   * @param {EventBus} elementRegistry
   * @param {EventBus} eventBus
   * @param {Snapping} snapping
   */
  function CreateMoveSnapping(elementRegistry, eventBus, snapping) {
    var self = this;
    this._elementRegistry = elementRegistry;
    eventBus.on(['create.start', 'shape.move.start'], function (event) {
      self.initSnap(event);
    });
    eventBus.on(['create.move', 'create.end', 'shape.move.move', 'shape.move.end'], HIGHER_PRIORITY$3, function (event) {
      var context = event.context,
        shape = context.shape,
        snapContext = context.snapContext,
        target = context.target;
      if (event.originalEvent && isCmd$4(event.originalEvent)) {
        return;
      }
      if (isSnapped(event) || !target) {
        return;
      }
      var snapPoints = snapContext.pointsForTarget(target);
      if (!snapPoints.initialized) {
        snapPoints = self.addSnapTargetPoints(snapPoints, shape, target);
        snapPoints.initialized = true;
      }
      snapping.snap(event, snapPoints);
    });
    eventBus.on(['create.cleanup', 'shape.move.cleanup'], function () {
      snapping.hide();
    });
  }
  CreateMoveSnapping.$inject = ['elementRegistry', 'eventBus', 'snapping'];
  CreateMoveSnapping.prototype.initSnap = function (event) {
    var elementRegistry = this._elementRegistry;
    var context = event.context,
      shape = context.shape,
      snapContext = context.snapContext;
    if (!snapContext) {
      snapContext = context.snapContext = new SnapContext();
    }
    var shapeMid;
    if (elementRegistry.get(shape.id)) {
      // move
      shapeMid = mid$1(shape, event);
    } else {
      // create
      shapeMid = {
        x: event.x + mid$1(shape).x,
        y: event.y + mid$1(shape).y
      };
    }
    var shapeTopLeft = {
        x: shapeMid.x - shape.width / 2,
        y: shapeMid.y - shape.height / 2
      },
      shapeBottomRight = {
        x: shapeMid.x + shape.width / 2,
        y: shapeMid.y + shape.height / 2
      };
    snapContext.setSnapOrigin('mid', {
      x: shapeMid.x - event.x,
      y: shapeMid.y - event.y
    });

    // snap labels to mid only
    if (isLabel$1(shape)) {
      return snapContext;
    }
    snapContext.setSnapOrigin('top-left', {
      x: shapeTopLeft.x - event.x,
      y: shapeTopLeft.y - event.y
    });
    snapContext.setSnapOrigin('bottom-right', {
      x: shapeBottomRight.x - event.x,
      y: shapeBottomRight.y - event.y
    });
    return snapContext;
  };
  CreateMoveSnapping.prototype.addSnapTargetPoints = function (snapPoints, shape, target) {
    var snapTargets = this.getSnapTargets(shape, target);
    forEach$3(snapTargets, function (snapTarget) {
      // handle labels
      if (isLabel$1(snapTarget)) {
        if (isLabel$1(shape)) {
          snapPoints.add('mid', mid$1(snapTarget));
        }
        return;
      }

      // handle connections
      if (isConnection$1(snapTarget)) {
        // ignore single segment connections
        if (snapTarget.waypoints.length < 3) {
          return;
        }

        // ignore first and last waypoint
        var waypoints = snapTarget.waypoints.slice(1, -1);
        forEach$3(waypoints, function (waypoint) {
          snapPoints.add('mid', waypoint);
        });
        return;
      }

      // handle shapes
      snapPoints.add('mid', mid$1(snapTarget));
    });
    if (!isNumber$3(shape.x) || !isNumber$3(shape.y)) {
      return snapPoints;
    }

    // snap to original position when moving
    if (this._elementRegistry.get(shape.id)) {
      snapPoints.add('mid', mid$1(shape));
    }
    return snapPoints;
  };
  CreateMoveSnapping.prototype.getSnapTargets = function (shape, target) {
    return getChildren(target).filter(function (child) {
      return !isHidden$1(child);
    });
  };

  // helpers //////////

  function isConnection$1(element) {
    return !!element.waypoints;
  }
  function isHidden$1(element) {
    return !!element.hidden;
  }
  function isLabel$1(element) {
    return !!element.labelTarget;
  }

  var HIGHER_PRIORITY$2 = 1250;

  /**
   * Snap during resize.
   *
   * @param {EventBus} eventBus
   * @param {Snapping} snapping
   */
  function ResizeSnapping(eventBus, snapping) {
    var self = this;
    eventBus.on(['resize.start'], function (event) {
      self.initSnap(event);
    });
    eventBus.on(['resize.move', 'resize.end'], HIGHER_PRIORITY$2, function (event) {
      var context = event.context,
        shape = context.shape,
        parent = shape.parent,
        direction = context.direction,
        snapContext = context.snapContext;
      if (event.originalEvent && isCmd$4(event.originalEvent)) {
        return;
      }
      if (isSnapped(event)) {
        return;
      }
      var snapPoints = snapContext.pointsForTarget(parent);
      if (!snapPoints.initialized) {
        snapPoints = self.addSnapTargetPoints(snapPoints, shape, parent, direction);
        snapPoints.initialized = true;
      }
      if (isHorizontal(direction)) {
        setSnapped(event, 'x', event.x);
      }
      if (isVertical(direction)) {
        setSnapped(event, 'y', event.y);
      }
      snapping.snap(event, snapPoints);
    });
    eventBus.on(['resize.cleanup'], function () {
      snapping.hide();
    });
  }
  ResizeSnapping.prototype.initSnap = function (event) {
    var context = event.context,
      shape = context.shape,
      direction = context.direction,
      snapContext = context.snapContext;
    if (!snapContext) {
      snapContext = context.snapContext = new SnapContext();
    }
    var snapOrigin = getSnapOrigin(shape, direction);
    snapContext.setSnapOrigin('corner', {
      x: snapOrigin.x - event.x,
      y: snapOrigin.y - event.y
    });
    return snapContext;
  };
  ResizeSnapping.prototype.addSnapTargetPoints = function (snapPoints, shape, target, direction) {
    var snapTargets = this.getSnapTargets(shape, target);
    forEach$3(snapTargets, function (snapTarget) {
      snapPoints.add('corner', bottomRight(snapTarget));
      snapPoints.add('corner', topLeft(snapTarget));
    });
    snapPoints.add('corner', getSnapOrigin(shape, direction));
    return snapPoints;
  };
  ResizeSnapping.$inject = ['eventBus', 'snapping'];
  ResizeSnapping.prototype.getSnapTargets = function (shape, target) {
    return getChildren(target).filter(function (child) {
      return !isAttached(child, shape) && !isConnection(child) && !isHidden(child) && !isLabel(child);
    });
  };

  // helpers //////////

  function getSnapOrigin(shape, direction) {
    var mid = getMid(shape),
      trbl = asTRBL(shape);
    var snapOrigin = {
      x: mid.x,
      y: mid.y
    };
    if (direction.indexOf('n') !== -1) {
      snapOrigin.y = trbl.top;
    } else if (direction.indexOf('s') !== -1) {
      snapOrigin.y = trbl.bottom;
    }
    if (direction.indexOf('e') !== -1) {
      snapOrigin.x = trbl.right;
    } else if (direction.indexOf('w') !== -1) {
      snapOrigin.x = trbl.left;
    }
    return snapOrigin;
  }
  function isAttached(element, host) {
    return element.host === host;
  }
  function isConnection(element) {
    return !!element.waypoints;
  }
  function isHidden(element) {
    return !!element.hidden;
  }
  function isLabel(element) {
    return !!element.labelTarget;
  }
  function isHorizontal(direction) {
    return direction === 'n' || direction === 's';
  }
  function isVertical(direction) {
    return direction === 'e' || direction === 'w';
  }

  var SNAP_TOLERANCE = 7;
  var SNAP_LINE_HIDE_DELAY = 1000;

  /**
   * Generic snapping feature.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function Snapping(canvas) {
    this._canvas = canvas;

    // delay hide by 1000 seconds since last snap
    this._asyncHide = debounce(bind$3(this.hide, this), SNAP_LINE_HIDE_DELAY);
  }
  Snapping.$inject = ['canvas'];

  /**
   * Snap an event to given snap points.
   *
   * @param {Event} event
   * @param {SnapPoints} snapPoints
   */
  Snapping.prototype.snap = function (event, snapPoints) {
    var context = event.context,
      snapContext = context.snapContext,
      snapLocations = snapContext.getSnapLocations();
    var snapping = {
      x: isSnapped(event, 'x'),
      y: isSnapped(event, 'y')
    };
    forEach$3(snapLocations, function (location) {
      var snapOrigin = snapContext.getSnapOrigin(location);
      var snapCurrent = {
        x: event.x + snapOrigin.x,
        y: event.y + snapOrigin.y
      };

      // snap both axis if not snapped already
      forEach$3(['x', 'y'], function (axis) {
        var locationSnapping;
        if (!snapping[axis]) {
          locationSnapping = snapPoints.snap(snapCurrent, location, axis, SNAP_TOLERANCE);
          if (locationSnapping !== undefined) {
            snapping[axis] = {
              value: locationSnapping,
              originValue: locationSnapping - snapOrigin[axis]
            };
          }
        }
      });

      // no need to continue snapping
      if (snapping.x && snapping.y) {
        return false;
      }
    });

    // show snap lines
    this.showSnapLine('vertical', snapping.x && snapping.x.value);
    this.showSnapLine('horizontal', snapping.y && snapping.y.value);

    // snap event
    forEach$3(['x', 'y'], function (axis) {
      var axisSnapping = snapping[axis];
      if (isObject$1(axisSnapping)) {
        setSnapped(event, axis, axisSnapping.originValue);
      }
    });
  };
  Snapping.prototype._createLine = function (orientation) {
    var root = this._canvas.getLayer('snap');
    var line = create$2('path');
    attr(line, {
      d: 'M0,0 L0,0'
    });
    classes(line).add('djs-snap-line');
    append(root, line);
    return {
      update: function (position) {
        if (!isNumber$3(position)) {
          attr(line, {
            display: 'none'
          });
        } else {
          if (orientation === 'horizontal') {
            attr(line, {
              d: 'M-100000,' + position + ' L+100000,' + position,
              display: ''
            });
          } else {
            attr(line, {
              d: 'M ' + position + ',-100000 L ' + position + ', +100000',
              display: ''
            });
          }
        }
      }
    };
  };
  Snapping.prototype._createSnapLines = function () {
    this._snapLines = {
      horizontal: this._createLine('horizontal'),
      vertical: this._createLine('vertical')
    };
  };
  Snapping.prototype.showSnapLine = function (orientation, position) {
    var line = this.getSnapLine(orientation);
    if (line) {
      line.update(position);
    }
    this._asyncHide();
  };
  Snapping.prototype.getSnapLine = function (orientation) {
    if (!this._snapLines) {
      this._createSnapLines();
    }
    return this._snapLines[orientation];
  };
  Snapping.prototype.hide = function () {
    forEach$3(this._snapLines, function (snapLine) {
      snapLine.update();
    });
  };

  var SnappingModule$1 = {
    __init__: ['createMoveSnapping', 'resizeSnapping', 'snapping'],
    createMoveSnapping: ['type', CreateMoveSnapping],
    resizeSnapping: ['type', ResizeSnapping],
    snapping: ['type', Snapping]
  };

  var SnappingModule = {
    __depends__: [SnappingModule$1],
    __init__: ['bendpointSnapping', 'connectSnapping'],
    bendpointSnapping: ['type', DrdBendpointSnapping],
    connectSnapping: ['type', DrdConnectSnapping]
  };

  /**
   * A modeler for DMN tables.
   *
   *
   * ## Extending the Modeler
   *
   * In order to extend the viewer pass extension modules to bootstrap via the
   * `additionalModules` option. An extension module is an object that exposes
   * named services.
   *
   * The following example depicts the integration of a simple
   * logging component that integrates with interaction events:
   *
   *
   * ```javascript
   *
   * // logging component
   * function InteractionLogger(eventBus) {
   *   eventBus.on('element.hover', function(event) {
   *     console.log()
   *   })
   * }
   *
   * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
   *
   * // extension module
   * var extensionModule = {
   *   __init__: [ 'interactionLogger' ],
   *   interactionLogger: [ 'type', InteractionLogger ]
   * };
   *
   * // extend the viewer
   * var dmnModeler = new Modeler({ additionalModules: [ extensionModule ] });
   * dmnModeler.importXML(...);
   * ```
   *
   *
   * ## Customizing / Replacing Components
   *
   * You can replace individual table components by redefining them in override modules.
   * This works for all components, including those defined in the core.
   *
   * Pass in override modules via the `options.additionalModules` flag like this:
   *
   * ```javascript
   * function CustomContextPadProvider(contextPad) {
   *
   *   contextPad.registerProvider(this);
   *
   *   this.getContextPadEntries = function(element) {
   *     // no entries, effectively disable the context pad
   *     return {};
   *   };
   * }
   *
   * CustomContextPadProvider.$inject = [ 'contextPad' ];
   *
   * var overrideModule = {
   *   contextPadProvider: [ 'type', CustomContextPadProvider ]
   * };
   *
   * var dmnModeler = new Modeler({ additionalModules: [ overrideModule ]});
   * ```
   *
   * @param {Object} [options] configuration options to pass to the viewer
   * @param {DOMElement} [options.container]
   *        the container to render the viewer in, defaults to body.
   * @param {string|number} [options.width] the width of the viewer
   * @param {string|number} [options.height] the height of the viewer
   * @param {Object} [options.moddleExtensions]
   *        extension packages to provide
   * @param {Array<didi.Module>} [options.modules]
   *        a list of modules to override the default modules
   * @param {Array<didi.Module>} [options.additionalModules]
   *        a list of modules to use with the default modules
   */
  function Modeler$1(options) {
    NavigatedViewer.call(this, options);
  }
  e$3(Modeler$1, NavigatedViewer);

  // modules the modeler is composed of
  //
  // - viewer + navigation modules
  // - modeling modules

  Modeler$1.prototype._modelingModules = [
  // modeling components
  AlignElementsModule, AutoPlaceModule, AutoScrollModule, BendpointsModule, ContextPadModule, ConnectPreviewModule, DefinitionPropertiesModule, DistributeElementsModule, EditorActionsModule, GenerateDiModule, GridSnappingModule, KeyboardModule$1, KeyboardMoveModule, KeyboardMoveSelectionModule, LabelEditingModule, ModelingModule$1, MoveModule, PaletteModule, ResizeModule, SnappingModule];
  Modeler$1.prototype._modules = [].concat(Modeler$1.prototype._modules, Modeler$1.prototype._modelingModules);

  class Base {
    constructor(attrs) {
      assign$4(this, attrs);
      /**
       * The object that backs up the shape
       *
       * @name Base#businessObject
       * @type Object
       */

      defineProperty(this, 'businessObject', {
        writable: true
      });
    }
  }
  class Root extends Base {
    constructor(attrs) {
      super(attrs);
      /**
       * The tables rows
       *
       * @name Root#rows
       * @type Row
       */

      defineProperty(this, 'rows', {
        enumerable: true,
        value: this.rows || []
      });
      /**
       * The tables columns
       *
       * @name Root#cols
       * @type Col
       */

      defineProperty(this, 'cols', {
        enumerable: true,
        value: this.cols || []
      });
    }
  }
  class Row extends Base {
    constructor(attrs) {
      super(attrs);
      /**
       * Reference to the table
       *
       * @name Row#root
       * @type Root
       */

      defineProperty(this, 'root', {
        writable: true
      });
      /**
       * Reference to contained cells
       *
       * @name Row#cells
       * @type Cell
       */

      defineProperty(this, 'cells', {
        enumerable: true,
        value: this.cells || []
      });
    }
  }
  class Col extends Base {
    constructor(attrs) {
      super(attrs);
      /**
       * Reference to the table
       *
       * @name Col#table
       * @type Root
       */

      defineProperty(this, 'root', {
        writable: true
      });
      /**
       * Reference to contained cells
       *
       * @name Row#cells
       * @type Cell
       */

      defineProperty(this, 'cells', {
        enumerable: true,
        value: this.cells || []
      });
    }
  }
  class Cell extends Base {
    constructor(attrs) {
      super(attrs);
      /**
       * Reference to the row
       *
       * @name Cell#row
       * @type Row
       */

      defineProperty(this, 'row', {
        writable: true
      });
      /**
       * Reference to the col
       *
       * @name Cell#col
       * @type Col
       */

      defineProperty(this, 'col', {
        writable: true
      });
    }
  }
  const TYPES = {
    root: Root,
    row: Row,
    col: Col,
    cell: Cell
  };
  function create(type, attrs) {
    const Type = TYPES[type];
    if (!Type) {
      throw new Error('unknown type ' + type);
    }
    return new Type(attrs);
  } // helpers /////////////

  function defineProperty(el, prop, options) {
    Object.defineProperty(el, prop, options);
  }

  class ElementFactory$1 {
    constructor() {
      this._uid = 12;
    }
    create(type, attrs = {}) {
      if (!attrs.id) {
        attrs.id = type + '_' + this._uid++;
      }
      return create(type, attrs);
    }
    createRoot(attrs) {
      return this.create('root', attrs);
    }
    createRow(attrs) {
      return this.create('row', attrs);
    }
    createCol(attrs) {
      return this.create('col', attrs);
    }
    createCell(attrs) {
      return this.create('cell', attrs);
    }
  }

  class ElementRegistry$1 {
    constructor(eventBus) {
      this._eventBus = eventBus;
      this._elements = {};
      eventBus.on('table.clear', this.clear.bind(this));
    }
    add(element, type) {
      const {
        id
      } = element;
      this._elements[id] = element;
    }
    remove(element) {
      const id = element.id || element;
      delete this._elements[id];
    }
    get(id) {
      return this._elements[id];
    }
    getAll() {
      return values(this._elements);
    }
    forEach(fn) {
      values(this._elements).forEach(element => fn(element));
    }
    filter(fn) {
      return values(this._elements).filter(element => fn(element));
    }
    clear() {
      this._elements = {};
    }
    updateId(element, newId) {
      this._validateId(newId);
      if (typeof element === 'string') {
        element = this.get(element);
      }
      this._eventBus.fire('element.updateId', {
        element: element,
        newId: newId
      });
      this.remove(element);
      element.id = newId;
      this.add(element);
    }
    /**
    * Validate the suitability of the given id and signals a problem
    * with an exception.
    *
    * @param {String} id
    *
    * @throws {Error} if id is empty or already assigned
    */

    _validateId(id) {
      if (!id) {
        throw new Error('element must have an id');
      }
      if (this._elements[id]) {
        throw new Error('element with id ' + id + ' already added');
      }
    }
  }
  ElementRegistry$1.$inject = ['eventBus']; // helpers

  function values(obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  }

  class ChangeSupport$1 {
    constructor(eventBus) {
      this._listeners = {};
      eventBus.on('elements.changed', ({
        elements
      }) => {
        this.elementsChanged(elements);
      });
      eventBus.on('root.remove', context => {
        const oldRootId = context.root.id;
        if (this._listeners[oldRootId]) {
          eventBus.once('root.add', context => {
            const newRootId = context.root.id;
            this.updateId(oldRootId, newRootId);
          });
        }
      });
      eventBus.on('element.updateId', ({
        element,
        newId
      }) => {
        this.updateId(element.id, newId);
      });
    }
    elementsChanged(elements) {
      const invoked = {};
      const elementsLength = elements.length;
      for (let i = 0; i < elementsLength; i++) {
        const {
          id
        } = elements[i];
        if (invoked[id]) {
          return;
        }
        invoked[id] = true;
        const listenersLength = this._listeners[id] && this._listeners[id].length;
        if (listenersLength) {
          for (let j = 0; j < listenersLength; j++) {
            // listeners might remove themselves before they get called
            this._listeners[id][j] && this._listeners[id][j]();
          }
        }
      }
    }
    onElementsChanged(id, listener) {
      if (!this._listeners[id]) {
        this._listeners[id] = [];
      } // avoid push for better performance

      this._listeners[id][this._listeners[id].length] = listener;
    }
    offElementsChanged(id, listener) {
      if (!this._listeners[id]) {
        return;
      }
      if (listener) {
        const idx = this._listeners[id].indexOf(listener);
        if (idx !== -1) {
          this._listeners[id].splice(idx, 1);
        }
      } else {
        this._listeners[id].length = 0;
      }
    }
    updateId(oldId, newId) {
      if (this._listeners[oldId]) {
        this._listeners[newId] = this._listeners[oldId];
        delete this._listeners[oldId];
      }
    }
  }
  ChangeSupport$1.$inject = ['eventBus'];

  const DEFAULT_PRIORITY$1 = 1000;
  class Components$1 {
    constructor() {
      this._listeners = {};
    }
    getComponent(type, context) {
      const listeners = this._listeners[type];
      if (!listeners) {
        return;
      }
      let component;
      for (let i = 0; i < listeners.length; i++) {
        component = listeners[i].callback(context);
        if (component) {
          break;
        }
      }
      return component;
    }
    getComponents(type, context) {
      const listeners = this._listeners[type];
      const components = [];
      if (!listeners) {
        return components;
      }
      for (let i = 0; i < listeners.length; i++) {
        const component = listeners[i].callback(context);
        if (component) {
          components.push(component);
        }
      }
      if (!components.length) {
        return components;
      }
      return components;
    }
    onGetComponent(type, priority, callback) {
      if (isFunction$2(priority)) {
        callback = priority;
        priority = DEFAULT_PRIORITY$1;
      }
      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }
      const listeners = this._getListeners(type);
      let existingListener, idx;
      const newListener = {
        priority,
        callback
      };
      for (idx = 0; existingListener = listeners[idx]; idx++) {
        if (existingListener.priority < priority) {
          // prepend newListener at before existingListener
          listeners.splice(idx, 0, newListener);
          return;
        }
      }
      listeners.push(newListener);
    }
    offGetComponent(type, callback) {
      const listeners = this._getListeners(type);
      let listener, listenerCallback, idx;
      if (callback) {
        // move through listeners from back to front
        // and remove matching listeners
        for (idx = listeners.length - 1; listener = listeners[idx]; idx--) {
          listenerCallback = listener.callback;
          if (listenerCallback === callback) {
            listeners.splice(idx, 1);
          }
        }
      } else {
        // clear listeners
        listeners.length = 0;
      }
    }
    _getListeners(type) {
      let listeners = this._listeners[type];
      if (!listeners) {
        this._listeners[type] = listeners = [];
      }
      return listeners;
    }
  }

  var NO_OP = '$NO_OP';
  var ERROR_MSG = 'a runtime error occured! Use Inferno in development environment to find the error.';
  var isArray = Array.isArray;
  function isStringOrNumber(o) {
    var type = typeof o;
    return type === 'string' || type === 'number';
  }
  function isNullOrUndef(o) {
    return isUndefined(o) || isNull$2(o);
  }
  function isInvalid(o) {
    return isNull$2(o) || o === false || isTrue(o) || isUndefined(o);
  }
  function isFunction(o) {
    return typeof o === 'function';
  }
  function isString(o) {
    return typeof o === 'string';
  }
  function isNumber$2(o) {
    return typeof o === 'number';
  }
  function isNull$2(o) {
    return o === null;
  }
  function isTrue(o) {
    return o === true;
  }
  function isUndefined(o) {
    return o === void 0;
  }
  function throwError(message) {
    if (!message) {
      message = ERROR_MSG;
    }
    throw new Error("Inferno Error: " + message);
  }
  function combineFrom(first, second) {
    var out = {};
    if (first) {
      for (var key in first) {
        out[key] = first[key];
      }
    }
    if (second) {
      for (var key$1 in second) {
        out[key$1] = second[key$1];
      }
    }
    return out;
  }
  var keyPrefix = '$';
  function getVNode(childFlags, children, className, flags, key, props, ref, type) {
    return {
      childFlags: childFlags,
      children: children,
      className: className,
      dom: null,
      flags: flags,
      key: key === void 0 ? null : key,
      parentVNode: null,
      props: props === void 0 ? null : props,
      ref: ref === void 0 ? null : ref,
      type: type
    };
  }
  function createVNode(flags, type, className, children, childFlags, props, key, ref) {
    var childFlag = childFlags === void 0 ? 1 /* HasInvalidChildren */ : childFlags;
    var vNode = getVNode(childFlag, children, className, flags, key, props, ref, type);
    if (childFlag === 0 /* UnknownChildren */) {
      normalizeChildren(vNode, vNode.children);
    }
    return vNode;
  }
  function createComponentVNode(flags, type, props, key, ref) {
    if ((flags & 2 /* ComponentUnknown */) > 0) {
      flags = type.prototype && isFunction(type.prototype.render) ? 4 /* ComponentClass */ : 8 /* ComponentFunction */;
    }
    // set default props
    var defaultProps = type.defaultProps;
    if (!isNullOrUndef(defaultProps)) {
      if (!props) {
        props = {}; // Props can be referenced and modified at application level so always create new object
      }

      for (var prop in defaultProps) {
        if (isUndefined(props[prop])) {
          props[prop] = defaultProps[prop];
        }
      }
    }
    if ((flags & 8 /* ComponentFunction */) > 0) {
      var defaultHooks = type.defaultHooks;
      if (!isNullOrUndef(defaultHooks)) {
        if (!ref) {
          // As ref cannot be referenced from application level, we can use the same refs object
          ref = defaultHooks;
        } else {
          for (var prop$1 in defaultHooks) {
            if (isUndefined(ref[prop$1])) {
              ref[prop$1] = defaultHooks[prop$1];
            }
          }
        }
      }
    }
    var vNode = getVNode(1 /* HasInvalidChildren */, null, null, flags, key, props, ref, type);
    var optsVNode = options.createVNode;
    if (isFunction(optsVNode)) {
      optsVNode(vNode);
    }
    return vNode;
  }
  function createTextVNode(text, key) {
    return getVNode(1 /* HasInvalidChildren */, isNullOrUndef(text) ? '' : text, null, 16 /* Text */, key, null, null, null);
  }
  function normalizeProps(vNode) {
    var props = vNode.props;
    if (props) {
      var flags = vNode.flags;
      if (flags & 481 /* Element */) {
        if (props.children !== void 0 && isNullOrUndef(vNode.children)) {
          normalizeChildren(vNode, props.children);
        }
        if (props.className !== void 0) {
          vNode.className = props.className || null;
          props.className = undefined;
        }
      }
      if (props.key !== void 0) {
        vNode.key = props.key;
        props.key = undefined;
      }
      if (props.ref !== void 0) {
        if (flags & 8 /* ComponentFunction */) {
          vNode.ref = combineFrom(vNode.ref, props.ref);
        } else {
          vNode.ref = props.ref;
        }
        props.ref = undefined;
      }
    }
    return vNode;
  }
  function directClone(vNodeToClone) {
    var newVNode;
    var flags = vNodeToClone.flags;
    if (flags & 14 /* Component */) {
      var props;
      var propsToClone = vNodeToClone.props;
      if (!isNull$2(propsToClone)) {
        props = {};
        for (var key in propsToClone) {
          props[key] = propsToClone[key];
        }
      }
      newVNode = createComponentVNode(flags, vNodeToClone.type, props, vNodeToClone.key, vNodeToClone.ref);
    } else if (flags & 481 /* Element */) {
      newVNode = createVNode(flags, vNodeToClone.type, vNodeToClone.className, vNodeToClone.children, vNodeToClone.childFlags, vNodeToClone.props, vNodeToClone.key, vNodeToClone.ref);
    } else if (flags & 16 /* Text */) {
      newVNode = createTextVNode(vNodeToClone.children, vNodeToClone.key);
    } else if (flags & 1024 /* Portal */) {
      newVNode = vNodeToClone;
    }
    return newVNode;
  }
  function createVoidVNode() {
    return createTextVNode('', null);
  }
  function _normalizeVNodes(nodes, result, index, currentKey) {
    for (var len = nodes.length; index < len; index++) {
      var n = nodes[index];
      if (!isInvalid(n)) {
        var newKey = currentKey + keyPrefix + index;
        if (isArray(n)) {
          _normalizeVNodes(n, result, 0, newKey);
        } else {
          if (isStringOrNumber(n)) {
            n = createTextVNode(n, newKey);
          } else {
            var oldKey = n.key;
            var isPrefixedKey = isString(oldKey) && oldKey[0] === keyPrefix;
            if (!isNull$2(n.dom) || isPrefixedKey) {
              n = directClone(n);
            }
            if (isNull$2(oldKey) || isPrefixedKey) {
              n.key = newKey;
            } else {
              n.key = currentKey + oldKey;
            }
          }
          result.push(n);
        }
      }
    }
  }

  function normalizeChildren(vNode, children) {
    var newChildren;
    var newChildFlags = 1 /* HasInvalidChildren */;
    // Don't change children to match strict equal (===) true in patching
    if (isInvalid(children)) {
      newChildren = children;
    } else if (isString(children)) {
      newChildFlags = 2 /* HasVNodeChildren */;
      newChildren = createTextVNode(children);
    } else if (isNumber$2(children)) {
      newChildFlags = 2 /* HasVNodeChildren */;
      newChildren = createTextVNode(children + '');
    } else if (isArray(children)) {
      var len = children.length;
      if (len === 0) {
        newChildren = null;
        newChildFlags = 1 /* HasInvalidChildren */;
      } else {
        // we assign $ which basically means we've flagged this array for future note
        // if it comes back again, we need to clone it, as people are using it
        // in an immutable way
        // tslint:disable-next-line
        if (Object.isFrozen(children) || children['$'] === true) {
          children = children.slice();
        }
        newChildFlags = 8 /* HasKeyedChildren */;
        for (var i = 0; i < len; i++) {
          var n = children[i];
          if (isInvalid(n) || isArray(n)) {
            newChildren = newChildren || children.slice(0, i);
            _normalizeVNodes(children, newChildren, i, '');
            break;
          } else if (isStringOrNumber(n)) {
            newChildren = newChildren || children.slice(0, i);
            newChildren.push(createTextVNode(n, keyPrefix + i));
          } else {
            var key = n.key;
            var isNullDom = isNull$2(n.dom);
            var isNullKey = isNull$2(key);
            var isPrefixed = !isNullKey && isString(key) && key[0] === keyPrefix;
            if (!isNullDom || isNullKey || isPrefixed) {
              newChildren = newChildren || children.slice(0, i);
              if (!isNullDom || isPrefixed) {
                n = directClone(n);
              }
              if (isNullKey || isPrefixed) {
                n.key = keyPrefix + i;
              }
              newChildren.push(n);
            } else if (newChildren) {
              newChildren.push(n);
            }
          }
        }
        newChildren = newChildren || children;
        newChildren.$ = true;
      }
    } else {
      newChildren = children;
      if (!isNull$2(children.dom)) {
        newChildren = directClone(children);
      }
      newChildFlags = 2 /* HasVNodeChildren */;
    }

    vNode.children = newChildren;
    vNode.childFlags = newChildFlags;
    return vNode;
  }
  var options = {
    afterRender: null,
    beforeRender: null,
    createVNode: null,
    renderComplete: null
  };

  var xlinkNS = 'http://www.w3.org/1999/xlink';
  var xmlNS = 'http://www.w3.org/XML/1998/namespace';
  var svgNS = 'http://www.w3.org/2000/svg';
  var namespaces = {
    'xlink:actuate': xlinkNS,
    'xlink:arcrole': xlinkNS,
    'xlink:href': xlinkNS,
    'xlink:role': xlinkNS,
    'xlink:show': xlinkNS,
    'xlink:title': xlinkNS,
    'xlink:type': xlinkNS,
    'xml:base': xmlNS,
    'xml:lang': xmlNS,
    'xml:space': xmlNS
  };

  // We need EMPTY_OBJ defined in one place.
  // Its used for comparison so we cant inline it into shared
  var EMPTY_OBJ = {};
  var LIFECYCLE = [];
  function appendChild(parentDom, dom) {
    parentDom.appendChild(dom);
  }
  function insertOrAppend(parentDom, newNode, nextNode) {
    if (isNullOrUndef(nextNode)) {
      appendChild(parentDom, newNode);
    } else {
      parentDom.insertBefore(newNode, nextNode);
    }
  }
  function documentCreateElement(tag, isSVG) {
    if (isSVG) {
      return document.createElementNS(svgNS, tag);
    }
    return document.createElement(tag);
  }
  function replaceChild(parentDom, newDom, lastDom) {
    parentDom.replaceChild(newDom, lastDom);
  }
  function removeChild(parentDom, dom) {
    parentDom.removeChild(dom);
  }
  function callAll(arrayFn) {
    var listener;
    while ((listener = arrayFn.shift()) !== undefined) {
      listener();
    }
  }
  var attachedEventCounts = {};
  var attachedEvents = {};
  function handleEvent(name, nextEvent, dom) {
    var eventsLeft = attachedEventCounts[name];
    var eventsObject = dom.$EV;
    if (nextEvent) {
      if (!eventsLeft) {
        attachedEvents[name] = attachEventToDocument(name);
        attachedEventCounts[name] = 0;
      }
      if (!eventsObject) {
        eventsObject = dom.$EV = {};
      }
      if (!eventsObject[name]) {
        attachedEventCounts[name]++;
      }
      eventsObject[name] = nextEvent;
    } else if (eventsObject && eventsObject[name]) {
      attachedEventCounts[name]--;
      if (eventsLeft === 1) {
        document.removeEventListener(normalizeEventName(name), attachedEvents[name]);
        attachedEvents[name] = null;
      }
      eventsObject[name] = nextEvent;
    }
  }
  function dispatchEvents(event, target, isClick, name, eventData) {
    var dom = target;
    while (!isNull$2(dom)) {
      // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,
      // because the event listener is on document.body
      // Don't process clicks on disabled elements
      if (isClick && dom.disabled) {
        return;
      }
      var eventsObject = dom.$EV;
      if (eventsObject) {
        var currentEvent = eventsObject[name];
        if (currentEvent) {
          // linkEvent object
          eventData.dom = dom;
          if (currentEvent.event) {
            currentEvent.event(currentEvent.data, event);
          } else {
            currentEvent(event);
          }
          if (event.cancelBubble) {
            return;
          }
        }
      }
      dom = dom.parentNode;
    }
  }
  function normalizeEventName(name) {
    return name.substr(2).toLowerCase();
  }
  function stopPropagation$1() {
    this.cancelBubble = true;
    if (!this.immediatePropagationStopped) {
      this.stopImmediatePropagation();
    }
  }
  function attachEventToDocument(name) {
    var docEvent = function (event) {
      var type = event.type;
      var isClick = type === 'click' || type === 'dblclick';
      if (isClick && event.button !== 0) {
        // Firefox incorrectly triggers click event for mid/right mouse buttons.
        // This bug has been active for 12 years.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=184051
        event.stopPropagation();
        return false;
      }
      event.stopPropagation = stopPropagation$1;
      // Event data needs to be object to save reference to currentTarget getter
      var eventData = {
        dom: document
      };
      Object.defineProperty(event, 'currentTarget', {
        configurable: true,
        get: function get() {
          return eventData.dom;
        }
      });
      dispatchEvents(event, event.target, isClick, name, eventData);
      return;
    };
    document.addEventListener(normalizeEventName(name), docEvent);
    return docEvent;
  }
  function isSameInnerHTML(dom, innerHTML) {
    var tempdom = document.createElement('i');
    tempdom.innerHTML = innerHTML;
    return tempdom.innerHTML === dom.innerHTML;
  }
  function isSamePropsInnerHTML(dom, props) {
    return Boolean(props && props.dangerouslySetInnerHTML && props.dangerouslySetInnerHTML.__html && isSameInnerHTML(dom, props.dangerouslySetInnerHTML.__html));
  }
  function triggerEventListener(props, methodName, e) {
    if (props[methodName]) {
      var listener = props[methodName];
      if (listener.event) {
        listener.event(listener.data, e);
      } else {
        listener(e);
      }
    } else {
      var nativeListenerName = methodName.toLowerCase();
      if (props[nativeListenerName]) {
        props[nativeListenerName](e);
      }
    }
  }
  function createWrappedFunction(methodName, applyValue) {
    var fnMethod = function (e) {
      e.stopPropagation();
      var vNode = this.$V;
      // If vNode is gone by the time event fires, no-op
      if (!vNode) {
        return;
      }
      var props = vNode.props || EMPTY_OBJ;
      var dom = vNode.dom;
      if (isString(methodName)) {
        triggerEventListener(props, methodName, e);
      } else {
        for (var i = 0; i < methodName.length; i++) {
          triggerEventListener(props, methodName[i], e);
        }
      }
      if (isFunction(applyValue)) {
        var newVNode = this.$V;
        var newProps = newVNode.props || EMPTY_OBJ;
        applyValue(newProps, dom, false, newVNode);
      }
    };
    Object.defineProperty(fnMethod, 'wrapped', {
      configurable: false,
      enumerable: false,
      value: true,
      writable: false
    });
    return fnMethod;
  }
  function isCheckedType(type) {
    return type === 'checkbox' || type === 'radio';
  }
  var onTextInputChange = createWrappedFunction('onInput', applyValueInput);
  var wrappedOnChange = createWrappedFunction(['onClick', 'onChange'], applyValueInput);
  /* tslint:disable-next-line:no-empty */
  function emptywrapper(event) {
    event.stopPropagation();
  }
  emptywrapper.wrapped = true;
  function inputEvents(dom, nextPropsOrEmpty) {
    if (isCheckedType(nextPropsOrEmpty.type)) {
      dom.onchange = wrappedOnChange;
      dom.onclick = emptywrapper;
    } else {
      dom.oninput = onTextInputChange;
    }
  }
  function applyValueInput(nextPropsOrEmpty, dom) {
    var type = nextPropsOrEmpty.type;
    var value = nextPropsOrEmpty.value;
    var checked = nextPropsOrEmpty.checked;
    var multiple = nextPropsOrEmpty.multiple;
    var defaultValue = nextPropsOrEmpty.defaultValue;
    var hasValue = !isNullOrUndef(value);
    if (type && type !== dom.type) {
      dom.setAttribute('type', type);
    }
    if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {
      dom.multiple = multiple;
    }
    if (!isNullOrUndef(defaultValue) && !hasValue) {
      dom.defaultValue = defaultValue + '';
    }
    if (isCheckedType(type)) {
      if (hasValue) {
        dom.value = value;
      }
      if (!isNullOrUndef(checked)) {
        dom.checked = checked;
      }
    } else {
      if (hasValue && dom.value !== value) {
        dom.defaultValue = value;
        dom.value = value;
      } else if (!isNullOrUndef(checked)) {
        dom.checked = checked;
      }
    }
  }
  function updateChildOptionGroup(vNode, value) {
    var type = vNode.type;
    if (type === 'optgroup') {
      var children = vNode.children;
      var childFlags = vNode.childFlags;
      if (childFlags & 12 /* MultipleChildren */) {
        for (var i = 0, len = children.length; i < len; i++) {
          updateChildOption(children[i], value);
        }
      } else if (childFlags === 2 /* HasVNodeChildren */) {
        updateChildOption(children, value);
      }
    } else {
      updateChildOption(vNode, value);
    }
  }
  function updateChildOption(vNode, value) {
    var props = vNode.props || EMPTY_OBJ;
    var dom = vNode.dom;
    // we do this as multiple may have changed
    dom.value = props.value;
    if (isArray(value) && value.indexOf(props.value) !== -1 || props.value === value) {
      dom.selected = true;
    } else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {
      dom.selected = props.selected || false;
    }
  }
  var onSelectChange = createWrappedFunction('onChange', applyValueSelect);
  function selectEvents(dom) {
    dom.onchange = onSelectChange;
  }
  function applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {
    var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);
    if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {
      dom.multiple = multiplePropInBoolean;
    }
    var childFlags = vNode.childFlags;
    if ((childFlags & 1 /* HasInvalidChildren */) === 0) {
      var children = vNode.children;
      var value = nextPropsOrEmpty.value;
      if (mounting && isNullOrUndef(value)) {
        value = nextPropsOrEmpty.defaultValue;
      }
      if (childFlags & 12 /* MultipleChildren */) {
        for (var i = 0, len = children.length; i < len; i++) {
          updateChildOptionGroup(children[i], value);
        }
      } else if (childFlags === 2 /* HasVNodeChildren */) {
        updateChildOptionGroup(children, value);
      }
    }
  }
  var onTextareaInputChange = createWrappedFunction('onInput', applyValueTextArea);
  var wrappedOnChange$1 = createWrappedFunction('onChange');
  function textAreaEvents(dom, nextPropsOrEmpty) {
    dom.oninput = onTextareaInputChange;
    if (nextPropsOrEmpty.onChange) {
      dom.onchange = wrappedOnChange$1;
    }
  }
  function applyValueTextArea(nextPropsOrEmpty, dom, mounting) {
    var value = nextPropsOrEmpty.value;
    var domValue = dom.value;
    if (isNullOrUndef(value)) {
      if (mounting) {
        var defaultValue = nextPropsOrEmpty.defaultValue;
        if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {
          dom.defaultValue = defaultValue;
          dom.value = defaultValue;
        }
      }
    } else if (domValue !== value) {
      /* There is value so keep it controlled */
      dom.defaultValue = value;
      dom.value = value;
    }
  }

  /**
   * There is currently no support for switching same input between controlled and nonControlled
   * If that ever becomes a real issue, then re design controlled elements
   * Currently user must choose either controlled or non-controlled and stick with that
   */
  function processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {
    if (flags & 64 /* InputElement */) {
      applyValueInput(nextPropsOrEmpty, dom);
    } else if (flags & 256 /* SelectElement */) {
      applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);
    } else if (flags & 128 /* TextareaElement */) {
      applyValueTextArea(nextPropsOrEmpty, dom, mounting);
    }
    if (isControlled) {
      dom.$V = vNode;
    }
  }
  function addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {
    if (flags & 64 /* InputElement */) {
      inputEvents(dom, nextPropsOrEmpty);
    } else if (flags & 256 /* SelectElement */) {
      selectEvents(dom);
    } else if (flags & 128 /* TextareaElement */) {
      textAreaEvents(dom, nextPropsOrEmpty);
    }
  }
  function isControlledFormElement(nextPropsOrEmpty) {
    return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);
  }
  function remove(vNode, parentDom) {
    unmount(vNode);
    if (parentDom && vNode.dom) {
      removeChild(parentDom, vNode.dom);
      // Let carbage collector free memory
      vNode.dom = null;
    }
  }
  function unmount(vNode) {
    var flags = vNode.flags;
    if (flags & 481 /* Element */) {
      var ref = vNode.ref;
      var props = vNode.props;
      if (isFunction(ref)) {
        ref(null);
      }
      var children = vNode.children;
      var childFlags = vNode.childFlags;
      if (childFlags & 12 /* MultipleChildren */) {
        unmountAllChildren(children);
      } else if (childFlags === 2 /* HasVNodeChildren */) {
        unmount(children);
      }
      if (!isNull$2(props)) {
        for (var name in props) {
          switch (name) {
            case 'onClick':
            case 'onDblClick':
            case 'onFocusIn':
            case 'onFocusOut':
            case 'onKeyDown':
            case 'onKeyPress':
            case 'onKeyUp':
            case 'onMouseDown':
            case 'onMouseMove':
            case 'onMouseUp':
            case 'onSubmit':
            case 'onTouchEnd':
            case 'onTouchMove':
            case 'onTouchStart':
              handleEvent(name, null, vNode.dom);
              break;
          }
        }
      }
    } else {
      var children$1 = vNode.children;
      // Safe guard for crashed VNode
      if (children$1) {
        if (flags & 14 /* Component */) {
          var ref$1 = vNode.ref;
          if (flags & 4 /* ComponentClass */) {
            if (isFunction(children$1.componentWillUnmount)) {
              children$1.componentWillUnmount();
            }
            if (isFunction(ref$1)) {
              ref$1(null);
            }
            children$1.$UN = true;
            if (children$1.$LI) {
              unmount(children$1.$LI);
            }
          } else {
            if (!isNullOrUndef(ref$1) && isFunction(ref$1.onComponentWillUnmount)) {
              ref$1.onComponentWillUnmount(vNode.dom, vNode.props || EMPTY_OBJ);
            }
            unmount(children$1);
          }
        } else if (flags & 1024 /* Portal */) {
          remove(children$1, vNode.type);
        }
      }
    }
  }
  function unmountAllChildren(children) {
    for (var i = 0, len = children.length; i < len; i++) {
      unmount(children[i]);
    }
  }
  function removeAllChildren(dom, children) {
    unmountAllChildren(children);
    dom.textContent = '';
  }
  function createLinkEvent(linkEvent, nextValue) {
    return function (e) {
      linkEvent(nextValue.data, e);
    };
  }
  function patchEvent(name, nextValue, dom) {
    var nameLowerCase = name.toLowerCase();
    if (!isFunction(nextValue) && !isNullOrUndef(nextValue)) {
      var linkEvent = nextValue.event;
      if (linkEvent && isFunction(linkEvent)) {
        dom[nameLowerCase] = createLinkEvent(linkEvent, nextValue);
      }
    } else {
      var domEvent = dom[nameLowerCase];
      // if the function is wrapped, that means it's been controlled by a wrapper
      if (!domEvent || !domEvent.wrapped) {
        dom[nameLowerCase] = nextValue;
      }
    }
  }
  function getNumberStyleValue(style, value) {
    switch (style) {
      case 'animationIterationCount':
      case 'borderImageOutset':
      case 'borderImageSlice':
      case 'borderImageWidth':
      case 'boxFlex':
      case 'boxFlexGroup':
      case 'boxOrdinalGroup':
      case 'columnCount':
      case 'fillOpacity':
      case 'flex':
      case 'flexGrow':
      case 'flexNegative':
      case 'flexOrder':
      case 'flexPositive':
      case 'flexShrink':
      case 'floodOpacity':
      case 'fontWeight':
      case 'gridColumn':
      case 'gridRow':
      case 'lineClamp':
      case 'lineHeight':
      case 'opacity':
      case 'order':
      case 'orphans':
      case 'stopOpacity':
      case 'strokeDasharray':
      case 'strokeDashoffset':
      case 'strokeMiterlimit':
      case 'strokeOpacity':
      case 'strokeWidth':
      case 'tabSize':
      case 'widows':
      case 'zIndex':
      case 'zoom':
        return value;
      default:
        return value + 'px';
    }
  }
  // We are assuming here that we come from patchProp routine
  // -nextAttrValue cannot be null or undefined
  function patchStyle(lastAttrValue, nextAttrValue, dom) {
    var domStyle = dom.style;
    var style;
    var value;
    if (isString(nextAttrValue)) {
      domStyle.cssText = nextAttrValue;
      return;
    }
    if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {
      for (style in nextAttrValue) {
        // do not add a hasOwnProperty check here, it affects performance
        value = nextAttrValue[style];
        if (value !== lastAttrValue[style]) {
          domStyle[style] = isNumber$2(value) ? getNumberStyleValue(style, value) : value;
        }
      }
      for (style in lastAttrValue) {
        if (isNullOrUndef(nextAttrValue[style])) {
          domStyle[style] = '';
        }
      }
    } else {
      for (style in nextAttrValue) {
        value = nextAttrValue[style];
        domStyle[style] = isNumber$2(value) ? getNumberStyleValue(style, value) : value;
      }
    }
  }
  function patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {
    switch (prop) {
      case 'onClick':
      case 'onDblClick':
      case 'onFocusIn':
      case 'onFocusOut':
      case 'onKeyDown':
      case 'onKeyPress':
      case 'onKeyUp':
      case 'onMouseDown':
      case 'onMouseMove':
      case 'onMouseUp':
      case 'onSubmit':
      case 'onTouchEnd':
      case 'onTouchMove':
      case 'onTouchStart':
        handleEvent(prop, nextValue, dom);
        break;
      case 'children':
      case 'childrenType':
      case 'className':
      case 'defaultValue':
      case 'key':
      case 'multiple':
      case 'ref':
        break;
      case 'autoFocus':
        dom.autofocus = !!nextValue;
        break;
      case 'allowfullscreen':
      case 'autoplay':
      case 'capture':
      case 'checked':
      case 'controls':
      case 'default':
      case 'disabled':
      case 'hidden':
      case 'indeterminate':
      case 'loop':
      case 'muted':
      case 'novalidate':
      case 'open':
      case 'readOnly':
      case 'required':
      case 'reversed':
      case 'scoped':
      case 'seamless':
      case 'selected':
        dom[prop] = !!nextValue;
        break;
      case 'defaultChecked':
      case 'value':
      case 'volume':
        if (hasControlledValue && prop === 'value') {
          return;
        }
        var value = isNullOrUndef(nextValue) ? '' : nextValue;
        if (dom[prop] !== value) {
          dom[prop] = value;
        }
        break;
      case 'dangerouslySetInnerHTML':
        var lastHtml = lastValue && lastValue.__html || '';
        var nextHtml = nextValue && nextValue.__html || '';
        if (lastHtml !== nextHtml) {
          if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {
            if (!isNull$2(lastVNode)) {
              if (lastVNode.childFlags & 12 /* MultipleChildren */) {
                unmountAllChildren(lastVNode.children);
              } else if (lastVNode.childFlags === 2 /* HasVNodeChildren */) {
                unmount(lastVNode.children);
              }
              lastVNode.children = null;
              lastVNode.childFlags = 1 /* HasInvalidChildren */;
            }

            dom.innerHTML = nextHtml;
          }
        }
        break;
      default:
        if (prop[0] === 'o' && prop[1] === 'n') {
          patchEvent(prop, nextValue, dom);
        } else if (isNullOrUndef(nextValue)) {
          dom.removeAttribute(prop);
        } else if (prop === 'style') {
          patchStyle(lastValue, nextValue, dom);
        } else if (isSVG && namespaces[prop]) {
          // We optimize for isSVG being false
          // If we end up in this path we can read property again
          dom.setAttributeNS(namespaces[prop], prop, nextValue);
        } else {
          dom.setAttribute(prop, nextValue);
        }
        break;
    }
  }
  function mountProps(vNode, flags, props, dom, isSVG) {
    var hasControlledValue = false;
    var isFormElement = (flags & 448 /* FormElement */) > 0;
    if (isFormElement) {
      hasControlledValue = isControlledFormElement(props);
      if (hasControlledValue) {
        addFormElementEventHandlers(flags, dom, props);
      }
    }
    for (var prop in props) {
      // do not add a hasOwnProperty check here, it affects performance
      patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);
    }
    if (isFormElement) {
      processElement(flags, vNode, dom, props, true, hasControlledValue);
    }
  }
  function createClassComponentInstance(vNode, Component, props, context) {
    var instance = new Component(props, context);
    vNode.children = instance;
    instance.$V = vNode;
    instance.$BS = false;
    instance.context = context;
    if (instance.props === EMPTY_OBJ) {
      instance.props = props;
    }
    instance.$UN = false;
    if (isFunction(instance.componentWillMount)) {
      instance.$BR = true;
      instance.componentWillMount();
      if (instance.$PSS) {
        var state = instance.state;
        var pending = instance.$PS;
        if (isNull$2(state)) {
          instance.state = pending;
        } else {
          for (var key in pending) {
            state[key] = pending[key];
          }
        }
        instance.$PSS = false;
        instance.$PS = null;
      }
      instance.$BR = false;
    }
    if (isFunction(options.beforeRender)) {
      options.beforeRender(instance);
    }
    var input = handleComponentInput(instance.render(props, instance.state, context), vNode);
    var childContext;
    if (isFunction(instance.getChildContext)) {
      childContext = instance.getChildContext();
    }
    if (isNullOrUndef(childContext)) {
      instance.$CX = context;
    } else {
      instance.$CX = combineFrom(context, childContext);
    }
    if (isFunction(options.afterRender)) {
      options.afterRender(instance);
    }
    instance.$LI = input;
    return instance;
  }
  function handleComponentInput(input, componentVNode) {
    if (isInvalid(input)) {
      input = createVoidVNode();
    } else if (isStringOrNumber(input)) {
      input = createTextVNode(input, null);
    } else {
      if (input.dom) {
        input = directClone(input);
      }
      if (input.flags & 14 /* Component */) {
        // if we have an input that is also a component, we run into a tricky situation
        // where the root vNode needs to always have the correct DOM entry
        // we can optimise this in the future, but this gets us out of a lot of issues
        input.parentVNode = componentVNode;
      }
    }
    return input;
  }
  function mount(vNode, parentDom, context, isSVG) {
    var flags = vNode.flags;
    if (flags & 481 /* Element */) {
      return mountElement(vNode, parentDom, context, isSVG);
    }
    if (flags & 14 /* Component */) {
      return mountComponent(vNode, parentDom, context, isSVG, (flags & 4 /* ComponentClass */) > 0);
    }
    if (flags & 512 /* Void */ || flags & 16 /* Text */) {
      return mountText(vNode, parentDom);
    }
    if (flags & 1024 /* Portal */) {
      mount(vNode.children, vNode.type, context, false);
      return vNode.dom = mountText(createVoidVNode(), parentDom);
    }
  }
  function mountText(vNode, parentDom) {
    var dom = vNode.dom = document.createTextNode(vNode.children);
    if (!isNull$2(parentDom)) {
      appendChild(parentDom, dom);
    }
    return dom;
  }
  function mountElement(vNode, parentDom, context, isSVG) {
    var flags = vNode.flags;
    var children = vNode.children;
    var props = vNode.props;
    var className = vNode.className;
    var ref = vNode.ref;
    var childFlags = vNode.childFlags;
    isSVG = isSVG || (flags & 32 /* SvgElement */) > 0;
    var dom = documentCreateElement(vNode.type, isSVG);
    vNode.dom = dom;
    if (!isNullOrUndef(className) && className !== '') {
      if (isSVG) {
        dom.setAttribute('class', className);
      } else {
        dom.className = className;
      }
    }
    if (!isNull$2(parentDom)) {
      appendChild(parentDom, dom);
    }
    if ((childFlags & 1 /* HasInvalidChildren */) === 0) {
      var childrenIsSVG = isSVG === true && vNode.type !== 'foreignObject';
      if (childFlags === 2 /* HasVNodeChildren */) {
        mount(children, dom, context, childrenIsSVG);
      } else if (childFlags & 12 /* MultipleChildren */) {
        mountArrayChildren(children, dom, context, childrenIsSVG);
      }
    }
    if (!isNull$2(props)) {
      mountProps(vNode, flags, props, dom, isSVG);
    }
    if (isFunction(ref)) {
      mountRef(dom, ref);
    }
    return dom;
  }
  function mountArrayChildren(children, dom, context, isSVG) {
    for (var i = 0, len = children.length; i < len; i++) {
      var child = children[i];
      if (!isNull$2(child.dom)) {
        children[i] = child = directClone(child);
      }
      mount(child, dom, context, isSVG);
    }
  }
  function mountComponent(vNode, parentDom, context, isSVG, isClass) {
    var dom;
    var type = vNode.type;
    var props = vNode.props || EMPTY_OBJ;
    var ref = vNode.ref;
    if (isClass) {
      var instance = createClassComponentInstance(vNode, type, props, context);
      vNode.dom = dom = mount(instance.$LI, null, instance.$CX, isSVG);
      mountClassComponentCallbacks(vNode, ref, instance);
      instance.$UPD = false;
    } else {
      var input = handleComponentInput(type(props, context), vNode);
      vNode.children = input;
      vNode.dom = dom = mount(input, null, context, isSVG);
      mountFunctionalComponentCallbacks(props, ref, dom);
    }
    if (!isNull$2(parentDom)) {
      appendChild(parentDom, dom);
    }
    return dom;
  }
  function createClassMountCallback(instance) {
    return function () {
      instance.$UPD = true;
      instance.componentDidMount();
      instance.$UPD = false;
    };
  }
  function mountClassComponentCallbacks(vNode, ref, instance) {
    if (isFunction(ref)) {
      ref(instance);
    }
    if (isFunction(instance.componentDidMount)) {
      LIFECYCLE.push(createClassMountCallback(instance));
    }
  }
  function createOnMountCallback(ref, dom, props) {
    return function () {
      return ref.onComponentDidMount(dom, props);
    };
  }
  function mountFunctionalComponentCallbacks(props, ref, dom) {
    if (!isNullOrUndef(ref)) {
      if (isFunction(ref.onComponentWillMount)) {
        ref.onComponentWillMount(props);
      }
      if (isFunction(ref.onComponentDidMount)) {
        LIFECYCLE.push(createOnMountCallback(ref, dom, props));
      }
    }
  }
  function mountRef(dom, value) {
    LIFECYCLE.push(function () {
      return value(dom);
    });
  }
  function hydrateComponent(vNode, dom, context, isSVG, isClass) {
    var type = vNode.type;
    var ref = vNode.ref;
    var props = vNode.props || EMPTY_OBJ;
    if (isClass) {
      var instance = createClassComponentInstance(vNode, type, props, context);
      var input = instance.$LI;
      hydrateVNode(input, dom, instance.$CX, isSVG);
      vNode.dom = input.dom;
      mountClassComponentCallbacks(vNode, ref, instance);
      instance.$UPD = false; // Mount finished allow going sync
    } else {
      var input$1 = handleComponentInput(type(props, context), vNode);
      hydrateVNode(input$1, dom, context, isSVG);
      vNode.children = input$1;
      vNode.dom = input$1.dom;
      mountFunctionalComponentCallbacks(props, ref, dom);
    }
  }
  function hydrateElement(vNode, dom, context, isSVG) {
    var children = vNode.children;
    var props = vNode.props;
    var className = vNode.className;
    var flags = vNode.flags;
    var ref = vNode.ref;
    isSVG = isSVG || (flags & 32 /* SvgElement */) > 0;
    if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {
      var newDom = mountElement(vNode, null, context, isSVG);
      vNode.dom = newDom;
      replaceChild(dom.parentNode, newDom, dom);
    } else {
      vNode.dom = dom;
      var childNode = dom.firstChild;
      var childFlags = vNode.childFlags;
      if ((childFlags & 1 /* HasInvalidChildren */) === 0) {
        var nextSibling = null;
        while (childNode) {
          nextSibling = childNode.nextSibling;
          if (childNode.nodeType === 8) {
            if (childNode.data === '!') {
              dom.replaceChild(document.createTextNode(''), childNode);
            } else {
              dom.removeChild(childNode);
            }
          }
          childNode = nextSibling;
        }
        childNode = dom.firstChild;
        if (childFlags === 2 /* HasVNodeChildren */) {
          if (isNull$2(childNode)) {
            mount(children, dom, context, isSVG);
          } else {
            nextSibling = childNode.nextSibling;
            hydrateVNode(children, childNode, context, isSVG);
            childNode = nextSibling;
          }
        } else if (childFlags & 12 /* MultipleChildren */) {
          for (var i = 0, len = children.length; i < len; i++) {
            var child = children[i];
            if (isNull$2(childNode)) {
              mount(child, dom, context, isSVG);
            } else {
              nextSibling = childNode.nextSibling;
              hydrateVNode(child, childNode, context, isSVG);
              childNode = nextSibling;
            }
          }
        }
        // clear any other DOM nodes, there should be only a single entry for the root
        while (childNode) {
          nextSibling = childNode.nextSibling;
          dom.removeChild(childNode);
          childNode = nextSibling;
        }
      } else if (!isNull$2(dom.firstChild) && !isSamePropsInnerHTML(dom, props)) {
        dom.textContent = ''; // dom has content, but VNode has no children remove everything from DOM
        if (flags & 448 /* FormElement */) {
          // If element is form element, we need to clear defaultValue also
          dom.defaultValue = '';
        }
      }
      if (!isNull$2(props)) {
        mountProps(vNode, flags, props, dom, isSVG);
      }
      if (isNullOrUndef(className)) {
        if (dom.className !== '') {
          dom.removeAttribute('class');
        }
      } else if (isSVG) {
        dom.setAttribute('class', className);
      } else {
        dom.className = className;
      }
      if (isFunction(ref)) {
        mountRef(dom, ref);
      }
    }
  }
  function hydrateText(vNode, dom) {
    if (dom.nodeType !== 3) {
      var newDom = mountText(vNode, null);
      vNode.dom = newDom;
      replaceChild(dom.parentNode, newDom, dom);
    } else {
      var text = vNode.children;
      if (dom.nodeValue !== text) {
        dom.nodeValue = text;
      }
      vNode.dom = dom;
    }
  }
  function hydrateVNode(vNode, dom, context, isSVG) {
    var flags = vNode.flags;
    if (flags & 14 /* Component */) {
      hydrateComponent(vNode, dom, context, isSVG, (flags & 4 /* ComponentClass */) > 0);
    } else if (flags & 481 /* Element */) {
      hydrateElement(vNode, dom, context, isSVG);
    } else if (flags & 16 /* Text */) {
      hydrateText(vNode, dom);
    } else if (flags & 512 /* Void */) {
      vNode.dom = dom;
    } else {
      throwError();
    }
  }
  function hydrate(input, parentDom, callback) {
    var dom = parentDom.firstChild;
    if (!isNull$2(dom)) {
      if (!isInvalid(input)) {
        hydrateVNode(input, dom, EMPTY_OBJ, false);
      }
      dom = parentDom.firstChild;
      // clear any other DOM nodes, there should be only a single entry for the root
      while (dom = dom.nextSibling) {
        parentDom.removeChild(dom);
      }
    }
    if (LIFECYCLE.length > 0) {
      callAll(LIFECYCLE);
    }
    parentDom.$V = input;
    if (isFunction(callback)) {
      callback();
    }
  }
  function replaceWithNewNode(lastNode, nextNode, parentDom, context, isSVG) {
    unmount(lastNode);
    replaceChild(parentDom, mount(nextNode, null, context, isSVG), lastNode.dom);
  }
  function patch(lastVNode, nextVNode, parentDom, context, isSVG) {
    var nextFlags = nextVNode.flags | 0;
    if (lastVNode.flags !== nextFlags || nextFlags & 2048 /* ReCreate */) {
      replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
    } else if (nextFlags & 481 /* Element */) {
      patchElement(lastVNode, nextVNode, parentDom, context, isSVG, nextFlags);
    } else if (nextFlags & 14 /* Component */) {
      patchComponent(lastVNode, nextVNode, parentDom, context, isSVG, (nextFlags & 4 /* ComponentClass */) > 0);
    } else if (nextFlags & 16 /* Text */) {
      patchText(lastVNode, nextVNode);
    } else if (nextFlags & 512 /* Void */) {
      nextVNode.dom = lastVNode.dom;
    } else {
      patchPortal(lastVNode, nextVNode, context);
    }
  }
  function patchContentEditableChildren(dom, nextVNode) {
    if (dom.textContent !== nextVNode.children) {
      dom.textContent = nextVNode.children;
    }
  }
  function patchPortal(lastVNode, nextVNode, context) {
    var lastContainer = lastVNode.type;
    var nextContainer = nextVNode.type;
    var nextChildren = nextVNode.children;
    patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context, false);
    nextVNode.dom = lastVNode.dom;
    if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {
      var node = nextChildren.dom;
      lastContainer.removeChild(node);
      nextContainer.appendChild(node);
    }
  }
  function patchElement(lastVNode, nextVNode, parentDom, context, isSVG, nextFlags) {
    var nextTag = nextVNode.type;
    if (lastVNode.type !== nextTag) {
      replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
    } else {
      var dom = lastVNode.dom;
      var lastProps = lastVNode.props;
      var nextProps = nextVNode.props;
      var isFormElement = false;
      var hasControlledValue = false;
      var nextPropsOrEmpty;
      nextVNode.dom = dom;
      isSVG = isSVG || (nextFlags & 32 /* SvgElement */) > 0;
      // inlined patchProps  -- starts --
      if (lastProps !== nextProps) {
        var lastPropsOrEmpty = lastProps || EMPTY_OBJ;
        nextPropsOrEmpty = nextProps || EMPTY_OBJ;
        if (nextPropsOrEmpty !== EMPTY_OBJ) {
          isFormElement = (nextFlags & 448 /* FormElement */) > 0;
          if (isFormElement) {
            hasControlledValue = isControlledFormElement(nextPropsOrEmpty);
          }
          for (var prop in nextPropsOrEmpty) {
            var lastValue = lastPropsOrEmpty[prop];
            var nextValue = nextPropsOrEmpty[prop];
            if (lastValue !== nextValue) {
              patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);
            }
          }
        }
        if (lastPropsOrEmpty !== EMPTY_OBJ) {
          for (var prop$1 in lastPropsOrEmpty) {
            if (!nextPropsOrEmpty.hasOwnProperty(prop$1) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {
              patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);
            }
          }
        }
      }
      var lastChildren = lastVNode.children;
      var nextChildren = nextVNode.children;
      var nextRef = nextVNode.ref;
      var lastClassName = lastVNode.className;
      var nextClassName = nextVNode.className;
      if (nextFlags & 4096 /* ContentEditable */) {
        patchContentEditableChildren(dom, nextChildren);
      } else {
        patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastChildren, nextChildren, dom, context, isSVG && nextTag !== 'foreignObject');
      }
      if (isFormElement) {
        processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);
      }
      // inlined patchProps  -- ends --
      if (lastClassName !== nextClassName) {
        if (isNullOrUndef(nextClassName)) {
          dom.removeAttribute('class');
        } else if (isSVG) {
          dom.setAttribute('class', nextClassName);
        } else {
          dom.className = nextClassName;
        }
      }
      if (isFunction(nextRef) && lastVNode.ref !== nextRef) {
        mountRef(dom, nextRef);
      }
    }
  }
  function patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG) {
    switch (lastChildFlags) {
      case 2 /* HasVNodeChildren */:
        switch (nextChildFlags) {
          case 2 /* HasVNodeChildren */:
            patch(lastChildren, nextChildren, parentDOM, context, isSVG);
            break;
          case 1 /* HasInvalidChildren */:
            remove(lastChildren, parentDOM);
            break;
          default:
            remove(lastChildren, parentDOM);
            mountArrayChildren(nextChildren, parentDOM, context, isSVG);
            break;
        }
        break;
      case 1 /* HasInvalidChildren */:
        switch (nextChildFlags) {
          case 2 /* HasVNodeChildren */:
            mount(nextChildren, parentDOM, context, isSVG);
            break;
          case 1 /* HasInvalidChildren */:
            break;
          default:
            mountArrayChildren(nextChildren, parentDOM, context, isSVG);
            break;
        }
        break;
      default:
        if (nextChildFlags & 12 /* MultipleChildren */) {
          var lastLength = lastChildren.length;
          var nextLength = nextChildren.length;
          // Fast path's for both algorithms
          if (lastLength === 0) {
            if (nextLength > 0) {
              mountArrayChildren(nextChildren, parentDOM, context, isSVG);
            }
          } else if (nextLength === 0) {
            removeAllChildren(parentDOM, lastChildren);
          } else if (nextChildFlags === 8 /* HasKeyedChildren */ && lastChildFlags === 8 /* HasKeyedChildren */) {
            patchKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength);
          } else {
            patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength);
          }
        } else if (nextChildFlags === 1 /* HasInvalidChildren */) {
          removeAllChildren(parentDOM, lastChildren);
        } else if (nextChildFlags === 2 /* HasVNodeChildren */) {
          removeAllChildren(parentDOM, lastChildren);
          mount(nextChildren, parentDOM, context, isSVG);
        }
        break;
    }
  }
  function updateClassComponent(instance, nextState, nextVNode, nextProps, parentDom, context, isSVG, force, fromSetState) {
    var lastState = instance.state;
    var lastProps = instance.props;
    nextVNode.children = instance;
    var renderOutput;
    if (instance.$UN) {
      return;
    }
    if (lastProps !== nextProps || nextProps === EMPTY_OBJ) {
      if (!fromSetState && isFunction(instance.componentWillReceiveProps)) {
        instance.$BR = true;
        instance.componentWillReceiveProps(nextProps, context);
        // If instance component was removed during its own update do nothing.
        if (instance.$UN) {
          return;
        }
        instance.$BR = false;
      }
      if (instance.$PSS) {
        nextState = combineFrom(nextState, instance.$PS);
        instance.$PSS = false;
        instance.$PS = null;
      }
    }
    /* Update if scu is not defined, or it returns truthy value or force */
    var hasSCU = Boolean(instance.shouldComponentUpdate);
    if (force || !hasSCU || hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context)) {
      if (isFunction(instance.componentWillUpdate)) {
        instance.$BS = true;
        instance.componentWillUpdate(nextProps, nextState, context);
        instance.$BS = false;
      }
      instance.props = nextProps;
      instance.state = nextState;
      instance.context = context;
      if (isFunction(options.beforeRender)) {
        options.beforeRender(instance);
      }
      renderOutput = instance.render(nextProps, nextState, context);
      if (isFunction(options.afterRender)) {
        options.afterRender(instance);
      }
      var didUpdate = renderOutput !== NO_OP;
      var childContext;
      if (isFunction(instance.getChildContext)) {
        childContext = instance.getChildContext();
      }
      if (isNullOrUndef(childContext)) {
        childContext = context;
      } else {
        childContext = combineFrom(context, childContext);
      }
      instance.$CX = childContext;
      if (didUpdate) {
        var lastInput = instance.$LI;
        var nextInput = handleComponentInput(renderOutput, nextVNode);
        patch(lastInput, nextInput, parentDom, childContext, isSVG);
        instance.$LI = nextInput;
        if (isFunction(instance.componentDidUpdate)) {
          instance.componentDidUpdate(lastProps, lastState);
        }
      }
    } else {
      instance.props = nextProps;
      instance.state = nextState;
      instance.context = context;
    }
    nextVNode.dom = instance.$LI.dom;
  }
  function patchComponent(lastVNode, nextVNode, parentDom, context, isSVG, isClass) {
    var nextType = nextVNode.type;
    var lastKey = lastVNode.key;
    var nextKey = nextVNode.key;
    if (lastVNode.type !== nextType || lastKey !== nextKey) {
      replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
    } else {
      var nextProps = nextVNode.props || EMPTY_OBJ;
      if (isClass) {
        var instance = lastVNode.children;
        instance.$UPD = true;
        instance.$V = nextVNode;
        updateClassComponent(instance, instance.state, nextVNode, nextProps, parentDom, context, isSVG, false, false);
        instance.$UPD = false;
      } else {
        var shouldUpdate = true;
        var lastProps = lastVNode.props;
        var nextHooks = nextVNode.ref;
        var nextHooksDefined = !isNullOrUndef(nextHooks);
        var lastInput = lastVNode.children;
        nextVNode.dom = lastVNode.dom;
        nextVNode.children = lastInput;
        if (nextHooksDefined && isFunction(nextHooks.onComponentShouldUpdate)) {
          shouldUpdate = nextHooks.onComponentShouldUpdate(lastProps, nextProps);
        }
        if (shouldUpdate !== false) {
          if (nextHooksDefined && isFunction(nextHooks.onComponentWillUpdate)) {
            nextHooks.onComponentWillUpdate(lastProps, nextProps);
          }
          var nextInput = nextType(nextProps, context);
          if (nextInput !== NO_OP) {
            nextInput = handleComponentInput(nextInput, nextVNode);
            patch(lastInput, nextInput, parentDom, context, isSVG);
            nextVNode.children = nextInput;
            nextVNode.dom = nextInput.dom;
            if (nextHooksDefined && isFunction(nextHooks.onComponentDidUpdate)) {
              nextHooks.onComponentDidUpdate(lastProps, nextProps);
            }
          }
        } else if (lastInput.flags & 14 /* Component */) {
          lastInput.parentVNode = nextVNode;
        }
      }
    }
  }
  function patchText(lastVNode, nextVNode) {
    var nextText = nextVNode.children;
    var dom = lastVNode.dom;
    if (nextText !== lastVNode.children) {
      dom.nodeValue = nextText;
    }
    nextVNode.dom = dom;
  }
  function patchNonKeyedChildren(lastChildren, nextChildren, dom, context, isSVG, lastChildrenLength, nextChildrenLength) {
    var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;
    var i = 0;
    var nextChild;
    var lastChild;
    for (; i < commonLength; i++) {
      nextChild = nextChildren[i];
      lastChild = lastChildren[i];
      if (nextChild.dom) {
        nextChild = nextChildren[i] = directClone(nextChild);
      }
      patch(lastChild, nextChild, dom, context, isSVG);
      lastChildren[i] = nextChild;
    }
    if (lastChildrenLength < nextChildrenLength) {
      for (i = commonLength; i < nextChildrenLength; i++) {
        nextChild = nextChildren[i];
        if (nextChild.dom) {
          nextChild = nextChildren[i] = directClone(nextChild);
        }
        mount(nextChild, dom, context, isSVG);
      }
    } else if (lastChildrenLength > nextChildrenLength) {
      for (i = commonLength; i < lastChildrenLength; i++) {
        remove(lastChildren[i], dom);
      }
    }
  }
  function patchKeyedChildren(a, b, dom, context, isSVG, aLength, bLength) {
    var aEnd = aLength - 1;
    var bEnd = bLength - 1;
    var i;
    var j = 0;
    var aNode = a[j];
    var bNode = b[j];
    var nextPos;
    // Step 1
    // tslint:disable-next-line
    outer: {
      // Sync nodes with the same key at the beginning.
      while (aNode.key === bNode.key) {
        if (bNode.dom) {
          b[j] = bNode = directClone(bNode);
        }
        patch(aNode, bNode, dom, context, isSVG);
        a[j] = bNode;
        j++;
        if (j > aEnd || j > bEnd) {
          break outer;
        }
        aNode = a[j];
        bNode = b[j];
      }
      aNode = a[aEnd];
      bNode = b[bEnd];
      // Sync nodes with the same key at the end.
      while (aNode.key === bNode.key) {
        if (bNode.dom) {
          b[bEnd] = bNode = directClone(bNode);
        }
        patch(aNode, bNode, dom, context, isSVG);
        a[aEnd] = bNode;
        aEnd--;
        bEnd--;
        if (j > aEnd || j > bEnd) {
          break outer;
        }
        aNode = a[aEnd];
        bNode = b[bEnd];
      }
    }
    if (j > aEnd) {
      if (j <= bEnd) {
        nextPos = bEnd + 1;
        var nextNode = nextPos < bLength ? b[nextPos].dom : null;
        while (j <= bEnd) {
          bNode = b[j];
          if (bNode.dom) {
            b[j] = bNode = directClone(bNode);
          }
          j++;
          insertOrAppend(dom, mount(bNode, null, context, isSVG), nextNode);
        }
      }
    } else if (j > bEnd) {
      while (j <= aEnd) {
        remove(a[j++], dom);
      }
    } else {
      var aStart = j;
      var bStart = j;
      var aLeft = aEnd - j + 1;
      var bLeft = bEnd - j + 1;
      var sources = [];
      for (i = 0; i < bLeft; i++) {
        sources.push(0);
      }
      // Keep track if its possible to remove whole DOM using textContent = '';
      var canRemoveWholeContent = aLeft === aLength;
      var moved = false;
      var pos = 0;
      var patched = 0;
      // When sizes are small, just loop them through
      if (bLength < 4 || (aLeft | bLeft) < 32) {
        for (i = aStart; i <= aEnd; i++) {
          aNode = a[i];
          if (patched < bLeft) {
            for (j = bStart; j <= bEnd; j++) {
              bNode = b[j];
              if (aNode.key === bNode.key) {
                sources[j - bStart] = i + 1;
                if (canRemoveWholeContent) {
                  canRemoveWholeContent = false;
                  while (i > aStart) {
                    remove(a[aStart++], dom);
                  }
                }
                if (pos > j) {
                  moved = true;
                } else {
                  pos = j;
                }
                if (bNode.dom) {
                  b[j] = bNode = directClone(bNode);
                }
                patch(aNode, bNode, dom, context, isSVG);
                patched++;
                break;
              }
            }
            if (!canRemoveWholeContent && j > bEnd) {
              remove(aNode, dom);
            }
          } else if (!canRemoveWholeContent) {
            remove(aNode, dom);
          }
        }
      } else {
        var keyIndex = {};
        // Map keys by their index
        for (i = bStart; i <= bEnd; i++) {
          keyIndex[b[i].key] = i;
        }
        // Try to patch same keys
        for (i = aStart; i <= aEnd; i++) {
          aNode = a[i];
          if (patched < bLeft) {
            j = keyIndex[aNode.key];
            if (j !== void 0) {
              if (canRemoveWholeContent) {
                canRemoveWholeContent = false;
                while (i > aStart) {
                  remove(a[aStart++], dom);
                }
              }
              bNode = b[j];
              sources[j - bStart] = i + 1;
              if (pos > j) {
                moved = true;
              } else {
                pos = j;
              }
              if (bNode.dom) {
                b[j] = bNode = directClone(bNode);
              }
              patch(aNode, bNode, dom, context, isSVG);
              patched++;
            } else if (!canRemoveWholeContent) {
              remove(aNode, dom);
            }
          } else if (!canRemoveWholeContent) {
            remove(aNode, dom);
          }
        }
      }
      // fast-path: if nothing patched remove all old and add all new
      if (canRemoveWholeContent) {
        removeAllChildren(dom, a);
        mountArrayChildren(b, dom, context, isSVG);
      } else {
        if (moved) {
          var seq = lis_algorithm(sources);
          j = seq.length - 1;
          for (i = bLeft - 1; i >= 0; i--) {
            if (sources[i] === 0) {
              pos = i + bStart;
              bNode = b[pos];
              if (bNode.dom) {
                b[pos] = bNode = directClone(bNode);
              }
              nextPos = pos + 1;
              insertOrAppend(dom, mount(bNode, null, context, isSVG), nextPos < bLength ? b[nextPos].dom : null);
            } else if (j < 0 || i !== seq[j]) {
              pos = i + bStart;
              bNode = b[pos];
              nextPos = pos + 1;
              insertOrAppend(dom, bNode.dom, nextPos < bLength ? b[nextPos].dom : null);
            } else {
              j--;
            }
          }
        } else if (patched !== bLeft) {
          // when patched count doesn't match b length we need to insert those new ones
          // loop backwards so we can use insertBefore
          for (i = bLeft - 1; i >= 0; i--) {
            if (sources[i] === 0) {
              pos = i + bStart;
              bNode = b[pos];
              if (bNode.dom) {
                b[pos] = bNode = directClone(bNode);
              }
              nextPos = pos + 1;
              insertOrAppend(dom, mount(bNode, null, context, isSVG), nextPos < bLength ? b[nextPos].dom : null);
            }
          }
        }
      }
    }
  }
  // https://en.wikipedia.org/wiki/Longest_increasing_subsequence
  function lis_algorithm(arr) {
    var p = arr.slice();
    var result = [0];
    var i;
    var j;
    var u;
    var v;
    var c;
    var len = arr.length;
    for (i = 0; i < len; i++) {
      var arrI = arr[i];
      if (arrI !== 0) {
        j = result[result.length - 1];
        if (arr[j] < arrI) {
          p[i] = j;
          result.push(i);
          continue;
        }
        u = 0;
        v = result.length - 1;
        while (u < v) {
          c = (u + v) / 2 | 0;
          if (arr[result[c]] < arrI) {
            u = c + 1;
          } else {
            v = c;
          }
        }
        if (arrI < arr[result[u]]) {
          if (u > 0) {
            p[i] = result[u - 1];
          }
          result[u] = i;
        }
      }
    }
    u = result.length;
    v = result[u - 1];
    while (u-- > 0) {
      result[u] = v;
      v = p[v];
    }
    return result;
  }
  function render(input, parentDom, callback) {
    if (input === NO_OP) {
      return;
    }
    var rootInput = parentDom.$V;
    if (isNullOrUndef(rootInput)) {
      if (!isInvalid(input)) {
        if (input.dom) {
          input = directClone(input);
        }
        if (isNull$2(parentDom.firstChild)) {
          mount(input, parentDom, EMPTY_OBJ, false);
          parentDom.$V = input;
        } else {
          hydrate(input, parentDom);
        }
        rootInput = input;
      }
    } else {
      if (isNullOrUndef(input)) {
        remove(rootInput, parentDom);
        parentDom.$V = null;
      } else {
        if (input.dom) {
          input = directClone(input);
        }
        patch(rootInput, input, parentDom, EMPTY_OBJ, false);
        rootInput = parentDom.$V = input;
      }
    }
    if (LIFECYCLE.length > 0) {
      callAll(LIFECYCLE);
    }
    if (isFunction(callback)) {
      callback();
    }
    if (isFunction(options.renderComplete)) {
      options.renderComplete(rootInput);
    }
    if (rootInput && rootInput.flags & 14 /* Component */) {
      return rootInput.children;
    }
  }
  function createPortal(children, container) {
    return createVNode(1024 /* Portal */, container, null, children, 0 /* UnknownChildren */, null, isInvalid(children) ? null : children.key, null);
  }
  var resolvedPromise = typeof Promise === 'undefined' ? null : Promise.resolve();
  // raf.bind(window) is needed to work around bug in IE10-IE11 strict mode (TypeError: Invalid calling object)
  var fallbackMethod = typeof requestAnimationFrame === 'undefined' ? setTimeout : requestAnimationFrame.bind(window);
  function nextTick(fn) {
    if (resolvedPromise) {
      return resolvedPromise.then(fn);
    }
    return fallbackMethod(fn);
  }
  function queueStateChanges(component, newState, callback, force) {
    if (isFunction(newState)) {
      newState = newState(component.state, component.props, component.context);
    }
    var pending = component.$PS;
    if (isNullOrUndef(pending)) {
      component.$PS = newState;
    } else {
      for (var stateKey in newState) {
        pending[stateKey] = newState[stateKey];
      }
    }
    if (!component.$PSS && !component.$BR) {
      if (!component.$UPD) {
        component.$PSS = true;
        component.$UPD = true;
        applyState(component, force, callback);
        component.$UPD = false;
      } else {
        // Async
        var queue = component.$QU;
        if (isNull$2(queue)) {
          queue = component.$QU = [];
          nextTick(promiseCallback(component, queue));
        }
        if (isFunction(callback)) {
          queue.push(callback);
        }
      }
    } else {
      component.$PSS = true;
      if (component.$BR && isFunction(callback)) {
        LIFECYCLE.push(callback.bind(component));
      }
    }
  }
  function promiseCallback(component, queue) {
    return function () {
      component.$QU = null;
      component.$UPD = true;
      applyState(component, false, function () {
        for (var i = 0, len = queue.length; i < len; i++) {
          queue[i].call(component);
        }
      });
      component.$UPD = false;
    };
  }
  function applyState(component, force, callback) {
    if (component.$UN) {
      return;
    }
    if (force || !component.$BR) {
      component.$PSS = false;
      var pendingState = component.$PS;
      var prevState = component.state;
      var nextState = combineFrom(prevState, pendingState);
      var props = component.props;
      var context = component.context;
      component.$PS = null;
      var vNode = component.$V;
      var lastInput = component.$LI;
      var parentDom = lastInput.dom && lastInput.dom.parentNode;
      updateClassComponent(component, nextState, vNode, props, parentDom, context, (vNode.flags & 32 /* SvgElement */) > 0, force, true);
      if (component.$UN) {
        return;
      }
      if ((component.$LI.flags & 1024 /* Portal */) === 0) {
        var dom = component.$LI.dom;
        while (!isNull$2(vNode = vNode.parentVNode)) {
          if ((vNode.flags & 14 /* Component */) > 0) {
            vNode.dom = dom;
          }
        }
      }
      if (LIFECYCLE.length > 0) {
        callAll(LIFECYCLE);
      }
    } else {
      component.state = component.$PS;
      component.$PS = null;
    }
    if (isFunction(callback)) {
      callback.call(component);
    }
  }
  var Component = function Component(props, context) {
    this.state = null;
    // Internal properties
    this.$BR = false; // BLOCK RENDER
    this.$BS = true; // BLOCK STATE
    this.$PSS = false; // PENDING SET STATE
    this.$PS = null; // PENDING STATE (PARTIAL or FULL)
    this.$LI = null; // LAST INPUT
    this.$V = null; // VNODE
    this.$UN = false; // UNMOUNTED
    this.$CX = null; // CHILDCONTEXT
    this.$UPD = true; // UPDATING
    this.$QU = null; // QUEUE
    /** @type {object} */
    this.props = props || EMPTY_OBJ;
    /** @type {object} */
    this.context = context || EMPTY_OBJ; // context should not be mutable
  };

  Component.prototype.forceUpdate = function forceUpdate(callback) {
    if (this.$UN) {
      return;
    }
    // Do not allow double render during force update
    queueStateChanges(this, {}, callback, true);
  };
  Component.prototype.setState = function setState(newState, callback) {
    if (this.$UN) {
      return;
    }
    if (!this.$BS) {
      queueStateChanges(this, newState, callback, false);
    } else {
      return;
    }
  };
  // tslint:disable-next-line:no-empty
  Component.prototype.render = function render(_nextProps, _nextState, _nextContext) {};

  {
    console.warn('You are running production build of Inferno in development mode. Use dev:module entry point.');
  }

  class TableComponent extends Component {
    constructor(props) {
      super(props);
      const injector = this._injector = props.injector;
      this._sheet = injector.get('sheet');
      this._changeSupport = injector.get('changeSupport');
      this._components = injector.get('components');
      this._eventBus = injector.get('eventBus');
      const throttle = injector.get('throttle');
      this.onElementsChanged = this.onElementsChanged.bind(this);
      this.onScroll = throttle(this.onScroll.bind(this));
    }
    onElementsChanged() {
      this.forceUpdate();
    }
    onScroll() {
      this._eventBus.fire('sheet.scroll');
    }
    getChildContext() {
      return {
        changeSupport: this._changeSupport,
        components: this._components,
        injector: this._injector
      };
    }
    componentWillMount() {
      const {
        id
      } = this._sheet.getRoot();
      this._changeSupport.onElementsChanged(id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const {
        id
      } = this._sheet.getRoot();
      this._changeSupport.offElementsChanged(id, this.onElementsChanged);
    }
    render() {
      const {
        rows,
        cols
      } = this._sheet.getRoot();
      const beforeTableComponents = this._components.getComponents('table.before');
      const afterTableComponents = this._components.getComponents('table.after');
      const Head = this._components.getComponent('table.head');
      const Body = this._components.getComponent('table.body');
      const Foot = this._components.getComponent('table.foot');
      return createVNode(1, "div", "tjs-container", [beforeTableComponents && beforeTableComponents.map((Component, index) => createComponentVNode(2, Component, null, index)), createVNode(1, "div", "tjs-table-container", createVNode(1, "table", "tjs-table", [Head && createComponentVNode(2, Head, {
        "rows": rows,
        "cols": cols
      }), Body && createComponentVNode(2, Body, {
        "rows": rows,
        "cols": cols
      }), Foot && createComponentVNode(2, Foot, {
        "rows": rows,
        "cols": cols
      })], 0), 2, {
        "onScroll": this.onScroll
      }), afterTableComponents && afterTableComponents.map((Component, index) => createComponentVNode(2, Component, null, index))], 0);
    }
  }

  class Renderer$1 {
    constructor(changeSupport, components, config, eventBus, injector) {
      const {
        container
      } = config;
      this._container = container;
      eventBus.on('root.added', () => {
        render(createComponentVNode(2, TableComponent, {
          "injector": injector
        }), container);
      });
      eventBus.on('root.remove', () => {
        render(null, container);
      });
    }
    getContainer() {
      return this._container;
    }
  }
  Renderer$1.$inject = ['changeSupport', 'components', 'config.renderer', 'eventBus', 'injector'];

  var renderModule = {
    __init__: ['changeSupport', 'components', 'renderer'],
    changeSupport: ['type', ChangeSupport$1],
    components: ['type', Components$1],
    renderer: ['type', Renderer$1]
  };

  class Sheet {
    constructor(elementRegistry, eventBus) {
      this._elementRegistry = elementRegistry;
      this._eventBus = eventBus;
      this._root = null;
      eventBus.on('table.clear', () => {
        this.setRoot(null);
      });
    }
    setRoot(root) {
      if (this._root) {
        const oldRoot = this._root;
        this._eventBus.fire('root.remove', {
          root: oldRoot
        });
        this._root = null;
        this._eventBus.fire('root.removed', {
          root: oldRoot
        });
      }
      if (root) {
        this._eventBus.fire('root.add', {
          root
        });
      }
      this._root = root;
      if (root) {
        this._eventBus.fire('root.added', {
          root
        });
      }
    }
    getRoot() {
      if (!this._root) {
        this.setRoot({
          id: '__implicitroot',
          rows: [],
          cols: []
        });
      }
      return this._root;
    }
    /**
     * Add row to sheet.
     *
     * @param {Object} row - Row.
     */

    addRow(row, index) {
      const root = this.getRoot();
      if (root.cols.length != row.cells.length) {
        throw new Error('number of cells is not equal to number of cols');
      }
      if (typeof index === 'undefined') {
        index = root.rows.length;
      }
      addAtIndex(index, root.rows, row);
      row.root = root;
      this._elementRegistry.add(row);
      row.cells.forEach((cell, idx) => {
        this._elementRegistry.add(cell);
        cell.row = row;
        cell.col = root.cols[idx];
        addAtIndex(index, root.cols[idx].cells, cell);
      });
      this._eventBus.fire('row.add', {
        row
      });
      return row;
    }
    /**
     * Remove row from sheet.
     *
     * @param {Object|string} row - Row or row ID.
     */

    removeRow(row) {
      const root = this.getRoot();
      if (typeof row === 'string') {
        row = this._elementRegistry.get(row);
      }
      const index = root.rows.indexOf(row);
      if (index === -1) {
        return;
      }
      removeAtIndex(index, root.rows);
      row.root = undefined;
      this._elementRegistry.remove(row);
      row.cells.forEach((cell, idx) => {
        this._elementRegistry.remove(cell);
        cell.col = undefined;
        removeAtIndex(index, root.cols[idx].cells);
      });
      this._eventBus.fire('row.remove', {
        row
      });
    }
    /**
     * Add col to sheet.
     *
     * @param {Object} col
     * @param {Number} [index]
     */

    addCol(col, index) {
      const root = this.getRoot();
      this._elementRegistry.add(col);
      if (root.rows.length != col.cells.length) {
        throw new Error('number of cells is not equal to number of rows');
      }
      if (typeof index === 'undefined') {
        index = root.cols.length;
      }
      addAtIndex(index, root.cols, col);
      col.root = root;
      col.cells.forEach((cell, idx) => {
        this._elementRegistry.add(cell);
        cell.col = col;
        cell.row = root.rows[idx];
        addAtIndex(index, root.rows[idx].cells, cell);
      });
      this._eventBus.fire('col.add', {
        col
      });
      return col;
    }
    /**
     * Remove col from sheet.
     *
     * @param {Object|string} col - Col or col ID.
     */

    removeCol(col) {
      const root = this.getRoot();
      if (typeof col === 'string') {
        col = this._elementRegistry.get(col);
      }
      const index = root.cols.indexOf(col);
      if (index === -1) {
        return;
      }
      removeAtIndex(index, root.cols);
      col.root = undefined;
      this._elementRegistry.remove(col);
      col.cells.forEach((cell, idx) => {
        this._elementRegistry.remove(cell);
        cell.row = undefined;
        removeAtIndex(index, root.rows[idx].cells);
      });
      this._eventBus.fire('col.remove', {
        col
      });
    }
    resized() {
      this._eventBus.fire('sheet.resized');
    }
  }
  Sheet.$inject = ['elementRegistry', 'eventBus']; // helpers /////////////

  /**
   * Insert value
   *
   * @param {number} index - Index to insert value at.
   * @param {Array} array - Array to insert value into.
   * @param {*} value - Value to insert.
   */

  function addAtIndex(index, array, value) {
    return array.splice(index, 0, value);
  }
  /**
   *
   * @param {number} index - Index to remove.
   * @param {Array} array - Array to remove from.
   */

  function removeAtIndex(index, array) {
    return array.splice(index, 1);
  }

  /**
   * A factory to create a configurable throttler.
   *
   * @param {number|boolean} [config=true]
   */

  function ThrottleFactory(config = true) {
    const timeout = typeof config === 'number' ? config : config ? 300 : 0;
    if (timeout) {
      return fn => throttle(fn, timeout);
    } else {
      return fn => fn;
    }
  }
  ThrottleFactory.$inject = ['config.throttle'];

  var core$1 = {
    __depends__: [renderModule],
    __init__: ['elementFactory', 'sheet'],
    elementFactory: ['type', ElementFactory$1],
    elementRegistry: ['type', ElementRegistry$1],
    eventBus: ['type', EventBus],
    sheet: ['type', Sheet],
    throttle: ['factory', ThrottleFactory]
  };

  class Table {
    constructor(options = {}) {
      let {
        injector
      } = options;
      if (!injector) {
        let {
          modules,
          config
        } = this._init(options);
        injector = createInjector$1(config, modules);
      }
      this.get = injector.get;
      this.invoke = injector.invoke;
      this.get('eventBus').fire('table.init');
      this.get('eventBus').fire('diagram.init');
    }
    /**
     * Intialize table and return modules and config used for creation.
     *
     * @param  {Object} options
     *
     * @return {Object} { modules=[], config }
     */

    _init(options) {
      let {
        modules,
        ...config
      } = options;
      return {
        modules,
        config
      };
    }
    /**
     * Destroys the table. This results in removing the attachment from the container.
     */

    destroy() {
      const eventBus = this.get('eventBus');
      eventBus.fire('table.destroy');
      eventBus.fire('diagram.destroy');
    }
    /**
     * Clears the table. Should be used to reset the state of any stateful services.
     */

    clear() {
      const eventBus = this.get('eventBus');
      eventBus.fire('table.clear');
      eventBus.fire('diagram.clear');
    }
  }
  function createInjector$1(config, modules) {
    const bootstrapModules = [{
      config: ['value', config]
    }, core$1].concat(modules || []);
    const injector = new Injector(bootstrapModules);
    injector.init();
    return injector;
  }

  function elementToString(element) {
    if (!element) {
      return '<null>';
    }
    const id = element.id ? " id=\"".concat(element.id, "\"") : '';
    return "<".concat(element.$type).concat(id, " />");
  }

  function TableTreeWalker(handler, options) {
    function visit(element, ctx, definitions) {
      var gfx = element.gfx;

      // avoid multiple rendering of elements
      if (gfx) {
        throw new Error("already rendered ".concat(elementToString(element)));
      }

      // call handler
      return handler.element(element, ctx, definitions);
    }
    function visitTable(element) {
      return handler.table(element);
    }

    // Semantic handling //////////////////////

    function handleDecision(decision) {
      if (!decision.id) {
        decision.id = 'decision';
      }
      const table = decision.decisionLogic;
      if (table) {
        if (!table.output) {
          throw new Error("missing output for ".concat(elementToString(table)));
        }
        const ctx = visitTable(table);
        if (table.input) {
          handleClauses(table.input, ctx, table);
        }
        handleClauses(table.output, ctx, table);

        // if any input or output clauses (columns) were added
        // make sure that for each rule the according input/output entry is created
        handleRules(table.rule, ctx, table);
      } else {
        throw new Error("no table for ".concat(elementToString(decision)));
      }
    }
    function handleClauses(clauses, context, definitions) {
      forEach$3(clauses, function (e) {
        visit(e, context, definitions);
      });
    }
    function handleRules(rules, context, definitions) {
      forEach$3(rules, function (e) {
        visit(e, context, definitions);
        handleEntry(e.inputEntry, e);
        handleEntry(e.outputEntry, e);
      });
    }
    function handleEntry(entry, context, definitions) {
      forEach$3(entry, function (e) {
        visit(e, context, definitions);
      });
    }

    // API //////////////////////

    return {
      handleDecision: handleDecision
    };
  }

  /**
   * Import the decision table into a table.
   *
   * Errors and warnings are reported through the specified callback.
   *
   * @param  {decisionTable} decisionTable instance of DecisionTable
   * @param  {ModdleElement} decision moddle element
   * @param  {Function} done
   *         the callback, invoked with (err, [ warning ]) once the import is done
   */
  function importDecision(decisionTable, decision, done) {
    const importer = decisionTable.get('tableImporter'),
      eventBus = decisionTable.get('eventBus'),
      sheet = decisionTable.get('sheet');
    decisionTable.get('modeling', false);
    let error,
      warnings = [];
    function render(decision) {
      const visitor = {
        create(type, parent, clause, rule) {
          return importer.create(type, parent, clause, rule);
        },
        table(element) {
          return importer.add(element);
        },
        element(element, parentShape, definitions) {
          return importer.add(element, parentShape, definitions);
        },
        error(message, context) {
          warnings.push({
            message: message,
            context: context
          });
        }
      };
      const walker = new TableTreeWalker(visitor);

      // import
      walker.handleDecision(decision);
    }
    eventBus.fire('import.render.start', {
      decision: decision
    });
    try {
      render(decision);
    } catch (e) {
      error = e;
    }
    eventBus.fire('import.render.complete', {
      error: error,
      warnings: warnings
    });
    eventBus.fire('elements.changed', {
      elements: [sheet.getRoot()]
    });
    done(error, warnings);
  }

  function newSet() {
    return {
      elements: [],
      index: {}
    };
  }
  function add(set, element) {
    const {
      elements,
      index
    } = set;
    if (index[element]) {
      return set;
    } else {
      return {
        elements: [...elements, element],
        index: {
          ...index,
          [element]: true
        }
      };
    }
  }
  function join(set, separator) {
    return set.elements.join(separator);
  }
  function classNames(...args) {
    let set = newSet();
    args.forEach(function (item) {
      const type = typeof item;
      if (type === 'string' && item.length > 0) {
        set = add(set, item);
      } else if (type === 'object' && item !== null) {
        Object.keys(item).forEach(function (key) {
          const value = item[key];
          if (value) {
            set = add(set, key);
          }
        });
      }
    });
    return join(set, ' ');
  }

  function inject(component) {
    const Type = component.constructor;
    return injectType(Type, component);
  }
  function injectType(Type, component) {
    const annotation = Type.$inject;
    if (!annotation) {
      return;
    }
    const {
      injector
    } = component.context;
    const setupFn = [...annotation, function (...args) {
      for (const idx in args) {
        const name = annotation[idx];
        const value = args[idx];
        component[name] = value;
      }
    }];
    injector.invoke(setupFn);
  }

  /**
   * Composes a number of functions.
   *
   * All receive the the same arguments; the chain is interruped as soon
   * as one function returns a value.
   *
   * @param  {Object}    self
   * @param  {...Function} fns
   *
   * @return {Object}
   */
  function compose(self, ...fns) {
    return function (...args) {
      let result;
      fns.forEach(function (fn) {
        result = fn.call(self, ...args);
        if (typeof result !== 'undefined') {
          return false;
        }
      });
      return result;
    }.bind(self);
  }

  /**
   * A Component and injection aware mixin mechanism.
   *
   * @param {Component} component
   * @param {Object|Function} mixinDef
   */

  function mixin(component, mixinDef) {
    Object.keys(mixinDef).forEach(function (key) {
      if (key === '$inject' || key === '__init') {
        return;
      }
      const mixinFn = mixinDef[key];
      if (key === 'constructor') {
        mixinFn.call(component, component.props, component.context);
      }
      const componentFn = component[key];
      if (typeof componentFn !== 'undefined') {
        if (typeof componentFn !== 'function') {
          throw new Error(`failed to mixin <${key}>: cannot combine with non-fn component value`);
        }
        component[key] = compose(component, componentFn, mixinFn);
      } else {
        component[key] = mixinFn.bind(component);
      }
    });
    if ('$inject' in mixinDef) {
      injectType(mixinDef, component);
    } // call initializer

    if ('__init' in mixinDef) {
      mixinDef.__init.call(component, component.props, component.context);
    }
  }

  /**
   * A mixin to make an element _selection aware_.
   */

  const SelectionAware = {
    getSelectionClasses() {
      const {
        selected,
        selectedSecondary,
        focussed
      } = this.state;
      return classNames({
        'selected': selected,
        'selected-secondary': selectedSecondary,
        'focussed': focussed
      });
    },
    selectionChanged(newSelection) {
      // newSelection = { selected, selectedSecondary, focussed }
      this.setState(newSelection);
    },
    componentWillUpdate(newProps) {
      if (newProps.elementId !== this.props.elementId) {
        this.updateSelectionSubscription(false);
      }
    },
    componentDidUpdate(oldProps) {
      if (oldProps.elementId !== this.props.elementId) {
        this.updateSelectionSubscription(true);
      }
    },
    componentDidMount() {
      this.updateSelectionSubscription(true);
    },
    componentWillUnmount() {
      this.updateSelectionSubscription(false);
    },
    updateSelectionSubscription(enable) {
      const {
        elementId
      } = this.props;
      if (!elementId) {
        return;
      }
      if (elementId) {
        this.eventBus[enable ? 'on' : 'off'](`selection.${elementId}.changed`, this.selectionChanged);
      }
    }
  };
  var SelectionAware$1 = SelectionAware;
  SelectionAware.$inject = ['eventBus'];

  class BaseCell extends Component {
    constructor(props, context) {
      super(props, context);
      mixin(this, SelectionAware$1);
      inject(this);
    }
    getRenderProps(...cls) {
      const {
        className,
        elementId,
        coords,
        ...props
      } = this.props;
      const baseProps = {
        className: classNames(...cls, this.getSelectionClasses(), className)
      };
      if (elementId) {
        baseProps['data-element-id'] = elementId;
      }
      if (coords) {
        baseProps['data-coords'] = coords;
      }
      return {
        ...baseProps,
        ...props
      };
    }
  }

  class HeaderCell extends BaseCell {
    constructor(props, context) {
      super(props, context);
      this.state = {};
    }
    render() {
      const {
        children
      } = this.props;
      const props = this.getRenderProps('cell');
      return normalizeProps(createVNode(1, "td", null, children, 0, {
        ...props
      }));
    }
  }

  const _excluded$6 = ["type", "context"],
    _excluded2 = ["type", "context"];
  function ownKeys$8(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$8(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) {
        _defineProperty$F(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$F(obj, key, value) {
    key = _toPropertyKey$C(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$C(arg) {
    var key = _toPrimitive$C(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$C(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _objectWithoutProperties$5(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$5(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$5(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  /**
   * A simple slot extension, built upon the components service.
   *
   * @type {Object}
   */
  const ComponentWithSlots = {
    slotFill(slotProps, DefaultFill) {
      const type = slotProps.type,
        context = slotProps.context,
        props = _objectWithoutProperties$5(slotProps, _excluded$6);
      const Fill = this.components.getComponent(type, context) || DefaultFill;
      if (Fill) {
        return normalizeProps(createComponentVNode(2, Fill, _objectSpread$8(_objectSpread$8({}, context), props)));
      }
      return null;
    },
    slotFills(slotProps) {
      const type = slotProps.type,
        context = slotProps.context,
        props = _objectWithoutProperties$5(slotProps, _excluded2);
      const fills = this.components.getComponents(type, context);
      return fills.map(Fill => normalizeProps(createComponentVNode(2, Fill, _objectSpread$8(_objectSpread$8({}, context), props))));
    }
  };
  ComponentWithSlots.$inject = ['components'];

  function _defineProperty$E(obj, key, value) {
    key = _toPropertyKey$B(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$B(arg) {
    var key = _toPrimitive$B(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$B(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const MIN_WIDTH = 400;
  class AnnotationHeader extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$E(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      mixin(this, ComponentWithSlots);
      inject(this);
    }
    componentDidMount() {
      this.changeSupport.onElementsChanged(this.getRoot(), this.onElementsChanged);
    }
    componentWillUnmount() {
      this.changeSupport.offElementsChanged(this.getRoot(), this.onElementsChanged);
    }
    getRoot() {
      return this.sheet.getRoot();
    }
    render() {
      const decisionTable = this.getRoot();
      const annotationsWidth = decisionTable.businessObject.get('annotationsWidth');
      const width = (annotationsWidth || MIN_WIDTH) + 'px';
      return createVNode(1, "th", "annotation header", [this.slotFills({
        type: 'cell-inner',
        context: {
          cellType: 'annotations',
          col: this.sheet.getRoot(),
          minWidth: MIN_WIDTH
        }
      }), this.translate('Annotations')], 0, {
        "style": {
          width
        }
      });
    }
  }
  AnnotationHeader.$inject = ['changeSupport', 'sheet', 'translate'];

  function AnnotationCell(props) {
    const row = props.row;
    const _row$businessObject = row.businessObject,
      id = _row$businessObject.id,
      description = _row$businessObject.description;
    return createComponentVNode(2, HeaderCell, {
      "className": "annotation",
      "elementId": id,
      children: description || '-'
    });
  }

  function AnnotationsProvider(components) {
    components.onGetComponent('cell', _ref => {
      let cellType = _ref.cellType;
      if (cellType === 'after-label-cells') {
        return AnnotationHeader;
      } else if (cellType === 'after-rule-cells') {
        return AnnotationCell;
      }
    });
  }
  AnnotationsProvider.$inject = ['components'];

  var annotationsModule = {
    __init__: ['annotationsProvider'],
    annotationsProvider: ['type', AnnotationsProvider]
  };

  function elementData(semantic, attrs) {
    return assign$4({
      id: semantic.id,
      type: semantic.$type,
      businessObject: semantic
    }, attrs);
  }
  class TableImporter {
    constructor(elementFactory, eventBus, sheet) {
      this._elementFactory = elementFactory;
      this._eventBus = eventBus;
      this._sheet = sheet;
    }

    /**
     * Add DMN element.
     */
    add(semantic) {
      let element;

      // decision table
      if (is(semantic, 'dmn:DecisionTable')) {
        element = this._elementFactory.createRoot(elementData(semantic));
        this._sheet.setRoot(element);
      }

      // input clause
      else if (is(semantic, 'dmn:InputClause')) {
        element = this._elementFactory.createCol(elementData(semantic));
        this._sheet.addCol(element);
      }

      // output clause
      else if (is(semantic, 'dmn:OutputClause')) {
        element = this._elementFactory.createCol(elementData(semantic));
        this._sheet.addCol(element);
      }

      // rule
      else if (is(semantic, 'dmn:DecisionRule')) {
        if (!semantic.inputEntry) {
          semantic.inputEntry = [];
        }
        if (!semantic.outputEntry) {
          semantic.outputEntry = [];
        }
        const cells = [...semantic.inputEntry, ...semantic.outputEntry].map(entry => {
          return this._elementFactory.createCell(elementData(entry));
        });
        element = this._elementFactory.createRow(assign$4(elementData(semantic), {
          cells
        }));
        this._sheet.addRow(element);
      }
      this._eventBus.fire('dmnElement.added', {
        element: element
      });
      return element;
    }
  }
  TableImporter.$inject = ['elementFactory', 'eventBus', 'sheet'];

  var importModule = {
    __depends__: [TranslateModule],
    tableImporter: ['type', TableImporter]
  };

  var coreModule = {
    __depends__: [importModule, renderModule]
  };

  function _defineProperty$D(obj, key, value) {
    key = _toPropertyKey$A(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$A(arg) {
    var key = _toPrimitive$A(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$A(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class DecisionTableHead extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$D(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      mixin(this, ComponentWithSlots);
      this._sheet = context.injector.get('sheet');
      this._changeSupport = context.changeSupport;
    }
    componentWillMount() {
      const root = this._sheet.getRoot();
      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const root = this._sheet.getRoot();
      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
    }
    render() {
      const root = this._sheet.getRoot();
      if (!is(root, 'dmn:DMNElement')) {
        return null;
      }
      const businessObject = getBusinessObject(root);
      const inputs = businessObject.input,
        outputs = businessObject.output;
      return createVNode(1, "thead", null, createVNode(1, "tr", null, [createVNode(1, "th", "index-column"), this.slotFills({
        type: 'cell',
        context: {
          cellType: 'before-label-cells'
        }
      }), inputs && inputs.map((input, index) => {
        const width = input.width || '192px';
        return this.slotFill({
          type: 'cell',
          context: {
            cellType: 'input-header',
            input,
            index,
            inputsLength: inputs.length,
            width
          },
          key: input.id
        }, DefaultInputHeaderCell);
      }), outputs.map((output, index) => {
        return this.slotFill({
          type: 'cell',
          context: {
            cellType: 'output-header',
            output,
            index,
            outputsLength: outputs.length
          },
          key: output.id
        }, DefaultOutputHeaderCell);
      }), this.slotFills({
        type: 'cell',
        context: {
          cellType: 'after-label-cells'
        }
      })], 0), 2);
    }
  }

  // default components ///////////////////////

  function DefaultInputHeaderCell(props, context) {
    const input = props.input,
      className = props.className,
      index = props.index;
    const label = input.label,
      inputExpression = input.inputExpression,
      inputValues = input.inputValues;
    const translate = context.injector.get('translate');
    const actualClassName = (className || '') + ' input-cell';
    return createVNode(1, "th", actualClassName, [createVNode(1, "div", "clause", index === 0 ? translate('When') : translate('And'), 0), label ? createVNode(1, "div", "input-label", label, 0, {
      "title": translate('Input Label')
    }) : createVNode(1, "div", "input-expression", inputExpression.text, 0, {
      "title": translate('Input Expression')
    }), createVNode(1, "div", "input-variable", inputValues && inputValues.text || inputExpression.typeRef, 0, {
      "title": inputValues && inputValues.text ? translate('Input Values') : translate('Input Type')
    })], 0, {
      "data-col-id": input.id
    }, input.id);
  }
  function DefaultOutputHeaderCell(props, context) {
    const output = props.output,
      className = props.className,
      index = props.index;
    const label = output.label,
      name = output.name,
      outputValues = output.outputValues,
      typeRef = output.typeRef;
    const translate = context.injector.get('translate');
    const actualClassName = (className || '') + ' output-cell';
    return createVNode(1, "th", actualClassName, [createVNode(1, "div", "clause", index === 0 ? translate('Then') : translate('And'), 0), label ? createVNode(1, "div", "output-label", label, 0, {
      "title": translate('Output Label')
    }) : createVNode(1, "div", "output-name", name, 0, {
      "title": translate('Output Name')
    }), createVNode(1, "div", "output-variable", outputValues && outputValues.text || typeRef, 0, {
      "title": outputValues && outputValues.text ? translate('Output Values') : translate('Output Type')
    })], 0, null, output.id);
  }

  function DecisionTableHeadProvider(components) {
    components.onGetComponent('table.head', () => DecisionTableHead);
  }
  DecisionTableHeadProvider.$inject = ['components'];

  var decisionTableHeadModule = {
    __init__: ['decisionTableHeadProvider'],
    decisionTableHeadProvider: ['type', DecisionTableHeadProvider]
  };

  class DecisionTablePropertiesComponent$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      inject(this);
    }
    render() {
      const root = this.sheet.getRoot();
      if (!is(root, 'dmn:DMNElement')) {
        return null;
      }
      const name = root.businessObject.$parent.name;
      const HitPolicy = this.components.getComponent('hit-policy') || NullComponent$1;
      return createVNode(1, "div", "decision-table-properties", [createVNode(1, "div", "decision-table-name", name, 0, {
        "title": this._translate('Decision Name: ') + name
      }), createVNode(1, "div", "decision-table-header-separator"), createComponentVNode(2, HitPolicy)], 4);
    }
  }
  DecisionTablePropertiesComponent$1.$inject = ['sheet', 'components'];
  function NullComponent$1() {
    return null;
  }

  const LOW_PRIORITY$8 = 500;
  class DecisionTableProperties$1 {
    constructor(components) {
      components.onGetComponent('table.before', LOW_PRIORITY$8, () => {
        return DecisionTablePropertiesComponent$1;
      });
    }
  }
  DecisionTableProperties$1.$inject = ['components'];

  var decisionTablePropertiesModule = {
    __init__: ['decisionTableProperties'],
    decisionTableProperties: ['type', DecisionTableProperties$1]
  };

  class DecisionRulesIndexCellComponent extends Component {
    render() {
      const _this$props = this.props,
        row = _this$props.row,
        rowIndex = _this$props.rowIndex;
      const components = this.context.components;
      const innerComponents = components.getComponents('cell-inner', {
        cellType: 'rule-index',
        row,
        rowIndex
      });
      return createVNode(1, "td", "rule-index", [innerComponents && innerComponents.map(InnerComponent => createComponentVNode(2, InnerComponent, {
        "row": row,
        "rowIndex": rowIndex
      })), rowIndex + 1], 0, {
        "data-element-id": row.id,
        "data-row-id": row.id
      });
    }
  }

  class DecisionRuleIndices {
    constructor(components) {
      components.onGetComponent('cell', _ref => {
        let cellType = _ref.cellType;
        if (cellType === 'before-rule-cells') {
          return DecisionRulesIndexCellComponent;
        }
      });
    }
  }
  DecisionRuleIndices.$inject = ['components'];

  var decisionRuleIndicesModule = {
    __init__: ['decisionRuleIndices'],
    decisionRuleIndices: ['type', DecisionRuleIndices]
  };

  const EXPRESSION_LANGUAGE_OPTIONS$1 = [{
    label: 'FEEL',
    value: 'feel'
  }];

  /**
   * @typedef ExpressionLanguageDescriptor
   * @property {string} value - value inserted into XML
   * @property {string} label - human-readable label
   */

  /**
   * Provide options and defaults of expression languages via config.
   *
   * @example
   *
   * // there will be two languages available with FEEL as default
   * const editor = new DmnJS({
   *   common: {
   *     expressionLanguages: {
   *       options: [{
   *         value: 'feel',
   *         label: 'FEEL'
   *       }, {
   *         value: 'juel',
   *         label: 'JUEL'
   *       }],
   *       defaults: {
   *         editor: 'feel'
   *       }
   *     }
   *   }
   * })
   */
  class ExpressionLanguages {
    constructor(injector) {
      this._injector = injector;
      const config = injector.get('config.expressionLanguages') || {};
      this._config = {
        options: EXPRESSION_LANGUAGE_OPTIONS$1,
        defaults: {
          editor: 'feel'
        }
      };

      // first assign the list of languages as it might be required for the legacy defaults
      if (config.options) {
        this._config.options = config.options;
      }
      const legacyDefaults = this._getLegacyDefaults();
      assign$4(this._config.defaults, legacyDefaults, config.defaults);
    }

    /**
     * Get default expression language for a component or the editor if `componentName`
     * is not provided.
     *
     * @param {string} [componentName]
     * @returns {ExpressionLanguageDescriptor}
     */
    getDefault(componentName) {
      const defaults = this._config.defaults;
      const defaultFromConfig = defaults[componentName] || defaults.editor;
      return this._getLanguageByValue(defaultFromConfig) || this.getAll()[0];
    }

    /**
     * Get label for provided expression language.
     *
     * @param {string} expressionLanguageValue - value from XML
     * @returns {string}
     */
    getLabel(expressionLanguageValue) {
      const langauge = this._getLanguageByValue(expressionLanguageValue);
      return langauge ? langauge.label : expressionLanguageValue;
    }

    /**
     * Get list of configured expression languages.
     *
     * @returns {ExpressionLanguageDescriptor[]}
     */
    getAll() {
      return this._config.options;
    }
    _getLegacyDefaults() {
      const defaults = {},
        injector = this._injector;
      const inputCellValue = injector.get('config.defaultInputExpressionLanguage');
      const outputCellValue = injector.get('config.defaultOutputExpressionLanguage');
      if (inputCellValue) {
        defaults.inputCell = inputCellValue;
      }
      if (outputCellValue) {
        defaults.outputCell = outputCellValue;
      }
      return defaults;
    }
    _getLanguageByValue(value) {
      return find$2(this.getAll(), language => value === language.value);
    }
  }
  ExpressionLanguages.$inject = ['injector'];

  var ExpressionLanguagesModule = {
    __init__: ['expressionLanguages'],
    expressionLanguages: ['type', ExpressionLanguages]
  };

  class DecisionRulesBodyComponent extends Component {
    render(_ref) {
      let rows = _ref.rows,
        cols = _ref.cols;
      const components = this.context.components;
      return createVNode(1, "tbody", null, rows.map((row, rowIndex) => {
        const RowComponent = components.getComponent('row', {
          rowType: 'rule'
        });
        return RowComponent && createComponentVNode(2, RowComponent, {
          "row": row,
          "rowIndex": rowIndex,
          "cols": cols
        }, row.id);
      }), 0);
    }
  }

  class DecisionRulesRowComponent extends Component {
    constructor(props, context) {
      super(props, context);
      mixin(this, ComponentWithSlots);
    }
    render() {
      const _this$props = this.props,
        row = _this$props.row,
        rowIndex = _this$props.rowIndex,
        cols = _this$props.cols;
      const cells = row.cells;
      return createVNode(1, "tr", null, [this.slotFills({
        type: 'cell',
        context: {
          cellType: 'before-rule-cells',
          row,
          rowIndex
        }
      }), cells.map((cell, colIndex) => {
        return this.slotFill({
          type: 'cell',
          context: {
            cellType: 'rule',
            cell,
            rowIndex: rowIndex,
            colIndex: colIndex
          },
          key: cell.id,
          row,
          col: cols[colIndex]
        });
      }), this.slotFills({
        type: 'cell',
        context: {
          cellType: 'after-rule-cells',
          row,
          rowIndex
        }
      })], 0);
    }
  }

  class DecisionRulesCellComponent extends Component {
    render() {
      const _this$props = this.props,
        cell = _this$props.cell,
        row = _this$props.row,
        col = _this$props.col;
      if (is(cell, 'dmn:UnaryTests')) {
        return createComponentVNode(2, HeaderCell, {
          "className": "input-cell",
          "elementId": cell.id,
          "data-row-id": row.id,
          "data-col-id": col.id,
          children: cell.businessObject.text
        });
      } else {
        return createComponentVNode(2, HeaderCell, {
          "className": "output-cell",
          "elementId": cell.id,
          "data-row-id": row.id,
          "data-col-id": col.id,
          children: cell.businessObject.text
        });
      }
    }
  }

  class Rules$3 {
    constructor(components) {
      components.onGetComponent('table.body', () => DecisionRulesBodyComponent);
      components.onGetComponent('row', _ref => {
        let rowType = _ref.rowType;
        if (rowType === 'rule') {
          return DecisionRulesRowComponent;
        }
      });
      components.onGetComponent('cell', _ref2 => {
        let cellType = _ref2.cellType;
        if (cellType === 'rule') {
          return DecisionRulesCellComponent;
        }
      });
    }
  }
  Rules$3.$inject = ['components'];

  var Rules$2 = {
    __depends__: [ExpressionLanguagesModule],
    __init__: ['decisionRules'],
    decisionRules: ['type', Rules$3]
  };

  /* eslint max-len: 0 */
  const HIT_POLICIES = [{
    label: 'Unique',
    value: {
      hitPolicy: 'UNIQUE',
      aggregation: undefined
    },
    explanation: 'No overlap is possible and all rules are disjoint. Only a single rule can be matched'
  }, {
    label: 'First',
    value: {
      hitPolicy: 'FIRST',
      aggregation: undefined
    },
    explanation: 'Rules may overlap. The first matching rule will be chosen'
  }, {
    label: 'Priority',
    value: {
      hitPolicy: 'PRIORITY',
      aggregation: undefined
    },
    explanation: 'Rules may overlap. The one with the highest priority will be chosen'
  }, {
    label: 'Any',
    value: {
      hitPolicy: 'ANY',
      aggregation: undefined
    },
    explanation: 'Rules may overlap. Their output have to match'
  }, {
    label: 'Collect',
    value: {
      hitPolicy: 'COLLECT',
      aggregation: undefined
    },
    explanation: 'Collects the values of all matching rules'
  }, {
    label: 'Collect (Sum)',
    value: {
      hitPolicy: 'COLLECT',
      aggregation: 'SUM'
    },
    explanation: 'Collects the values of all matching rules and sums up to a single value'
  }, {
    label: 'Collect (Min)',
    value: {
      hitPolicy: 'COLLECT',
      aggregation: 'MIN'
    },
    explanation: 'Collects the values of all matching rules and uses the lowest value'
  }, {
    label: 'Collect (Max)',
    value: {
      hitPolicy: 'COLLECT',
      aggregation: 'MAX'
    },
    explanation: 'Collects the values of all matching rules and uses the highest value'
  }, {
    label: 'Collect (Count)',
    value: {
      hitPolicy: 'COLLECT',
      aggregation: 'COUNT'
    },
    explanation: 'Collects the values of all matching rules and counts the number of them'
  }, {
    label: 'Rule order',
    value: {
      hitPolicy: 'RULE ORDER',
      aggregation: undefined
    },
    explanation: 'Collects the values of all matching rules in rule order'
  }, {
    label: 'Output order',
    value: {
      hitPolicy: 'OUTPUT ORDER',
      aggregation: undefined
    },
    explanation: 'Collects the values of all matching rules in decreasing output priority order'
  }];

  class HitPolicy extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      inject(this);
    }
    getRoot() {
      return this.sheet.getRoot();
    }
    render() {
      const root = this.getRoot(),
        businessObject = root.businessObject;
      const aggregation = businessObject.aggregation,
        hitPolicy = businessObject.hitPolicy;
      const hitPolicyEntry = find$2(HIT_POLICIES, entry => {
        return isEqualHitPolicy$1(entry.value, {
          aggregation,
          hitPolicy
        });
      });
      return createVNode(1, "div", "hit-policy header", [createVNode(1, "label", "dms-label", this._translate('Hit Policy:'), 0), createVNode(1, "span", "hit-policy-value", this._translate(hitPolicyEntry.label), 0)], 4, {
        "title": this._translate(hitPolicyEntry.explanation)
      });
    }
  }
  HitPolicy.$inject = ['sheet'];

  // helpers //////////////////////
  function isEqualHitPolicy$1(a, b) {
    return a.hitPolicy === b.hitPolicy && a.aggregation === b.aggregation;
  }

  function HitPolicyProvider(components) {
    components.onGetComponent('hit-policy', () => {
      return HitPolicy;
    });
  }
  HitPolicyProvider.$inject = ['components'];

  var hitPolicyModule = {
    __init__: ['hitPolicyProvider'],
    hitPolicyProvider: ['type', HitPolicyProvider]
  };

  function _defineProperty$C(obj, key, value) {
    key = _toPropertyKey$z(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$z(arg) {
    var key = _toPrimitive$z(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$z(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class ViewDrdComponent$1 extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$C(this, "onClick", () => {
        this._eventBus.fire('showDrd');
      });
      const injector = context.injector;
      this._translate = injector.get('translate');
      this._eventBus = injector.get('eventBus');
    }
    render() {
      return createVNode(1, "div", "view-drd", createVNode(1, "button", "view-drd-button", this._translate('View DRD'), 0, {
        "type": "button",
        "onClick": this.onClick
      }), 2, null, null, node => this.node = node);
    }
  }

  class ViewDrd$1 {
    constructor(components, eventBus, injector, sheet) {
      this._injector = injector;
      this._sheet = sheet;
      components.onGetComponent('table.before', () => {
        if (this.canViewDrd()) {
          return ViewDrdComponent$1;
        }
      });
      eventBus.on('showDrd', () => {
        const parent = injector.get('_parent', false);
        const root = sheet.getRoot();
        const definitions = getDefinitions$1(root);
        if (!definitions) {
          return;
        }

        // open definitions
        const view = parent.getView(definitions);
        parent.open(view);
      });
    }
    canViewDrd() {
      const parent = this._injector.get('_parent', false);
      if (!parent) {
        return false;
      }
      const root = this._sheet.getRoot();
      const definitions = getDefinitions$1(root);
      return !!parent.getView(definitions);
    }
  }
  ViewDrd$1.$inject = ['components', 'eventBus', 'injector', 'sheet'];

  // helpers //////////////////////

  function getDefinitions$1(root) {
    const businessObject = root.businessObject;

    // root might not have business object
    if (!businessObject) {
      return;
    }
    const decision = businessObject.$parent;
    const definitions = decision.$parent;
    return definitions;
  }

  var viewDrdModule = {
    __init__: ['viewDrd'],
    viewDrd: ['type', ViewDrd$1]
  };

  function Logo() {
    return createVNode(32, "svg", null, [createVNode(1, "path", null, null, 1, {
      "fill": "#000000",
      "d": 'M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z'
    }), createVNode(1, "path", null, null, 1, {
      "fill": "#000000",
      "d": "M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"
    })], 4, {
      "xmlns": "http://www.w3.org/2000/svg",
      "viewBox": "0 0 14.02 5.57",
      "width": "53",
      "height": "21",
      "style": "vertical-align:middle"
    });
  }

  function _defineProperty$B(obj, key, value) {
    key = _toPropertyKey$y(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$y(arg) {
    var key = _toPrimitive$y(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$y(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class PoweredByLogoComponent$1 extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$B(this, "onClick", () => {
        this._eventBus.fire('poweredBy.show');
      });
      const injector = context.injector;
      this._eventBus = injector.get('eventBus');
    }
    render() {
      return createVNode(1, "div", "powered-by", createVNode(1, "div", "powered-by__logo", createComponentVNode(2, Logo), 2, {
        "title": "Powered by bpmn.io",
        "onClick": this.onClick
      }, null, node => this.node = node), 2);
    }
  }

  class PoweredByOverlayComponent$1 extends Component {
    constructor(props) {
      super(props);
      this.state = {
        show: false
      };
      this.onClick = this.onClick.bind(this);
      this.onShow = this.onShow.bind(this);
    }
    onClick() {
      this.setState({
        show: false
      });
    }
    onShow() {
      this.setState({
        show: true
      });
    }
    componentWillMount() {
      const eventBus = this._eventBus = this.context.injector.get('eventBus');
      eventBus.on('poweredBy.show', this.onShow);
    }
    componentWillUnmount() {
      this._eventBus.off('poweredBy.show', this.onShow);
    }
    render() {
      const show = this.state.show;
      return show && createVNode(1, "div", "powered-by-overlay", createVNode(1, "div", "powered-by-overlay-content", [createVNode(1, "a", "logo", createComponentVNode(2, Logo), 2, {
        "href": "https://bpmn.io",
        "target": "_blank",
        "rel": "noopener"
      }), createVNode(1, "span", null, [createTextVNode("Web-based tooling for BPMN, DMN and CMMN diagrams powered by "), createVNode(1, "a", null, createTextVNode("bpmn.io"), 2, {
        "href": "http://bpmn.io",
        "target": "_blank"
      }), createTextVNode(".")], 4)], 4, {
        "onClick": e => e.stopPropagation()
      }), 2, {
        "onClick": this.onClick
      });
    }
  }

  class PoweredBy$1 {
    constructor(components, eventBus) {
      components.onGetComponent('table.before', () => {
        return PoweredByLogoComponent$1;
      });
      components.onGetComponent('table.before', () => {
        return PoweredByOverlayComponent$1;
      });
    }
  }
  PoweredBy$1.$inject = ['components', 'eventBus'];

  var PoweredByModule$1 = {
    __init__: ['poweredBy'],
    poweredBy: ['type', PoweredBy$1]
  };

  const _excluded$5 = ["modules", "additionalModules"];
  function _objectWithoutProperties$4(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$4(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$4(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenResult} OpenResult
   */

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenError} OpenError
   */

  class Viewer$2 extends Table {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const container = Viewer$2._createContainer();
      super(assign$4(options, {
        renderer: {
          container
        }
      }));
      this._container = container;
    }

    /**
     * Open diagram element.
     *
     * @param  {ModdleElement} decision
     * @returns {Promise} Resolves with {OpenResult} when successful
     * or rejects with {OpenError}
     */
    open(decision) {
      var self = this;
      return new Promise((resolve, reject) => {
        var err;

        // use try/catch to not swallow synchronous exceptions
        // that may be raised during model parsing
        try {
          if (self._decision) {
            // clear existing rendered diagram
            self.clear();
          }

          // update decision
          self._decision = decision;

          // perform import
          return importDecision(self, decision, function (err, warnings) {
            if (err) {
              err.warnings = warnings || [];
              reject(err);
            } else {
              resolve({
                warnings: warnings || []
              });
            }
          });
        } catch (e) {
          err = e;
        }

        // handle synchronously thrown exception
        if (err) {
          err.warnings = err.warnings || [];
          reject(err);
        } else {
          resolve({
            warnings: []
          });
        }
      });
    }

    /**
     * Initialize the table, returning { modules: [], config }.
     *
     * @param  {Object} options
     *
     * @return {Object} init config
     */
    _init(options) {
      let modules = options.modules,
        additionalModules = options.additionalModules,
        config = _objectWithoutProperties$4(options, _excluded$5);
      let baseModules = modules || this.getModules();
      let extraModules = additionalModules || [];
      let staticModules = [{
        decisionTable: ['value', this]
      }];
      let allModules = [PoweredByModule$1, ...baseModules, ...extraModules, ...staticModules];
      return {
        modules: allModules,
        config
      };
    }

    /**
     * Register an event listener
     *
     * Remove a previously added listener via {@link #off(event, callback)}.
     *
     * @param {string} event
     * @param {number} [priority]
     * @param {Function} callback
     * @param {Object} [that]
     */
    on(event, priority, callback, target) {
      return this.get('eventBus').on(event, priority, callback, target);
    }

    /**
     * De-register an event listener
     *
     * @param {string} event
     * @param {Function} callback
     */
    off(event, callback) {
      this.get('eventBus').off(event, callback);
    }

    /**
     * Emit an event on the underlying {@link EventBus}
     *
     * @param  {string} type
     * @param  {Object} event
     *
     * @return {Object} event processing result (if any)
     */
    _emit(type, event) {
      return this.get('eventBus').fire(type, event);
    }

    /**
     * Attach viewer to given parent node.
     *
     * @param  {Element} parentNode
     */
    attachTo(parentNode) {
      if (!parentNode) {
        throw new Error('parentNode required');
      }

      // ensure we detach from the
      // previous, old parent
      this.detach();
      const container = this._container;
      parentNode.appendChild(container);
      this._emit('attach', {});
    }

    /**
     * Detach viewer from parent node, if attached.
     */
    detach() {
      const container = this._container,
        parentNode = container.parentNode;
      if (!parentNode) {
        return;
      }
      this._emit('detach', {});
      remove$4(container);
    }
    destroy() {
      super.destroy();
      this.detach();
    }
    getModules() {
      return Viewer$2._getModules();
    }
    static _getModules() {
      return [annotationsModule, coreModule, TranslateModule, decisionTableHeadModule, decisionTablePropertiesModule, decisionRuleIndicesModule, Rules$2, hitPolicyModule, viewDrdModule];
    }
    static _createContainer() {
      return domify$1('<div class="dmn-decision-table-container"></div>');
    }
  }

  function _defineProperty$A(obj, key, value) {
    key = _toPropertyKey$x(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$x(arg) {
    var key = _toPrimitive$x(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$x(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class AddRuleFootComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$A(this, "handleClick", e => {
        e.stopPropagation();
        this.addRule(e.target.dataset.colIndex);
      });
      inject(this);
      this.addRule = this.addRule.bind(this);
    }
    componentWillMount() {
      this._eventBus = this.context.injector.get('eventBus');
    }
    addRule(colIndex) {
      this._eventBus.fire('addRule', {
        colIndex
      });
    }
    render() {
      const cols = this.props.cols;
      const cells = [createVNode(1, "td", "add-rule-add", createVNode(1, "span", "dmn-icon-plus action-icon", null, 1, {
        "title": "Add Rule"
      }), 2)];
      const _this$sheet$getRoot = this.sheet.getRoot(),
        businessObject = _this$sheet$getRoot.businessObject;
      if (!businessObject.input || !businessObject.input.length) {
        cells.push(createVNode(1, "td", "input-cell", createTextVNode("-"), 2));
      }
      for (let i = 0; i < cols.length + 1; i++) {
        let className = 'add-rule';
        const businessObject = cols[i] && cols[i].businessObject;
        let placeholder = '';
        if (businessObject) {
          if (businessObject.$instanceOf('dmn:InputClause')) {
            className += ' input-cell';
            placeholder = '-';
          }
          if (businessObject.$instanceOf('dmn:OutputClause')) {
            className += ' output-cell';
          }
        } else {
          className += ' annotation';
        }
        cells.push(createVNode(1, "td", className, placeholder, 0, {
          "data-col-index": i
        }));
      }
      return createVNode(1, "tfoot", "actionable add-rule", createVNode(1, "tr", null, cells, 0), 2, {
        "onClick": this.handleClick
      });
    }
  }
  AddRuleFootComponent.$inject = ['sheet'];

  class AddRule {
    constructor(components, editorActions, eventBus, selection) {
      components.onGetComponent('table.foot', () => AddRuleFootComponent);
      eventBus.on('addRule', (e, context) => {
        const rule = editorActions.trigger('addRule');
        const colIndex = context.colIndex;
        if (rule.cells[colIndex]) {
          selection.select(rule.cells[colIndex]);
        } else {
          selection.select(rule.cells[0]);
        }
      });
    }
  }
  AddRule.$inject = ['components', 'editorActions', 'eventBus', 'selection'];

  /**
   * Allows selecting a table cell. Selected cell will be highlighted.
   */

  class Selection {
    constructor(elementRegistry, eventBus, renderer) {
      this._elementRegistry = elementRegistry;
      this._eventBus = eventBus;
      this._renderer = renderer;
      this._selection = undefined;
      eventBus.on('diagram.clear', () => {
        this._selection = undefined;
      });
    }
    /**
     * Select a table cell.
     *
     * @param {Object|String} element - Element or element ID.
     */

    select(element) {
      if (isString$4(element)) {
        element = this._elementRegistry.get(element);
      }
      const oldSelection = this._selection; // don't re-select already selected *Ggg*

      if (oldSelection === element) {
        return;
      }
      this._selection = element;
      this._eventBus.fire('selection.changed', {
        oldSelection,
        selection: element
      });
    }
    /**
     * Deselect a table cell.
     */

    deselect() {
      const oldSelection = this._selection;
      this._selection = undefined;
      this._eventBus.fire('selection.changed', {
        oldSelection,
        selection: this._selection
      });
    }
    /**
     * Get the selected cell.
     */

    get() {
      return this._selection;
    }
    /**
     * Check if a cell is selected.
     */

    hasSelection() {
      return !!this._selection;
    }
  }
  Selection.$inject = ['elementRegistry', 'eventBus', 'renderer'];

  /**
   * Selects table cells on on left & right click.
   */
  class SelectionBehavior {
    constructor(elementRegistry, eventBus, renderer, selection) {
      this._elementRegistry = elementRegistry;
      this._renderer = renderer;
      this._selection = selection;
      eventBus.on(['cell.click', 'cell.contextmenu'], ({
        id
      }) => {
        const element = elementRegistry.get(id);
        if (!element) {
          return;
        }
        selection.select(element);
      });
      eventBus.on('row.remove', ({
        row
      }) => {
        const currentSelection = selection.get();
        if (!currentSelection) {
          return;
        }
        if (row === currentSelection.row) {
          selection.deselect();
        }
      });
      eventBus.on('col.remove', ({
        col
      }) => {
        const currentSelection = selection.get();
        if (!currentSelection) {
          return;
        }
        if (col === currentSelection.col) {
          selection.deselect();
        }
      });
    }
  }
  SelectionBehavior.$inject = ['elementRegistry', 'eventBus', 'renderer', 'selection'];

  var selectionModule = {
    __init__: ['selection', 'selectionBehavior'],
    selection: ['type', Selection],
    selectionBehavior: ['type', SelectionBehavior]
  };

  function _defineProperty$z(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  const EVENTS = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseleave', 'mouseout', 'mouseover', 'mousemove', 'focusin', 'focusout', 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'];
  /**
   * Provides interaction events on the table.
   *
   * @param {RenderConfig} config
   * @param {EventBus} eventBus
   */

  class InteractionEvents {
    constructor(config, eventBus) {
      _defineProperty$z(this, "_handleEvent", event => {
        const {
          target,
          type
        } = event;
        const node = findClosestCell(target);
        if (!node) {
          return;
        }
        const elementId = node.getAttribute('data-element-id');
        if (elementId) {
          const e = this._eventBus.createEvent({
            id: elementId,
            event,
            node,
            target: node
          });
          this._eventBus.fire(`cell.${type}`, e);
          if (e.defaultPrevented) {
            event.preventDefault();
          }
          if (e.cancelBubble) {
            event.stopPropagation();
          }
        }
      });
      this._eventBus = eventBus;
      this._container = config.container;
      eventBus.on('table.init', () => {
        this._addEventListeners(EVENTS);
      });
      eventBus.on('table.destroy', () => {
        this._removeEventListeners(EVENTS);
      });
    }
    _addEventListeners(events) {
      const container = this._container;
      events.forEach(event => {
        container.addEventListener(event, this._handleEvent);
      });
    }
    _removeEventListeners(events) {
      const container = this._container;
      events.forEach(event => {
        container.removeEventListener(event, this._handleEvent);
      });
    }
  }
  InteractionEvents.$inject = ['config.renderer', 'eventBus']; // helpers /////////////

  function findClosestCell(element) {
    return closest(element, '[data-element-id]', true);
  }

  var interactionEventsModule = {
    __init__: ['interactionEvents'],
    interactionEvents: ['type', InteractionEvents]
  };

  /**
   * Expose `xor`
   */

  var componentXor = xor;

  /**
   * XOR utility
   *
   * T T F
   * T F T
   * F T T
   * F F F
   *
   * @param {Boolean} a
   * @param {Boolean} b
   * @return {Boolean}
   */

  function xor(a, b) {
    return a ^ b;
  }

  /**
   * Global Names
   */

  var globals = /\b(Array|Date|Object|Math|JSON)\b/g;

  /**
   * Return immediate identifiers parsed from `str`.
   *
   * @param {String} str
   * @param {String|Function} map function or prefix
   * @return {Array}
   * @api public
   */

  var componentProps = function (str, fn) {
    var p = unique(props(str));
    if (fn && 'string' == typeof fn) fn = prefixed(fn);
    if (fn) return map(str, p, fn);
    return p;
  };

  /**
   * Return immediate identifiers in `str`.
   *
   * @param {String} str
   * @return {Array}
   * @api private
   */

  function props(str) {
    return str.replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '').replace(globals, '').match(/[a-zA-Z_]\w*/g) || [];
  }

  /**
   * Return `str` with `props` mapped with `fn`.
   *
   * @param {String} str
   * @param {Array} props
   * @param {Function} fn
   * @return {String}
   * @api private
   */

  function map(str, props, fn) {
    var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
    return str.replace(re, function (_) {
      if ('(' == _[_.length - 1]) return fn(_);
      if (!~props.indexOf(_)) return _;
      return fn(_);
    });
  }

  /**
   * Return unique array.
   *
   * @param {Array} arr
   * @return {Array}
   * @api private
   */

  function unique(arr) {
    var ret = [];
    for (var i = 0; i < arr.length; i++) {
      if (~ret.indexOf(arr[i])) continue;
      ret.push(arr[i]);
    }
    return ret;
  }

  /**
   * Map with prefix `str`.
   */

  function prefixed(str) {
    return function (_) {
      return str + _;
    };
  }

  /**
   * Module Dependencies
   */

  /**
   * Export `Iterator`
   */

  var domIterator = Iterator;

  /**
   * Initialize `Iterator`
   *
   * @param {Node} node
   * @param {Node} root
   * @return {Iterator} self
   * @api public
   */

  function Iterator(node, root) {
    if (!(this instanceof Iterator)) return new Iterator(node, root);
    this.node = this.start = this.peeked = node;
    this.root = root;
    this.closingTag = false;
    this._revisit = true;
    this._selects = [];
    this._rejects = [];
    if (node && this.higher(node)) {
      throw new Error('root must be a parent or ancestor to node');
    }
  }

  /**
   * Reset the Iterator
   *
   * @param {Node} node (optional)
   * @return {Iterator} self
   * @api public
   */

  Iterator.prototype.reset = function (node) {
    this.node = node || this.start;
    return this;
  };

  /**
   * Revisit element nodes. Defaults to `true`
   */

  Iterator.prototype.revisit = function (revisit) {
    this._revisit = undefined == revisit ? true : revisit;
    return this;
  };

  /**
   * Jump to the opening tag
   */

  Iterator.prototype.opening = function () {
    if (1 == this.node.nodeType) this.closingTag = false;
    return this;
  };

  /**
   * Jump to the closing tag
   */

  Iterator.prototype.atOpening = function () {
    return !this.closingTag;
  };

  /**
   * Jump to the closing tag
   */

  Iterator.prototype.closing = function () {
    if (1 == this.node.nodeType) this.closingTag = true;
    return this;
  };

  /**
   * Jump to the closing tag
   */

  Iterator.prototype.atClosing = function () {
    return this.closingTag;
  };

  /**
   * Next node
   *
   * @param {Number} type
   * @return {Node|null}
   * @api public
   */

  Iterator.prototype.next = traverse('nextSibling', 'firstChild');

  /**
   * Previous node
   *
   * @param {Number} type
   * @return {Node|null}
   * @api public
   */

  Iterator.prototype.previous = Iterator.prototype.prev = traverse('previousSibling', 'lastChild');

  /**
   * Make traverse function
   *
   * @param {String} dir
   * @param {String} child
   * @return {Function}
   * @api private
   */

  function traverse(dir, child) {
    var next = dir == 'nextSibling';
    return function walk(expr, n, peek) {
      expr = this.compile(expr);
      n = n && n > 0 ? n : 1;
      var node = this.node;
      var closing = this.closingTag;
      var revisit = this._revisit;
      while (node) {
        if (componentXor(next, closing) && node[child]) {
          // element with children: <em>...</em>
          node = node[child];
          closing = !next;
        } else if (1 == node.nodeType && !node[child] && componentXor(next, closing)) {
          // empty element tag: <em></em>
          closing = next;
          if (!revisit) continue;
        } else if (node[dir]) {
          // element has a neighbor: ...<em></em>...
          node = node[dir];
          closing = !next;
        } else {
          // done with current layer, move up.
          node = node.parentNode;
          closing = next;
          if (!revisit) continue;
        }
        if (!node || this.higher(node, this.root)) break;
        if (expr(node) && this.selects(node, peek) && this.rejects(node, peek)) {
          if (--n) continue;
          if (!peek) this.node = node;
          this.closingTag = closing;
          return node;
        }
      }
      return null;
    };
  }

  /**
   * Select nodes that cause `expr(node)`
   * to be truthy
   *
   * @param {Number|String|Function} expr
   * @return {Iterator} self
   * @api public
   */

  Iterator.prototype.select = function (expr) {
    expr = this.compile(expr);
    this._selects.push(expr);
    return this;
  };

  /**
   * Run through the selects ORing each
   *
   * @param {Node} node
   * @param {Boolean} peek
   * @return {Boolean}
   * @api private
   */

  Iterator.prototype.selects = function (node, peek) {
    var exprs = this._selects;
    var len = exprs.length;
    if (!len) return true;
    for (var i = 0; i < len; i++) {
      if (exprs[i].call(this, node, peek)) return true;
    }
    return false;
  };

  /**
   * Select nodes that cause `expr(node)`
   * to be falsy
   *
   * @param {Number|String|Function} expr
   * @return {Iterator} self
   * @api public
   */

  Iterator.prototype.reject = function (expr) {
    expr = this.compile(expr);
    this._rejects.push(expr);
    return this;
  };

  /**
   * Run through the reject expressions ANDing each
   *
   * @param {Node} node
   * @param {Boolean} peek
   * @return {Boolean}
   * @api private
   */

  Iterator.prototype.rejects = function (node, peek) {
    var exprs = this._rejects;
    var len = exprs.length;
    if (!len) return true;
    for (var i = 0; i < len; i++) {
      if (exprs[i].call(this, node, peek)) return false;
    }
    return true;
  };

  /**
   * Check if node is higher
   * than root.
   *
   * @param {Node} node
   * @param {Node} root
   * @return {Boolean}
   * @api private
   */

  Iterator.prototype.higher = function (node) {
    var root = this.root;
    if (!root) return false;
    node = node.parentNode;
    while (node && node != root) node = node.parentNode;
    return node != root;
  };

  /**
   * Compile an expression
   *
   * @param {String|Function|Number} expr
   * @return {Function}
   */

  Iterator.prototype.compile = function (expr) {
    switch (typeof expr) {
      case 'number':
        return function (node) {
          return expr == node.nodeType;
        };
      case 'string':
        return new Function('node', 'return ' + componentProps(expr, 'node.'));
      case 'function':
        return expr;
      default:
        return function () {
          return true;
        };
    }
  };

  /**
   * Peek in either direction
   * `n` nodes. Peek backwards
   * using negative numbers.
   *
   * @param {Number} n (optional)
   * @return {Node|null}
   * @api public
   */

  Iterator.prototype.peak = Iterator.prototype.peek = function (expr, n) {
    if (arguments.length == 1) n = expr, expr = true;
    n = undefined == n ? 1 : n;
    if (!n) return this.node;else if (n > 0) return this.next(expr, n, true);else return this.prev(expr, Math.abs(n), true);
  };

  /**
   * Add a plugin
   *
   * @param {Function} fn
   * @return {Iterator}
   * @api public
   */

  Iterator.prototype.use = function (fn) {
    fn(this);
    return this;
  };
  var selection = window.getSelection();

  /**
   * Add selection / insert cursor.
   *
   * @param {Range} range
   */
  function applyRange(range) {
    selection.removeAllRanges();
    selection.addRange(range);
  }

  /**
   * Get current document selection.
   *
   * @return {Selection}
   */
  function getWindowSelection() {
    return selection;
  }

  /**
   * Return true if element is part of window selection.
   *
   * @param  {Element}  el
   * @return {Boolean}
   */
  function isSelected(el) {
    if (!selection.rangeCount) {
      return null;
    }
    var focusNode = selection.focusNode;

    // IE supports Node#contains for elements only
    // thus we ensure we check against an actual Element node
    if (isText(focusNode)) {
      focusNode = focusNode.parentNode;
    }
    return el == focusNode || el.contains(focusNode);
  }

  /**
   * Set cursor or selection position.
   *
   * @param {Element} el
   * @param {SelectionRange} selection
   */
  function setRange(el, selection) {
    var range = createRange(el, selection);
    applyRange(range);
  }

  /**
   * Get cursor or selection position.
   *
   * @param {Element} el
   */
  function getRange(el) {
    if (!isSelected(el)) {
      return null;
    }
    var range = selection.getRangeAt(0);
    var startContainer = range.startContainer;
    var endContainer = range.endContainer;
    var startOffset = range.startOffset;
    var endOffset = range.endOffset;
    var i = domIterator(el.firstChild, el);
    var next = i.node;
    var last;
    var isClosing = false;
    var selectionStart;
    var count = 0;
    function isBeforeEnd(node, referenceNode) {
      if (arguments.length === 1) {
        referenceNode = node;
      }
      return node.parentNode === endContainer && referenceNode == endContainer.childNodes[endOffset];
    }
    function isBeforeStart(node, referenceNode) {
      if (arguments.length === 1) {
        referenceNode = node;
      }
      return node.parentNode === startContainer && referenceNode == startContainer.childNodes[startOffset];
    }
    while (next) {
      // start before node
      if (isBeforeStart(next)) {
        selectionStart = count;
      }

      // end before node
      if (isBeforeEnd(next)) {
        break;
      }
      if (!isClosing) {
        if (isBr(next) || last && last.nextSibling == next && (isDiv(next) || isParagraph(next))) {
          count++;
        }
      }
      if (isText(next)) {
        // #text node
        if (startContainer === next) {
          selectionStart = count + startOffset;
        }
        if (endContainer === next) {
          count += endOffset;
          break;
        }
        count += next.textContent.length;
      }
      if (isText(next) || isClosing) {
        // start before node
        if (isBeforeStart(next, next.nextSibling)) {
          selectionStart = count;
        }

        // end before node
        if (isBeforeEnd(next, next.nextSibling)) {
          break;
        }
      }
      last = next;
      next = i.next();
      isClosing = i.closingTag;
    }

    // selection until end of text
    return {
      start: typeof selectionStart === 'undefined' ? count : selectionStart,
      end: count
    };
  }

  // helpers ///////////////////////////

  function createRange(el, selection) {
    var start = selection.start;
    var end = selection.end;
    var range = document.createRange();
    var i = domIterator(el.firstChild, el);
    var next = i.node;
    var isClosing = false;
    var count = 0;
    var length;
    while (next) {
      if (count === start) {
        if (isClosing) {
          range.setStartAfter(next);
        } else {
          range.setStartBefore(next);
        }
      }
      if (count === end) {
        if (isClosing) {
          range.setEndAfter(next);
        } else {
          range.setEndBefore(next);
        }
        return range;
      }
      if (!isClosing) {
        if (isBr(next) || next.previousSibling && (isDiv(next) || isParagraph(next))) {
          count++;
        }
      }
      if (isText(next)) {
        length = next.textContent.length;
        if (count <= start && count + length > start) {
          range.setStart(next, start - count);
        }
        if (count + length > end) {
          range.setEnd(next, end - count);
          return range;
        }
        count += length;
      }
      next = i.next();
      isClosing = i.closingTag;
    }

    // out of range
    if (count <= start) {
      if (el.lastChild) {
        range.setStartAfter(el.lastChild);
      } else {
        range.setStart(el, 0);
      }
    }
    if (el.lastChild) {
      range.setEndAfter(el.lastChild);
    } else {
      range.setEnd(el, 0);
    }
    return range;
  }
  function isText(node) {
    return node.nodeType === 3;
  }
  function isBr(node) {
    return node.nodeType === 1 && node.nodeName === 'BR';
  }
  function isDiv(node) {
    return node.nodeType === 1 && node.nodeName === 'DIV';
  }
  function isParagraph(node) {
    return node.nodeType === 1 && node.nodeName === 'P';
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = !1;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
      } catch (err) {
        _d = !0, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  const SELECTABLE_SELECTOR = '[contenteditable]';
  const ELEMENT_SELECTOR = '[data-element-id]';
  function getElementId(node) {
    return node.getAttribute('data-element-id');
  }
  function getElementCoords(node) {
    const coordsAttr = node.getAttribute('data-coords');
    if (!coordsAttr) {
      return null;
    }
    const _coordsAttr$split = coordsAttr.split(':'),
      _coordsAttr$split2 = _slicedToArray(_coordsAttr$split, 2),
      row = _coordsAttr$split2[0],
      col = _coordsAttr$split2[1];
    return {
      row,
      col
    };
  }
  function getNodeByCoords(elementCoords, container) {
    const coordsAttr = "".concat(elementCoords.row, ":").concat(elementCoords.col);
    return query("[data-coords=\"".concat(cssEscape(coordsAttr), "\"]"), container);
  }
  function getNodeById(elementId, container) {
    return query("[data-element-id=\"".concat(cssEscape(elementId), "\"]"), container);
  }
  function isUnselectableNode(node) {
    return closest(node, '.no-deselect', true);
  }

  /**
   * Find semantically _selectable_ element in the nodes ancestors.
   *
   * @param {Element} node
   *
   * @return {Element} node
   */
  function findSelectableAncestor(node) {
    return closest(node, ELEMENT_SELECTOR, true);
  }

  /**
   * Return focusable node in selectable el.
   *
   * @param  {Element} el
   *
   * @return {Element}
   */
  function getFocusableNode(el) {
    const selector = SELECTABLE_SELECTOR;
    return matches(el, selector) ? el : query(selector, el);
  }

  /**
   * Ensure element or element childNode has the proper focus.
   *
   * @param {Element} el
   */
  function ensureFocus$1(el) {
    const focusEl = getFocusableNode(el);
    if (!focusEl) {
      return;
    }

    // QUIRK: otherwise range and focus related actions may
    // yield errors in older browsers (PhantomJS / IE)
    if (!document.body.contains(focusEl)) {
      return;
    }

    // nothing to do, if element already has focus
    if (document.activeElement === focusEl) {
      return;
    }

    // (1) focus
    focusEl.focus();

    // (2) set cursor to element end
    const range = getRange(focusEl);
    if (!range || range.end === 0) {
      setRange(focusEl, {
        start: 5000,
        end: 5000
      });
    }
  }

  const LOW_PRIORITY$7 = 500;
  const VALID_DIRECTIONS = {
    above: true,
    below: true,
    right: true,
    left: true
  };

  /**
   * A cell selection utlity; allows selection of elements, independent from
   * whether they are backed by a business object or not.
   *
   * Works together with the {@link SelectionAware} trait.
   *
   * @param {RenderConfig} config
   * @param {EventBus} eventBus
   * @param {Sheet} sheet
   * @param {Selection} selection
   * @param {ElementRegistry} elementRegistry
   */
  function CellSelection(config, eventBus, sheet, selection, elementRegistry) {
    const container = config.container;
    let lastSelection = null;
    function emit(elementId, newSelection) {
      eventBus.fire('selection.' + elementId + '.changed', newSelection);
      eventBus.fire('cellSelection.changed', {
        elementId: elementId,
        selection: newSelection
      });
    }
    function click(event) {
      const target = event.target;
      if (isUnselectableNode(target)) {
        return;
      }
      const selectableNode = findSelectableAncestor(target);
      const elementId = selectableNode && getElementId(selectableNode);
      const focussed = !event.defaultPrevented;
      realSelect(elementId, focussed);
    }
    function focus(event) {
      const elementId = getElementId(event.target);
      const focussed = !event.defaultPrevented;
      event.stopPropagation();
      return realSelect(elementId, focussed);
    }
    function unfocus(event) {
      const elementId = getElementId(event.target);
      emit(elementId, {
        focussed: false
      });
    }
    function realSelect(elementId) {
      let focussed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (lastSelection !== elementId) {
        emit(lastSelection, {
          selected: false,
          focussed: false
        });
      }
      lastSelection = elementId;
      if (elementId) {
        emit(elementId, {
          selected: true,
          focussed
        });
      }
      if (elementId) {
        selection.select(elementId);
      } else {
        selection.deselect();
      }
    }
    eventBus.on('cell.click', LOW_PRIORITY$7, click);
    eventBus.on('cell.focusin', LOW_PRIORITY$7, focus);
    eventBus.on('cell.focusout', LOW_PRIORITY$7, unfocus);
    eventBus.on('cellSelection.changed', function (event) {
      const elementId = event.elementId,
        selection = event.selection;
      const actualElement = getNodeById(elementId, container);
      if (selection.focussed && actualElement) {
        ensureFocus$1(actualElement);
      }
    });
    eventBus.on('selection.changed', function (event) {
      const selection = event.selection,
        oldSelection = event.oldSelection;
      var elementId = selection && selection.id;
      var oldElementId = oldSelection && oldSelection.id;

      // select new element
      if (elementId && elementId !== lastSelection) {
        realSelect(selection.id);
      } else
        // deselect old element
        if (oldElementId && oldElementId === lastSelection) {
          realSelect();
        }
    });

    // API //////////////////////

    /**
     * Return true if a cell is currently selected.
     *
     * @return {boolean}
     */
    this.isCellSelected = function () {
      return !!lastSelection;
    };

    /**
     * Get the currently active cellSelection.
     *
     * @return {string} selection
     */
    this.getCellSelection = function () {
      return lastSelection;
    };

    /**
     * Select next cell in given direction.
     *
     * Returns true on success; false on fail (i.e. if no next selection
     * in direction could be found).
     *
     * @param {string} direction
     *
     * @return {boolean}
     */
    this.selectCell = function (direction) {
      if (!lastSelection) {
        return;
      }
      if (!(direction in VALID_DIRECTIONS)) {
        throw new Error('direction must be any of { above, below, left, right }');
      }
      var selectionEl = getNodeById(lastSelection, container);
      const coords = getElementCoords(selectionEl);
      if (!coords) {
        return false;
      }
      const nextCoords = getNextCoords(coords, direction);
      const nextNode = getNodeByCoords(nextCoords, container);
      if (!nextNode) {
        return false;
      }
      const nextElId = getElementId(nextNode);
      if (nextElId) {
        realSelect(nextElId, {
          focussed: true,
          selected: true
        });
      }
      return true;
    };
    eventBus.on('contextMenu.close', function () {
      if (lastSelection) {
        return realSelect(lastSelection);
      }
    });
  }
  CellSelection.$inject = ['config.renderer', 'eventBus', 'sheet', 'selection', 'elementRegistry'];

  // helpers ////////////////

  function getNextCoords(coords, direction) {
    const row = coords.row,
      col = coords.col;
    if (direction === 'above' || direction === 'below') {
      const rowIndex = parseInt(row, 10);
      if (isNaN(rowIndex)) {
        return coords;
      }
      const nextRowIndex = direction === 'above' ? rowIndex - 1 : rowIndex + 1;
      return {
        col,
        row: nextRowIndex
      };
    }
    if (direction === 'left' || direction === 'right') {
      const colIndex = parseInt(col, 10);
      if (isNaN(colIndex)) {
        return coords;
      }
      const nextColIndex = direction === 'left' ? colIndex - 1 : colIndex + 1;
      return {
        row,
        col: nextColIndex
      };
    }
    throw new Error('invalid direction <' + direction + '>');
  }

  var cellSelectionModule = {
    __depends__: [interactionEventsModule, selectionModule],
    __init__: ['cellSelection'],
    cellSelection: ['type', CellSelection]
  };

  /**
   * A clip board stub
   */
  function Clipboard() {}
  Clipboard.prototype.get = function () {
    return this._data;
  };
  Clipboard.prototype.set = function (data) {
    this._data = data;
  };
  Clipboard.prototype.clear = function () {
    var data = this._data;
    delete this._data;
    return data;
  };
  Clipboard.prototype.isEmpty = function () {
    return !this._data;
  };

  var ClipboardModule = {
    clipboard: ['type', Clipboard]
  };

  const HIGH_PRIORITY$3 = 2000;
  class DecisionTableModelingRules extends RuleProvider {
    constructor(eventBus, sheet) {
      super(eventBus);
      this._sheet = sheet;
    }
    init() {
      this.addRule('col.move', HIGH_PRIORITY$3, _ref => {
        let col = _ref.col,
          index = _ref.index;
        const _this$_sheet$getRoot = this._sheet.getRoot(),
          businessObject = _this$_sheet$getRoot.businessObject,
          input = businessObject.input;
        if (isInput$1(col)) {
          return index < input.length;
        } else {
          return index >= input.length;
        }
      });
      this.addRule('col.remove', HIGH_PRIORITY$3, _ref2 => {
        let col = _ref2.col;
        const _this$_sheet$getRoot2 = this._sheet.getRoot(),
          cols = _this$_sheet$getRoot2.cols;
        if (isOutput(col)) {
          return cols.filter(c => isOutput(c)).length > 1;
        }
        return true;
      });

      // a rule that is aware of the data structure coming from copy and paste
      this.addRule('paste', HIGH_PRIORITY$3, _ref3 => {
        let data = _ref3.data,
          target = _ref3.target;
        if (!data || !target) {
          return false;
        }
        const root = data.root;
        if (target instanceof Row) {
          return this.canPasteRows(root);
        }
        if (target instanceof Col) {
          return this.canPasteCols(root, target);
        }
        return false;
      });
    }
    canPasteRows(root) {
      const _this$_sheet$getRoot3 = this._sheet.getRoot(),
        cols = _this$_sheet$getRoot3.cols;
      return every(root, descriptor => {
        if (descriptor.type !== 'row') {
          return false;
        }
        if (descriptor.cells.length !== cols.length) {
          return false;
        }
        return every(descriptor.cells, (cellDescriptor, index) => {
          if (isInput$1(cols[index])) {
            return cellDescriptor.businessObject.$type === 'dmn:UnaryTests';
          } else {
            return cellDescriptor.businessObject.$type === 'dmn:LiteralExpression';
          }
        });
      });
    }
    canPasteCols(root, targetCol) {
      const _this$_sheet$getRoot4 = this._sheet.getRoot(),
        rows = _this$_sheet$getRoot4.rows;
      return every(root, descriptor => {
        if (descriptor.type !== 'col') {
          return false;
        }
        if (descriptor.cells.length !== rows.length) {
          return false;
        }
        if (isInput$1(targetCol)) {
          return descriptor.businessObject.$type === 'dmn:InputClause';
        } else {
          return descriptor.businessObject.$type === 'dmn:OutputClause';
        }
      });
    }
  }
  DecisionTableModelingRules.$inject = ['eventBus', 'sheet'];

  var Rules$1 = {
    __depends__: [Rules$5]
  };

  var Rules = {
    __depends__: [Rules$1],
    __init__: ['decisionTableModelingRules'],
    decisionTableModelingRules: ['type', DecisionTableModelingRules]
  };

  /**
   * A handler that implements cutting a row or col.
   * Cutting of cells doesn't make sense.
   */
  class CutHandler {
    constructor(clipboard, modeling, sheet) {
      this._clipboard = clipboard;
      this._modeling = modeling;
      this._sheet = sheet;
    }

    /**
     * <do>
     */
    execute(context) {
      let data = context.data;
      context.oldData = this._clipboard.get();
      this._clipboard.set(data);
      return this._sheet.getRoot();
    }
    postExecute(context) {
      let elements = context.elements;
      elements.forEach(element => {
        if (element instanceof Row) {
          this._modeling.removeRow(element);
        } else if (element instanceof Col) {
          this._modeling.removeCol(element);
        }
      });
    }

    /**
     * <undo>
     */
    revert(context) {
      const oldData = context.oldData;
      this._clipboard.set(oldData);
      return this._sheet.getRoot();
    }
  }
  CutHandler.$inject = ['clipboard', 'modeling', 'sheet'];

  function ownKeys$7(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$7(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) {
        _defineProperty$y(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$y(obj, key, value) {
    key = _toPropertyKey$w(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$w(arg) {
    var key = _toPrimitive$w(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$w(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // creating descriptors //////////

  const createHooks = [copyTableProperties, copyBusinessObjectProperties];
  const reviveHooks = [reviveBusinessObject, reviveTableElement];

  /**
   * Return a serializable snapshot of the given elements.
   *
   * @param {Array<Base>} elements list of table elements
   *
   * @return {Tree} descriptor tree
   */
  function createDescriptor(element, cache, hooks) {
    hooks = hooks || createHooks;
    cache = cache || {};
    if (isArray$6(element)) {
      return createDescriptors0(element, cache, hooks);
    } else {
      return createDescriptor0(element, cache, hooks);
    }
  }

  /**
   * Create descriptors of elements, returning { descriptors: [], descriptorCache }.
   *
   * @param {Array<Base>} elements list of table elements
   * @param {Object} cache the create cache
   *
   * @return {Object} new descriptors + updated cache
   */
  function createDescriptors0(elements, cache, hooks) {
    return reduce(elements, (result, element) => {
      var currentCache = result.descriptorCache,
        currentDescriptors = result.root;
      let _createDescriptor = createDescriptor0(element, currentCache, hooks),
        root = _createDescriptor.root,
        descriptorCache = _createDescriptor.descriptorCache;
      return {
        root: [...currentDescriptors, root],
        descriptorCache: _objectSpread$7(_objectSpread$7({}, currentCache), descriptorCache)
      };
    }, {
      root: [],
      descriptorCache: cache
    });
  }
  function createDescriptor0(element, cache, hooks) {
    var id = element.id;
    var descriptor = {
      id: id
    };
    var elements = cache.elements || {};
    var existingDescriptor = elements[id];

    // element already created; nothing to do
    if (existingDescriptor) {
      return {
        root: existingDescriptor,
        descriptorCache: cache
      };
    }

    // we're new; need to initialize element via hooks
    // we assume we're not handling recursive data structures
    // here. Otherwise we'd need to pre-populate the cache
    // with the given element
    let element0 = evaluateHooks(element, descriptor, hooks, _objectSpread$7(_objectSpread$7({}, cache), {}, {
      elements
    }));
    return {
      root: element0.root,
      descriptorCache: _objectSpread$7(_objectSpread$7({}, element0.descriptorCache), {}, {
        elements: _objectSpread$7(_objectSpread$7({}, element0.descriptorCache.elements), {}, {
          [id]: element0.root
        })
      })
    };
  }
  function evaluateHooks(element, descriptor, hooks, cache) {
    function create(element, descriptorCache) {
      return createDescriptor(element, descriptorCache, hooks);
    }
    return reduce(hooks, function (result, hook) {
      return hook(element, result.root, result.descriptorCache, create);
    }, {
      root: descriptor,
      descriptorCache: cache
    });
  }
  function copyTableProperties(element, descriptor, cache, create) {
    var descriptorCache = cache;
    var newDesc = _objectSpread$7(_objectSpread$7({}, descriptor), {}, {
      type: getType(element)
    });
    if (element instanceof Row || element instanceof Col) {
      let cells0 = create(element.cells, descriptorCache);
      newDesc.cells = cells0.root;
      descriptorCache = cells0.descriptorCache;
    }
    return {
      root: newDesc,
      descriptorCache
    };
  }
  function copyBusinessObjectProperties(element, descriptor, cache) {
    var businessObject = element.businessObject;
    if (!businessObject) {
      return {
        root: descriptor,
        descriptorCache: cache
      };
    }

    // need to clone businessObject
    var bo0 = createBoDescriptor(businessObject, cache);
    return {
      root: _objectSpread$7(_objectSpread$7({}, descriptor), {}, {
        businessObject: bo0.root
      }),
      descriptorCache: bo0.descriptorCache
    };
  }
  function getType(element) {
    if (element instanceof Row) {
      return 'row';
    }
    if (element instanceof Col) {
      return 'col';
    }
    if (element instanceof Cell) {
      return 'cell';
    }
    throw new Error('cannot deduce element type: #' + element.id);
  }
  function createBoDescriptor(bo, cache) {
    var boCache, existingBoDesc;
    var id = bo.id;
    if (id) {
      boCache = cache.boCache || {};
      existingBoDesc = boCache[id];

      // businessObject already created; nothing to do
      if (existingBoDesc) {
        return {
          root: existingBoDesc,
          descriptorCache: cache
        };
      }
    }
    var descriptor = {
      $type: bo.$type
    };
    if (id) {
      descriptor.id = id;
      boCache = _objectSpread$7(_objectSpread$7({}, boCache), {}, {
        [id]: descriptor
      });
      cache = _objectSpread$7(_objectSpread$7({}, cache), {}, {
        boCache
      });
    }

    // TODO(nikku): distinguish relations and containment
    // Need to build up the whole tree and revive relations afterwards

    // ITERATE OVER ALL SET PROPERTIES
    // (Object.keys(bo) or via bo.$descriptor....)

    bo.$descriptor.properties.forEach(function (property) {
      var value = bo[property.name];

      // const propertyDescriptor = bo.$model.getPropertyDescriptor(bo, property.name),
      //       isId = propertyDescriptor.isId,
      //       isReference = propertyDescriptor.isReference;

      // not set
      if (!value) {
        return;
      }

      // arrays of moddle elements
      if (isArray$6(value)) {
        value = value.map(b => {
          var value0 = createBoDescriptor(b, cache);
          cache = value0.descriptorCache;
          return value0.root;
        });
      }

      // moddle elements
      if (value.$type) {
        let value0 = createBoDescriptor(value, cache);
        cache = value0.descriptorCache;
        value = value0.root;
      }

      // other values
      descriptor[property.name] = value;
    });
    return {
      root: descriptor,
      descriptorCache: cache
    };
  }

  // reviving //////////

  function reviveDescriptor(entry, reviveCache, hooks) {
    hooks = hooks || reviveHooks;
    reviveCache = reviveCache || {};
    if (isArray$6(entry.root)) {
      return reviveDescriptors0(entry, reviveCache, hooks);
    } else {
      return reviveDescriptor0(entry, reviveCache, hooks);
    }
  }

  /**
   * TBD: document this!
   *
   * @param  {[type]} entry       [description]
   * @param  {[type]} reviveCache [description]
   * @param  {[type]} hooks       [description]
   * @return {[type]}             [description]
   */
  function reviveDescriptors0(entry, reviveCache, hooks) {
    let descriptors = entry.root;
    let descriptorCache = entry.descriptorCache;
    return reduce(descriptors, (result, element) => {
      var currentCache = result.reviveCache,
        currentDescriptors = result.root;
      let _reviveDescriptor = reviveDescriptor0({
          root: element,
          descriptorCache
        }, currentCache, hooks),
        root = _reviveDescriptor.root,
        reviveCache = _reviveDescriptor.reviveCache;
      return {
        root: [...currentDescriptors, root],
        reviveCache
      };
    }, {
      root: [],
      reviveCache
    });
  }

  /**
   * TBD: document this!
   *
   * @param  {[type]} entry [description]
   * @param  {[type]} cache [description]
   * @param  {[type]} hooks [description]
   * @return {[type]}       [description]
   */
  function reviveDescriptor0(entry, reviveCache, hooks) {
    var descriptor = entry.root;
    var id = descriptor.id;
    var elements = reviveCache.elements || {};
    var existingElement = elements[id];

    // element already created; nothing to do
    if (existingElement) {
      return {
        root: existingElement,
        reviveCache: reviveCache
      };
    }

    // start with a fake element; haha <3
    var element = {
      id: id
    };

    // we're new; need to initialize element via hooks
    let element0 = evaluateReviveHooks(entry, element, hooks, _objectSpread$7(_objectSpread$7({}, reviveCache), {}, {
      elements
    }));
    return {
      root: element0.root,
      reviveCache: _objectSpread$7(_objectSpread$7({}, element0.reviveCache), {}, {
        elements: _objectSpread$7(_objectSpread$7({}, element0.reviveCache.elements), {}, {
          [id]: element0.root
        })
      })
    };
  }

  // entry = { root, descriptorCache }
  // element = { id: foo }
  // hooks = [ ... ]
  // reviveCache = { ... }
  function evaluateReviveHooks(entry, element, hooks, reviveCache) {
    function revive(entry, reviveCache) {
      return reviveDescriptor(entry, reviveCache, hooks);
    }
    return reduce(hooks, function (result, hook) {
      return hook(entry, result.root, result.reviveCache, revive);
    }, {
      root: element,
      reviveCache: reviveCache
    });
  }
  function reviveTableElement(entry, element, reviveCache, revive) {
    var descriptor = entry.root;
    var createCache = entry.descriptorCache;
    var elementAttrs = _objectSpread$7({}, element);

    // make sure table element ID is same as moddle element ID
    if (element.businessObject && element.businessObject.id) {
      elementAttrs.id = element.businessObject.id;
    }
    if (descriptor.type === 'row' || descriptor.type === 'col') {
      let cells0 = revive({
        root: descriptor.cells,
        descriptorCache: createCache
      }, reviveCache);
      elementAttrs.cells = cells0.root;
      reviveCache = cells0.reviveCache;
    }
    var Constructor = getConstructor(descriptor);
    var newElement = new Constructor(elementAttrs);

    // set parent row or col
    if (newElement instanceof Row) {
      newElement.cells.forEach(cell => {
        cell.row = newElement;
      });
    } else if (newElement instanceof Col) {
      newElement.cells.forEach(cell => {
        cell.col = newElement;
      });
    }
    return {
      root: newElement,
      reviveCache
    };
  }
  function reviveBusinessObject(entry, element, reviveCache) {
    var businessObject = entry.root.businessObject;
    if (!businessObject) {
      return {
        root: element,
        reviveCache
      };
    }

    // need to clone businessObject
    var bo0 = createBo({
      root: businessObject,
      descriptorCache: entry.descriptorCache
    }, reviveCache);
    return {
      root: _objectSpread$7(_objectSpread$7({}, element), {}, {
        businessObject: bo0.root
      }),
      reviveCache: bo0.reviveCache
    };
  }
  function getConstructor(descriptor) {
    switch (descriptor.type) {
      case 'row':
        return Row;
      case 'cell':
        return Cell;
      case 'col':
        return Col;
      default:
        throw new Error('unknown element type: #' + descriptor.type);
    }
  }
  function createBo(entry, reviveCache) {
    var boDescriptor = entry.root;
    var id = boDescriptor.id;
    let boCache, existingBo;
    if (id) {
      boCache = reviveCache.boCache || {};
      existingBo = boCache[id];

      // businessObject already created; nothing to do
      if (existingBo) {
        return {
          root: existingBo,
          reviveCache
        };
      }
    }
    var newBoAttrs = {};

    // set attrs for new business object (might include creating other business objects)
    keys(boDescriptor).forEach(key => {
      let val, val0;
      if (boDescriptor[key].$type) {
        val0 = createBo({
          root: boDescriptor[key]
        }, reviveCache);
        val = val0.root;
        reviveCache = val0.reviveCache;
        boCache = reviveCache.boCache || {};
      } else if (isArray$6(boDescriptor[key])) {
        val = boDescriptor[key].map(b => {
          val0 = createBo({
            root: b
          }, reviveCache);
          reviveCache = val0.reviveCache;
          boCache = reviveCache.boCache || {};
          return val0.root;
        });
      } else {
        val = boDescriptor[key];
      }
      newBoAttrs[key] = val;
    });
    const type = newBoAttrs.$type;
    delete newBoAttrs.$type;

    // generate new ID if not supposed to be kept or already assigned
    if (!reviveCache._keepIds || reviveCache._model.ids.assigned(newBoAttrs.id)) {
      delete newBoAttrs.id;
    }
    var newBo = reviveCache._dmnFactory.create(type, newBoAttrs);

    // set up $parent relationships for moddle elements
    forEach$3(newBoAttrs, newBoAttr => {
      if (newBoAttr.$type) {
        newBoAttr.$parent = newBo;
      }
      if (isArray$6(newBoAttr)) {
        newBoAttr.forEach(a => a.$parent = newBo);
      }
    });
    if (id) {
      boCache = _objectSpread$7(_objectSpread$7({}, boCache), {}, {
        [id]: newBo
      });
      reviveCache = _objectSpread$7(_objectSpread$7({}, reviveCache), {}, {
        boCache
      });
    }
    return {
      root: newBo,
      reviveCache
    };
  }

  /**
   * A handler that implements pasting elements.
   */
  class PasteHandler {
    constructor(clipboard, dmnFactory, elementFactory, elementRegistry, eventBus, moddle, modeling, sheet) {
      this._clipboard = clipboard;
      this._dmnFactory = dmnFactory;
      this._elementFactory = elementFactory;
      this._elementRegistry = elementRegistry;
      this._eventBus = eventBus;
      this._model = moddle;
      this._modeling = modeling;
      this._sheet = sheet;
    }

    /**
     * <do>
     */
    postExecute(context) {
      let element = context.element,
        after = context.after;
      const data = this._clipboard.get();
      if (!data) {
        throw new Error('missing clipboard data');
      }
      const root = this._sheet.getRoot();

      // (1) create elements from descriptors
      const elements = reviveDescriptor(data.elements, {
        _dmnFactory: this._dmnFactory,
        _keepIds: data.keepIds,
        _model: this._model
      }).root;

      // (2) add elements to sheet
      if (element instanceof Row) {
        let index = root.rows.indexOf(element);
        if (index === -1) {
          return;
        }
        elements.forEach(element => {
          if (after) {
            index++;
          }
          this._modeling.addRow(element, index);
        });
      } else if (element instanceof Col) {
        let index = root.cols.indexOf(element);
        if (index === -1) {
          return;
        }
        elements.forEach(element => {
          if (after) {
            index++;
          }
          this._modeling.addCol(element, index);
        });
      }
      context.oldElements = this._clipboard.get();
      return this._sheet.getRoot();
    }

    /**
     * <undo>
     */
    revert(context) {}
  }
  PasteHandler.$inject = ['clipboard', 'dmnFactory', 'elementFactory', 'elementRegistry', 'eventBus', 'moddle', 'modeling', 'sheet'];

  function ownKeys$6(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$6(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) {
        _defineProperty$x(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$x(obj, key, value) {
    key = _toPropertyKey$v(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$v(arg) {
    var key = _toPrimitive$v(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$v(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class CutPaste {
    constructor(clipboard, commandStack, eventBus, modeling, sheet, rules) {
      this._clipboard = clipboard;
      this._commandStack = commandStack;
      this._eventBus = eventBus;
      this._modeling = modeling;
      this._sheet = sheet;
      this._rules = rules;
      commandStack.registerHandler('cut', CutHandler);
      commandStack.registerHandler('paste', PasteHandler);
    }

    /**
     * Copy elements.
     *
     * @param {Array} elements - Elements to be copied.
     */
    copy(elements) {
      if (!isArray$6(elements)) {
        elements = [elements];
      }
      const data = {
        elements: createDescriptor(elements)
      };
      this._eventBus.fire('copyCutPaste.copy', {
        data
      });
      this._clipboard.set(data);
    }

    /**
     * Cut elements thereby removing them temporarily.
     *
     * @param {Array} elements - Elements to be cut.
     */
    cut(elements) {
      if (!isArray$6(elements)) {
        elements = [elements];
      }
      const data = {
        elements: createDescriptor(elements),
        keepIds: true
      };
      const context = {
        elements,
        data
      };
      this._eventBus.fire('copyCutPaste.cut', {
        data
      });
      this._commandStack.execute('cut', context);
    }

    /**
     * Paste rows or cols before row or col.
     *
     * @param {Row|Col} element - Row or col to paste elements before.
     */
    pasteBefore(element) {
      return this._paste(element, {
        before: true
      });
    }

    /**
     * Paste rows or cols after row or col.
     *
     * @param {Row|Col} element - Row or col to paste elements after.
     */
    pasteAfter(element) {
      return this._paste(element, {
        after: true
      });
    }

    /**
     * Basic paste onto given target element.
     */
    _paste(target, position) {
      const clipboardData = this._clipboard.get();
      if (!clipboardData) {
        return undefined;
      }
      const allowed = this._rules.allowed('paste', {
        data: clipboardData.elements,
        target
      });
      if (!allowed) {
        return false;
      }
      this._commandStack.execute('paste', _objectSpread$6({
        element: target
      }, position));

      // @bpmn-io: Clear clipboard to work around
      // https://github.com/camunda/camunda-modeler/issues/1246 which breaks native copy &
      // paste when row or column is copied or cut
      this._clipboard.clear();

      // Return true to stop propagation and prevent native paste
      return true;
    }

    /**
     * Paste elements at.
     */
    pasteAt(element) {

      // TODO: implement for pasting cells
    }
  }
  CutPaste.$inject = ['clipboard', 'commandStack', 'eventBus', 'modeling', 'sheet', 'rules'];

  var copyCutPasteModule = {
    __depends__: [ClipboardModule, Rules],
    __init__: ['copyCutPaste'],
    copyCutPaste: ['type', CutPaste]
  };

  class DecisionTableEditorActions {
    constructor(copyCutPaste, editorActions, modeling, selection, cellSelection, sheet) {
      const actions = {
        addRule() {
          return modeling.addRow({
            type: 'dmn:DecisionRule'
          });
        },
        addRuleAbove(context) {
          let rule = context && context.rule;
          if (!rule && !selection.hasSelection()) {
            return;
          }
          rule = rule || selection.get().row;
          const root = sheet.getRoot(),
            index = root.rows.indexOf(rule);
          if (index === -1) {
            return;
          }
          return modeling.addRow({
            type: 'dmn:DecisionRule'
          }, index);
        },
        addRuleBelow(context) {
          let rule = context && context.rule;
          if (!rule && !selection.hasSelection()) {
            return;
          }
          rule = rule || selection.get().row;
          const root = sheet.getRoot(),
            index = root.rows.indexOf(rule);
          if (index === -1) {
            return;
          }
          return modeling.addRow({
            type: 'dmn:DecisionRule'
          }, index + 1);
        },
        removeRule(context) {
          let rule = context && context.rule;
          if (!rule && !selection.hasSelection()) {
            return;
          }
          rule = rule || selection.get().row;
          modeling.removeRow(rule);
        },
        addInput() {
          const root = sheet.getRoot(),
            businessObject = root.businessObject;
          const input = businessObject.input;
          return modeling.addCol({
            type: 'dmn:InputClause'
          }, input ? input.length : 0);
        },
        addInputLeft(context) {
          let input = context && context.input;
          if (!input && !selection.hasSelection()) {
            return;
          }
          input = input || selection.get().col;
          const root = sheet.getRoot(),
            index = root.cols.indexOf(input);
          if (index === -1) {
            return;
          }
          return modeling.addCol({
            type: 'dmn:InputClause'
          }, index);
        },
        addInputRight(context) {
          let input = context && context.input;
          if (!input && !selection.hasSelection()) {
            return;
          }
          input = input || selection.get().col;
          const root = sheet.getRoot(),
            index = root.cols.indexOf(input);
          if (index === -1) {
            return;
          }
          return modeling.addCol({
            type: 'dmn:InputClause'
          }, index + 1);
        },
        removeInput(context) {
          let input = context && context.input;
          if (!input && !selection.hasSelection()) {
            return;
          }
          input = input || selection.get().col;
          modeling.removeCol(input);
        },
        addOutput() {
          const root = sheet.getRoot(),
            businessObject = root.businessObject;
          const input = businessObject.get('input'),
            output = businessObject.get('output');
          return modeling.addCol({
            type: 'dmn:OutputClause'
          }, input.length + output.length);
        },
        addOutputLeft(context) {
          let output = context && context.output;
          if (!output && !selection.hasSelection()) {
            return;
          }
          output = output || selection.get().col;
          const root = sheet.getRoot(),
            index = root.cols.indexOf(output);
          if (index === -1) {
            return;
          }
          return modeling.addCol({
            type: 'dmn:OutputClause'
          }, index);
        },
        addOutputRight(context) {
          let output = context && context.output;
          if (!output && !selection.hasSelection()) {
            return;
          }
          output = output || selection.get().col;
          const root = sheet.getRoot(),
            index = root.cols.indexOf(output);
          if (index === -1) {
            return;
          }
          return modeling.addCol({
            type: 'dmn:OutputClause'
          }, index + 1);
        },
        removeOutput(context) {
          let output = context && context.output;
          if (!output && !selection.hasSelection()) {
            return;
          }
          output = output || selection.get().col;
          modeling.removeCol(output);
        },
        addClause() {
          if (!selection.hasSelection()) {
            return;
          }
          const clause = selection.get().col;
          if (is(clause, 'dmn:InputClause')) {
            return actions.addInput({
              input: clause
            });
          } else if (is(clause, 'dmn:OutputClause')) {
            return actions.addOutput({
              output: clause
            });
          }
        },
        addClauseLeft() {
          if (!selection.hasSelection()) {
            return;
          }
          const clause = selection.get().col;
          if (is(clause, 'dmn:InputClause')) {
            return actions.addInputLeft({
              input: clause
            });
          } else if (is(clause, 'dmn:OutputClause')) {
            return actions.addOutputLeft({
              output: clause
            });
          }
        },
        addClauseRight() {
          if (!selection.hasSelection()) {
            return;
          }
          const clause = selection.get().col;
          if (is(clause, 'dmn:InputClause')) {
            return actions.addInputRight({
              input: clause
            });
          } else if (is(clause, 'dmn:OutputClause')) {
            return actions.addOutputRight({
              output: clause
            });
          }
        },
        removeClause() {
          if (!selection.hasSelection()) {
            return;
          }
          const clause = selection.get().col;
          if (is(clause, 'dmn:InputClause')) {
            return actions.removeInput({
              input: clause
            });
          } else if (is(clause, 'dmn:OutputClause')) {
            return actions.removeOutput({
              output: clause
            });
          }
        },
        selectCellAbove() {
          return cellSelection.selectCell('above');
        },
        selectCellBelow() {
          return cellSelection.selectCell('below');
        },
        copy(_ref) {
          let element = _ref.element;
          copyCutPaste.copy(element);
        },
        cut(_ref2) {
          let element = _ref2.element;
          copyCutPaste.cut(element);
        },
        pasteBefore(_ref3) {
          let element = _ref3.element;
          return copyCutPaste.pasteBefore(element);
        },
        pasteAfter(_ref4) {
          let element = _ref4.element;
          return copyCutPaste.pasteAfter(element);
        }
      };
      editorActions.register(actions);
    }
  }
  DecisionTableEditorActions.$inject = ['copyCutPaste', 'editorActions', 'modeling', 'selection', 'cellSelection', 'sheet'];

  const NOT_REGISTERED_ERROR$1 = 'is not a registered action',
    IS_REGISTERED_ERROR$1 = 'is already registered';
  /**
   * An interface that provides access to modeling actions by decoupling
   * the one who requests the action to be triggered and the trigger itself.
   *
   * It's possible to add new actions by registering them with ´registerAction´ and likewise
   * unregister existing ones with ´unregisterAction´.
   *
   */

  class EditorActions$2 {
    constructor(commandStack, eventBus, modeling, selection) {
      this._actions = {
        undo() {
          commandStack.undo();
        },
        redo() {
          commandStack.redo();
        },
        select({
          cell
        }) {
          selection.select(cell);
        },
        deselect() {
          selection.deselect();
        },
        addRow({
          attrs,
          index
        }) {
          modeling.addRow(attrs, index);
        },
        removeRow({
          row
        }) {
          modeling.removeRow(row);
        },
        moveRow({
          row,
          index
        }) {
          modeling.moveRow(row, index);
        },
        addCol({
          attrs,
          index
        }) {
          modeling.addCol(attrs, index);
        },
        removeCol({
          col
        }) {
          modeling.removeCol(col);
        },
        moveCol({
          col,
          index
        }) {
          modeling.moveCol(col, index);
        }
      };
    }
    /**
     * Triggers a registered action
     *
     * @param  {String} action
     * @param  {Object} opts
     *
     * @return {Unknown} Returns what the registered listener returns
     */

    trigger(action, opts) {
      if (!this._actions[action]) {
        throw error$1(action, NOT_REGISTERED_ERROR$1);
      }
      return this._actions[action](opts);
    }
    /**
     * Registers a collections of actions.
     * The key of the object will be the name of the action.
     *
     * @param  {Object} actions
     */

    register(actions, listener) {
      if (typeof actions === 'string') {
        return this._registerAction(actions, listener);
      }
      forEach$3(actions, (listener, action) => {
        this._registerAction(action, listener);
      });
    }
    /**
     * Registers a listener to an action key
     *
     * @param  {String} action
     * @param  {Function} listener
     */

    _registerAction(action, listener) {
      if (this.isRegistered(action)) {
        throw error$1(action, IS_REGISTERED_ERROR$1);
      }
      this._actions[action] = listener;
    }
    /**
     * Unregister an existing action
     *
     * @param {String} action
     */

    unregister(action) {
      if (!this.isRegistered(action)) {
        throw error$1(action, NOT_REGISTERED_ERROR$1);
      }
      this._actions[action] = undefined;
    }
    /**
     * Checks wether the given action is registered
     *
     * @param {String} action
     *
     * @return {Boolean}
     */

    isRegistered(action) {
      return !!this._actions[action];
    }
  }
  EditorActions$2.$inject = ['commandStack', 'eventBus', 'modeling', 'selection']; // helpers /////////////

  function error$1(action, message) {
    return new Error(action + ' ' + message);
  }

  var editorActionsModule = {
    __depends__: [selectionModule],
    __init__: ['editorActions'],
    editorActions: ['type', EditorActions$2]
  };

  var decisionTableEditorActionsModule = {
    __depends__: [cellSelectionModule, copyCutPasteModule, editorActionsModule, selectionModule],
    __init__: ['decisionTableEditorActions'],
    decisionTableEditorActions: ['type', DecisionTableEditorActions]
  };

  var addRuleModule = {
    __depends__: [decisionTableEditorActionsModule],
    __init__: ['addRule'],
    addRule: ['type', AddRule]
  };

  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */

  /**
   * Module variables.
   * @private
   */
  var matchHtmlRegExp = /["'&<>]/;

  /**
   * Module exports.
   * @public
   */

  var escapeHtml_1 = escapeHtml;

  /**
   * Escape special characters in the given string of html.
   *
   * @param  {string} string The string to escape for inserting into HTML
   * @return {string}
   * @public
   */

  function escapeHtml(string) {
    var str = '' + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape;
    var html = '';
    var index = 0;
    var lastIndex = 0;
    for (index = match.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          // "
          escape = '&quot;';
          break;
        case 38:
          // &
          escape = '&amp;';
          break;
        case 39:
          // '
          escape = '&#39;';
          break;
        case 60:
          // <
          escape = '&lt;';
          break;
        case 62:
          // >
          escape = '&gt;';
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  }

  var selectionUpdateExports = {};
  var selectionUpdate = {
    get exports(){ return selectionUpdateExports; },
    set exports(v){ selectionUpdateExports = v; },
  };

  /**
   * Calculate the selection update for the given
   * current and new input values.
   *
   * @param {Object} currentSelection as {start, end}
   * @param {String} currentValue
   * @param {String} newValue
   *
   * @return {Object} newSelection as {start, end}
   */
  function calculateUpdate(currentSelection, currentValue, newValue) {
    var currentCursor = currentSelection.start,
      newCursor = currentCursor,
      diff = newValue.length - currentValue.length;
    newValue.length - currentValue.length;
    var currentTail = currentValue.substring(currentCursor);

    // check if we can remove common ending from the equation
    // to be able to properly detect a selection change for
    // the following scenarios:
    //
    //  * (AAATTT|TF) => (AAAT|TF)
    //  * (AAAT|TF) =>  (AAATTT|TF)
    //
    if (newValue.lastIndexOf(currentTail) === newValue.length - currentTail.length) {
      currentValue = currentValue.substring(0, currentValue.length - currentTail.length);
      newValue = newValue.substring(0, newValue.length - currentTail.length);
    }

    // diff
    var diff = createDiff(currentValue, newValue);
    if (diff) {
      if (diff.type === 'remove') {
        newCursor = diff.newStart;
      } else {
        newCursor = diff.newEnd;
      }
    }
    return range(newCursor);
  }
  selectionUpdate.exports = calculateUpdate;
  function createDiff(currentValue, newValue) {
    var insert;
    var l_str,
      l_char,
      l_idx = 0,
      s_str,
      s_char,
      s_idx = 0;
    if (newValue.length > currentValue.length) {
      l_str = newValue;
      s_str = currentValue;
    } else {
      l_str = currentValue;
      s_str = newValue;
    }

    // assume there will be only one insert / remove and
    // detect that _first_ edit operation only
    while (l_idx < l_str.length) {
      l_char = l_str.charAt(l_idx);
      s_char = s_str.charAt(s_idx);

      // chars no not equal
      if (l_char !== s_char) {
        if (!insert) {
          insert = {
            l_start: l_idx,
            s_start: s_idx
          };
        }
        l_idx++;
      }

      // chars equal (again?)
      else {
        if (insert && !insert.complete) {
          insert.l_end = l_idx;
          insert.s_end = s_idx;
          insert.complete = true;
        }
        s_idx++;
        l_idx++;
      }
    }
    if (insert && !insert.complete) {
      insert.complete = true;
      insert.s_end = s_str.length;
      insert.l_end = l_str.length;
    }

    // no diff
    if (!insert) {
      return;
    }
    if (newValue.length > currentValue.length) {
      return {
        newStart: insert.l_start,
        newEnd: insert.l_end,
        type: 'add'
      };
    } else {
      return {
        newStart: insert.s_start,
        newEnd: insert.s_end,
        type: newValue.length < currentValue.length ? 'remove' : 'replace'
      };
    }
  }

  /**
   * Utility method for creating a new selection range {start, end} object.
   *
   * @param {Number} start
   * @param {Number} [end]
   *
   * @return {Object} selection range as {start, end}
   */
  function range(start, end) {
    return {
      start: start,
      end: end === undefined ? start : end
    };
  }
  selectionUpdateExports.range = range;

  function _defineProperty$w(obj, key, value) {
    key = _toPropertyKey$u(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$u(arg) {
    var key = _toPrimitive$u(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$u(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * A content ediable that performs proper selection updates on
   * editable changes. It normalizes editor operations by allowing
   * only <br/> and plain text to be inserted.
   *
   * The callback `onInput(text)` recieves text (including line breaks)
   * only. Updating the value via props will update the selection
   * if needed, too.
   *
   * @example
   *
   * class SomeComponent extends Component {
   *
   *   render() {
   *     return (
   *       <ContentEditable
   *         className="some classes"
   *         value={ this.state.text }
   *         onInput={ this.handleInput }
   *         onFocus={ ... }
   *         onBlur={ ... } />
   *     );
   *   }
   *
   * }
   *
   */
  class ContentEditable extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$w(this, "onFocus", event => {
        var propsFocus = this.props.onFocus;
        this.setState({
          focussed: true
        });
        if (typeof propsFocus === 'function') {
          propsFocus(event);
        }
      });
      _defineProperty$w(this, "onBlur", event => {
        var propsBlur = this.props.onBlur;
        this.setState({
          focussed: false
        });
        if (typeof propsBlur === 'function') {
          propsBlur(event);
        }
      });
      _defineProperty$w(this, "onKeydown", event => {
        // enter
        if (event.which === 13) {
          // prevent default action (<br/> insert)
          event.preventDefault();
          if (this.props.ctrlForNewline && !isCmd$3(event)) {
            return;
          }
          if (this.props.singleLine) {
            return;
          }
          event.stopPropagation();
          insertLineBreak();
          this.onInput(event);
        }
      });
      _defineProperty$w(this, "onInput", event => {
        var propsInput = this.props.onInput;
        if (typeof propsInput !== 'function') {
          return;
        }
        var text = innerText(this.node);
        propsInput(text);
      });
      _defineProperty$w(this, "onKeyPress", event => {
        if (this.onInputIEPolyfill) {
          this.onInputIEPolyfill(event);
        }
      });
      _defineProperty$w(this, "onPaste", event => {
        // TODO(barmac): remove once we drop IE 11 support
        if (this.onInputIEPolyfill) {
          this.onInputIEPolyfill(event);
        }
        if (this.props.singleLine) {
          const text = (event.clipboardData || window.clipboardData).getData('text');

          // replace newline with space
          document.execCommand('insertText', false, text.replace(/\n/g, ' '));
          event.preventDefault();
        }
      });
      this.state = {};

      // TODO(nikku): remove once we drop IE 11 support
      if (isIE()) {
        // onInput shim for IE <= 11
        this.onInputIEPolyfill = event => {
          var oldText = this.node.innerHTML;
          setTimeout(() => {
            var text = this.node.innerHTML;
            if (oldText !== text) {
              this.onInput(event);
            }
          }, 0);
        };
      }
    }
    componentWillUpdate(newProps, newState) {
      // save old selection + text for later
      var node = this.node;
      var range = newState.focussed && getRange(node);
      this.selected = range && {
        range: range,
        text: innerText(node)
      };
    }
    componentDidUpdate() {
      var selected = this.selected;
      if (!selected) {
        return;
      }

      // compute and restore selection based on
      // (possibly new) text

      const range = selected.range;
      const text = selected.text;
      const node = this.node;
      const newText = innerText(node);
      const newRange = newText !== text ? selectionUpdateExports(range, text, newText) : range;
      setRange(node, newRange);
    }
    getClassName() {
      const _this$props = this.props,
        className = _this$props.className,
        placeholder = _this$props.placeholder,
        value = _this$props.value;
      return [className || '', 'content-editable', !value && placeholder ? 'content-editable--with-placeholder' : ''].join(' ');
    }
    render(props) {
      var value = props.value,
        placeholder = props.placeholder;

      // QUIRK: must add trailing <br/> for line
      // breaks to properly work
      value = escapeHtml_1(value).replace(/\r?\n/g, '<br/>') + '<br/>';
      return createVNode(1, "div", this.getClassName(), null, 1, {
        "contentEditable": "true",
        "spellcheck": "false",
        "data-placeholder": placeholder || '',
        "onInput": this.onInput,
        "onKeypress": this.onKeypress,
        "onPaste": this.onPaste,
        "onFocus": this.onFocus,
        "onBlur": this.onBlur,
        "onKeydown": this.onKeydown,
        "dangerouslySetInnerHTML": {
          __html: value
        }
      }, null, node => this.node = node);
    }
  }
  function brTag() {
    return document.createElement('br');
  }
  function innerText(node) {
    // QUIRK: we must remove the last trailing <br/>, if any
    return node.innerText.replace(/\n$/, '');
  }
  function insertLineBreak() {
    // insert line break at current insertation
    // point; this assumes that the correct element, i.e.
    // a <ContentEditable /> is currently focussed
    var selection = getWindowSelection();
    var range = selection.getRangeAt(0);
    if (!range) {
      return;
    }
    var newRange = range.cloneRange();
    var br = brTag();
    newRange.deleteContents();
    newRange.insertNode(br);
    newRange.setStartAfter(br);
    newRange.setEndAfter(br);
    applyRange(newRange);
  }
  function isIE() {
    var ua = window.navigator.userAgent;
    return (
      // IE 10 or older
      ua.indexOf('MSIE ') > 0 ||
      // IE 11
      ua.indexOf('Trident/') > 0
    );
  }
  function isCmd$3(event) {
    return event.metaKey || event.ctrlKey;
  }

  function _defineProperty$v(obj, key, value) {
    key = _toPropertyKey$t(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$t(arg) {
    var key = _toPrimitive$t(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$t(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * A base component for interactivity.
   *
   * @example
   *
   * class Foo extends EditableComponent {
   *
   *   render() {
   *     return (
   *       <div>{ this.getEditor() }</div>
   *     );
   *   }
   * }
   *
   * And in use:
   *
   * <Foo value={ blub }
   *      onChange={ (newValue) => { ... }
   *      onFocus={ () => { ... } }
   *      onBlur={ () => { ... } }
   *      validate={ (newValue) => { return 'some-error'; } }
   *      className="..." } />
   *
   * Special classes added:
   *
   * * focused
   * * invalid
   *
   */
  class EditableComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$v(this, "onFocus", event => {
        this.setState({
          focussed: true
        });
        var onFocus = this.props.onFocus;
        if (typeof onFocus === 'function') {
          onFocus(event);
        }
      });
      _defineProperty$v(this, "onBlur", event => {
        this.setState({
          focussed: false
        });
        const invalid = this.state.invalid;
        if (invalid) {
          this.setState({
            changing: false,
            invalid: false
          });
        }
        const onBlur = this.props.onBlur;
        if (typeof onBlur === 'function') {
          onBlur(event);
        }
      });
      this.state = {
        changing: false,
        focussed: false
      };
      const injector = context.injector;
      const debounceInput = injector.get('debounceInput');
      this.inputChanged = debounceInput(value => {
        const onChange = this.props.onChange;
        if (typeof onChange === 'function') {
          onChange(value);
        }

        // only unset changed if user input and
        // committed changed value equal. This prevents the
        // input jumping back to the saved, good value.
        const currentValue = this.state.changing;
        this.setState({
          changing: currentValue === value ? false : currentValue
        });
      });
      this.onInput = value => {
        var validate = this.props.validate || function () {};
        var invalid = validate(value);
        this.setState({
          changing: value,
          invalid: invalid
        });
        if (!invalid) {
          this.inputChanged(value);
        }
      };
    }
    getClassName() {
      var _this$props = this.props,
        className = _this$props.className,
        value = _this$props.value;
      var _this$state = this.state,
        changing = _this$state.changing,
        focussed = _this$state.focussed,
        invalid = _this$state.invalid;
      className += ' editable';
      if (focussed) {
        className += ' focussed';
      }
      if (invalid) {
        className += ' invalid';
      }
      if (!value && !changing) {
        className += ' empty';
      }
      return className;
    }
    getDisplayValue() {
      var _this$props2 = this.props,
        value = _this$props2.value,
        placeholder = _this$props2.placeholder;
      var _this$state2 = this.state,
        focussed = _this$state2.focussed,
        changing = _this$state2.changing;
      if (typeof changing === 'string') {
        value = changing;
      }
      if (!value) {
        value = focussed ? '' : placeholder || '';
      }
      return value;
    }
    getEditor() {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return createComponentVNode(2, ContentEditable, {
        "className": props.className,
        "ctrlForNewline": props.ctrlForNewline,
        "onFocus": this.onFocus,
        "onBlur": this.onBlur,
        "onInput": this.onInput,
        "value": this.getDisplayValue()
      });
    }
  }

  function _defineProperty$u(obj, key, value) {
    key = _toPropertyKey$s(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$s(arg) {
    var key = _toPrimitive$s(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$s(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class EditableAnnotationCell extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$u(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$u(this, "setAnnotationValue", text => {
        const row = this.props.row;
        this.modeling.editAnnotation(row.businessObject, text);
      });
      inject(this);
    }
    componentWillMount() {
      const row = this.props.row;
      this.changeSupport.onElementsChanged(row.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const row = this.props.row;
      this.changeSupport.offElementsChanged(row.id, this.onElementsChanged);
    }
    render() {
      const _this$props = this.props,
        row = _this$props.row,
        rowIndex = _this$props.rowIndex;
      const _row$businessObject = row.businessObject,
        description = _row$businessObject.description,
        id = _row$businessObject.id;
      return createComponentVNode(2, HeaderCell, {
        "className": "annotation",
        "onChange": this.setAnnotationValue,
        "coords": "".concat(rowIndex, ":annotation"),
        "value": description,
        "elementId": id,
        "data-row-id": row.id,
        children: createComponentVNode(2, AnnotationEditor, {
          "ctrlForNewline": true,
          "className": "annotation-editor",
          "onChange": this.setAnnotationValue,
          "value": description
        })
      });
    }
  }
  EditableAnnotationCell.$inject = ['changeSupport', 'modeling'];
  class AnnotationEditor extends EditableComponent {
    render() {
      return createVNode(1, "div", this.getClassName(), this.getEditor(), 0);
    }
  }

  function AnnotationsEditingProvider(components) {
    components.onGetComponent('cell', _ref => {
      let cellType = _ref.cellType;
      if (cellType === 'after-label-cells') {
        return AnnotationHeader;
      } else if (cellType === 'after-rule-cells') {
        return EditableAnnotationCell;
      }
    });
  }
  AnnotationsEditingProvider.$inject = ['components'];

  const DEFAULT_DEBOUNCE_TIME = 300;
  function debounceInput(shouldDebounce) {
    return function _debounceInput(fn) {
      if (shouldDebounce !== false) {
        var debounceTime = isNumber$3(shouldDebounce) ? shouldDebounce : DEFAULT_DEBOUNCE_TIME;
        return debounce(fn, debounceTime);
      } else {
        return fn;
      }
    };
  }
  debounceInput.$inject = ['config.debounceInput'];

  var DebounceInput = {
    debounceInput: ['factory', debounceInput]
  };

  var annotationsEditorModule = {
    __depends__: [DebounceInput],
    __init__: ['annotationsProvider'],
    annotationsProvider: ['type', AnnotationsEditingProvider]
  };

  function _defineProperty$t(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  const DEFAULT_STYLE = {
    position: 'absolute'
  };
  /**
   * @typedef ContextMenuPosition
   * @property {number} x
   * @property {number} y
   * @property {number} [width=0]
   * @property {number} [height=0]
   * @property {'bottom-left'|'bottom-right'|'top-left'|'top-right'} [align]
   */

  class ContextMenuComponent extends Component {
    constructor(props, _context) {
      super(props, _context);
      _defineProperty$t(this, "open", ({
        position,
        context
      }) => {
        // always close first
        this.close();
        this.setState({
          isOpen: true,
          position: position || {
            x: 0,
            y: 0
          },
          context: context || {}
        });
      });
      _defineProperty$t(this, "close", () => {
        if (this.state.isOpen) {
          this.setState({
            context: undefined,
            isOpen: false,
            position: {
              x: 0,
              y: 0
            }
          });
        }
      });
      _defineProperty$t(this, "triggerClose", () => {
        this.eventBus.fire('contextMenu.close');
      });
      this.state = {
        isOpen: false,
        position: {
          x: 0,
          y: 0
        }
      };
      inject(this);
    }
    /**
     * Open the context menu with given position and context.
     *
     * The menu itself will figure out the best position, taking the optional
     * positioning parameter into account. Position can also contain indicator
     * in which direction to open context menu.
     *
     * @param {ContextMenuPosition} position
     * @param {Object} [context]
     */

    componentDidMount() {
      this.eventBus.on('contextMenu.open', this.open);
      this.eventBus.on('contextMenu.close', this.close);
    }
    componentWillUnmount() {
      this.eventBus.off('contextMenu.open', this.open);
      this.eventBus.off('contextMenu.close', this.close);
    }
    render() {
      const {
        isOpen,
        context,
        position
      } = this.state;
      if (!isOpen) {
        return null;
      }
      const components = this.components.getComponents('context-menu', context);
      if (!components.length) {
        return null;
      }
      return createComponentVNode(2, ContextMenu$2, {
        "className": "context-menu no-deselect",
        "context": context,
        "position": position,
        "offset": context.offset || {
          x: 0,
          y: 0
        },
        "autoFocus": context.autoFocus !== false,
        "autoClose": context.autoClose !== false,
        "components": components,
        "onClose": this.triggerClose
      });
    }
  }
  ContextMenuComponent.$inject = ['eventBus', 'components'];
  /**
   * Low-level, stateless context menu holder.
   */

  class ContextMenu$2 extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$t(this, "onGlobalMouseDown", event => {
        this.checkClose(event.target);
      });
      _defineProperty$t(this, "onGlobalKey", event => {
        var keyCode = event.which; // ENTER or ESC

        if (keyCode === 13 || keyCode === 27) {
          event.stopPropagation();
          event.preventDefault();
          this.close();
        }
      });
      _defineProperty$t(this, "onFocusChanged", event => {
        this.checkClose(event.target);
      });
      _defineProperty$t(this, "setNode", node => {
        this.node = node;
        const {
          autoFocus
        } = this.props;
        if (node) {
          this.updatePosition();
          if (autoFocus) {
            ensureFocus(node);
          }
        }
      });
      inject(this);
    }
    close() {
      const {
        onClose
      } = this.props;
      if (isFunction$2(onClose)) {
        onClose();
      }
    }
    /**
     * Check whether closing the context menu is necessary
     * after selecting the given element.
     */

    checkClose(focusTarget) {
      const {
        autoClose
      } = this.props;
      if (!autoClose) {
        return;
      }
      var node = this.node;
      if (!node) {
        return;
      }
      if (node === focusTarget) {
        return;
      }
      if (node.contains(focusTarget)) {
        return;
      }
      this.close();
    }
    /**
     * Handle global (window) mousedown event.
     */

    componentDidMount() {
      document.addEventListener('focusin', this.onFocusChanged);
      document.addEventListener('keydown', this.onGlobalKey);
      document.addEventListener('mousedown', this.onGlobalMouseDown);
    }
    componentWillUnmount() {
      document.removeEventListener('focusin', this.onFocusChanged);
      document.removeEventListener('keydown', this.onGlobalKey);
      document.removeEventListener('mousedown', this.onGlobalMouseDown);
    }

    /**
     * Find best context menu position and re-layout accordingly.
     */
    updatePosition() {
      const {
        position,
        offset
      } = this.props;
      const {
        node
      } = this;
      const bounds = node.getBoundingClientRect();
      if (!position.width) {
        position.width = 0;
      }
      if (!position.height) {
        position.height = 0;
      }
      const container = this.renderer.getContainer(),
        containerBounds = container.getBoundingClientRect();
      if (containerBounds.width > containerBounds.height) {
        this.node.classList.add('horizontal');
        this.node.classList.remove('vertical');
      } else {
        this.node.classList.add('vertical');
        this.node.classList.remove('horizontal');
      }
      const {
        scrollLeft,
        scrollTop
      } = getTableContainerScroll$1(node);
      const style = {};
      let alignment;
      if (position.align) {
        alignment = position.align.split('-');
      }
      let left, top;
      const horizontalAlignment = alignment && alignment[1] || (position.x + position.width / 2 > containerBounds.width / 2 ? 'left' : 'right');
      if (horizontalAlignment === 'left') {
        left = position.x - containerBounds.left - bounds.width + offset.x + scrollLeft;
        node.classList.remove('right');
        node.classList.add('left');
      } else {
        left = -containerBounds.left + position.x + position.width - offset.x + scrollLeft;
        node.classList.remove('left');
        node.classList.add('right');
      }
      left = alignment ? left : clampNumber(left, 0 + scrollLeft, containerBounds.width - bounds.width + scrollLeft);
      style.left = left + 'px';
      const verticalAlignment = alignment && alignment[0] || (position.y + position.height / 2 > containerBounds.height / 2 ? 'top' : 'bottom');
      if (verticalAlignment === 'top') {
        top = position.y - containerBounds.top - bounds.height + offset.y + scrollTop;
        node.classList.remove('bottom');
        node.classList.add('top');
      } else {
        top = -containerBounds.top + position.y - offset.y + scrollTop;
        node.classList.remove('top');
        node.classList.add('bottom');
      }
      top = alignment ? top : clampNumber(top, 0 + scrollTop, containerBounds.height - bounds.height + scrollTop);
      style.top = top + 'px'; // ensure context menu will always be accessible

      style.overflowY = 'auto';
      style.maxHeight = containerBounds.height - top + scrollTop + 'px';
      assign$4(this.node.style, DEFAULT_STYLE, style);
    }
    render() {
      const {
        context,
        components,
        className
      } = this.props;
      return createVNode(1, "div", className, components.map((Component, idx) => createComponentVNode(2, Component, {
        "context": context
      }, idx)), 0, {
        "onContextMenu": e => e.preventDefault()
      }, null, this.setNode);
    }
  }
  ContextMenu$2.$inject = ['renderer']; // helpers /////////////

  function clampNumber(number, min, max) {
    return Math.max(min, Math.min(max, number));
  }
  const SELECTABLE_ELEMENTS = `
  input[type=text],
  input[type=number],
  input[type=button],
  input[type=submit],
  [contenteditable],
  [tabindex],
  a[href],
  textarea,
  button
`;
  function ensureFocus(el) {
    var focusEl = query(SELECTABLE_ELEMENTS, el);
    if (focusEl) {
      focusEl.focus(); // inputs

      if (focusEl.selectionStart && focusEl.type === 'text') {
        focusEl.selectionStart = 100000;
      } else
        // content editable elements
        if ('contentEditable' in focusEl) {
          setRange(focusEl, {
            start: 100000,
            end: 100000
          });
        }
    }
  }
  function getTableContainerScroll$1(node) {
    const tableContainer = closest(node, '.tjs-container');
    if (!tableContainer) {
      return {
        scrollTop: 0,
        scrollLeft: 0
      };
    }
    const {
      scrollLeft,
      scrollTop
    } = tableContainer;
    return {
      scrollTop,
      scrollLeft
    };
  }

  class ContextMenu$1 {
    constructor(components, eventBus, renderer) {
      this._eventBus = eventBus;
      components.onGetComponent('table.before', () => ContextMenuComponent);
    }
    open(position, context) {
      this._eventBus.fire('contextMenu.open', {
        position,
        context
      });
    }
    close() {
      this._eventBus.fire('contextMenu.close');
    }
  }
  ContextMenu$1.$inject = ['components', 'eventBus', 'renderer'];

  var contextMenuModule = {
    __init__: ['contextMenu'],
    contextMenu: ['type', ContextMenu$1]
  };

  function isCmd$2(modifiers) {
    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (modifiers.altKey) {
      return false;
    }
    return modifiers.ctrlKey || modifiers.metaKey;
  }
  function isShift$1(modifiers) {
    return modifiers.shiftKey;
  }

  function _defineProperty$s(obj, key, value) {
    key = _toPropertyKey$r(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$r(arg) {
    var key = _toPrimitive$r(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$r(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * Keybindings for Copy + Paste
   */
  class CopyPasteKeyBindings {
    constructor(injector, eventBus, clipboard, cellSelection, elementRegistry, editorActions, renderer) {
      _defineProperty$s(this, "_clearClipboard", () => {
        this._clipboard.clear();
      });
      _defineProperty$s(this, "_registerBindings", () => {
        // copy
        // CTRL/CMD + C
        const copy = (key, modifiers) => {
          if (isCmd$2(modifiers) && key === 67) {
            const cell = this._getSelectedCell();
            if (!cell) {
              return;
            }
            if (isShift$1(modifiers)) {
              this._editorActions.trigger('copy', {
                element: cell.col
              });
            } else {
              this._editorActions.trigger('copy', {
                element: cell.row
              });
            }
            return true;
          }
        };

        // cut
        // CTRL/CMD + X
        const cut = (key, modifiers) => {
          if (isCmd$2(modifiers) && key === 88) {
            const cell = this._getSelectedCell();
            if (!cell) {
              return;
            }
            if (isShift$1(modifiers)) {
              this._editorActions.trigger('cut', {
                element: cell.col
              });
            } else {
              this._editorActions.trigger('cut', {
                element: cell.row
              });
            }
            return true;
          }
        };

        // paste
        // CTRL/CMD + V
        const paste = (key, modifiers) => {
          let pasted;
          if (isCmd$2(modifiers) && key === 86) {
            const cell = this._getSelectedCell();
            if (!cell) {
              return;
            }
            if (isShift$1(modifiers)) {
              pasted = this._editorActions.trigger('pasteAfter', {
                element: cell.col
              });
              if (pasted) {
                this._cellSelection.selectCell('right');
              }
            } else {
              pasted = this._editorActions.trigger('pasteAfter', {
                element: cell.row
              });
              if (pasted) {
                this._cellSelection.selectCell('below');
              }
            }
          }

          // indicate, whether we could paste
          return typeof pasted !== 'undefined';
        };

        // register listeners
        [copy, cut, paste].forEach(l => {
          this._keyboard.addListener(l);
        });
      });
      this._clipboard = clipboard;
      this._cellSelection = cellSelection;
      this._elementRegistry = elementRegistry;
      this._editorActions = editorActions;
      this._keyboard = injector.get('keyboard', false);
      this._renderer = renderer;
      if (!this._keyboard) {
        return;
      }
      eventBus.on('keyboard.init', this._registerBindings);
      eventBus.on('keyboard.bind', () => {
        event.bind(document, 'copy', this._clearClipboard, true);
        event.bind(document, 'cut', this._clearClipboard, true);
      });
      eventBus.on('keyboard.unbind', () => {
        event.unbind(document, 'copy', this._clearClipboard, true);
        event.unbind(document, 'cut', this._clearClipboard, true);
      });
    }
    /**
     * Return the selected cell within the decision table.
     *
     * This verifies that a cell ready for copy-or-paste is
     * actual selected by the user, in the Browser UI.
     *
     * @return {Cell}
     */
    _getSelectedCell() {
      const elementId = this._cellSelection.getCellSelection();

      // we may have no selection
      if (!elementId) {
        return;
      }
      const cell = this._elementRegistry.get(elementId);

      // selection may not be a cell
      if (!cell) {
        return;
      }
      const container = this._renderer.getContainer();
      const node = getNodeById(elementId, container);
      const focusableNode = getFocusableNode(node);

      // focusable element in selection may not be actual
      // browser focus, i.e. when a menu is open
      if (document.activeElement !== focusableNode) {
        return;
      }
      const range = getRange(node);

      // user may attempt native copy-paste operation right now
      // don't interfere with normal text copying
      if (range && range.start !== range.end) {
        return;
      }
      return cell;
    }
  }
  CopyPasteKeyBindings.$inject = ['injector', 'eventBus', 'clipboard', 'cellSelection', 'elementRegistry', 'editorActions', 'renderer'];

  var copyCutPasteKeybindingsModule = {
    __depends__: [ClipboardModule, cellSelectionModule],
    __init__: ['copyCutPasteKeyBindings'],
    copyCutPasteKeyBindings: ['type', CopyPasteKeyBindings]
  };

  function _defineProperty$r(obj, key, value) {
    key = _toPropertyKey$q(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$q(arg) {
    var key = _toPrimitive$q(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$q(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class CreateInputsHeaderCell extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$r(this, "onClick", event => {
        this.editorActions.trigger('addInput');
      });
      inject(this);
    }
    render() {
      return createVNode(1, "th", "input-cell create-inputs header actionable", [this.translate('Input'), createTextVNode(" "), createVNode(1, "span", "add-input dmn-icon-plus action-icon", null, 1, {
        "title": this.translate('Add Input')
      })], 0, {
        "onClick": this.onClick,
        "title": this.translate('Add Input')
      });
    }
  }
  CreateInputsHeaderCell.$inject = ['editorActions', 'translate'];

  function _defineProperty$q(obj, key, value) {
    key = _toPropertyKey$p(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$p(arg) {
    var key = _toPrimitive$p(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$p(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class CreateInputsCell extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$q(this, "onClick", event => {
        this.editorActions.trigger('addInput');
      });
      inject(this);
    }
    render() {
      return createVNode(1, "td", "input-cell create-inputs", createTextVNode("-"), 2, {
        "onClick": this.onClick,
        "title": this.translate('Add Input')
      });
    }
  }
  CreateInputsCell.$inject = ['editorActions', 'translate'];

  const LOW_PRIORITY$6 = 500;
  class CreateInputsProvider {
    constructor(components, sheet) {
      components.onGetComponent('cell', LOW_PRIORITY$6, _ref => {
        let cellType = _ref.cellType;
        const _sheet$getRoot = sheet.getRoot(),
          businessObject = _sheet$getRoot.businessObject;
        if (businessObject.input && businessObject.input.length) {
          return;
        }
        if (cellType === 'before-label-cells') {
          return CreateInputsHeaderCell;
        } else if (cellType === 'before-rule-cells') {
          return CreateInputsCell;
        }
      });
    }
  }
  CreateInputsProvider.$inject = ['components', 'sheet'];

  var createInputsModule = {
    __depends__: [decisionTableEditorActionsModule],
    __init__: ['createInputsProvider'],
    createInputsProvider: ['type', CreateInputsProvider]
  };

  const DEFAULT_DATA_TYPES = ['string', 'boolean', 'number', 'date', 'time', 'dateTime', 'dayTimeDuration', 'yearMonthDuration', 'Any'];

  /**
   * Provide data types via config.
   *
   * @example
   *
   * // The data types will include multiple number types: integer, long, and double.
   * const editor = new DmnJS({
   *   common: {
   *     dataTypes: [
   *       'string',
   *       'boolean',
   *       'integer',
   *       'long',
   *       'double',
   *       'date'
   *     ]
   *   }
   * })
   */
  class DataTypes {
    /**
     * @param {string[]} configuredDataTypes
     */
    constructor(configuredDataTypes) {
      this._dataTypes = configuredDataTypes || DEFAULT_DATA_TYPES;
    }

    /**
     * Get list of configured data types.
     *
     * @returns {string[]}
     */
    getAll() {
      return this._dataTypes;
    }
  }
  DataTypes.$inject = ['config.dataTypes'];

  var DataTypesModule = {
    __init__: ['dataTypes'],
    dataTypes: ['type', DataTypes]
  };

  class ContextMenu {
    constructor(components, contextMenu, clipboard, editorActions, eventBus, elementRegistry, modeling, selection, sheet, rules, translate) {
      var _this = this;
      this._contextMenu = contextMenu;
      this._clipboard = clipboard;
      this._editorActions = editorActions;
      this._elementRegistry = elementRegistry;
      this._eventBus = eventBus;
      this._modeling = modeling;
      this._selection = selection;
      this._sheet = sheet;
      this._rules = rules;
      this._translate = translate;
      this._getEntries = this._getEntries.bind(this);
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'context-menu') {
          const entries = _this._getEntries(context);
          const element = _this._elementRegistry.get(context.id);
          const additionalCellEntries = isCell(element) && components.getComponents('context-menu-cell-additional', context);
          if (additionalCellEntries && additionalCellEntries.length) {
            const cellEntriesGroup = createVNode(1, "div", "context-menu-group context-menu-group-cell", additionalCellEntries, 0);
            return () => createVNode(1, "div", "context-menu-flex", (entries || []).concat(cellEntriesGroup), 0);
          } else {
            return () => createVNode(1, "div", "context-menu-flex", entries || [], 0);
          }
        }
      });
      eventBus.on('cell.contextmenu', _ref => {
        let event = _ref.event,
          id = _ref.id;
          _ref.node;
        event.preventDefault();
        contextMenu.open({
          x: event.pageX,
          y: event.pageY
        }, {
          contextMenuType: 'context-menu',
          event,
          id
        });
      });
    }
    _getEntries(context) {
      const handlers = {
        addRuleAbove: rule => {
          const selectedIndex = rule.cells.map(cell => cell.id).indexOf(context.id);
          const newRule = this._editorActions.trigger('addRuleAbove', {
            rule
          });
          if (newRule.cells[selectedIndex]) {
            this._selection.select(newRule.cells[selectedIndex]);
          } else {
            this._selection.select(newRule.cells[0]);
          }
          this._contextMenu.close();
        },
        addRuleBelow: rule => {
          const selectedIndex = rule.cells.map(cell => cell.id).indexOf(context.id);
          const newRule = this._editorActions.trigger('addRuleBelow', {
            rule
          });
          if (newRule.cells[selectedIndex]) {
            this._selection.select(newRule.cells[selectedIndex]);
          } else {
            this._selection.select(newRule.cells[0]);
          }
          this._contextMenu.close();
        },
        removeRule: rule => {
          this._editorActions.trigger('removeRule', {
            rule
          });
          this._contextMenu.close();
        },
        addInputLeft: input => {
          this._editorActions.trigger('addInputLeft', {
            input
          });
          this._contextMenu.close();
        },
        addInputRight: input => {
          this._editorActions.trigger('addInputRight', {
            input
          });
          this._contextMenu.close();
        },
        removeInput: input => {
          this._editorActions.trigger('removeInput', {
            input
          });
          this._contextMenu.close();
        },
        addOutputLeft: output => {
          this._editorActions.trigger('addOutputLeft', {
            output
          });
          this._contextMenu.close();
        },
        addOutputRight: output => {
          this._editorActions.trigger('addOutputRight', {
            output
          });
          this._contextMenu.close();
        },
        removeOutput: output => {
          this._editorActions.trigger('removeOutput', {
            output
          });
          this._contextMenu.close();
        },
        copy: element => {
          this._editorActions.trigger('copy', {
            element
          });
          this._contextMenu.close();
        },
        cut: element => {
          this._editorActions.trigger('cut', {
            element
          });
          this._contextMenu.close();
        },
        pasteBefore: element => {
          this._editorActions.trigger('pasteBefore', {
            element
          });
          this._contextMenu.close();
        },
        pasteAfter: element => {
          this._editorActions.trigger('pasteAfter', {
            element
          });
          this._contextMenu.close();
        }
      };
      const id = context && context.id;
      if (!id) {
        return null;
      }
      const element = this._elementRegistry.get(id);
      if (!element) {
        return null;
      }
      const clipboardData = this._clipboard.get() || {};
      const entries = [];
      const row = element.row || element;
      if (is(row, 'dmn:DecisionRule')) {
        const canPaste = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: row
        });
        entries.push(createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-copy-rule", this._translate('Copy Rule'), 0, {
          "onClick": () => handlers.copy(row)
        }), createVNode(1, "div", "context-menu-group-entry context-menu-entry-cut-rule", this._translate('Cut Rule'), 0, {
          "onClick": () => handlers.cut(row)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-rule-above"), this._translate('Paste Rule Above'), 0, {
          "onClick": () => handlers.pasteBefore(row)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-rule-below"), this._translate('Paste Rule Below'), 0, {
          "onClick": () => handlers.pasteAfter(row)
        })], 4), createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-rule-above", this._translate('Add Rule Above'), 0, {
          "onClick": () => handlers.addRuleAbove(row)
        }), createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-rule-below", this._translate('Add Rule Below'), 0, {
          "onClick": () => handlers.addRuleBelow(row)
        }), createVNode(1, "div", "context-menu-group-entry context-menu-entry-remove-rule", this._translate('Remove Rule'), 0, {
          "onClick": () => handlers.removeRule(row)
        })], 4));
      } else if (is(element, 'dmn:InputClause')) {
        const actualElement = is(element, 'dmn:InputClause') ? element : element.col;
        const canRemove = this._rules.allowed('col.remove', {
          col: element.col || element
        });
        const canPaste = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: element.col || element
        });
        entries.push(createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-copy-input", this._translate('Copy Input Column'), 0, {
          "onClick": () => handlers.copy(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canRemove ? '' : 'disabled', " context-menu-entry-cut-input"), this._translate('Cut Input Column'), 0, {
          "onClick": () => handlers.cut(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-input-left"), this._translate('Paste Input Column Left'), 0, {
          "onClick": () => handlers.pasteBefore(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-input-right"), this._translate('Paste Input Column Right'), 0, {
          "onClick": () => handlers.pasteAfter(actualElement)
        })], 4), createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-input-left", this._translate('Add Input Column Left'), 0, {
          "onClick": () => handlers.addInputLeft(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-input-right", this._translate('Add Input Column Right'), 0, {
          "onClick": () => handlers.addInputRight(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canRemove ? '' : 'disabled', " context-menu-entry-remove-input"), this._translate('Remove Input Column'), 0, {
          "onClick": () => handlers.removeInput(actualElement)
        })], 4));
      } else if (is(element, 'dmn:OutputClause') || is(element.col, 'dmn:OutputClause')) {
        const actualElement = is(element, 'dmn:OutputClause') ? element : element.col;
        const canRemove = this._rules.allowed('col.remove', {
          col: element.col || element
        });
        const canPaste = this._rules.allowed('paste', {
          data: clipboardData.elements,
          target: element.col || element
        });
        entries.push(createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-copy-output", this._translate('Copy Output Column'), 0, {
          "onClick": () => handlers.copy(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canRemove ? '' : 'disabled', " context-menu-entry-cut-output"), this._translate('Cut Output Column'), 0, {
          "onClick": () => handlers.cut(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-output-left"), this._translate('Paste Output Column Left'), 0, {
          "onClick": () => handlers.pasteBefore(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canPaste ? '' : 'disabled', " context-menu-entry-paste-output-right"), this._translate('Paste Output Column Right'), 0, {
          "onClick": () => handlers.pasteAfter(actualElement)
        })], 4), createVNode(1, "div", "context-menu-group", [createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-output-left", this._translate('Add Output Column Left'), 0, {
          "onClick": () => handlers.addOutputLeft(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry context-menu-entry-add-output-right", this._translate('Add Output Column Right'), 0, {
          "onClick": () => handlers.addOutputRight(actualElement)
        }), createVNode(1, "div", "context-menu-group-entry ".concat(canRemove ? '' : 'disabled', " context-menu-entry-remove-output"), this._translate('Remove Output Column'), 0, {
          "onClick": () => handlers.removeOutput(actualElement)
        })], 4));
      }
      return entries;
    }
  }
  ContextMenu.$inject = ['components', 'contextMenu', 'clipboard', 'editorActions', 'eventBus', 'elementRegistry', 'modeling', 'selection', 'sheet', 'rules', 'translate'];

  // helpers ///////////

  function isCell(element) {
    return element instanceof Cell;
  }

  const COMMANDS = ['row.add', 'row.remove', 'col.add', 'col.remove'];
  class ContextMenuCloseBehavior {
    constructor(contextMenu, eventBus) {
      eventBus.on('commandStack.executed', _ref => {
        let command = _ref.command;
        // close on certain modeling operations
        if (COMMANDS.indexOf(command) !== -1) {
          contextMenu.close();
        }
      });

      // always close on undo
      eventBus.on('commandStack.reverted', () => {
        contextMenu.close();
      });
    }
  }
  ContextMenuCloseBehavior.$inject = ['contextMenu', 'eventBus'];

  var decisionTableContextMenu = {
    __depends__: [decisionTableEditorActionsModule, contextMenuModule, Rules],
    __init__: ['decisionTableContextMenu', 'contextMenuCloseBehavior'],
    decisionTableContextMenu: ['type', ContextMenu],
    contextMenuCloseBehavior: ['type', ContextMenuCloseBehavior]
  };

  function _defineProperty$p(obj, key, value) {
    key = _toPropertyKey$o(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$o(arg) {
    var key = _toPrimitive$o(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$o(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class OutputCell extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$p(this, "onClick", event => {
        const output = this.props.output;
        this._eventBus.fire('output.edit', {
          event,
          output
        });
      });
      _defineProperty$p(this, "onContextmenu", event => {
        const id = this.props.output.id;
        this._eventBus.fire('cell.contextmenu', {
          event,
          id
        });
      });
      _defineProperty$p(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      mixin(this, ComponentWithSlots);
      this._translate = context.injector.get('translate');
    }
    componentWillMount() {
      const injector = this.context.injector;
      this._changeSupport = this.context.changeSupport;
      this._eventBus = injector.get('eventBus');
      this._elementRegistry = injector.get('elementRegistry');
      const output = this.props.output;
      this._changeSupport.onElementsChanged(output.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const output = this.props.output;
      this._changeSupport.offElementsChanged(output.id, this.onElementsChanged);
    }
    render() {
      const _this$props = this.props,
        output = _this$props.output,
        index = _this$props.index,
        outputsLength = _this$props.outputsLength;
      const label = output.label,
        name = output.name,
        outputValues = output.outputValues,
        typeRef = output.typeRef;
      const width = output.width ? output.width + 'px' : '192px';
      return createVNode(1, "th", "output-cell output-editor", [this.slotFills({
        type: 'cell-inner',
        context: {
          cellType: 'output-cell',
          col: this._elementRegistry.get(output.id),
          index,
          outputsLength
        },
        col: output
      }), createVNode(1, "div", "clause", index === 0 ? this._translate('Then') : this._translate('And'), 0), label ? createVNode(1, "div", "output-label", label, 0, {
        "title": this._translate('Output Label')
      }) : createVNode(1, "div", "output-name", name, 0, {
        "title": this._translate('Output Name')
      }), createVNode(1, "div", "output-variable", outputValues && outputValues.text || this._translate(typeRef), 0, {
        "title": outputValues && outputValues.text ? this._translate('Output Values') : this._translate('Output Type')
      })], 0, {
        "data-col-id": output.id,
        "onDblClick": this.onClick,
        "onContextmenu": this.onContextmenu,
        "style": {
          width
        }
      });
    }
  }

  function _defineProperty$o(obj, key, value) {
    key = _toPropertyKey$n(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$n(arg) {
    var key = _toPrimitive$n(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$n(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class Input extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$o(this, "onInput", event => {
        const onInput = this.props.onInput;
        if (typeof onInput !== 'function') {
          return;
        }
        onInput(event.target.value);
      });
      _defineProperty$o(this, "onKeyDown", event => {
        const onKeyDown = this.props.onKeyDown;
        if (typeof onKeyDown !== 'function') {
          return;
        }
        onKeyDown(event);
      });
      _defineProperty$o(this, "onKeyUp", event => {
        const onKeyUp = this.props.onKeyUp;
        if (typeof onKeyUp !== 'function') {
          return;
        }
        onKeyUp(event);
      });
    }
    render() {
      const _this$props = this.props,
        className = _this$props.className,
        placeholder = _this$props.placeholder,
        type = _this$props.type,
        value = _this$props.value;
      return createVNode(64, "input", [className || '', 'dms-input'].join(' '), null, 1, {
        "placeholder": placeholder || '',
        "onInput": this.onInput,
        "onKeyDown": this.onKeyDown,
        "onKeyUp": this.onKeyUp,
        "spellcheck": "false",
        "type": type || 'text',
        "value": value
      });
    }
  }

  class OutputEditor extends Component {
    constructor(props, context) {
      super(props, context);
      this.translate = context.injector ? context.injector.get('translate') : noopTranslate$1;
      this.setName = name => {
        name = name || undefined;
        this.handleChange({
          name
        });
      };
      this.setLabel = label => {
        label = label || undefined;
        this.handleChange({
          label
        });
      };
    }
    handleChange(changes) {
      var onChange = this.props.onChange;
      if (typeof onChange === 'function') {
        onChange(changes);
      }
    }
    render() {
      const _this$props = this.props,
        name = _this$props.name,
        label = _this$props.label;
      return createVNode(1, "div", "context-menu-container ref-output-editor output-edit", [createVNode(1, "div", "dms-form-control", createComponentVNode(2, ContentEditable, {
        "className": "dms-output-label",
        "value": label || '',
        "placeholder": this.translate('Output'),
        "singleLine": true,
        "onInput": this.setLabel
      }), 2), createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", this.translate('Output Name'), 0), createComponentVNode(2, Input, {
        "className": "ref-output-name",
        "value": name || '',
        "onInput": this.setName
      })], 4)], 4);
    }
  }
  function noopTranslate$1(str) {
    return str;
  }

  function ownKeys$5(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$5(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) {
        _defineProperty$n(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$n(obj, key, value) {
    key = _toPropertyKey$m(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$m(arg) {
    var key = _toPrimitive$m(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$m(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class OutputCellContextMenu extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$n(this, "persistChanges", () => {
        const output = this.props.context.output;
        const unsaved = this.state.unsaved;
        if (!unsaved) {
          return;
        }
        this.modeling.updateProperties(output, unsaved);
        this.setState({
          unsaved: false
        });
      });
      _defineProperty$n(this, "handleChange", changes => {
        this.setState({
          unsaved: _objectSpread$5(_objectSpread$5({}, this.state.unsaved), changes)
        }, this.persistChanges);
      });
      this.state = {};
      inject(this);
      this.persistChanges = this.debounceInput(this.persistChanges);
    }
    getValue(attr) {
      const output = this.props.context.output;
      const unsaved = this.state.unsaved;
      return unsaved && attr in unsaved ? unsaved[attr] : output.get(attr);
    }
    render() {
      return createComponentVNode(2, OutputEditor, {
        "name": this.getValue('name'),
        "label": this.getValue('label'),
        "onChange": this.handleChange
      });
    }
  }
  OutputCellContextMenu.$inject = ['debounceInput', 'modeling'];

  class OutputEditingProvider {
    constructor(components, contextMenu, eventBus, renderer) {
      components.onGetComponent('cell', _ref => {
        let cellType = _ref.cellType;
        if (cellType === 'output-header') {
          return OutputCell;
        }
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType === 'output-edit') {
          return OutputCellContextMenu;
        }
      });
      eventBus.on('output.edit', _ref2 => {
        let event = _ref2.event,
          output = _ref2.output;
        const target = event.target;
        const node = closest(target, 'th', true);
        const _node$getBoundingClie = node.getBoundingClientRect(),
          left = _node$getBoundingClie.left,
          top = _node$getBoundingClie.top;
        const offset = getOffset(node);
        contextMenu.open({
          x: left,
          y: top,
          align: 'bottom-right'
        }, {
          contextMenuType: 'output-edit',
          output,
          offset
        });
      });
    }
  }
  OutputEditingProvider.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];
  function getOffset(element) {
    if (!matches(element, '.output-cell + .output-cell')) {
      return {
        x: -1,
        y: 0
      };
    }
  }

  function _defineProperty$m(obj, key, value) {
    key = _toPropertyKey$l(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$l(arg) {
    var key = _toPrimitive$l(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$l(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class InputCell extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$m(this, "onClick", event => {
        const input = this.props.input;
        this._eventBus.fire('input.edit', {
          event,
          input
        });
      });
      _defineProperty$m(this, "onContextmenu", event => {
        const id = this.props.input.id;
        this._eventBus.fire('cell.contextmenu', {
          event,
          id
        });
      });
      _defineProperty$m(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      mixin(this, ComponentWithSlots);
      this._translate = context.injector.get('translate');
    }
    componentWillMount() {
      const injector = this.context.injector;
      this._changeSupport = this.context.changeSupport;
      this._sheet = injector.get('sheet');
      this._eventBus = injector.get('eventBus');
      this._elementRegistry = injector.get('elementRegistry');
      const root = this._sheet.getRoot();
      const input = this.props.input;
      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
      this._changeSupport.onElementsChanged(input.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const root = this._sheet.getRoot();
      const input = this.props.input;
      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
      this._changeSupport.offElementsChanged(input.id, this.onElementsChanged);
    }
    render() {
      const _this$props = this.props,
        input = _this$props.input,
        index = _this$props.index,
        inputsLength = _this$props.inputsLength;
      const inputExpression = input.inputExpression,
        inputValues = input.inputValues;
      const label = input.get('label');
      const width = input.width ? input.width + 'px' : '192px';
      return createVNode(1, "th", "input-cell input-editor", [this.slotFills({
        type: 'cell-inner',
        context: {
          cellType: 'input-cell',
          col: this._elementRegistry.get(input.id),
          index,
          inputsLength
        },
        col: input
      }), createVNode(1, "div", "clause", index === 0 ? this._translate('When') : this._translate('And'), 0), label ? createVNode(1, "div", "input-label", label, 0, {
        "title": this._translate('Input Label')
      }) : createVNode(1, "div", "input-expression", inputExpression.text, 0, {
        "title": this._translate('Input Expression')
      }), createVNode(1, "div", "input-variable", inputValues && inputValues.text || this._translate(inputExpression.typeRef), 0, {
        "title": inputValues && inputValues.text ? this._translate('Input Values') : this._translate('Input Type')
      })], 0, {
        "data-col-id": input.id,
        "onDblClick": this.onClick,
        "onContextmenu": this.onContextmenu,
        "style": {
          width
        }
      });
    }
  }

  class InputEditor$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this.translate = context.injector ? context.injector.get('translate') : noopTranslate;
      this.handleValue = text => {
        let change = {
          text
        };
        this.handleChange(change);
      };
      this.handleLabelChange = value => {
        // default to <undefined> for empty string
        var label = value || undefined;
        this.handleChange({
          label
        });
      };
    }
    handleChange(changes) {
      var onChange = this.props.onChange;
      if (typeof onChange === 'function') {
        onChange(changes);
      }
    }
    render() {
      const _this$props = this.props,
        label = _this$props.label,
        text = _this$props.text;
      return createVNode(1, "div", "context-menu-container ref-input-editor input-edit", [createVNode(1, "div", "dms-form-control", createComponentVNode(2, ContentEditable, {
        "className": "dms-input-label",
        "value": label || '',
        "placeholder": this.translate('Input'),
        "singleLine": true,
        "onInput": this.handleLabelChange
      }), 2), createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", this.translate('Expression'), 0), createComponentVNode(2, ContentEditable, {
        "placeholder": this.translate('enter expression'),
        "className": ['ref-text', 'dms-input'].join(' '),
        "onInput": this.handleValue,
        "value": text || ''
      })], 4)], 4);
    }
  }
  function noopTranslate(str) {
    return str;
  }

  const _excluded$4 = ["label"];
  function ownKeys$4(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$4(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) {
        _defineProperty$l(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _objectWithoutProperties$3(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$3(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$3(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _defineProperty$l(obj, key, value) {
    key = _toPropertyKey$k(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$k(arg) {
    var key = _toPrimitive$k(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$k(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class InputCellContextMenu extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$l(this, "persistChanges", () => {
        const input = this.props.context.input;
        const unsaved = this.state.unsaved;
        if (!unsaved) {
          return;
        }
        const label = unsaved.label,
          inputExpressionProperties = _objectWithoutProperties$3(unsaved, _excluded$4);
        var changes = {};
        if ('label' in unsaved) {
          changes.label = label;
        }
        if (hasKeys(inputExpressionProperties)) {
          changes.inputExpression = inputExpressionProperties;
        }
        this.modeling.updateProperties(input, changes);
        this.setState({
          unsaved: false
        });
      });
      _defineProperty$l(this, "handleChange", changes => {
        this.setState({
          unsaved: _objectSpread$4(_objectSpread$4({}, this.state.unsaved), changes)
        }, this.persistChanges);
      });
      this.state = {};
      inject(this);
      this.persistChanges = this.debounceInput(this.persistChanges);
    }
    getValue(attr) {
      let input = this.props.context.input;
      const unsaved = this.state.unsaved;
      let target = input;

      // input variable stored in parent
      if (attr === 'text') {
        target = target.inputExpression;
      }
      return unsaved && attr in unsaved ? unsaved[attr] : target.get(attr);
    }
    render() {
      return createComponentVNode(2, InputEditor$1, {
        "label": this.getValue('label'),
        "text": this.getValue('text'),
        "onChange": this.handleChange
      });
    }
  }
  InputCellContextMenu.$inject = ['debounceInput', 'modeling', 'injector'];

  // helpers //////////////////////

  function hasKeys(obj) {
    return Object.keys(obj).length;
  }

  class InputCellProvider {
    constructor(components, contextMenu, eventBus, renderer) {
      components.onGetComponent('cell', _ref => {
        let cellType = _ref.cellType;
        if (cellType === 'input-header') {
          return InputCell;
        }
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType === 'input-edit') {
          return InputCellContextMenu;
        }
      });
      eventBus.on('input.edit', _ref2 => {
        let event = _ref2.event,
          input = _ref2.input;
        const target = event.target;
        const node = closest(target, 'th', true);
        const _node$getBoundingClie = node.getBoundingClientRect(),
          left = _node$getBoundingClie.left,
          top = _node$getBoundingClie.top;
        contextMenu.open({
          x: left,
          y: top,
          align: 'bottom-right'
        }, {
          contextMenuType: 'input-edit',
          input
        });
      });
    }
  }
  InputCellProvider.$inject = ['components', 'contextMenu', 'eventBus', 'renderer'];

  function _defineProperty$k(obj, key, value) {
    key = _toPropertyKey$j(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$j(arg) {
    var key = _toPrimitive$j(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$j(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class InputSelect extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$k(this, "onChange", value => {
        this.setState({
          value
        });
        const onChange = this.props.onChange;
        if (typeof onChange !== 'function') {
          return;
        }
        onChange(value);
      });
      _defineProperty$k(this, "onInputClick", event => {
        event.preventDefault();
        event.stopPropagation();
        this.setOptionsVisible(!this.state.optionsVisible);
        this.focusInput();
      });
      _defineProperty$k(this, "onInput", event => {
        const value = event.target.value;
        this.onChange(value);
      });
      _defineProperty$k(this, "onOptionClick", (value, event) => {
        event.preventDefault();
        event.stopPropagation();
        this.setOptionsVisible(false);
        this.onChange(value);
        this.focusInput();
      });
      _defineProperty$k(this, "onFocusChanged", evt => {
        this.checkClose(evt.target);
      });
      _defineProperty$k(this, "onGlobalClick", evt => {
        this.checkClose(evt.target);
      });
      _defineProperty$k(this, "onKeyDown", evt => {
        const optionsVisible = this.state.optionsVisible;
        var code = evt.which;

        // DOWN or UP
        if (code === 40 || code === 38) {
          evt.stopPropagation();
          evt.preventDefault();
          if (!optionsVisible) {
            this.setOptionsVisible(true);
          } else {
            this.select(code === 40 ? 1 : -1);
          }
        }
        if (optionsVisible) {
          // ENTER
          // ESC
          if (code === 13 || code === 27) {
            evt.stopPropagation();
            evt.preventDefault();
            this.setOptionsVisible(false);
          }
        }
      });
      _defineProperty$k(this, "onKeyboard", keycode => {
        const optionsVisible = this.state.optionsVisible;
        if (!optionsVisible) {
          return;
        }

        // close on ESC
        if (keycode === 27) {
          this.setOptionsVisible(false);
          return true;
        }
      });
      inject(this);
      const _value = props.value;
      this.state = {
        value: _value,
        optionsVisible: false
      };
      this._portalEl = null;
    }
    componentDidMount() {
      document.addEventListener('mousedown', this.onGlobalClick);
      document.addEventListener('focusin', this.onFocusChanged);
      this.keyboard.addListener(this.onKeyboard);
    }
    componentWillUnmount() {
      document.removeEventListener('focusin', this.onFocusChanged);
      document.removeEventListener('mousedown', this.onGlobalClick);
      this.keyboard.removeListener(this.onKeyboard);
      this.removePortalEl();
    }
    componentWillReceiveProps(props) {
      const value = props.value;
      this.setState({
        value
      });
    }
    componentWillUpdate(nextProps, nextState) {
      const optionsVisible = nextState.optionsVisible;
      if (optionsVisible) {
        if (!this._portalEl) {
          this.addPortalEl();
        }
      } else {
        if (this._portalEl) {
          this.removePortalEl();
        }
      }
    }
    componentDidUpdate() {
      const optionsVisible = this.state.optionsVisible;
      if (!optionsVisible || !this.inputNode) {
        return;
      }
      const optionsBounds = this.getOptionsBounds();
      assign$4(this._portalEl.style, optionsBounds);
    }
    getOptionsBounds() {
      const container = this.renderer.getContainer();
      const _container$getBoundin = container.getBoundingClientRect(),
        containerTop = _container$getBoundin.top,
        containerLeft = _container$getBoundin.left,
        containerBottom = _container$getBoundin.bottom;
      const _this$inputNode$getBo = this.inputNode.getBoundingClientRect(),
        inputTop = _this$inputNode$getBo.top,
        inputLeft = _this$inputNode$getBo.left,
        width = _this$inputNode$getBo.width,
        height = _this$inputNode$getBo.height,
        inputBottom = _this$inputNode$getBo.bottom;
      const top = inputTop + height - containerTop + container.scrollTop;
      const left = inputLeft - containerLeft + container.scrollLeft;
      const bounds = {
        top: "".concat(top, "px"),
        left: "".concat(left, "px"),
        width: "".concat(width, "px"),
        'max-height': "calc(100% - ".concat(top, "px)")
      };

      // open the options upwards when not even one option (=input height) fits
      if (containerBottom - inputBottom < height) {
        const bottom = containerBottom - inputTop;
        bounds.bottom = "".concat(bottom, "px");
        bounds['max-height'] = "calc(100% - ".concat(bottom, ")");
        delete bounds.top;
      }
      return bounds;
    }
    addPortalEl() {
      this._portalEl = domify$1('<div class="dms-select-options"></div>');
      const container = this.renderer.getContainer();
      container.appendChild(this._portalEl);

      // suppress mousedown event propagation to handle click events inside the component
      this._portalEl.addEventListener('mousedown', stopPropagation);
    }
    removePortalEl() {
      if (this._portalEl) {
        this._portalEl.removeEventListener('mousedown', stopPropagation);
        remove$4(this._portalEl);
        this._portalEl = null;
      }
    }
    /**
     * Focus input node
     */
    focusInput() {
      const node = this.inputNode;
      node.focus();

      // move cursor to end of input
      if ('selectionStart' in node) {
        node.selectionStart = 100000;
      }
    }
    checkClose(focusTarget) {
      if (this._portalEl && !this._portalEl.contains(focusTarget) && !this.parentNode.contains(focusTarget)) {
        this.setOptionsVisible(false);
      }
    }
    select(direction) {
      const options = this.props.options;
      const value = this.state.value;
      if (!options) {
        return;
      }
      const option = options.filter(o => o.value === value)[0];
      const idx = option ? options.indexOf(option) : -1;
      const nextIdx = idx === -1 ? direction === 1 ? 0 : options.length - 1 : (idx + direction) % options.length;
      const nextOption = options[nextIdx < 0 ? options.length + nextIdx : nextIdx];
      this.onChange(nextOption.value);
    }
    setOptionsVisible(optionsVisible) {
      this.setState({
        optionsVisible
      });
    }
    renderOptions(options, activeOption) {
      return createVNode(1, "div", "options", options.map(option => {
        return createVNode(1, "div", ['option', activeOption === option ? 'active' : ''].join(' '), option.label, 0, {
          "data-value": option.value,
          "onClick": e => this.onOptionClick(option.value, e)
        });
      }), 0);
    }
    render() {
      const _this$props = this.props,
        className = _this$props.className,
        options = _this$props.options,
        noInput = _this$props.noInput,
        title = _this$props.title;
      const _this$state = this.state,
        optionsVisible = _this$state.optionsVisible,
        value = _this$state.value;
      const option = options ? options.filter(o => o.value === value)[0] : false;
      const label = option ? option.label : value;
      return createVNode(1, "div", [className || '', 'dms-input-select'].join(' '), [noInput ? createVNode(1, "div", "dms-input", label, 0, {
        "tabindex": "0",
        "onKeyDown": this.onKeyDown
      }, null, node => this.inputNode = node) : createVNode(64, "input", "dms-input", null, 1, {
        "onInput": this.onInput,
        "onKeyDown": this.onKeyDown,
        "spellcheck": "false",
        "type": "text",
        "value": value
      }, null, node => this.inputNode = node), createVNode(1, "span", ['dms-input-select-icon', optionsVisible ? 'dmn-icon-up' : 'dmn-icon-down'].join(' ')), optionsVisible && createPortal(this.renderOptions(options, option), this._portalEl)], 0, {
        "title": title,
        "onClick": this.onInputClick
      }, null, node => this.parentNode = node);
    }
  }
  InputSelect.$inject = ['keyboard', 'renderer'];

  // helper ////
  function stopPropagation(event) {
    event.stopPropagation();
  }

  function _defineProperty$j(obj, key, value) {
    key = _toPropertyKey$i(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$i(arg) {
    var key = _toPrimitive$i(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$i(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class TypeRefCellContextMenu extends Component {
    constructor(props, context) {
      super(props);
      _defineProperty$j(this, "onTypeChange", value => {
        const element = this.getElement();
        const actualElement = is(element, 'dmn:LiteralExpression') ? element.$parent : element;
        let newProperties;
        if (isInput$1(actualElement)) {
          newProperties = {
            inputExpression: {
              typeRef: value
            }
          };
        } else if (isOutput(actualElement)) {
          newProperties = {
            typeRef: value
          };
        }
        this._modeling.updateProperties(actualElement, newProperties);
      });
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      this._dataTypes = context.injector.get('dataTypes');
    }
    getElement() {
      return this.props.context.input || this.props.context.output;
    }
    render() {
      const element = this.getElement();
      const typeRef = (is(element, 'dmn:InputClause') ? element.inputExpression : element).typeRef;
      const typeRefOptions = this._dataTypes.getAll().map(t => {
        return {
          label: this._translate(t),
          value: t
        };
      });
      return createVNode(1, "div", "type-ref-edit context-menu-container", createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", [this._translate('Type'), createTextVNode(":")], 0), createComponentVNode(2, InputSelect, {
        "className": "type-ref-edit-select",
        "onChange": this.onTypeChange,
        "options": typeRefOptions,
        "value": typeRef
      })], 4), 2);
    }
  }

  const LOW_PRIORITY$5 = 750;
  class TypeRef {
    constructor(components) {
      components.onGetComponent('context-menu', LOW_PRIORITY$5, function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const contextMenuType = context.contextMenuType;
        if (contextMenuType === 'input-edit' || contextMenuType === 'output-edit') {
          return TypeRefCellContextMenu;
        }
      });
    }
  }
  TypeRef.$inject = ['components'];

  var TypeRefEditing = {
    __depends__: [contextMenuModule, DataTypesModule],
    __init__: ['typeRefEditingProvider'],
    typeRefEditingProvider: ['type', TypeRef]
  };

  /**
   * Makes sure allowed values are removed if type is set to
   * something other than string.
   */
  class AllowedValuesUpdateBehavior extends CommandInterceptor {
    constructor(eventBus, modeling) {
      super(eventBus);
      this.postExecuted('element.updateProperties', event => {
        const _event$context = event.context,
          element = _event$context.element,
          properties = _event$context.properties;
        const actualProperties = isInput$1(element) ? properties.inputExpression : properties;
        if (actualProperties && actualProperties.typeRef && actualProperties.typeRef !== 'string') {
          const target = is(element, 'dmn:LiteralExpression') ? element.$parent : element;

          // delete allowed values
          modeling.editAllowedValues(target, null);
        }
      });
    }
  }
  AllowedValuesUpdateBehavior.$inject = ['eventBus', 'modeling'];

  function _defineProperty$i(obj, key, value) {
    key = _toPropertyKey$h(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$h(arg) {
    var key = _toPrimitive$h(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$h(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const RADIO = 'radio';
  const REMOVE_BTN_CLS = 'remove dmn-icon-clear';

  /**
   * Shows a list of grouped items that can be checked
   * (checkboxes or radio buttons), removed.
   *
   * Example list of items:
   *
   * [
   *   { value: 'foo', isChecked: true, isRemovable: false, group: 'foo' },
   *   { value: 'bar', isChecked: false, isRemovable: true, group: 'bar' },
   *   { value: 'baz', isCheckable: false, group: 'baz' }
   * ]
   */
  class List extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$i(this, "getRemoveClickHandler", item => {
        return e => {
          e.stopPropagation();
          this.removeItem(item);
        };
      });
      _defineProperty$i(this, "getToggleClickHandler", item => {
        return e => {
          e.stopPropagation();
          this.toggleItem(item);
        };
      });
      _defineProperty$i(this, "removeItem", item => {
        const onChange = this.props.onChange;

        // remove item
        const newItems = this.state.items.filter(i => i !== item);
        this.setState({
          items: newItems
        });
        onChange && onChange(newItems);
      });
      _defineProperty$i(this, "toggleItem", item => {
        const _this$props = this.props,
          onChange = _this$props.onChange,
          type = _this$props.type;

        // toggle item
        const newItems = this.state.items.map(i => {
          if (i === item) {
            i.isChecked = !i.isChecked;
          } else {
            if (type === RADIO) {
              i.isChecked = false;
            }
          }
          return i;
        });
        this.setState({
          items: newItems
        });
        onChange && onChange(newItems);
      });
      const items = props.items;
      this.state = {
        items
      };
    }
    componentWillReceiveProps(props) {
      const items = props.items;
      this.setState({
        items
      });
    }
    render() {
      const _this$props2 = this.props,
        className = _this$props2.className,
        items = _this$props2.items,
        type = _this$props2.type,
        labelComponent = _this$props2.labelComponent;
      const classes = ['dms-list-component'];
      if (className) {
        classes.push(className);
      }

      // group items by group title
      const groupedItems = groupBy(items, 'group');
      const asPairs = toPairs(groupedItems);
      return createVNode(1, "div", classes.join(' '), asPairs.map(pair => {
        const groupTitle = pair[0],
          groupItems = pair[1];
        return createVNode(1, "div", "group", [labelComponent && labelComponent(groupTitle) || createVNode(1, "h4", "dms-heading", groupTitle, 0), createVNode(1, "ul", "items no-wrap", groupItems.map(item => {
          return createVNode(1, "li", "item", [type && createVNode(64, "input", "item-toggle", null, 1, {
            "type": type,
            "checked": item.isChecked,
            "onClick": this.getToggleClickHandler(item)
          }), createTextVNode("\xA0"), item.value, item.isRemovable && createVNode(1, "span", REMOVE_BTN_CLS, null, 1, {
            "title": "Remove item",
            "onClick": this.getRemoveClickHandler(item)
          })], 0);
        }), 0)], 0);
      }), 0);
    }
  }

  // helpers ////////////

  function toPairs(object) {
    const entrys = [];
    for (let key in object) {
      entrys.push([key, object[key]]);
    }
    return entrys;
  }

  /**
   * Input with optional validation.
   */
  class ValidatedInput extends Component {
    constructor(props, context) {
      super(props, context);
      const validate = props.validate,
        value = props.value;
      const validationWarning = validate ? validate(value || '') : undefined;
      this.state = {
        validationWarning,
        value
      };
      this.onInput = this.onInput.bind(this);
      this.onKeyDown = this.onKeyDown.bind(this);
      this.onKeyUp = this.onKeyUp.bind(this);
    }
    componentWillReceiveProps(props) {
      const validate = props.validate,
        value = props.value;
      const validationWarning = validate ? validate(value || '') : undefined;
      this.setState({
        validationWarning,
        value
      });
    }
    onInput(value) {
      const _this$props = this.props,
        onInput = _this$props.onInput,
        validate = _this$props.validate;
      const validationWarning = validate ? validate(value) : undefined;
      this.setState({
        validationWarning,
        value
      });
      if (typeof onInput !== 'function') {
        return;
      }
      onInput && onInput({
        isValid: !validationWarning,
        value
      });
    }
    onKeyDown(event) {
      const target = event.target,
        value = target.value;
      const _this$props2 = this.props,
        onKeyDown = _this$props2.onKeyDown,
        validate = _this$props2.validate;
      const validationWarning = validate ? validate(value) : undefined;
      if (typeof onKeyDown !== 'function') {
        return;
      }
      onKeyDown({
        isValid: !validationWarning,
        value,
        event
      });
    }
    onKeyUp(event) {
      const target = event.target,
        value = target.value;
      const _this$props3 = this.props,
        onKeyUp = _this$props3.onKeyUp,
        validate = _this$props3.validate;
      const validationWarning = validate ? validate(value) : undefined;
      if (typeof onKeyUp !== 'function') {
        return;
      }
      onKeyUp({
        isValid: !validationWarning,
        value,
        event
      });
    }
    render() {
      const _this$props4 = this.props,
        placeholder = _this$props4.placeholder,
        type = _this$props4.type,
        className = _this$props4.className;
      const _this$state = this.state,
        validationWarning = _this$state.validationWarning,
        value = _this$state.value;
      const parentClasses = ['dms-validated-input', className].join(' ');
      const inputClasses = [];
      if (validationWarning) {
        inputClasses.push('invalid');
      }
      return createVNode(1, "div", parentClasses, [createComponentVNode(2, Input, {
        "className": inputClasses,
        "onInput": this.onInput,
        "onKeyDown": this.onKeyDown,
        "onKeyUp": this.onKeyUp,
        "placeholder": placeholder || '',
        "type": type,
        "value": value || ''
      }), validationWarning && createVNode(1, "p", "dms-hint dms-validation-warning", validationWarning, 0)], 0);
    }
  }

  function parseString$7(string) {
    // empty string or no string at all
    if (!string || isEmptyString$4(string.trim())) {
      return {
        values: []
      };
    }

    // disjunction
    let values = string.split(',');
    const result = {
      values: []
    };
    let openString = '';
    values.forEach(value => {
      openString += value;
      if (/^"[^"]*"$/.test(openString.trim())) {
        result.values.push(openString.trim());
        openString = '';
      } else {
        openString += ',';
      }
    });
    if (!openString) {
      return result;
    }
  }
  function isEmptyString$4(string) {
    return string === '';
  }
  function getValuesArray(values) {
    return values.map(value => value.value);
  }

  function _defineProperty$h(obj, key, value) {
    key = _toPropertyKey$g(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$g(arg) {
    var key = _toPrimitive$g(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$g(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class AllowedValuesEditing$1 extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$h(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$h(this, "setPredefinedValues", values => {
        // inputClause or outputClause
        const target = this.getAllowedValuesTarget();
        this.setState({
          values
        });
        this._modeling.editAllowedValues(target, values && getValuesArray(values));
      });
      _defineProperty$h(this, "onListChange", values => {
        this.setPredefinedValues(values);
      });
      _defineProperty$h(this, "onInput", _ref => {
        _ref.isValid;
          let value = _ref.value;
        this.setState({
          inputValue: value
        });
      });
      _defineProperty$h(this, "onKeyDown", _ref2 => {
        let isValid = _ref2.isValid,
          event = _ref2.event;
        if (!isEnter$1(event.keyCode)) {
          return;
        }
        event.stopPropagation();
        event.preventDefault();
        if (isValid) {
          const _this$state = this.state,
            inputValue = _this$state.inputValue,
            values = _this$state.values;
          const parsedString = parseString$7(inputValue);
          this.onListChange((values || []).concat(parsedString.values.map(value => {
            return {
              value,
              isCheckable: false,
              isRemovable: true,
              group: this._translate('Predefined Values')
            };
          })));
          this.setState({
            inputValue: ''
          });
        }
      });
      _defineProperty$h(this, "handleRemovePredifinedValuesClick", e => {
        e.stopPropagation();
        this.removePredefinedValues();
      });
      _defineProperty$h(this, "removePredefinedValues", () => {
        this.setPredefinedValues(null);
      });
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      this._changeSupport = context.changeSupport;
      const _target = this.getAllowedValuesTarget();
      const _parsedString = parseString$7(_target.inputValues && _target.inputValues.text || _target.outputValues && _target.outputValues.text || '');
      if (_parsedString) {
        this.state = {
          values: _parsedString.values.map(value => {
            return {
              value,
              isCheckable: false,
              isRemovable: true,
              group: this._translate('Predefined Values')
            };
          }),
          inputValue: ''
        };
      } else {
        this.state = {
          values: null,
          inputValue: ''
        };
      }
    }
    componentWillMount() {
      const target = this.getAllowedValuesTarget();
      this._changeSupport.onElementsChanged(target.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const target = this.getAllowedValuesTarget();
      this._changeSupport.offElementsChanged(target.id, this.onElementsChanged);
    }
    getAllowedValuesTarget() {
      const element = this.getElement();
      if (is(element, 'dmn:LiteralExpression')) {
        return element.$parent;
      } else {
        return element;
      }
    }
    getElement() {
      return this.props.context.output || this.props.context.input.inputExpression;
    }
    render() {
      const element = this.getElement();
      const _this$state2 = this.state,
        inputValue = _this$state2.inputValue,
        values = _this$state2.values;
      return element.typeRef === 'string' ? createVNode(1, "div", "context-menu-container allowed-values-edit", createVNode(1, "div", "dms-form-control", [!isNull$1(values) && values.length > 0 && createComponentVNode(2, List, {
        "labelComponent": Label,
        "items": values,
        "onChange": this.onListChange
      }), !isNull$1(values) && !values.length && createVNode(1, "div", null, [createVNode(1, "label", "dms-label", this._translate('Predefined Values'), 0), createVNode(1, "span", "placeholder", this._translate('No values'), 0)], 4), !isNull$1(values) && createVNode(1, "p", "dms-hint", createVNode(1, "button", "del-values", this._translate('Clear predefined values.'), 0, {
        "type": "button",
        "onClick": this.handleRemovePredifinedValuesClick
      }), 2), createVNode(1, "label", "dms-label", this._translate('Add Predefined Values'), 0), createComponentVNode(2, ValidatedInput, {
        "onInput": this.onInput,
        "onKeyDown": this.onKeyDown,
        "placeholder": this._translate('"value", "value", ...'),
        "type": "text",
        "validate": value => {
          if (!parseString$7(value)) {
            return this._translate('Strings must be in double quotes.');
          }
        },
        "value": inputValue
      })], 0), 2) : null;
    }
  }
  function Label(label) {
    return createVNode(1, "label", "dms-label", label, 0);
  }

  // helpers //////////////////////

  function isEnter$1(keyCode) {
    return keyCode === 13;
  }
  function isNull$1(value) {
    return value === null;
  }

  const LOW_PRIORITY$4 = 500;
  class InputOutputValues {
    constructor(components) {
      components.onGetComponent('context-menu', LOW_PRIORITY$4, function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const contextMenuType = context.contextMenuType;
        if (contextMenuType === 'input-edit' || contextMenuType === 'output-edit') {
          return AllowedValuesEditing$1;
        }
      });
    }
  }
  InputOutputValues.$inject = ['components'];

  var AllowedValuesEditing = {
    __init__: ['allowedValuesUpdateBehavior', 'allowedValuesEditingProvider'],
    allowedValuesUpdateBehavior: ['type', AllowedValuesUpdateBehavior],
    allowedValuesEditingProvider: ['type', InputOutputValues]
  };

  function _defineProperty$g(obj, key, value) {
    key = _toPropertyKey$f(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$f(arg) {
    var key = _toPrimitive$f(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$f(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class AddInput extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$g(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$g(this, "handleClick", e => {
        e.stopPropagation();
        this.add();
      });
      _defineProperty$g(this, "add", () => {
        this._eventBus.fire('addInput');
      });
      this._sheet = context.injector.get('sheet');
      this._eventBus = context.injector.get('eventBus');
      this._changeSupport = context.changeSupport;
      this._translate = context.injector.get('translate');
    }
    componentWillMount() {
      const root = this.getRoot();
      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const root = this.getRoot();
      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
    }
    getRoot() {
      return this._sheet.getRoot();
    }
    render() {
      return createVNode(1, "div", "add-input actionable", createVNode(1, "span", "dmn-icon-plus action-icon"), 2, {
        "onClick": this.handleClick,
        "title": this._translate('Add Input')
      });
    }
  }

  function _defineProperty$f(obj, key, value) {
    key = _toPropertyKey$e(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$e(arg) {
    var key = _toPrimitive$e(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$e(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class AddOutput extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$f(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$f(this, "handleClick", e => {
        e.stopPropagation();
        this.add();
      });
      _defineProperty$f(this, "add", () => {
        this._eventBus.fire('addOutput');
      });
      this._sheet = context.injector.get('sheet');
      this._eventBus = context.injector.get('eventBus');
      this._changeSupport = context.changeSupport;
      this._translate = context.injector.get('translate');
    }
    componentWillMount() {
      const root = this.getRoot();
      this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const root = this.getRoot();
      this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
    }
    getRoot() {
      return this._sheet.getRoot();
    }
    render() {
      return createVNode(1, "div", "add-output actionable", createVNode(1, "span", "dmn-icon-plus action-icon"), 2, {
        "onClick": this.handleClick,
        "title": this._translate('Add Output')
      });
    }
  }

  function AddInputOutputProvider(components, editorActions, eventBus) {
    components.onGetComponent('cell-inner', function () {
      let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const cellType = context.cellType,
        index = context.index,
        inputsLength = context.inputsLength,
        outputsLength = context.outputsLength;
      if (cellType === 'input-cell' && index === inputsLength - 1) {
        return AddInput;
      }
      if (cellType === 'output-cell' && index === outputsLength - 1) {
        return AddOutput;
      }
    });
    eventBus.on('addInput', () => {
      editorActions.trigger('addInput');
    });
    eventBus.on('addOutput', () => {
      editorActions.trigger('addOutput');
    });
  }
  AddInputOutputProvider.$inject = ['components', 'editorActions', 'eventBus'];

  var AddInputOutput = {
    __depends__: [decisionTableEditorActionsModule],
    __init__: ['addInputOutputProvider'],
    addInputOutputProvider: ['type', AddInputOutputProvider]
  };

  function _defineProperty$e(obj, key, value) {
    key = _toPropertyKey$d(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$d(arg) {
    var key = _toPrimitive$d(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$d(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * A keyboard abstraction that may be activated and
   * deactivated by users at will, consuming key events
   * and triggering diagram actions.
   *
   * The implementation fires the following key events that allow
   * other components to hook into key handling:
   *
   *  - keyboard.bind
   *  - keyboard.unbind
   *  - keyboard.init
   *  - keyboard.destroy
   *
   * All events contain the fields (node, listeners).
   *
   * A default binding for the keyboard may be specified via the
   * `keyboard.bindTo` configuration option.
   *
   * @param {Config} config
   * @param {EventBus} eventBus
   * @param {EditorActions} editorActions
   * @param {CellSelection} cellSelection
   */
  class Keyboard$1 {
    constructor(config, eventBus, editorActions, cellSelection) {
      _defineProperty$e(this, "_init", () => {
        this._registerDefaultBindings();
        this._fire('init');
      });
      _defineProperty$e(this, "_destroy", () => {
        this._fire('destroy');
        this.unbind();
        this._listeners = null;
      });
      _defineProperty$e(this, "_keyHandler", event => {
        var i,
          l,
          listeners = this._listeners,
          code = event.keyCode || event.charCode || -1;
        for (i = 0; l = listeners[i]; i++) {
          if (l(code, event)) {
            event.preventDefault();
            event.stopPropagation();
            return;
          }
        }
      });
      _defineProperty$e(this, "unbind", () => {
        var node = this._node;
        if (node) {
          this._fire('unbind');

          // unbind key events
          event.unbind(node, 'keydown', this._keyHandler, true);
        }
        this._node = null;
      });
      this._config = config || {};
      this._editorActions = editorActions;
      this._eventBus = eventBus;
      this._cellSelection = cellSelection;
      this._listeners = [];
      eventBus.on('table.destroy', this._destroy);
      eventBus.on('table.init', this._init);
      eventBus.on('attach', () => {
        if (this._config.bindTo) {
          this.bind(config.bindTo);
        }
      });
      eventBus.on('detach', this.unbind);
    }
    bind(node) {
      // make sure that the keyboard is only bound once to the DOM
      this.unbind();
      this._node = node;

      // bind key events
      event.bind(node, 'keydown', this._keyHandler, true);
      this._fire('bind');
    }
    getBinding() {
      return this._node;
    }
    _fire(event) {
      this._eventBus.fire('keyboard.' + event, {
        node: this._node,
        listeners: this._listeners
      });
    }
    _registerDefaultBindings() {
      var listeners = this._listeners;
      var editorActions = this._editorActions;
      var cellSelection = this._cellSelection;

      // init default listeners

      // undo
      // (CTRL|CMD) + Z
      function undo(key, modifiers) {
        if (isCmd$2(modifiers) && !isShift$1(modifiers) && key === 90) {
          editorActions.trigger('undo');
          return true;
        }
      }

      // redo
      // CTRL + Y
      // CMD + SHIFT + Z
      function redo(key, modifiers) {
        if (isCmd$2(modifiers) && (key === 89 || key === 90 && isShift$1(modifiers))) {
          editorActions.trigger('redo');
          return true;
        }
      }
      listeners.push(undo);
      listeners.push(redo);
      function selectCellAbove(key, event) {
        if (key !== 13 || isCmd$2(event) || !isShift$1(event)) {
          return;
        }
        if (!findSelectableAncestor(event.target)) {
          return;
        }
        editorActions.trigger('selectCellAbove');
        return true;
      }
      listeners.push(selectCellAbove);
      function selectCellBelow(key, event) {
        if (key !== 13 || isCmd$2(event) || isShift$1(event)) {
          return;
        }
        if (!findSelectableAncestor(event.target)) {
          return;
        }
        const changed = editorActions.trigger('selectCellBelow');
        const selectedCell = cellSelection.getCellSelection();

        // add new rule if no next rule
        if (!changed && selectedCell && !isDecisionNameCell(selectedCell)) {
          const rule = editorActions.trigger('addRule');
          editorActions.trigger('selectCellBelow');
          return rule;
        }
        return true;
      }
      listeners.push(selectCellBelow);
    }

    /**
     * Add a listener function that is notified with (key, modifiers) whenever
     * the keyboard is bound and the user presses a key.
     *
     * @param {Function} listenerFn
     */
    addListener(listenerFn) {
      this._listeners.unshift(listenerFn);
    }
    removeListener(listenerFn) {
      this._listeners = this._listeners.filter(l => l !== listenerFn);
    }
  }
  Keyboard$1.$inject = ['config.keyboard', 'eventBus', 'editorActions', 'cellSelection'];

  // helper /////
  function isDecisionNameCell(cell) {
    return cell === '__decisionProperties_name';
  }

  var keyboardModule = {
    __depends__: [decisionTableEditorActionsModule],
    __init__: ['keyboard'],
    keyboard: ['type', Keyboard$1]
  };

  var decisionTableHeadEditorModule = {
    __depends__: [AddInputOutput, AllowedValuesEditing, contextMenuModule, DebounceInput, ExpressionLanguagesModule, keyboardModule, TypeRefEditing],
    __init__: ['inputEditingProvider', 'outputEditingProvider'],
    inputEditingProvider: ['type', InputCellProvider],
    outputEditingProvider: ['type', OutputEditingProvider]
  };

  function _defineProperty$d(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  const TARGET_SELECTOR = `.dmn-decision-table-container td,
   .dmn-decision-table-container th`;
  class DragAndDrop$2 {
    constructor(eventBus, renderer, modeling, sheet) {
      _defineProperty$d(this, "handleDragOver", event => {
        // we're taking over (!)
        stopEvent(event);
        const targetEl = event.target;
        const cellEl = closest(targetEl, TARGET_SELECTOR, true);
        let allowed = !!cellEl;
        const {
          hoverEl
        } = this._dragContext; // drag leave

        if (hoverEl && hoverEl !== cellEl) {
          this._emit('dragAndDrop.dragLeave', event); // unset target element

          this._dragContext.targetEl = null; // unset hover element

          this._dragContext.hoverEl = null;
        }
        if (cellEl) {
          // drag enter
          if (cellEl !== hoverEl) {
            // new hover element
            this._dragContext.hoverEl = cellEl;
            allowed = this._emit('dragAndDrop.dragEnter', event);
            if (allowed !== false) {
              // new targetEl
              this._dragContext.targetEl = cellEl;
            }
          } // drag over

          allowed = this._emit('dragAndDrop.dragOver', event);
        }
        event.dataTransfer.dropEffect = allowed !== false ? 'move' : 'none';
      });
      _defineProperty$d(this, "handleDrop", event => {
        // prevent default drop action
        // QUIRK: Firefox will redirect if not prevented
        stopEvent(event);
        const target = this._emit('dragAndDrop.drop', event);
        if (target) {
          const {
            draggedElement
          } = this._dragContext;
          if (draggedElement instanceof Row) {
            const {
              rows
            } = this._sheet.getRoot();
            let index = rows.indexOf(target);
            this._modeling.moveRow(draggedElement, index);
          } else if (draggedElement instanceof Col) {
            const {
              cols
            } = this._sheet.getRoot();
            let index = cols.indexOf(target);
            this._modeling.moveCol(draggedElement, index);
          }
        } // manually call to drag end needed, as we prevent the default
        // browser behavior / drag end handling via
        // event.preventDefault();

        this.handleDragEnd(event);
      });
      _defineProperty$d(this, "handleDragEnd", event => {
        // prevent default drop action
        stopEvent(event);
        this._unbindListeners();
        this._emit('dragAndDrop.dragEnd', event);
        this._dragContext = null;
      });
      this._eventBus = eventBus;
      this._renderer = renderer;
      this._modeling = modeling;
      this._sheet = sheet;
      this._dragContext = null;
      eventBus.on('table.destroy', () => {
        this._unbindListeners();
      });
    }
    _bindListeners() {
      event.bind(document, 'dragover', this.handleDragOver);
      event.bind(document, 'drop', this.handleDrop);
      event.bind(document, 'dragend', this.handleDragEnd);
    }
    _unbindListeners() {
      event.unbind(document, 'dragover', this.handleDragOver);
      event.unbind(document, 'drop', this.handleDrop);
      event.unbind(document, 'dragend', this.handleDragEnd);
    }
    _emit(eventName, originalEvent) {
      return this._eventBus.fire(eventName, {
        dragContext: this._dragContext,
        originalEvent
      });
    }
    startDrag(element, event) {
      stopEvent(event, true);
      event.dataTransfer.effectAllowed = 'move'; // QUIRK: Firefox won't fire events unless data was set

      if (event.dataTransfer.setData) {
        event.dataTransfer.setData('text', '__DUMMY');
      }
      this._dragContext = {
        draggedElement: element
      };
      this._bindListeners();
      this._emit('dragAndDrop.dragStart', event);
    }
  }
  DragAndDrop$2.$inject = ['eventBus', 'renderer', 'modeling', 'sheet']; // helpers /////////////////

  function stopEvent(event, preventDefault) {
    event.stopPropagation();
    if (preventDefault !== true) {
      event.preventDefault();
    }
  }

  var DragAndDrop$1 = {
    __init__: ['dragAndDrop'],
    dragAndDrop: ['type', DragAndDrop$2]
  };

  function _defineProperty$c(obj, key, value) {
    key = _toPropertyKey$c(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$c(arg) {
    var key = _toPrimitive$c(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$c(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const TOP = 'top',
    RIGHT = 'right',
    BOTTOM = 'bottom',
    LEFT = 'left';
  class DragAndDrop {
    constructor(components, elementRegistry, eventBus, dragAndDrop, renderer, rules, sheet) {
      _defineProperty$c(this, "_cleanup", () => {
        const container = this._renderer.getContainer();
        removeHighlight(container);
        removeFadeOut(container);
        if (this._dragImage) {
          remove$4(this._dragImage);
          this._dragImage = null;
        }
      });
      this._elementRegistry = elementRegistry;
      this._dragAndDrop = dragAndDrop;
      this._renderer = renderer;
      this._rules = rules;
      this._sheet = sheet;

      // provide drag handle for drag and drop
      components.onGetComponent('cell-inner', _ref => {
        let cellType = _ref.cellType,
          col = _ref.col,
          row = _ref.row;
        if (cellType === 'rule-index') {
          return () => createVNode(1, "span", "dmn-icon-drag vertical", createTextVNode("\xA0"), 2, {
            "draggable": "true",
            "onDragStart": e => this.startDrag(row, e),
            "title": "Move rule"
          });
        } else if (cellType === 'input-cell' || cellType === 'output-cell') {
          let title = "Move ".concat(isInput$1(col) ? 'Input' : 'Output');
          return () => createVNode(1, "span", "dmn-icon-drag horizontal", null, 1, {
            "draggable": "true",
            "onDragStart": e => this.startDrag(col, e),
            "title": title
          });
        }
      });

      // validate allowed rules
      eventBus.on('dragAndDrop.dragEnter', event => {
        const dragContext = event.dragContext;
        const draggedElement = dragContext.draggedElement,
          hoverEl = dragContext.hoverEl;

        // can always drag rows
        if (draggedElement instanceof Row) {
          return true;
        }
        if (draggedElement instanceof Col) {
          const dropIndex = getTargetColIndex(hoverEl, this._elementRegistry, this._sheet);

          // cannot drop as we cannot compute the drop index
          if (dropIndex === -1) {
            return false;
          }
          const allowed = this._rules.allowed('col.move', {
            col: draggedElement,
            index: dropIndex
          });
          return allowed;
        }
        return false;
      });

      // clear previous UI
      eventBus.on('dragAndDrop.dragLeave', event => {
        const dragContext = event.dragContext;
        const targetEl = dragContext.targetEl;
        if (!targetEl) {
          return;
        }
        const container = this._renderer.getContainer();
        removeHighlight(container);
      });

      // update UI
      eventBus.on('dragAndDrop.dragOver', event => {
        const dragContext = event.dragContext,
          originalEvent = event.originalEvent;
        const draggedElement = dragContext.draggedElement,
          lastPosition = dragContext.lastPosition,
          targetEl = dragContext.targetEl;
        const container = this._renderer.getContainer();
        if (!targetEl) {
          return false;
        }
        let newPosition;
        if (draggedElement instanceof Row) {
          newPosition = getVerticalPosition(originalEvent, targetEl);
        }
        if (draggedElement instanceof Col) {
          newPosition = getHorizontalPosition(originalEvent, targetEl);
        }

        // nothing to do
        if (lastPosition === newPosition) {
          return true;
        }

        // remove old highlight
        removeHighlight(container);
        if (draggedElement instanceof Row) {
          if (newPosition === TOP) {
            // drop above
            highlightRow(targetEl, container, 'top');
          } else {
            // drop below
            highlightRow(targetEl, container, 'bottom');
          }
        }
        if (draggedElement instanceof Col) {
          if (newPosition === LEFT) {
            // drop left
            highlightCol(targetEl, container, 'left');
          } else {
            // drop right
            highlightCol(targetEl, container, 'right');
          }
        }

        // remember position
        dragContext.lastPosition = newPosition;

        // allowed
        return true;
      });

      // perform drop operation
      eventBus.on('dragAndDrop.drop', event => {
        const dragContext = event.dragContext,
          originalEvent = event.originalEvent;
        const draggedElement = dragContext.draggedElement,
          targetEl = dragContext.targetEl;
        if (!targetEl) {
          return false;
        }
        if (draggedElement instanceof Row) {
          const verticalPosition = getVerticalPosition(originalEvent, targetEl);
          const rowId = targetEl.dataset.rowId,
            row = this._elementRegistry.get(rowId);
          if (!row || row === draggedElement) {
            return;
          }
          const targetRow = getTargetRow(draggedElement, row, verticalPosition, this._sheet.getRoot().rows);
          if (targetRow === draggedElement) {
            return;
          }
          return targetRow;
        }
        if (draggedElement instanceof Col) {
          const horizontalPosition = getHorizontalPosition(originalEvent, targetEl);

          // no need to check rules; we verified on
          // dragEnter that dropping is O.K.
          const colId = targetEl.dataset.colId,
            col = this._elementRegistry.get(colId);
          if (!col || col === draggedElement) {
            return;
          }
          const targetCol = getTargetCol(draggedElement, col, horizontalPosition, this._sheet.getRoot().cols);
          if (targetCol === draggedElement) {
            return;
          }
          return targetCol;
        }
      });
      eventBus.on('dragAndDrop.dragEnd', this._cleanup);
    }
    startDrag(element, event) {
      const container = this._renderer.getContainer();
      this._dragImage = domify$1("<span style=\"\n          visibility: hidden;\n          position: fixed;\n          top: -10000px\n      \"></span>");

      // needs to be present in DOM
      document.body.appendChild(this._dragImage);

      // QUIRK: not supported by Edge and Internet Explorer
      if (event.dataTransfer.setDragImage) {
        event.dataTransfer.setDragImage(this._dragImage, 0, 0);
      }
      if (element instanceof Row) {
        fadeOutRow(element, container);
      } else if (element instanceof Col) {
        fadeOutCol(element, container);
      }
      this._dragAndDrop.startDrag(element, event);
    }
  }
  DragAndDrop.$inject = ['components', 'elementRegistry', 'eventBus', 'dragAndDrop', 'renderer', 'rules', 'sheet'];

  // helpers //////////

  function getTargetColIndex(cellEl, elementRegistry, sheet) {
    const targetCol = elementRegistry.get(cellEl.dataset.colId);
    if (!targetCol) {
      return -1;
    }
    const _sheet$getRoot = sheet.getRoot(),
      cols = _sheet$getRoot.cols;
    return cols.indexOf(targetCol);
  }
  function highlightRow(dragOverCell, container, position) {
    const rowId = dragOverCell.dataset.rowId;
    if (!rowId) {
      return;
    }
    const cells = all("[data-row-id=".concat(rowId, "]"), container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).add('dragover');
        classes$1(cell).add(position);
      }
    });
  }
  function highlightCol(dragOverCell, container, position) {
    const colId = dragOverCell.dataset.colId;
    if (!colId) {
      return;
    }
    const cells = all("[data-col-id=".concat(colId, "]"), container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).add('dragover');
        classes$1(cell).add(position);
      }
    });
  }
  function removeHighlight(container) {
    const cells = all('.dragover', container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).remove('dragover');
        classes$1(cell).remove('top');
        classes$1(cell).remove('right');
        classes$1(cell).remove('bottom');
        classes$1(cell).remove('left');
      }
    });
  }
  function fadeOutRow(row, container) {
    const cells = all("[data-row-id=".concat(row.id, "]"), container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).add('dragged');
      }
    });
  }
  function fadeOutCol(col, container) {
    const cells = all("[data-col-id=".concat(col.id, "]"), container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).add('dragged');
      }
    });
  }
  function removeFadeOut(container) {
    const cells = all('.dragged', container);
    forEach$3(cells, cell => {
      // QUIRK: PhantomJS might return object instead of NodeList
      if (isNode(cell)) {
        classes$1(cell).remove('dragged');
      }
    });
  }
  function getHorizontalPosition(event, dragOverElement) {
    const bounds = dragOverElement.getBoundingClientRect();
    return event.clientX < bounds.left + bounds.width / 2 ? LEFT : RIGHT;
  }
  function getVerticalPosition(event, dragOverElement) {
    const bounds = dragOverElement.getBoundingClientRect();
    return event.clientY < bounds.top + bounds.height / 2 ? TOP : BOTTOM;
  }
  function getTargetRow(draggedRow, targetRow, verticalPosition, rows) {
    if (rows.indexOf(draggedRow) > rows.indexOf(targetRow)) {
      targetRow = getRowBelow(targetRow, rows);
    }
    if (verticalPosition === TOP) {
      // return row above or row
      return getRowAbove(targetRow, rows);
    } else {
      // return row
      return targetRow;
    }
  }
  function getTargetCol(draggedCol, targetCol, horizontalPosition, cols) {
    if (cols.indexOf(draggedCol) > cols.indexOf(targetCol)) {
      targetCol = getColRight(targetCol, cols);
    }
    if (horizontalPosition === LEFT) {
      // return col left or col
      return getColLeft(targetCol, cols);
    } else {
      // return col
      return targetCol;
    }
  }
  function getRowAbove(row, rows) {
    const index = rows.indexOf(row);
    return rows[Math.max(0, index - 1)];
  }
  function getRowBelow(row, rows) {
    const index = rows.indexOf(row);
    return rows[Math.min(rows.length - 1, index + 1)];
  }
  function getColLeft(col, cols) {
    const index = cols.indexOf(col);
    if (isOutput(col)) {
      const firstOutput = cols.filter(col => isOutput(col))[0];
      const firstOutputIndex = cols.indexOf(firstOutput);
      return cols[Math.max(firstOutputIndex, index - 1)];
    }
    return cols[Math.max(0, index - 1)];
  }
  function getColRight(col, cols) {
    const index = cols.indexOf(col);
    if (isInput$1(col)) {
      const inputs = cols.filter(col => isInput$1(col));
      const lastInput = inputs[inputs.length - 1];
      const lastInputIndex = cols.indexOf(lastInput);
      return cols[Math.min(lastInputIndex, index + 1)];
    }
    return cols[Math.min(cols.length - 1, index + 1)];
  }

  // QUIRK: PhantomJS requires check if actual DOM node
  function isNode(node) {
    return node && (node.nodeType === 1 || node.nodeType == 11);
  }

  var dragAndDropModule = {
    __depends__: [DragAndDrop$1, Rules],
    __init__: ['dmnDragAndDrop'],
    dmnDragAndDrop: ['type', DragAndDrop]
  };

  function _defineProperty$b(obj, key, value) {
    key = _toPropertyKey$b(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$b(arg) {
    var key = _toPrimitive$b(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$b(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class DescriptionEditor extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$b(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$b(this, "changeDescription", value => {
        this._modeling.updateProperties(this._element, {
          description: value
        });
      });
      this._elementRegistry = context.injector.get('elementRegistry');
      this._modeling = context.injector.get('modeling');
      this._changeSupport = this.context.changeSupport;
      const id = this.props.context.id;
      this._element = this._elementRegistry.get(id);
    }
    componentWillMount() {
      if (this._element) {
        this._changeSupport.onElementsChanged(this._element.id, this.onElementsChanged);
      }
    }
    componentDidMount() {
      const autoFocus = this.props.context.autoFocus;
      if (autoFocus && this.node) {
        const editor = getEditor(this.node);
        editor.focus();
      }
    }
    componentWillUnmount() {
      if (this._element) {
        this._changeSupport.offElementsChanged(this._element.id, this.onElementsChanged);
        const businessObject = this._element.businessObject;
        const description = businessObject.description;

        // if empty description remove description
        if (isString$4(description) && !description.length) {
          this.changeDescription(null);
        }
      }
    }
    render() {
      if (!this._element) {
        return;
      }
      const businessObject = this._element.businessObject;
      const description = businessObject.description;
      if (!isString$4(description)) {
        return;
      }
      return createVNode(1, "div", "context-menu-container description-editor", createComponentVNode(2, Editor$3, {
        "className": "dms-input",
        "onChange": this.changeDescription,
        "value": description
      }), 2, null, null, node => this.node = node);
    }
  }
  class Editor$3 extends EditableComponent {
    render() {
      return createVNode(1, "div", this.getClassName(), this.getEditor(), 0);
    }
  }

  // helpers //////////

  function getEditor(container) {
    return query('.content-editable', container);
  }

  function _defineProperty$a(obj, key, value) {
    key = _toPropertyKey$a(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$a(arg) {
    var key = _toPrimitive$a(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$a(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const LOW_PRIORITY$3 = 500;
  const LOWER_PRIORITY = 750;
  const OFFSET_X = 26;
  class Description {
    constructor(components, contextMenu, elementRegistry, eventBus, modeling, renderer, translate) {
      var _this = this;
      _defineProperty$a(this, "addDescription", cell => {
        this._modeling.updateProperties(cell, {
          description: ''
        });
        const container = this._renderer.getContainer();
        const node = getNodeById(cell.id, container);
        const bounds = node.getBoundingClientRect();
        const position = getPosition(container, bounds);
        this._contextMenu.open(position, {
          contextMenuType: 'cell-description',
          id: cell.id,
          autoFocus: true,
          offset: {
            x: 4,
            y: 4
          }
        });
      });
      _defineProperty$a(this, "removeDescription", cell => {
        this._modeling.updateProperties(cell, {
          description: null
        });
        this._contextMenu.close();
      });
      this._contextMenu = contextMenu;
      this._modeling = modeling;
      this._renderer = renderer;
      this._translate = translate;
      eventBus.on('cell.click', LOWER_PRIORITY, event => {
        if (event.defaultPrevented) {
          return;
        }
        const target = event.target,
          id = event.id;
        const element = elementRegistry.get(id);
        if (!isAny(element, ['dmn:UnaryTests', 'dmn:LiteralExpression'])) {
          return;
        }
        const description = getDescription(element);
        if (!description) {
          // prevent focus
          event.preventDefault();
        }
        const container = renderer.getContainer(),
          bounds = target.getBoundingClientRect();
        const position = getPosition(container, bounds);
        contextMenu.open(position, {
          contextMenuType: 'cell-description',
          autoFocus: false,
          id,
          offset: {
            x: 4,
            y: 4
          }
        });
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'cell-description') {
          const element = elementRegistry.get(context.id);
          const description = getDescription(element);
          if (isString$4(description)) {
            return DescriptionEditor;
          }
        }
      });
      components.onGetComponent('context-menu-cell-additional', LOW_PRIORITY$3, function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'context-menu') {
          const id = context.id;
          if (!id) {
            return;
          }
          const element = elementRegistry.get(id);

          // element might not be in element registry (e.g. cut)
          if (!element) {
            return;
          }
          const businessObject = element.businessObject;
          const description = businessObject.description;
          const existingDescription = isString$4(description);
          const className = existingDescription ? 'remove-description' : 'add-description';
          const onClick = existingDescription ? () => _this.removeDescription(element) : () => _this.addDescription(element);
          return createVNode(1, "div", "context-menu-group-entry ".concat(className), isString$4(description) ? _this._translate('Remove Cell Description') : _this._translate('Add Cell Description'), 0, {
            "onClick": onClick
          });
        }
      });
    }
  }
  Description.$inject = ['components', 'contextMenu', 'elementRegistry', 'eventBus', 'modeling', 'renderer', 'translate'];

  // helpers //////////

  function getPosition(container, bounds) {
    const top = bounds.top,
      left = bounds.left,
      width = bounds.width,
      height = bounds.height;
    return {
      x: left + container.parentNode.scrollLeft - OFFSET_X,
      y: top + container.parentNode.scrollTop,
      width: width + 2 * OFFSET_X,
      height
    };
  }
  function getDescription(element) {
    return element && element.businessObject && element.businessObject.description;
  }

  var descriptionModule = {
    __depends__: [contextMenuModule, interactionEventsModule],
    __init__: ['description'],
    description: ['type', Description]
  };

  class ExpressionLanguage$1 {
    constructor(components, elementRegistry, modeling, expressionLanguages, translate, contextMenu) {
      var _this = this;
      this._modeling = modeling;
      this._translate = translate;
      this._expressionLanguages = expressionLanguages;
      components.onGetComponent('context-menu-cell-additional', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'context-menu') {
          const event = context.event,
            id = context.id;
          if (!id) {
            return;
          }
          const element = elementRegistry.get(id);

          // element might not be in element registry (e.g. cut)
          if (!element) {
            return;
          }
          if (!_this._shouldDisplayContextMenuEntry(element)) {
            return;
          }
          const openMenu = clickEvent => {
            contextMenu.open({
              x: (event || clickEvent).pageX,
              y: (event || clickEvent).pageY
            }, {
              contextMenuType: 'expression-language',
              id
            });
          };
          return createVNode(1, "div", "context-menu-group-entry", _this._translate('Change Cell Expression Language'), 0, {
            "onClick": openMenu
          });
        }
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'expression-language') {
          const id = context.id;
          if (!id) {
            return;
          }
          const element = elementRegistry.get(id);

          // element might not be in element registry (e.g. cut)
          if (!element) {
            return;
          }
          const expressionLanguage = _this._getElementExpressionLanguage(element);
          const options = expressionLanguages.getAll();
          const className = 'context-menu-group-entry ' + 'context-menu-entry-set-expression-language';
          return () => createVNode(1, "div", "context-menu-flex", createVNode(1, "div", "context-menu-group", createVNode(1, "div", className, [createVNode(1, "div", null, _this._translate('Expression Language'), 0), createComponentVNode(2, InputSelect, {
            "className": "expression-language",
            "onChange": value => _this.onChange(element, value),
            "options": options,
            "value": expressionLanguage
          })], 4), 2), 2);
        }
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType === 'input-edit') {
          return () => {
            const inputExpression = context.input.inputExpression;
            if (!_this._shouldDisplayContextMenuEntry(inputExpression)) {
              return;
            }
            const expressionLanguage = _this._getElementExpressionLanguage(inputExpression);
            const options = expressionLanguages.getAll();
            return createVNode(1, "div", "context-menu-container ref-language", createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", _this._translate('Expression Language'), 0), createComponentVNode(2, InputSelect, {
              "className": "ref-language",
              "value": expressionLanguage || '',
              "onChange": value => _this.onChange(inputExpression, value),
              "options": options
            })], 4), 2);
          };
        }
      });
    }
    onChange(element, expressionLanguage) {
      this._modeling.editExpressionLanguage(element, expressionLanguage);
    }
    _shouldDisplayContextMenuEntry(element) {
      const expressionLanguages = this._expressionLanguages.getAll();
      if (expressionLanguages.length > 1) {
        return true;
      }
      const expressionLanguage = this._getElementExpressionLanguage(element);
      return expressionLanguage !== this._getDefaultElementExpressionLanguage(element);
    }
    _getElementExpressionLanguage(element) {
      return getBusinessObject(element).expressionLanguage || this._getDefaultElementExpressionLanguage(element);
    }
    _getDefaultElementExpressionLanguage(element) {
      return this._expressionLanguages.getDefault(isInput$1(element.col) ? 'inputCell' : 'outputCell').value;
    }
  }
  ExpressionLanguage$1.$inject = ['components', 'elementRegistry', 'modeling', 'expressionLanguages', 'translate', 'contextMenu'];

  var expressionLanguageModule = {
    __depends__: [ExpressionLanguagesModule],
    __init__: ['expressionLanguage'],
    expressionLanguage: ['type', ExpressionLanguage$1]
  };

  function _defineProperty$9(obj, key, value) {
    key = _toPropertyKey$9(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$9(arg) {
    var key = _toPrimitive$9(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$9(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class DecisionTablePropertiesComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$9(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$9(this, "setDecisionTableName", name => {
        this.modeling.editDecisionTableName(name);
      });
      inject(this);
    }
    componentWillMount() {
      this.setupChangeListeners({
        bind: this.getBusinessObject().id
      });
    }
    componentWillUnmount() {
      this.setupChangeListeners({
        unbind: this.getBusinessObject().id
      });
    }
    setupChangeListeners(_ref) {
      let bind = _ref.bind,
        unbind = _ref.unbind;
      if (typeof unbind === 'string') {
        this.changeSupport.offElementsChanged(unbind, this.onElementsChanged);
      }
      if (typeof bind === 'string') {
        this.changeSupport.onElementsChanged(bind, this.onElementsChanged);
      }
    }
    getBusinessObject() {
      return this.sheet.getRoot().businessObject.$parent;
    }
    render() {
      const bo = this.getBusinessObject();
      const name = bo.name;
      const HitPolicy = this.components.getComponent('hit-policy') || NullComponent;
      return createVNode(1, "div", "decision-table-properties", [createComponentVNode(2, DecisionTableName, {
        "className": "decision-table-name",
        "value": name,
        "ctrlForNewline": true,
        "onBlur": resetScroll$1,
        "onChange": this.setDecisionTableName,
        "elementId": '__decisionProperties_name',
        "coords": '0:__decisionProperties'
      }), createVNode(1, "div", "decision-table-header-separator"), createComponentVNode(2, HitPolicy)], 4);
    }
  }
  DecisionTablePropertiesComponent.$inject = ['sheet', 'modeling', 'changeSupport', 'components'];
  class DecisionTableName extends EditableComponent {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      mixin(this, SelectionAware$1);
    }
    render() {
      const name = this.props.value;
      const className = classNames(this.getSelectionClasses(), this.getClassName());
      return createVNode(1, "div", className, this.getEditor(), 0, {
        "data-element-id": this.props.elementId,
        "data-coords": this.props.coords,
        "title": this._translate('Decision Name: ') + name
      });
    }
  }
  function NullComponent() {
    return null;
  }
  function resetScroll$1(event) {
    event.target.scroll(0, 0);
  }

  const LOW_PRIORITY$2 = 500;
  class DecisionTableProperties {
    constructor(components) {
      components.onGetComponent('table.before', LOW_PRIORITY$2, () => {
        return DecisionTablePropertiesComponent;
      });
    }
  }
  DecisionTableProperties.$inject = ['components'];

  var tablePropertiesEditorModule = {
    __depends__: [DebounceInput],
    __init__: ['decisionTableProperties'],
    decisionTableProperties: ['type', DecisionTableProperties]
  };

  function ownKeys$3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {
        _defineProperty$8(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$8(obj, key, value) {
    key = _toPropertyKey$8(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$8(arg) {
    var key = _toPrimitive$8(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$8(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class EditableHitPolicy extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$8(this, "onChange", _ref => {
        let aggregation = _ref.aggregation,
          hitPolicy = _ref.hitPolicy;
        this.modeling.editHitPolicy(hitPolicy, aggregation);
      });
      _defineProperty$8(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      this._translate = context.injector.get('translate');
      inject(this);
    }
    componentDidMount() {
      this.changeSupport.onElementsChanged(this.getRoot().id, this.onElementsChanged);
    }
    componentWillUnmount() {
      this.changeSupport.offElementsChanged(this.getRoot().id, this.onElementsChanged);
    }
    getRoot() {
      return this.sheet.getRoot();
    }
    render() {
      const root = this.getRoot(),
        businessObject = root.businessObject;
      const aggregation = businessObject.aggregation,
        hitPolicy = businessObject.hitPolicy;
      const hitPolicyEntry = find$2(HIT_POLICIES, entry => {
        return isEqualHitPolicy(entry.value, {
          aggregation,
          hitPolicy
        });
      });
      return createVNode(1, "div", "hit-policy", [createVNode(1, "label", "dms-label", this._translate('Hit Policy:'), 0), createComponentVNode(2, InputSelect, {
        "className": "hit-policy-edit-policy-select",
        "onChange": this.onChange,
        "options": HIT_POLICIES.map(entry => _objectSpread$3(_objectSpread$3({}, entry), {}, {
          label: this._translate(entry.label)
        })),
        "value": hitPolicyEntry.value,
        "data-hit-policy": "true",
        "noInput": true
      })], 4, {
        "title": this._translate(hitPolicyEntry.explanation)
      });
    }
  }
  EditableHitPolicy.$inject = ['changeSupport', 'sheet', 'modeling'];

  // helpers //////////////////////
  function isEqualHitPolicy(a, b) {
    return a.hitPolicy === b.hitPolicy && a.aggregation === b.aggregation;
  }

  function HitPolicyEditingProvider(components) {
    components.onGetComponent('hit-policy', () => {
      return EditableHitPolicy;
    });
  }
  HitPolicyEditingProvider.$inject = ['components'];

  var hitPolicyEditorModule = {
    __depends__: [contextMenuModule],
    __init__: ['hitPolicyProvider'],
    hitPolicyProvider: ['type', HitPolicyEditingProvider]
  };

  /**
   * A handler responsible for updating the underlying DMN
   * once changes on the table happen.
   */
  class DmnUpdater extends CommandInterceptor {
    constructor(eventBus, sheet) {
      super(eventBus);
      this.executed(['row.add', 'row.remove', 'col.add', 'col.remove'], ifDmn(e => {
        var context = e.context;
        var element = context.row || context.col;
        this.updateRoot(element, context.oldRoot);
      }));
      this.reverted(['row.add', 'row.remove', 'col.add', 'col.remove'], ifDmn(e => {
        var context = e.context;
        var element = context.row || context.col;
        this.updateRoot(element, context.newRoot);
      }));
    }
    updateRoot(element, oldRoot) {
      var newRoot = element.root;
      var businessObject = element.businessObject;
      if (is(element, 'dmn:DecisionRule')) {
        // we're removing
        if (oldRoot) {
          let oldTable = oldRoot.businessObject;
          let oldRules = oldTable.get('rule');
          let oldIdx = oldRules.indexOf(businessObject);

          // unwire Row <-> Table
          oldRules.splice(oldIdx, 1);
          businessObject.$parent = null;
        }

        // we're adding
        if (newRoot) {
          let newTable = newRoot.businessObject;
          let newIdx = newRoot.rows.indexOf(element);

          // wire Row <-> Table
          newTable.get('rule').splice(newIdx, 0, businessObject);
          businessObject.$parent = newTable;
          element.cells.forEach((cell, idx) => {
            // wire Cell <-> Row
            this.wireCell(cell, element, idx);
          });
        }
      }
      if (is(element, 'dmn:InputClause') || is(element, 'dmn:OutputClause')) {
        let collection, collectionIdx;

        // we're removing
        if (oldRoot) {
          let oldTable = oldRoot.businessObject;
          let inputs = oldTable.get('input');
          let outputs = oldTable.get('output');
          if (is(element, 'dmn:InputClause')) {
            collection = inputs;
            collectionIdx = inputs.indexOf(businessObject);
          }
          if (is(element, 'dmn:OutputClause')) {
            collection = outputs;
            collectionIdx = outputs.indexOf(businessObject);
          }
          if (collectionIdx === -1) {
            throw new Error('inconsistent model: clause not in table');
          }

          // unwire Col <-> Table
          collection.splice(collectionIdx, 1);
          businessObject.$parent = null;
          element.cells.forEach((cel, rowIdx) => {
            // unwire Cell <-> Row
            this.unwireCell(cel, oldRoot.rows[rowIdx]);
          });
        }
        if (newRoot) {
          let newTable = newRoot.businessObject;
          let inputs = newTable.get('input');
          let outputs = newTable.get('output');
          let colIdx = newRoot.cols.indexOf(element);
          let collectionIdx, collection;
          if (is(element, 'dmn:InputClause')) {
            collection = inputs;
            collectionIdx = colIdx;
          }
          if (is(element, 'dmn:OutputClause')) {
            collection = outputs;
            collectionIdx = colIdx - inputs.length;
          }

          // wire Col <-> Table
          collection.splice(collectionIdx, 0, businessObject);
          businessObject.$parent = newTable;
          element.cells.forEach((cell, rowIdx) => {
            // wire Cell <-> Row
            this.wireCell(cell, newRoot.rows[rowIdx], colIdx);
          });
        }
      }
    }
    unwireCell(cell, oldRow) {
      var cellBo = cell.businessObject;
      let oldRowBo = oldRow.businessObject;
      let inputEntries = oldRowBo.get('inputEntry');
      let outputEntries = oldRowBo.get('outputEntry');
      let collection, collectionIdx;

      // remove from inputEntries
      if (is(cell, 'dmn:UnaryTests')) {
        collection = inputEntries;
      }

      // remove from outputEntries
      if (is(cell, 'dmn:LiteralExpression')) {
        collection = outputEntries;
      }
      collectionIdx = collection.indexOf(cellBo);
      if (collectionIdx === -1) {
        throw new Error('cell not in row');
      }

      // unwire Cell <-> Row relationship
      collection.splice(collectionIdx, 1);
      cellBo.$parent = null;
    }
    wireCell(cell, row, colIdx) {
      var cellBo = cell.businessObject;
      let rowBo = row.businessObject;
      let inputEntries = rowBo.get('inputEntry');
      let outputEntries = rowBo.get('outputEntry');
      let collection, collectionIdx;

      // ensure we handle already wired cells
      if (cellBo.$parent === rowBo) {
        return;
      }

      // add to inputEntries
      if (is(cell, 'dmn:UnaryTests')) {
        collection = inputEntries;
        collectionIdx = colIdx;
      }

      // add to outputEntries
      if (is(cell, 'dmn:LiteralExpression')) {
        collection = outputEntries;
        collectionIdx = colIdx - inputEntries.length;
      }

      // wire Cell <-> Row relationship
      collection.splice(collectionIdx, 0, cellBo);
      cellBo.$parent = rowBo;
    }
  }
  DmnUpdater.$inject = ['eventBus', 'sheet'];

  // helpers //////////////////////

  /**
   * Make sure the event listener is only called
   * if the touched element is a DMN element.
   *
   * @param  {Function} fn
   * @return {Function} guarded function
   */
  function ifDmn(fn) {
    return function (event) {
      var context = event.context,
        element = context.row || context.col;
      if (is(element, 'dmn:DMNElement')) {
        fn(event);
      }
    };
  }

  class DmnFactory {
    constructor(moddle) {
      this._model = moddle;
    }
    create(type) {
      let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var element = this._model.create(type, attrs || {});
      if (is(element, 'dmn:InputClause')) {
        if (attrs.inputExpression) {
          element.inputExpression = attrs.inputExpression;
        } else {
          element.inputExpression = this.create('dmn:LiteralExpression', {
            typeRef: 'string'
          });
          element.inputExpression.$parent = element;
        }
      }
      if (is(element, 'dmn:OutputClause')) {
        element.typeRef = attrs.typeRef || 'string';
      }
      if (is(element, 'dmn:UnaryTests') || is(element, 'dmn:LiteralExpression')) {
        element.text = attrs.text || '';
      }
      this._ensureId(element);
      return element;
    }
    _needsId(element) {
      return is(element, 'dmn:DMNElement');
    }
    _ensureId(element) {
      // generate semantic ids for elements
      // dmn:UnaryTests -> UnaryTests_ID
      var prefix = (element.$type || '').replace(/^[^:]*:/g, '') + '_';
      if (!element.id && this._needsId(element)) {
        element.id = this._model.ids.nextPrefixed(prefix, element);
      }
    }
  }
  DmnFactory.$inject = ['moddle'];

  const _excluded$3 = ["businessObject", "type"];
  function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {
        _defineProperty$7(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$7(obj, key, value) {
    key = _toPropertyKey$7(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$7(arg) {
    var key = _toPrimitive$7(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$7(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _objectWithoutProperties$2(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$2(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  class ElementFactory extends ElementFactory$1 {
    constructor(dmnFactory) {
      super();
      this._dmnFactory = dmnFactory;
    }
    create(tType, attrs) {
      const dmnFactory = this._dmnFactory;
      let businessObject = attrs.businessObject,
        type = attrs.type,
        additionalAttrs = _objectWithoutProperties$2(attrs, _excluded$3);
      if (!businessObject) {
        if (!type) {
          if (tType === 'root') {
            type = 'dmn:DecisionTable';
          } else if (tType === 'cell') {
            let col = additionalAttrs.col;
            if (is(col, 'dmn:OutputClause')) {
              type = 'dmn:LiteralExpression';
            }
            if (is(col, 'dmn:InputClause')) {
              type = 'dmn:UnaryTests';
            }
          }
          if (!type) {
            throw new Error('cannot guess <type>');
          }
        }
        businessObject = dmnFactory.create(type);
      }
      return super.create(tType, _objectSpread$2({
        businessObject,
        id: businessObject.id
      }, additionalAttrs));
    }
  }
  ElementFactory.$inject = ['dmnFactory'];

  /**
   * A handler that implements row addition.
   */
  class AddRowHandler {
    constructor(sheet, elementFactory) {
      this._sheet = sheet;
      this._elementFactory = elementFactory;
    }
    /**
     * <do>
     */

    execute(context) {
      const sheet = this._sheet,
        elementFactory = this._elementFactory,
        root = sheet.getRoot();
      let {
        row,
        index
      } = context;
      if (typeof index === 'undefined') {
        index = context.index = root.rows.length;
      }
      context.newRoot = root;
      if (!row.cells.length) {
        root.cols.forEach((col, idx) => {
          const cell = elementFactory.create('cell', {
            row,
            col
          });
          row.cells[idx] = cell;
        });
      }
      sheet.addRow(row, index);
      return sheet.getRoot();
    }
    /**
     * <undo>
     */

    revert(context) {
      const {
        row
      } = context;
      const sheet = this._sheet;
      sheet.removeRow(row);
      return sheet.getRoot();
    }
  }
  AddRowHandler.$inject = ['sheet', 'elementFactory'];

  /**
   * A handler that implements row deletion.
   */
  class RemoveRowHandler {
    constructor(sheet) {
      this._sheet = sheet;
    }
    /**
     * <do>
     */

    execute(context) {
      const sheet = this._sheet,
        root = sheet.getRoot();
      let {
        row
      } = context; // retrieve and remember previous row position

      const oldIndex = context.oldIndex = root.rows.indexOf(row);
      context.oldRoot = row.root;
      if (oldIndex === -1) {
        throw new Error(`row#${row.id} not in sheet`);
      }
      sheet.removeRow(row);
      return sheet.getRoot();
    }
    /**
     * <undo>
     */

    revert(context) {
      const {
        row,
        oldIndex
      } = context;
      const sheet = this._sheet;
      sheet.addRow(row, oldIndex);
      return sheet.getRoot();
    }
  }
  RemoveRowHandler.$inject = ['sheet'];

  /**
   * A handler that implements row movement.
   */
  class MoveRowHandler {
    constructor(modeling) {
      this._modeling = modeling;
    }
    /**
     * <preexecute>
     */

    preExecute(context) {
      let {
        row
      } = context;
      this._modeling.removeRow(row);
    }
    /**
     * <postexecute>
     */

    postExecute(context) {
      let {
        row,
        index
      } = context;
      this._modeling.addRow(row, index);
    }
  }
  MoveRowHandler.$inject = ['modeling'];

  /**
   * A handler that implements column addition.
   */
  class AddColHandler {
    constructor(sheet, elementFactory) {
      this._sheet = sheet;
      this._elementFactory = elementFactory;
    }
    /**
     * <do>
     */

    execute(context) {
      const sheet = this._sheet,
        elementFactory = this._elementFactory,
        root = sheet.getRoot();
      let {
        col,
        index
      } = context;
      if (typeof index === 'undefined') {
        index = context.index = root.cols.length;
      }
      context.newRoot = root;
      if (!col.cells.length) {
        root.rows.forEach((row, idx) => {
          const cell = elementFactory.create('cell', {
            row,
            col
          });
          col.cells[idx] = cell;
        });
      }
      sheet.addCol(col, index);
      return sheet.getRoot();
    }
    /**
     * <undo>
     */

    revert(context) {
      const {
        col
      } = context;
      const sheet = this._sheet;
      sheet.removeCol(col);
      return sheet.getRoot();
    }
  }
  AddColHandler.$inject = ['sheet', 'elementFactory'];

  /**
   * A handler that implements column deletion.
   */
  class RemoveColHandler {
    constructor(sheet, elementFactory) {
      this._sheet = sheet;
      this._elementFactory = elementFactory;
    }
    /**
     * <do>
     */

    execute(context) {
      const sheet = this._sheet;
      let {
        col
      } = context;
      const root = context.oldRoot = col.root; // retrieve and remember previous col position

      const oldIndex = context.oldIndex = root.cols.indexOf(col);
      if (oldIndex === -1) {
        throw new Error(`col#${col.id} not in sheet`);
      }
      sheet.removeCol(col);
      return sheet.getRoot();
    }
    /**
     * <undo>
     */

    revert(context) {
      const {
        col,
        oldIndex
      } = context;
      const sheet = this._sheet;
      sheet.addCol(col, oldIndex);
      return sheet.getRoot();
    }
  }
  RemoveColHandler.$inject = ['sheet', 'elementFactory'];

  /**
   * A handler that implements col movement.
   */
  class MoveColHandler {
    constructor(modeling) {
      this._modeling = modeling;
    }
    /**
     * <preexecute>
     */

    preExecute(context) {
      let {
        col
      } = context;
      this._modeling.removeCol(col);
    }
    /**
     * <postexecute>
     */

    postExecute(context) {
      let {
        col,
        index
      } = context;
      this._modeling.addCol(col, index);
    }
  }
  MoveColHandler.$inject = ['modeling'];

  /**
   * A handler that implements cell editing.
   *
   * Per default, this handler does nothing.
   * Interested parties may hook into the edit commands
   * `preExecute` or `postExecute` phases to carry out
   * the actual editing.
   */
  class EditCellHandler {
    /**
     * <do>
     */
    execute(context) {
      let {
        cell
      } = context;
      return cell;
    }
    /**
     * <undo>
     */

    revert(context) {
      const {
        cell
      } = context;
      return cell;
    }
  }

  /**
   * The basic modeling entry point.
   *
   * @param {EventBus} eventBus
   * @param {ElementFactory} elementFactory
   * @param {CommandStack} commandStack
   */

  class Modeling$2 {
    constructor(eventBus, elementFactory, commandStack) {
      this._eventBus = eventBus;
      this._elementFactory = elementFactory;
      this._commandStack = commandStack;
      eventBus.on('table.init', () => {
        // register modeling handlers
        registerHandlers$1(this.getHandlers(), commandStack);
      });
    }
    getHandlers() {
      return Modeling$2._getHandlers();
    }
    static _getHandlers() {
      return {
        'row.add': AddRowHandler,
        'row.remove': RemoveRowHandler,
        'row.move': MoveRowHandler,
        'col.add': AddColHandler,
        'col.remove': RemoveColHandler,
        'col.move': MoveColHandler,
        'cell.edit': EditCellHandler
      };
    }
    _create(type, attrs) {
      if (attrs instanceof Base) {
        return attrs;
      } else {
        return this._elementFactory.create(type, attrs);
      }
    } // public API

    addRow(attrs, index) {
      const row = this._create('row', attrs);
      const context = {
        row,
        index
      };
      this._commandStack.execute('row.add', context);
      return row;
    }
    removeRow(row) {
      this._commandStack.execute('row.remove', {
        row
      });
    }
    moveRow(row, index) {
      const context = {
        row,
        index
      };
      this._commandStack.execute('row.move', context);
    }
    addCol(attrs, index) {
      const col = this._create('col', attrs);
      const context = {
        col,
        index
      };
      this._commandStack.execute('col.add', context);
      return col;
    }
    removeCol(col) {
      this._commandStack.execute('col.remove', {
        col
      });
    }
    moveCol(col, index) {
      const context = {
        col,
        index
      };
      this._commandStack.execute('col.move', context);
    }
    editCell(cell, changedAttrs) {
      const context = {
        cell,
        ...changedAttrs
      };
      this._commandStack.execute('cell.edit', context);
    }
  }
  Modeling$2.$inject = ['eventBus', 'elementFactory', 'commandStack']; // helpers /////////////

  /**
   * Register handlers with the command stack
   *
   * @param {Object} handlers { id -> Handler } map
   * @param {CommandStack} commandStack
   */

  function registerHandlers$1(handlers, commandStack) {
    forEach$3(handlers, function (handler, id) {
      commandStack.registerHandler(id, handler);
    });
  }

  /**
   * A handler that implements adding/removing allowed values.
   */
  class UpdateAllowedValuesHandler {
    constructor(dmnFactory, moddle, modeling) {
      this._dmnFactory = dmnFactory;
      this._moddle = moddle;
      this._modeling = modeling;
    }

    /**
     * <do>
     */
    execute(context) {
      const element = context.element,
        allowedValues = context.allowedValues;
      const isInput = is(element, 'dmn:InputClause');
      if (isInput) {
        if (element.inputValues) {
          context.oldAllowedValues = element.inputValues.text;
        } else {
          if (!isNull(allowedValues)) {
            element.inputValues = this._dmnFactory.create('dmn:UnaryTests', {
              text: ''
            });
          }
        }
        if (isNull(allowedValues)) {
          if (element.inputValues) {
            delete element.inputValues;
          }
        } else {
          element.inputValues.text = allowedValues.join(',');
        }
      } else {
        if (element.outputValues && element) {
          context.oldAllowedValues = element.outputValues.text;
        } else {
          if (!isNull(allowedValues)) {
            element.outputValues = this._dmnFactory.create('dmn:UnaryTests', {
              text: ''
            });
          }
        }
        if (isNull(allowedValues)) {
          if (element.outputValues) {
            delete element.outputValues;
          }
        } else {
          element.outputValues.text = allowedValues.join(',');
        }
      }
      return element;
    }

    /**
     * <undo>
     */
    revert(context) {
      const element = context.element,
        oldAllowedValues = context.oldAllowedValues;
      const isInput = is(element, 'dmn:InputClause');
      if (isInput) {
        if (oldAllowedValues) {
          if (!element.inputValues) {
            element.inputValues = this._dmnFactory.create('dmn:UnaryTests', {
              text: ''
            });
          }
          element.inputValues.text = oldAllowedValues;
        } else {
          delete element.inputValues;
        }
      } else {
        if (oldAllowedValues) {
          if (!element.outputValues) {
            element.outputValues = this._dmnFactory.create('dmn:UnaryTests', {
              text: ''
            });
          }
          element.outputValues.text = oldAllowedValues;
        } else {
          delete element.outputValues;
        }
      }
      return element;
    }
  }
  UpdateAllowedValuesHandler.$inject = ['dmnFactory', 'moddle', 'modeling'];

  // helpers //////////////////////

  function isNull(value) {
    return value === null;
  }

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {
        _defineProperty$6(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$6(obj, key, value) {
    key = _toPropertyKey$6(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$6(arg) {
    var key = _toPrimitive$6(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$6(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const ID = 'id';

  /**
   * A generic handler that implements property editing.
   */
  class EditPropertiesHandler {
    constructor(elementRegistry, moddle) {
      this._elementRegistry = elementRegistry;
      this._moddle = moddle;
    }

    /**
     * <do>
     */
    execute(context) {
      const element = context.element,
        properties = context.properties;
      const bo = getBusinessObject(element);
      const _this$updatePropertie = this.updateProperties(bo, properties),
        changed = _this$updatePropertie.changed,
        oldProperties = _this$updatePropertie.oldProperties;
      context.oldProperties = oldProperties;
      return [...changed, element];
    }

    /**
     * <undo>
     */
    revert(context) {
      const element = context.element,
        oldProperties = context.oldProperties;
      var bo = getBusinessObject(element);
      var _this$updatePropertie2 = this.updateProperties(bo, oldProperties),
        changed = _this$updatePropertie2.changed;
      return [...changed, element];
    }

    /**
     * Update properties of the given business object
     * and return { changed, oldProperties }.
     */
    updateProperties(bo, newProps) {
      const ids = this._moddle.ids;

      // Reduce over all new properties and return
      //
      // {
      //  changed,
      //  oldProperties
      // }
      return reduce(newProps, (result, value, key) => {
        const propertyValue = bo.get(key);

        // handle nested update
        if (isContainer(value)) {
          if (!isContainer(propertyValue)) {
            throw new Error("non-existing property <".concat(key, ">: cannot update values"));
          }
          let _this$updatePropertie3 = this.updateProperties(propertyValue, value),
            changed = _this$updatePropertie3.changed,
            oldProperties = _this$updatePropertie3.oldProperties;
          return {
            changed: [...result.changed, ...changed, propertyValue],
            oldProperties: _objectSpread$1(_objectSpread$1({}, result.oldProperties), {}, {
              [key]: oldProperties
            })
          };
        }

        // handle ID change
        if (key === ID && isIdChange(bo, value)) {
          ids.unclaim(bo[ID]);
          this._elementRegistry.updateId(bo, value);
          ids.claim(value, bo);
        }

        // handle plain update
        bo.set(key, value);
        return {
          changed: result.changed,
          oldProperties: _objectSpread$1(_objectSpread$1({}, result.oldProperties), {}, {
            [key]: propertyValue
          })
        };
      }, {
        changed: [],
        oldProperties: {}
      });
    }
  }
  EditPropertiesHandler.$inject = ['elementRegistry', 'moddle'];

  // helpers //////////////////////

  function isIdChange(element, newId) {
    return element[ID] !== newId;
  }
  function isContainer(o) {
    return isDefined(o) && isObject$1(o);
  }

  class IdClaimHandler {
    constructor(moddle) {
      this._moddle = moddle;
    }

    /**
     * <do>
     */
    execute(context) {
      const ids = this._moddle.ids,
        id = context.id,
        element = context.element,
        claiming = context.claiming;
      if (claiming) {
        ids.claim(id, element);
      } else {
        ids.unclaim(id);
      }
    }

    /**
     * <undo>
     */
    revert(context) {
      const ids = this._moddle.ids,
        id = context.id,
        element = context.element,
        claiming = context.claiming;
      if (claiming) {
        ids.unclaim(id);
      } else {
        ids.claim(id, element);
      }
    }
  }
  IdClaimHandler.$inject = ['moddle'];

  class Modeling$1 extends Modeling$2 {
    constructor(eventBus, elementFactory, commandStack, sheet) {
      super(eventBus, elementFactory, commandStack);
      this._eventBus = eventBus;
      this._elementFactory = elementFactory;
      this._commandStack = commandStack;
      this._sheet = sheet;
    }
    getHandlers() {
      return Modeling$1._getHandlers();
    }
    static _getHandlers() {
      return assign$4({}, super._getHandlers(), {
        'editAllowedValues': UpdateAllowedValuesHandler,
        'element.updateProperties': EditPropertiesHandler,
        'id.updateClaim': IdClaimHandler
      });
    }
    editDecisionTableName(name) {
      const root = this._sheet.getRoot(),
        businessObject = root.businessObject,
        parentBusinessObject = businessObject.$parent;
      const context = {
        element: parentBusinessObject,
        properties: {
          name
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editDecisionTableId(id) {
      const root = this._sheet.getRoot(),
        businessObject = root.businessObject,
        parentBusinessObject = businessObject.$parent;
      const context = {
        element: parentBusinessObject,
        properties: {
          id
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editHitPolicy(hitPolicy, aggregation) {
      const root = this._sheet.getRoot(),
        businessObject = root.businessObject;
      const context = {
        element: businessObject,
        properties: {
          hitPolicy,
          aggregation
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    updateProperties(el, props) {
      const context = {
        element: el,
        properties: props
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editInputExpression(inputExpression, props) {
      const context = {
        element: inputExpression,
        properties: props
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editOutputName(output, name) {
      const context = {
        element: output,
        properties: {
          name
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editInputExpressionTypeRef(inputExpression, typeRef) {
      const context = {
        element: inputExpression,
        properties: {
          typeRef
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editOutputTypeRef(output, typeRef) {
      const context = {
        element: output,
        properties: {
          typeRef
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editCell(cell, text) {
      const context = {
        element: cell,
        properties: {
          text
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editAnnotation(rule, description) {
      const context = {
        element: rule,
        properties: {
          description
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editAllowedValues(element, allowedValues) {
      const context = {
        element,
        allowedValues
      };
      this._commandStack.execute('editAllowedValues', context);
    }
    editExpressionLanguage(element, expressionLanguage) {
      const context = {
        element,
        properties: {
          expressionLanguage
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    claimId(id, moddleElement) {
      const context = {
        id: id,
        element: moddleElement,
        claiming: true
      };
      this._commandStack.execute('id.updateClaim', context);
    }
    unclaimId(id, moddleElement) {
      const context = {
        id: id,
        element: moddleElement
      };
      this._commandStack.execute('id.updateClaim', context);
    }
  }
  Modeling$1.$inject = ['eventBus', 'elementFactory', 'commandStack', 'sheet'];

  class IdClaimBehavior extends CommandInterceptor {
    constructor(eventBus, moddle, modeling) {
      super(eventBus);
      this._ids = moddle.ids;
      this._modeling = modeling;
      this.preExecute(['row.add', 'col.add'], event => {
        const context = event.context,
          element = context.row || context.col;
        this.claimId(element.businessObject);
        if (element.cells) {
          element.cells.forEach(cell => this.claimId(cell.businessObject));
        }
      });
    }
    claimId(businessObject) {
      if (businessObject.id && !this._ids.assigned(businessObject.id)) {
        this._modeling.claimId(businessObject.id, businessObject);
      }
      businessObject.$descriptor.properties.forEach(property => {
        const value = businessObject[property.name];

        // not set
        if (!value) {
          return;
        }

        // array of moddle elements
        if (isArray$6(value)) {
          value.forEach(v => this.claimId(v));
        }

        // moddle element
        if (value.$type) {
          this.claimId(value);
        }
      });
    }
  }
  IdClaimBehavior.$inject = ['eventBus', 'moddle', 'modeling'];

  class IdUnclaimBehavior extends CommandInterceptor {
    constructor(eventBus, modeling) {
      super(eventBus);
      this._modeling = modeling;
      this.preExecute(['row.remove', 'col.remove'], event => {
        const context = event.context,
          element = context.row || context.col;
        this.unclaimId(element.businessObject);
        if (element.cells) {
          element.cells.forEach(cell => this.unclaimId(cell.businessObject));
        }
      });
    }
    unclaimId(businessObject) {
      if (businessObject.id) {
        this._modeling.unclaimId(businessObject.id, businessObject);
      }
      businessObject.$descriptor.properties.forEach(property => {
        const value = businessObject[property.name];

        // not set
        if (!value) {
          return;
        }

        // array of moddle elements
        if (isArray$6(value)) {
          value.forEach(v => this.unclaimId(v));
        }

        // moddle element
        if (value.$type) {
          this.unclaimId(value);
        }
      });
    }
  }
  IdUnclaimBehavior.$inject = ['eventBus', 'modeling'];

  var Behavior = {
    __init__: ['idClaimBehavior', 'idUnclaimBehavior'],
    idClaimBehavior: ['type', IdClaimBehavior],
    idUnclaimBehavior: ['type', IdUnclaimBehavior]
  };

  var modelingModule = {
    __init__: ['dmnUpdater', 'idChangeBehavior', 'modeling'],
    __depends__: [Behavior, CommandStack],
    dmnUpdater: ['type', DmnUpdater],
    dmnFactory: ['type', DmnFactory],
    elementFactory: ['type', ElementFactory],
    idChangeBehavior: ['type', IdChangeBehavior],
    modeling: ['type', Modeling$1]
  };

  class DecisionRulesCellEditorComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this.state = {
        isFocussed: false
      };
      this.changeCellValue = this.changeCellValue.bind(this);
      this.onFocus = this.onFocus.bind(this);
      this.onBlur = this.onBlur.bind(this);
      this.onElementsChanged = this.onElementsChanged.bind(this);
    }
    onElementsChanged() {
      this.forceUpdate();
    }
    componentWillMount() {
      const injector = this.context.injector;
      const cell = this.props.cell;
      const changeSupport = this._changeSupport = this.context.changeSupport;
      this._modeling = injector.get('modeling');
      changeSupport.onElementsChanged(cell.id, this.onElementsChanged);
    }
    componentWillUnmount() {
      const cell = this.props.cell;
      this._changeSupport.offElementsChanged(cell.id, this.onElementsChanged);
    }
    changeCellValue(value) {
      const cell = this.props.cell;
      this._modeling.editCell(cell.businessObject, value);
    }
    onFocus() {
      this.setState({
        isFocussed: true
      });
    }
    onBlur() {
      this.setState({
        isFocussed: false
      });
    }
    render() {
      const _this$props = this.props,
        cell = _this$props.cell,
        rowIndex = _this$props.rowIndex,
        row = _this$props.row,
        col = _this$props.col,
        colIndex = _this$props.colIndex;
      const isFocussed = this.state.isFocussed;
      const isUnaryTest = is(cell, 'dmn:UnaryTests');
      const businessObject = cell.businessObject;
      return createComponentVNode(2, HeaderCell, {
        "className": isUnaryTest ? 'input-cell' : 'output-cell',
        "elementId": cell.id,
        "coords": "".concat(rowIndex, ":").concat(colIndex),
        "data-row-id": row.id,
        "data-col-id": col.id,
        children: createComponentVNode(2, TableCellEditor, {
          "className": "cell-editor",
          "placeholder": isUnaryTest ? '-' : '',
          "ctrlForNewline": true,
          "onFocus": this.onFocus,
          "onBlur": this.onBlur,
          "isFocussed": isFocussed,
          "onChange": this.changeCellValue,
          "value": businessObject.text,
          "businessObject": businessObject
        })
      });
    }
  }
  class TableCellEditor extends EditableComponent {
    constructor(props, context) {
      super(props, context);
      this._expressionLanguages = context.injector.get('expressionLanguages');
      this._translate = context.injector.get('translate');
    }
    isDefaultExpressionLanguage(businessObject) {
      const expressionLanguage = businessObject.expressionLanguage;
      const defaultExpressionLanguage = this.getDefaultExpressionLanguage(businessObject).value;
      return !expressionLanguage || expressionLanguage === defaultExpressionLanguage;
    }
    getDescription(businessObject) {
      return businessObject.description;
    }
    getExpressionLanguageLabel(businessObject) {
      const expressionLanguage = businessObject.expressionLanguage;
      const defaultExpressionLanguage = this.getDefaultExpressionLanguage(businessObject);
      return this._expressionLanguages.getLabel(expressionLanguage) || defaultExpressionLanguage.label;
    }
    isScript(businessObject) {
      const defaultExpressionLanguage = this.getDefaultExpressionLanguage(businessObject);
      const isInputCell = is(businessObject, 'dmn:UnaryTests');
      if (!isInputCell) {
        return false;
      }
      if (businessObject.text.indexOf('\n') !== -1) {
        return true;
      }
      return businessObject.expressionLanguage && businessObject.expressionLanguage !== defaultExpressionLanguage;
    }
    getDefaultExpressionLanguage(businessObject) {
      const elementType = is(businessObject, 'dmn:UnaryTests') ? 'inputCell' : 'outputCell';
      return this._expressionLanguages.getDefault(elementType);
    }
    render() {
      const _this$props2 = this.props,
        businessObject = _this$props2.businessObject,
        isFocussed = _this$props2.isFocussed;
      const description = this.getDescription(businessObject);
      const isDefaultExpressionLanguage = this.isDefaultExpressionLanguage(businessObject);
      const expressionLanguageLabel = this.getExpressionLanguageLabel(businessObject);
      const isScript = this.isScript(businessObject);
      return createVNode(1, "div", this.getClassName(), [isString$4(description) && !isFocussed && createVNode(1, "div", "description-indicator"), this.getEditor({
        className: isScript ? 'script-editor' : null
      }), !isDefaultExpressionLanguage && !isFocussed && createVNode(1, "span", "dms-badge dmn-expression-language", [createVNode(1, "span", "dms-badge-icon dmn-icon-file-code"), createVNode(1, "span", "dms-badge-label", expressionLanguageLabel, 0)], 4, {
        "title": this._translate('Expression Language = {expressionLanguageLabel}', {
          expressionLanguageLabel
        })
      })], 0);
    }
  }

  const HIGH_PRIORITY$2 = 1500;
  class RulesEditor {
    constructor(components) {
      components.onGetComponent('cell', HIGH_PRIORITY$2, _ref => {
        let cellType = _ref.cellType;
        if (cellType === 'rule') {
          return DecisionRulesCellEditorComponent;
        }
      });
    }
  }
  RulesEditor.$inject = ['components'];

  var decisionRulesEditorModule = {
    __depends__: [DebounceInput, Rules$2],
    __init__: ['decisionRulesEditor'],
    decisionRulesEditor: ['type', RulesEditor]
  };

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty$5(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty$5(obj, key, value) {
    key = _toPropertyKey$5(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$5(arg) {
    var key = _toPrimitive$5(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$5(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  const OFFSET = 4;
  class SimpleModeButtonComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this.state = {
        top: 0,
        left: 0,
        isVisible: false,
        isDisabled: false,
        selection: null
      };
      inject(this);
      const debounceInput = this.debounceInput;
      this.onClick = this.onClick.bind(this);
      this.handleSelectionChanged = this.handleSelectionChanged.bind(this);
      this.hideAndShowDebounced = this.hideAndShowDebounced.bind(this);
      this.showDebounced = debounceInput(this.showDebounced.bind(this));
      this.updatePosition = this.updatePosition.bind(this);
    }
    componentDidMount() {
      const eventBus = this.eventBus;
      eventBus.on('cellSelection.changed', this.handleSelectionChanged);
      eventBus.on('commandStack.changed', this.updatePosition);
      eventBus.on('sheet.scroll', this.hideAndShowDebounced);
    }
    componentWillUnmount() {
      const eventBus = this.eventBus;
      eventBus.off('cellSelection.changed', this.handleSelectionChanged);
      eventBus.off('commandStack.changed', this.updatePosition);
      eventBus.off('sheet.scroll', this.hideAndShowDebounced);
    }
    hideAndShowDebounced() {
      if (this.state.isVisible) {
        this.hide();
        this.showDebounced();
      }
    }
    showDebounced() {
      this.show();
    }
    hide() {
      let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(_objectSpread(_objectSpread({}, state), {}, {
        isVisible: false
      }));
    }
    show() {
      let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(_objectSpread(_objectSpread({}, state), {}, {
        isVisible: true
      }));
      this.updatePosition();
    }
    handleSelectionChanged(_ref) {
      let elementId = _ref.elementId;
      const elementRegistry = this.elementRegistry,
        expressionLanguages = this.expressionLanguages,
        simpleMode = this.simpleMode;
      const selection = elementRegistry.get(elementId);
      if (!selection || !simpleMode.canSimpleEdit(selection)) {
        this.hide({
          isDisabled: false,
          selection: null
        });
        return;
      }
      const expressionLanguage = getExpressionLanguage(selection);
      const isDisabled = !isDefaultExpressionLanguage(selection, expressionLanguage, expressionLanguages);
      this.show({
        isDisabled,
        selection
      });
    }

    // position button always on opposite site of context menu
    updatePosition() {
      const selection = this.state.selection;
      const node = this.node;
      if (!selection || !node) {
        return;
      }
      const renderer = this.renderer;
      const container = renderer.getContainer(),
        containerBounds = container.getBoundingClientRect();
      const cellNode = getNodeById(selection.id, container);
      const cellBounds = cellNode.getBoundingClientRect();
      const nodeBounds = this.node.getBoundingClientRect();
      const _getTableContainerScr = getTableContainerScroll(node),
        scrollLeft = _getTableContainerScr.scrollLeft,
        scrollTop = _getTableContainerScr.scrollTop;
      const nodePosition = {};
      if (cellBounds.left + cellBounds.width / 2 > containerBounds.width / 2) {
        // left
        nodePosition.left = -containerBounds.left + cellBounds.left - nodeBounds.width + OFFSET + scrollLeft + 'px';
        node.classList.remove('right');
        node.classList.add('left');
      } else {
        // right
        nodePosition.left = -containerBounds.left + cellBounds.left + cellBounds.width - OFFSET + scrollLeft + 'px';
        node.classList.remove('left');
        node.classList.add('right');
      }
      if (cellBounds.top + cellBounds.height / 2 > containerBounds.height / 2) {
        // bottom
        nodePosition.top = -containerBounds.top + cellBounds.top - nodeBounds.height + OFFSET + scrollTop + 'px';
        node.classList.remove('top');
        node.classList.add('bottom');
      } else {
        // top
        nodePosition.top = -containerBounds.top + cellBounds.top - OFFSET + scrollTop + 'px';
        node.classList.remove('bottom');
        node.classList.add('top');
      }
      assign$4(this.node.style, nodePosition);
    }
    onClick() {
      const eventBus = this.eventBus;
      const isDisabled = this.state.isDisabled;
      if (isDisabled) {
        return;
      }
      const selection = this.selection;
      const element = selection.get();
      if (!element) {
        return;
      }
      eventBus.fire('simpleMode.open', {
        element,
        node: getNodeById(element.id, this._container)
      });
      this.hide();
    }
    render() {
      const _this$state = this.state,
        isDisabled = _this$state.isDisabled,
        isVisible = _this$state.isVisible,
        top = _this$state.top,
        left = _this$state.left;
      const classes = ['simple-mode-button', 'no-deselect'];
      if (isDisabled) {
        classes.push('disabled');
      }
      return isVisible ? createVNode(1, "div", classes.join(' '), createVNode(1, "span", "dmn-icon-edit"), 2, {
        "onClick": this.onClick,
        "style": {
          top,
          left
        },
        "title": isDisabled ? this._translate('Editing not supported for set expression language') : this._translate('Edit')
      }, null, node => this.node = node) : null;
    }
  }
  SimpleModeButtonComponent.$inject = ['debounceInput', 'elementRegistry', 'eventBus', 'expressionLanguages', 'renderer', 'selection', 'simpleMode'];

  // helpers //////////////////////

  /**
   * Return set expression language if found.
   *
   * @param {Cell} cell - Cell.
   */
  function getExpressionLanguage(cell) {
    return cell.businessObject.expressionLanguage;
  }
  function isDefaultExpressionLanguage(cell, expressionLanguage, expressionLanguages) {
    return !expressionLanguage || expressionLanguage === getDefaultExpressionLanguage(cell, expressionLanguages);
  }
  function getDefaultExpressionLanguage(cell, expressionLanguages) {
    if (isInput$1(cell.col)) {
      return expressionLanguages.getDefault('inputCell').value;
    } else if (isOutput(cell.col)) {
      return expressionLanguages.getDefault('outputCell').value;
    }
  }
  function getTableContainerScroll(node) {
    const tableContainer = closest(node, '.tjs-table-container');
    if (!tableContainer) {
      return {
        scrollTop: 0,
        scrollLeft: 0
      };
    }
    const scrollLeft = tableContainer.scrollLeft,
      scrollTop = tableContainer.scrollTop;
    return {
      scrollTop,
      scrollLeft
    };
  }

  class SimpleMode {
    constructor(components, contextMenu, elementRegistry, eventBus, renderer) {
      this._providers = [];
      components.onGetComponent('table.before', () => {
        return SimpleModeButtonComponent;
      });
      eventBus.on('simpleMode.open', _ref => {
        let element = _ref.element,
          node = _ref.node;
        const _node$getBoundingClie = node.getBoundingClientRect(),
          left = _node$getBoundingClie.left,
          top = _node$getBoundingClie.top,
          width = _node$getBoundingClie.width,
          height = _node$getBoundingClie.height;
        const container = renderer.getContainer();
        contextMenu.open({
          x: left + container.parentNode.scrollLeft,
          y: top + container.parentNode.scrollTop,
          width,
          height
        }, {
          contextMenuType: 'simple-mode-edit',
          element,
          offset: {
            x: 4,
            y: 4
          }
        });
      });
      eventBus.on('cell.click', e => {
        const event = e.event,
          node = e.node,
          id = e.id;
        if (isCmd$1(event)) {
          const element = elementRegistry.get(id);
          if (element) {
            eventBus.fire('simpleMode.open', {
              node,
              element
            });
          }

          // prevent focus
          e.preventDefault();
        }
      });
    }
    registerProvider(provider) {
      this._providers.push(provider);
    }
    canSimpleEdit(element) {
      return this._providers.reduce((canSimpleEdit, provider) => {
        return canSimpleEdit || provider(element);
      }, false);
    }
  }
  SimpleMode.$inject = ['components', 'contextMenu', 'elementRegistry', 'eventBus', 'renderer'];

  // helpers //////////

  function isCmd$1(event) {
    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (event.altKey) {
      return false;
    }
    return event.ctrlKey || event.metaKey;
  }

  var simpleModeModule = {
    __depends__: [contextMenuModule, cellSelectionModule, ExpressionLanguagesModule],
    __init__: ['simpleMode'],
    simpleMode: ['type', SimpleMode]
  };

  function parseString$6(string) {
    if (!string || isEmptyString$3(string)) {
      return 'none';
    } else if (string.trim() === 'true') {
      return 'true';
    } else if (string.trim() === 'false') {
      return 'false';
    }
  }
  function isEmptyString$3(string) {
    return string === '';
  }

  const TRUE = 'true',
    FALSE = 'false',
    NONE = 'none';
  class BooleanEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$6(element.businessObject.text);
      this.state = {
        value: parsedString || NONE
      };
      this.editCell = this.editCell.bind(this);
      this.onChange = this.onChange.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onChange(value) {
      const element = this.props.context.element;
      this.editCell(element.businessObject, value === NONE ? '' : value);
      this.setState({
        value
      });
    }
    render() {
      const value = this.state.value;
      const options = [{
        label: '-',
        value: NONE
      }, {
        label: this._translate('Yes'),
        value: TRUE
      }, {
        label: this._translate('No'),
        value: FALSE
      }];
      return createVNode(1, "div", "simple-boolean-edit context-menu-container", [createVNode(1, "h3", "dms-heading", this._translate('Edit Boolean'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set Value'), 0), createComponentVNode(2, InputSelect, {
        "noInput": true,
        "className": "dms-block",
        "onChange": this.onChange,
        "options": options,
        "value": value
      })], 4);
    }
  }

  class SimpleBooleanEdit {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        return (isInput$1(element.col) || isOutput(element.col)) && getTypeRef$9(element) === 'boolean';
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$9(context.element);
          if (typeRef === 'boolean') {
            return BooleanEdit;
          }
        }
      });
    }
  }
  SimpleBooleanEdit.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$9(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }

  var simpleBooleanEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleBooleanEdit'],
    simpleBooleanEdit: ['type', SimpleBooleanEdit]
  };

  const ISO_DATE_REGEX$2 = /^\d{4}(?:-\d\d){2}$/;

  // eslint-disable-next-line
  const BETWEEN_DATE_REGEX$2 = /^\[date\("([^"]*)"\)..date\("([^"]*)"\)\]$/;

  // eslint-disable-next-line
  const BEFORE_AFTER_DATE_REGEX$2 = /^(<|>)\s*date\("([^"]*)"\)$/;
  const EXACT_DATE_REGEX$2 = /^date\("([^"]*)"\)$/;
  const EXACT$7 = 'exact',
    BEFORE$7 = 'before',
    AFTER$7 = 'after',
    BETWEEN$7 = 'between';
  function validateISOString$3(string) {
    if (!ISO_DATE_REGEX$2.test(string.trim())) {
      return 'Date must match pattern yyyy-MM-dd.';
    }
  }
  function getDateString$2(type, dates) {
    if (type === EXACT$7) {
      return "date(\"".concat(dates[0], "\")");
    } else if (type === BEFORE$7) {
      return "< date(\"".concat(dates[0], "\")");
    } else if (type === AFTER$7) {
      return "> date(\"".concat(dates[0], "\")");
    } else if (type === BETWEEN$7) {
      return "[date(\"".concat(dates[0], "\")..date(\"").concat(dates[1], "\")]");
    }
  }
  function getSampleDate$2() {
    const date = new Date();
    date.setUTCHours(0, 0, 0, 0);
    return date.toISOString().slice(0, 10);
  }
  function parseString$5(string) {
    // emtpy
    if (!string || string.trim() === '') {
      return {
        type: 'exact',
        date: ''
      };
    }

    // between
    let matches = string.match(BETWEEN_DATE_REGEX$2);
    if (matches) {
      return {
        type: 'between',
        dates: [matches[1], matches[2]]
      };
    }

    // before or after
    matches = string.match(BEFORE_AFTER_DATE_REGEX$2);
    if (matches) {
      return {
        type: matches[1] === '<' ? 'before' : 'after',
        date: matches[2]
      };
    }

    // exact
    matches = string.match(EXACT_DATE_REGEX$2);
    if (matches) {
      return {
        type: 'exact',
        date: matches[1]
      };
    }
  }

  const EXACT$6 = 'exact',
    BEFORE$6 = 'before',
    AFTER$6 = 'after',
    BETWEEN$6 = 'between';
  class InputDateEdit$2 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$5(element.businessObject.text);
      if (parsedString) {
        let dates;
        if (parsedString.date) {
          dates = [parsedString.date, ''];
        } else if (parsedString.dates) {
          dates = parsedString.dates;
        } else {
          dates = ['', ''];
        }
        this.state = {
          type: parsedString.type,
          dates
        };
      } else {
        this.state = {
          type: EXACT$6,
          dates: ['', '']
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onTypeChange = this.onTypeChange.bind(this);
      this.onSetStartDateTodayClick = this.onSetStartDateTodayClick.bind(this);
      this.onSetEndDateTodayClick = this.onSetEndDateTodayClick.bind(this);
      this.onStartDateInput = this.onStartDateInput.bind(this);
      this.onEndDateInput = this.onEndDateInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onTypeChange(value) {
      const element = this.props.context.element;
      const dates = this.state.dates;
      this.setState({
        type: value
      });
      if (parseString$5(getDateString$2(value, dates))) {
        this.editCell(element.businessObject, getDateString$2(value, dates));
      }
    }
    onSetStartDateTodayClick() {
      const element = this.props.context.element;
      const _this$state = this.state,
        dates = _this$state.dates,
        type = _this$state.type;
      const date = getSampleDate$2();
      this.setState({
        dates: [date, dates[1]]
      });
      if (parseString$5(getDateString$2(type, [date, dates[1]]))) {
        this.editCell(element.businessObject, getDateString$2(type, [date, dates[1]]));
      }
    }
    onSetEndDateTodayClick() {
      const element = this.props.context.element;
      const _this$state2 = this.state,
        dates = _this$state2.dates,
        type = _this$state2.type;
      const date = getSampleDate$2();
      this.setState({
        dates: [dates[0], date]
      });
      if (parseString$5(getDateString$2(type, [dates[0], date]))) {
        this.editCell(element.businessObject, getDateString$2(type, [dates[0], date]));
      }
    }
    onStartDateInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      const _this$state3 = this.state,
        dates = _this$state3.dates,
        type = _this$state3.type;
      this.setState({
        dates: [value, dates[1]]
      });
      this.debouncedEditCell(element.businessObject, getDateString$2(type, [value, dates[1]]));
    }
    onEndDateInput(_ref2) {
      let value = _ref2.value;
      const element = this.props.context.element;
      const _this$state4 = this.state,
        dates = _this$state4.dates,
        type = _this$state4.type;
      this.setState({
        dates: [dates[0], value]
      });
      this.debouncedEditCell(element.businessObject, getDateString$2(type, [dates[0], value]));
    }
    render() {
      const _this$state5 = this.state,
        dates = _this$state5.dates,
        type = _this$state5.type;
      const options = [{
        label: this._translate('Exactly'),
        value: EXACT$6
      }, {
        label: this._translate('Before'),
        value: BEFORE$6
      }, {
        label: this._translate('After'),
        value: AFTER$6
      }, {
        label: this._translate('Between'),
        value: BETWEEN$6
      }];
      return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit date'), 0), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": options,
        "value": type
      }), 2), createVNode(1, "h4", "dms-heading", type === BETWEEN$6 ? this._translate('Edit start date') : this._translate('Set date'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "start-date-input dms-block",
        "onInput": this.onStartDateInput,
        "placeholder": this._translate('e.g. { sample }', {
          sample: getSampleDate$2()
        }),
        "validate": string => validateISOString$3(string) && this._translate(validateISOString$3(string)),
        "value": dates[0]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", this._translate('Use today'), 0, {
        "type": "button",
        "onClick": this.onSetStartDateTodayClick
      }), createTextVNode(".")], 4)], 4), type === BETWEEN$6 && createVNode(1, "h4", "dms-heading", this._translate('Edit end date'), 0), type === BETWEEN$6 && createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "end-date-input dms-block",
        "onInput": this.onEndDateInput,
        "placeholder": this._translate('e.g. { sample }', {
          sample: getSampleDate$2()
        }),
        "validate": string => validateISOString$3(string) && this._translate(validateISOString$3(string)),
        "value": dates[1]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", this._translate('Use today'), 0, {
        "type": "button",
        "onClick": this.onSetEndDateTodayClick
      }), createTextVNode(".")], 4)], 4)], 0);
    }
  }

  class OutputDateEdit$2 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$5(element.businessObject.text);
      this.state = {
        date: parsedString ? parsedString.date : ''
      };
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onClick = this.onClick.bind(this);
      this.onInput = this.onInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onClick() {
      const element = this.props.context.element;
      const date = getSampleDate$2();
      this.setState({
        date
      });
      this.editCell(element.businessObject, "date(\"".concat(date, "\")"));
    }
    onInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      this.setState({
        date: value
      });
      this.debouncedEditCell(element.businessObject, "date(\"".concat(value, "\")"));
    }
    render() {
      const date = this.state.date;
      return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit date'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set date'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "onInput": this.onInput,
        "placeholder": this._translate('e.g. { example } ', {
          example: getSampleDate$2()
        }),
        "validate": string => validateISOString$3(string) && this._translate(validateISOString$3(string)),
        "value": date,
        "className": "dms-block"
      }), createVNode(1, "p", "dms-hint", [this._translate('Set date'), createTextVNode(" "), createVNode(1, "button", "use-today", this._translate('to today'), 0, {
        "type": "button",
        "onClick": this.onClick
      }), createTextVNode(".")], 0)], 4)], 4);
    }
  }

  class SimpleDateEdit$3 {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        const typeRef = getTypeRef$8(element);
        return (isInput$1(element.col) || isOutput(element.col)) && isDate$1(typeRef);
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$8(context.element);
          if (isDate$1(typeRef)) {
            if (isInput$1(context.element.col)) {
              return InputDateEdit$2;
            } else if (isOutput(context.element.col)) {
              return OutputDateEdit$2;
            }
          }
        }
      });
    }
  }
  SimpleDateEdit$3.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$8(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  function isDate$1(typeRef) {
    return typeRef === 'date';
  }

  var simpleDateEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleDateEdit'],
    simpleDateEdit: ['type', SimpleDateEdit$3]
  };

  const ISO_DATE_REGEX$1 = /^\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d(?:Z|(?:[@+-][^")]+))?$/;

  // eslint-disable-next-line
  const BETWEEN_DATE_REGEX$1 = /^\[date and time\("([^"]*)"\)..date and time\("([^"]*)"\)\]$/;

  // eslint-disable-next-line
  const BEFORE_AFTER_DATE_REGEX$1 = /^(<|>)\s*date and time\("([^"]*)"\)$/;

  // eslint-disable-next-line
  const EXACT_DATE_REGEX$1 = /^date and time\("([^"]*)"\)$/;
  const EXACT$5 = 'exact',
    BEFORE$5 = 'before',
    AFTER$5 = 'after',
    BETWEEN$5 = 'between';
  function validateISOString$2(string) {
    if (!ISO_DATE_REGEX$1.test(string.trim())) {
      return 'Date and time must match pattern yyyy-MM-ddTHH:mm:ss[time zone].';
    }
  }
  function getDateString$1(type, dates) {
    if (type === EXACT$5) {
      return "date and time(\"".concat(dates[0], "\")");
    } else if (type === BEFORE$5) {
      return "< date and time(\"".concat(dates[0], "\")");
    } else if (type === AFTER$5) {
      return "> date and time(\"".concat(dates[0], "\")");
    } else if (type === BETWEEN$5) {
      return "[date and time(\"".concat(dates[0], "\")..date and time(\"").concat(dates[1], "\")]");
    }
  }
  function getSampleDate$1() {
    const date = new Date();
    date.setUTCHours(0, 0, 0, 0);
    return date.toISOString().replace('.000Z', 'Z');
  }
  function parseString$4(string) {
    // emtpy
    if (!string || string.trim() === '') {
      return {
        type: 'exact',
        date: ''
      };
    }

    // between
    let matches = string.match(BETWEEN_DATE_REGEX$1);
    if (matches) {
      return {
        type: 'between',
        dates: [matches[1], matches[2]]
      };
    }

    // before or after
    matches = string.match(BEFORE_AFTER_DATE_REGEX$1);
    if (matches) {
      return {
        type: matches[1] === '<' ? 'before' : 'after',
        date: matches[2]
      };
    }

    // exact
    matches = string.match(EXACT_DATE_REGEX$1);
    if (matches) {
      return {
        type: 'exact',
        date: matches[1]
      };
    }
  }

  const EXACT$4 = 'exact',
    BEFORE$4 = 'before',
    AFTER$4 = 'after',
    BETWEEN$4 = 'between';
  class InputDateEdit$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$4(element.businessObject.text);
      if (parsedString) {
        let dates;
        if (parsedString.date) {
          dates = [parsedString.date, ''];
        } else if (parsedString.dates) {
          dates = parsedString.dates;
        } else {
          dates = ['', ''];
        }
        this.state = {
          type: parsedString.type,
          dates
        };
      } else {
        this.state = {
          type: EXACT$4,
          dates: ['', '']
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onTypeChange = this.onTypeChange.bind(this);
      this.onSetStartDateTodayClick = this.onSetStartDateTodayClick.bind(this);
      this.onSetEndDateTodayClick = this.onSetEndDateTodayClick.bind(this);
      this.onStartDateInput = this.onStartDateInput.bind(this);
      this.onEndDateInput = this.onEndDateInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onTypeChange(value) {
      const element = this.props.context.element;
      const dates = this.state.dates;
      this.setState({
        type: value
      });
      if (parseString$4(getDateString$1(value, dates))) {
        this.editCell(element.businessObject, getDateString$1(value, dates));
      }
    }
    onSetStartDateTodayClick() {
      const element = this.props.context.element;
      const _this$state = this.state,
        dates = _this$state.dates,
        type = _this$state.type;
      const date = getSampleDate$1();
      this.setState({
        dates: [date, dates[1]]
      });
      if (parseString$4(getDateString$1(type, [date, dates[1]]))) {
        this.editCell(element.businessObject, getDateString$1(type, [date, dates[1]]));
      }
    }
    onSetEndDateTodayClick() {
      const element = this.props.context.element;
      const _this$state2 = this.state,
        dates = _this$state2.dates,
        type = _this$state2.type;
      const date = getSampleDate$1();
      this.setState({
        dates: [dates[0], date]
      });
      if (parseString$4(getDateString$1(type, [dates[0], date]))) {
        this.editCell(element.businessObject, getDateString$1(type, [dates[0], date]));
      }
    }
    onStartDateInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      const _this$state3 = this.state,
        dates = _this$state3.dates,
        type = _this$state3.type;
      this.setState({
        dates: [value, dates[1]]
      });
      this.debouncedEditCell(element.businessObject, getDateString$1(type, [value, dates[1]]));
    }
    onEndDateInput(_ref2) {
      let value = _ref2.value;
      const element = this.props.context.element;
      const _this$state4 = this.state,
        dates = _this$state4.dates,
        type = _this$state4.type;
      this.setState({
        dates: [dates[0], value]
      });
      this.debouncedEditCell(element.businessObject, getDateString$1(type, [dates[0], value]));
    }
    render() {
      const _this$state5 = this.state,
        dates = _this$state5.dates,
        type = _this$state5.type;
      const options = [{
        label: this._translate('Exactly'),
        value: EXACT$4
      }, {
        label: this._translate('Before'),
        value: BEFORE$4
      }, {
        label: this._translate('After'),
        value: AFTER$4
      }, {
        label: this._translate('Between'),
        value: BETWEEN$4
      }];
      return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit date and time'), 0), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": options,
        "value": type
      }), 2), createVNode(1, "h4", "dms-heading", type === BETWEEN$4 ? this._translate('Edit start date') : this._translate('Set date'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "start-date-input dms-block",
        "onInput": this.onStartDateInput,
        "placeholder": this._translate('e.g. { sample }', {
          sample: getSampleDate$1()
        }),
        "validate": string => validateISOString$2(string) && this._translate(validateISOString$2(string)),
        "value": dates[0]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", this._translate('Use today'), 0, {
        "type": "button",
        "onClick": this.onSetStartDateTodayClick
      }), createTextVNode(".")], 4)], 4), type === BETWEEN$4 && createVNode(1, "h4", "dms-heading", this._translate('Edit end date'), 0), type === BETWEEN$4 && createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "end-date-input dms-block",
        "onInput": this.onEndDateInput,
        "placeholder": this._translate('e.g. { sample }', {
          sample: getSampleDate$1()
        }),
        "validate": string => validateISOString$2(string) && this._translate(validateISOString$2(string)),
        "value": dates[1]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", this._translate('Use today'), 0, {
        "type": "button",
        "onClick": this.onSetEndDateTodayClick
      }), createTextVNode(".")], 4)], 4)], 0);
    }
  }

  class OutputDateEdit$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$4(element.businessObject.text);
      this.state = {
        date: parsedString ? parsedString.date : ''
      };
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onClick = this.onClick.bind(this);
      this.onInput = this.onInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onClick() {
      const element = this.props.context.element;
      const date = getSampleDate$1();
      this.setState({
        date
      });
      this.editCell(element.businessObject, "date and time(\"".concat(date, "\")"));
    }
    onInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      this.setState({
        date: value
      });
      this.debouncedEditCell(element.businessObject, "date and time(\"".concat(value, "\")"));
    }
    render() {
      const date = this.state.date;
      return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit date and time'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set date and time'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "onInput": this.onInput,
        "placeholder": this._translate('e.g. { sample }', {
          sample: getSampleDate$1()
        }),
        "validate": string => validateISOString$2(string) && this._translate(validateISOString$2(string)),
        "value": date,
        "className": "dms-block"
      }), createVNode(1, "p", "dms-hint", [this._translate('Use'), createTextVNode(" "), createVNode(1, "button", "use-today", this._translate('today'), 0, {
        "type": "button",
        "onClick": this.onClick
      }), createTextVNode(".")], 0)], 4)], 4);
    }
  }

  class SimpleDateEdit$2 {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        const typeRef = getTypeRef$7(element);
        return (isInput$1(element.col) || isOutput(element.col)) && isDateTime(typeRef);
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$7(context.element);
          if (isDateTime(typeRef)) {
            if (isInput$1(context.element.col)) {
              return InputDateEdit$1;
            } else if (isOutput(context.element.col)) {
              return OutputDateEdit$1;
            }
          }
        }
      });
    }
  }
  SimpleDateEdit$2.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$7(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  function isDateTime(typeRef) {
    return typeRef === 'dateTime';
  }

  var simpleDateTimeEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleDateTimeEdit'],
    simpleDateTimeEdit: ['type', SimpleDateEdit$2]
  };

  function _wrapRegExp() {
    _wrapRegExp = function _wrapRegExp(re, groups) {
      return new BabelRegExp(re, void 0, groups);
    };
    var _super = RegExp.prototype,
      _groups = new WeakMap();
    function BabelRegExp(re, flags, groups) {
      var _this = new RegExp(re, flags);
      return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
    }
    function buildGroups(result, re) {
      var g = _groups.get(re);
      return Object.keys(g).reduce(function (groups, name) {
        var i = g[name];
        if ("number" == typeof i) groups[name] = result[i];else {
          for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++;
          groups[name] = result[i[k]];
        }
        return groups;
      }, Object.create(null));
    }
    return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
      var result = _super.exec.call(this, str);
      if (result) {
        result.groups = buildGroups(result, this);
        var indices = result.indices;
        indices && (indices.groups = buildGroups(indices, this));
      }
      return result;
    }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
      if ("string" == typeof substitution) {
        var groups = _groups.get(this);
        return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
          var group = groups[name];
          return "$" + (Array.isArray(group) ? group.join("$") : group);
        }));
      }
      if ("function" == typeof substitution) {
        var _this = this;
        return _super[Symbol.replace].call(this, str, function () {
          var args = arguments;
          return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
        });
      }
      return _super[Symbol.replace].call(this, str, substitution);
    }, _wrapRegExp.apply(this, arguments);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  const operators$1 = {
    equals: '=',
    less: '<',
    lessEquals: '<=',
    greater: '>',
    greaterEquals: '>='
  };
  function getOperatorName$1(string) {
    return keys(operators$1).filter(key => {
      return string === operators$1[key];
    })[0];
  }
  function parseDuration(text) {
    if (!text || isEmptyString$2(text.trim())) {
      return {
        type: 'comparison',
        values: []
      };
    }
    const parsedComparison = parseComparison(text);
    if (parsedComparison) {
      return parsedComparison;
    }
    const parsedRange = parseRange(text);
    if (parsedRange) {
      return parsedRange;
    }
  }
  function isEmptyString$2(string) {
    return string === '';
  }
  function getComparisonString$1(comparisonOperator, comparisonValue) {
    if (comparisonOperator === 'equals') {
      return "duration(\"".concat(comparisonValue, "\")");
    } else {
      return "".concat(operators$1[comparisonOperator], " duration(\"").concat(comparisonValue, "\")");
    }
  }
  function getRangeString$1(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {
    const rangeStartChar = rangeStartType === 'exclude' ? ']' : '[',
      rangeEndChar = rangeEndType === 'exclude' ? '[' : ']';
    return "".concat(rangeStartChar, "duration(\"").concat(rangeStartValue, "\")") + "..duration(\"".concat(rangeEndValue, "\")").concat(rangeEndChar);
  }
  function validateDuration(type, value) {
    if (type === 'yearMonthDuration') {
      return validateYearMonthDuration(value);
    } else if (type === 'dayTimeDuration') {
      return validateDayTimeDuration(value);
    }
  }
  function validateYearMonthDuration(value) {
    return /^P(\d+Y\d+M|\d+Y|\d+M)$/.test(value);
  }
  function validateDayTimeDuration(value) {
    return /^P(\d+DT\d+H|\d+D|T\d+H)$/.test(value);
  }
  function withoutDurationCall(text) {
    const result = /^duration\("([^"]*)"\)$/.exec(text);
    return result && result[1];
  }
  function parseComparison(text) {
    const exactValue = withoutDurationCall(text);
    if (exactValue) {
      return {
        type: 'comparison',
        operator: 'equals',
        values: [exactValue]
      };
    }
    const _match = match( /*#__PURE__*/_wrapRegExp(/^(=|(:?<|>)=?)\s*duration\("([^"]*)"\)$/, {
        operator: 1,
        value: 3
      }), text),
      operator = _match.operator,
      value = _match.value;
    if (operator && value) {
      return {
        type: 'comparison',
        values: [value],
        operator: getOperatorName$1(operator)
      };
    }
  }
  function parseRange(text) {
    const _match2 = match( /*#__PURE__*/_wrapRegExp(/^([[\]])duration\("([^"]*)"\)\.\.duration\("([^"]*)"\)([[\]])$/, {
        start: 1,
        firstValue: 2,
        secondValue: 3,
        end: 4
      }), text),
      start = _match2.start,
      end = _match2.end,
      firstValue = _match2.firstValue,
      secondValue = _match2.secondValue;
    if (start && end) {
      return {
        type: 'range',
        values: [firstValue, secondValue],
        start: start === ']' ? 'exclude' : 'include',
        end: end === '[' ? 'exclude' : 'include'
      };
    }
  }
  function match(regex, input) {
    const _ref = regex.exec(input) || {
        groups: {}
      },
      groups = _ref.groups;
    return groups;
  }

  const ERROR_MESSAGE = {
    yearMonthDuration: 'Must match PnYnM.',
    dayTimeDuration: 'Must match PnDTnH.'
  };
  class DurationInput extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._type = props.type;
      this.onInput = this.onInput.bind(this);
      this.validate = this.validate.bind(this);
      this.state = {
        value: props.value
      };
    }
    onInput(_ref) {
      let value = _ref.value;
      this.setState({
        value
      });
      this.props.onInput(value);
    }
    validate(value) {
      if (!validateDuration(this._type, value)) {
        return this._translate(ERROR_MESSAGE[this._type]);
      }
    }
    _getPlaceholder() {
      if (this._type === 'yearMonthDuration') {
        return this._translate('e.g. { sample }', {
          sample: 'P1Y2M'
        });
      } else if (this._type === 'dayTimeDuration') {
        this._translate('e.g. { sample }', {
          sample: 'P1DT2H'
        });
      }
    }
    render() {
      return createComponentVNode(2, ValidatedInput, {
        "type": "text",
        "onInput": this.onInput,
        "placeholder": this._getPlaceholder(),
        "validate": this.validate,
        "value": this.state.value,
        "className": this.props.className
      });
    }
  }

  const COMPARISON$1 = 'comparison',
    RANGE$1 = 'range';

  // adapted from InputNumberEdit
  class InputDurationEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      this._type = getTypeRef$6(element);
      const parsedString = parseDuration(element.businessObject.text, this._type);
      if (parsedString) {
        this.state = {
          type: parsedString.type,
          comparisonOperator: parsedString.operator || 'equals',
          startValue: parsedString.values[0] || '',
          endValue: parsedString.values[1] || '',
          rangeStartType: parsedString.start || 'include',
          rangeEndType: parsedString.end || 'include'
        };
      } else {
        this.state = {
          type: COMPARISON$1,
          comparisonOperator: 'equals',
          startValue: '',
          endValue: '',
          rangeStartType: 'include',
          rangeEndType: 'include'
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onComparisonOperatorChange = this.onComparisonOperatorChange.bind(this);
      this.onComparisonValueChange = this.onComparisonValueChange.bind(this);
      this.onTypeChange = this.onTypeChange.bind(this);
      this.onRangeStartTypeChange = this.onRangeStartTypeChange.bind(this);
      this.onRangeStartValueChange = this.onRangeStartValueChange.bind(this);
      this.onRangeEndTypeChange = this.onRangeEndTypeChange.bind(this);
      this.onRangeEndValueChange = this.onRangeEndValueChange.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onTypeChange(value) {
      const element = this.props.context.element;
      const _this$state = this.state,
        comparisonOperator = _this$state.comparisonOperator,
        startValue = _this$state.startValue,
        endValue = _this$state.endValue,
        rangeStartType = _this$state.rangeStartType,
        rangeEndType = _this$state.rangeEndType;
      if (value === COMPARISON$1) {
        this.editCell(element.businessObject, getComparisonString$1(comparisonOperator, startValue));
      } else {
        this.editCell(element.businessObject, getRangeString$1(startValue, endValue, rangeStartType, rangeEndType));
      }
      this.setState({
        type: value
      });
    }
    onComparisonOperatorChange(value) {
      const element = this.props.context.element;
      const _this$state2 = this.state,
        type = _this$state2.type,
        startValue = _this$state2.startValue;
      if (type === COMPARISON$1) {
        this.editCell(element.businessObject, getComparisonString$1(value, startValue));
        this.setState({
          comparisonOperator: value
        });
      }
    }
    onComparisonValueChange(comparisonValue) {
      const element = this.props.context.element;
      const _this$state3 = this.state,
        type = _this$state3.type,
        comparisonOperator = _this$state3.comparisonOperator;
      if (type === COMPARISON$1) {
        this.debouncedEditCell(element.businessObject, getComparisonString$1(comparisonOperator, comparisonValue));
        this.setState({
          startValue: comparisonValue
        });
      }
    }
    onRangeStartTypeChange(value) {
      const element = this.props.context.element;
      const _this$state4 = this.state,
        type = _this$state4.type,
        startValue = _this$state4.startValue,
        endValue = _this$state4.endValue,
        rangeEndType = _this$state4.rangeEndType;
      if (type === RANGE$1) {
        this.editCell(element.businessObject, getRangeString$1(startValue, endValue, value, rangeEndType));
        this.setState({
          rangeStartType: value
        });
      }
    }
    onRangeStartValueChange(value) {
      const element = this.props.context.element;
      const _this$state5 = this.state,
        type = _this$state5.type,
        endValue = _this$state5.endValue,
        rangeStartType = _this$state5.rangeStartType,
        rangeEndType = _this$state5.rangeEndType;
      if (type === RANGE$1) {
        this.editCell(element.businessObject, getRangeString$1(value, endValue, rangeStartType, rangeEndType));
        this.setState({
          startValue: value
        });
      }
    }
    onRangeEndTypeChange(value) {
      const element = this.props.context.element;
      const _this$state6 = this.state,
        type = _this$state6.type,
        startValue = _this$state6.startValue,
        endValue = _this$state6.endValue,
        rangeStartType = _this$state6.rangeStartType;
      if (type === RANGE$1) {
        this.editCell(element.businessObject, getRangeString$1(startValue, endValue, rangeStartType, value));
        this.setState({
          rangeEndType: value
        });
      }
    }
    onRangeEndValueChange(value) {
      const element = this.props.context.element;
      const _this$state7 = this.state,
        type = _this$state7.type,
        startValue = _this$state7.startValue,
        rangeStartType = _this$state7.rangeStartType,
        rangeEndType = _this$state7.rangeEndType;
      if (type === RANGE$1) {
        this.editCell(element.businessObject, getRangeString$1(startValue, value, rangeStartType, rangeEndType));
        this.setState({
          endValue: value
        });
      }
    }
    renderComparison(comparisonOperator, comparisonValue) {
      const comparisonOperatorOptions = [{
        label: this._translate('Equals'),
        value: 'equals'
      }, {
        label: this._translate('Less'),
        value: 'less'
      }, {
        label: this._translate('Less or equals'),
        value: 'lessEquals'
      }, {
        label: this._translate('Greater'),
        value: 'greater'
      }, {
        label: this._translate('Greater or equals'),
        value: 'greaterEquals'
      }];
      return createVNode(1, "div", "comparison", [createVNode(1, "h4", "dms-heading", createTextVNode("Value"), 2), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onComparisonOperatorChange,
        "options": comparisonOperatorOptions,
        "value": comparisonOperator
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "comparison-duration-input",
        "onInput": this.onComparisonValueChange,
        "value": comparisonValue
      })], 4)], 4);
    }
    renderRange(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {
      const rangeTypeOptions = [{
        label: this._translate('Include'),
        value: 'include'
      }, {
        label: this._translate('Exclude'),
        value: 'exclude'
      }];
      return createVNode(1, "div", "range", [createVNode(1, "h4", "dms-heading", this._translate('Start value'), 0), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeStartTypeChange,
        "options": rangeTypeOptions,
        "value": rangeStartType
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "range-start-duration-input",
        "onInput": this.onRangeStartValueChange,
        "value": rangeStartValue
      })], 4), createVNode(1, "h4", "dms-heading", this._translate('End value'), 0), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeEndTypeChange,
        "options": rangeTypeOptions,
        "value": rangeEndType
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "range-end-duration-input",
        "onInput": this.onRangeEndValueChange,
        "value": rangeEndValue
      })], 4)], 4);
    }
    render() {
      const _this$state8 = this.state,
        type = _this$state8.type,
        comparisonOperator = _this$state8.comparisonOperator,
        startValue = _this$state8.startValue,
        endValue = _this$state8.endValue,
        rangeStartType = _this$state8.rangeStartType,
        rangeEndType = _this$state8.rangeEndType;
      const typeOptions = [{
        label: this._translate('Comparison'),
        value: COMPARISON$1
      }, {
        label: this._translate('Range'),
        value: RANGE$1
      }];
      return createVNode(1, "div", "context-menu-container simple-duration-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit duration'), 0), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": typeOptions,
        "value": type
      }), 2), type === COMPARISON$1 && this.renderComparison(comparisonOperator, startValue), type === RANGE$1 && this.renderRange(startValue, endValue, rangeStartType, rangeEndType)], 0);
    }
  }
  function getTypeRef$6(element) {
    return element.col.businessObject.inputExpression.typeRef;
  }

  class OutputDurationEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      this._type = getTypeRef$5(element);
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onInput = this.onInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onInput(value) {
      const element = this.props.context.element;
      this.debouncedEditCell(element.businessObject, "duration(\"".concat(value, "\")"));
    }
    render() {
      const value = withoutDurationCall(this.props.context.element.businessObject.text, this._type);
      return createVNode(1, "div", "context-menu-container simple-duration-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit duration'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set duration'), 0), createComponentVNode(2, DurationInput, {
        "onInput": this.onInput,
        "value": value,
        "type": this._type,
        "className": "dms-block"
      })], 4);
    }
  }
  function getTypeRef$5(element) {
    return element.col.businessObject.typeRef;
  }

  class SimpleDurationEdit {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        const typeRef = getTypeRef$4(element);
        return (isInput$1(element.col) || isOutput(element.col)) && isDuration(typeRef);
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$4(context.element);
          if (isDuration(typeRef)) {
            if (isInput$1(context.element.col)) {
              return InputDurationEdit;
            } else if (isOutput(context.element.col)) {
              return OutputDurationEdit;
            }
          }
        }
      });
    }
  }
  SimpleDurationEdit.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$4(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  const durations = ['yearMonthDuration', 'dayTimeDuration'];
  function isDuration(typeRef) {
    return durations.includes(typeRef);
  }

  var simpleDurationEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleDurationEdit'],
    simpleDurationEdit: ['type', SimpleDurationEdit]
  };

  // eslint-disable-next-line
  const COMPARISON_REGULAR_EXPRESSION = /^(-?(?:[0-9]|\.[0-9])+)$|^((?:<|>|=){0,2})\s*(-?(?:[0-9]|\.[0-9])+)$/;

  // eslint-disable-next-line
  const RANGE_REGULAR_EXPRESSION = /^(\[|\]){1}(-?(?:[0-9]|\.[0-9])+){1,}\.\.(-?(?:[0-9]|\.[0-9])+){1,}(\[|\]){1}$/;
  const operators = {
    equals: '=',
    less: '<',
    lessEquals: '<=',
    greater: '>',
    greaterEquals: '>='
  };
  function getOperatorName(string) {
    return keys(operators).filter(key => {
      return string === operators[key];
    })[0];
  }
  function parseString$3(string) {
    if (!string || isEmptyString$1(string.trim())) {
      return {
        type: 'comparison'
      };
    }
    const comparisonMatches = string.match(COMPARISON_REGULAR_EXPRESSION),
      rangeMatches = string.match(RANGE_REGULAR_EXPRESSION);
    if (comparisonMatches) {
      if (isNumber$1(comparisonMatches)) {
        return {
          type: 'comparison',
          value: parseFloat(comparisonMatches[1]),
          operator: 'equals'
        };
      } else if (isComparison(comparisonMatches)) {
        return {
          type: 'comparison',
          value: parseFloat(comparisonMatches[3]),
          operator: getOperatorName(comparisonMatches[2])
        };
      }
    } else if (rangeMatches) {
      return {
        type: 'range',
        values: [rangeMatches[2], rangeMatches[3]].map(value => parseFloat(value)),
        start: rangeMatches[1] === ']' ? 'exclude' : 'include',
        end: rangeMatches[4] === '[' ? 'exclude' : 'include'
      };
    }
  }
  function isEmptyString$1(string) {
    return string === '';
  }
  function isNumber$1(matches) {
    return matches[0] && matches[1] && !matches[2] && !matches[3];
  }
  function isComparison(matches) {
    return matches[0] && !matches[1] && matches[2] && matches[3];
  }
  function getComparisonString(comparisonOperator, comparisonValue) {
    if (comparisonOperator === 'equals') {
      return "".concat(comparisonValue);
    } else {
      return "".concat(operators[comparisonOperator], " ").concat(comparisonValue);
    }
  }
  function getRangeString(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {
    const rangeStartChar = rangeStartType === 'exclude' ? ']' : '[',
      rangeEndChar = rangeEndType === 'exclude' ? '[' : ']';
    return "".concat(rangeStartChar).concat(rangeStartValue, "..").concat(rangeEndValue).concat(rangeEndChar);
  }

  const COMPARISON = 'comparison',
    RANGE = 'range';
  class InputNumberEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$3(element.businessObject.text);
      if (parsedString) {
        this.state = {
          type: parsedString.type,
          comparisonOperator: parsedString.operator || 'equals',
          comparisonValue: parsedString.value || 0,
          rangeStartValue: parsedString.values ? parsedString.values[0] : 0,
          rangeEndValue: parsedString.values ? parsedString.values[1] : 0,
          rangeStartType: parsedString.start || 'include',
          rangeEndType: parsedString.end || 'include'
        };
      } else {
        this.state = {
          type: COMPARISON,
          comparisonOperator: 'equals',
          comparisonValue: 0,
          rangeStartValue: 0,
          rangeEndValue: 0,
          rangeStartType: 'include',
          rangeEndType: 'include'
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onComparisonOperatorChange = this.onComparisonOperatorChange.bind(this);
      this.onComparisonValueChange = this.onComparisonValueChange.bind(this);
      this.onTypeChange = this.onTypeChange.bind(this);
      this.onRangeStartTypeChange = this.onRangeStartTypeChange.bind(this);
      this.onRangeStartValueChange = this.onRangeStartValueChange.bind(this);
      this.onRangeEndTypeChange = this.onRangeEndTypeChange.bind(this);
      this.onRangeEndValueChange = this.onRangeEndValueChange.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onTypeChange(value) {
      const element = this.props.context.element;
      const _this$state = this.state,
        comparisonOperator = _this$state.comparisonOperator,
        comparisonValue = _this$state.comparisonValue,
        rangeStartValue = _this$state.rangeStartValue,
        rangeEndValue = _this$state.rangeEndValue,
        rangeStartType = _this$state.rangeStartType,
        rangeEndType = _this$state.rangeEndType;
      if (value === COMPARISON) {
        this.editCell(element.businessObject, getComparisonString(comparisonOperator, comparisonValue));
      } else {
        this.editCell(element.businessObject, getRangeString(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType));
      }
      this.setState({
        type: value
      });
    }
    onComparisonOperatorChange(value) {
      const element = this.props.context.element;
      const _this$state2 = this.state,
        type = _this$state2.type,
        comparisonValue = _this$state2.comparisonValue;
      if (type === COMPARISON) {
        this.editCell(element.businessObject, getComparisonString(value, comparisonValue));
        this.setState({
          comparisonOperator: value
        });
      }
    }
    onComparisonValueChange(comparisonValue) {
      const element = this.props.context.element;
      const _this$state3 = this.state,
        type = _this$state3.type,
        comparisonOperator = _this$state3.comparisonOperator;
      if (type === COMPARISON) {
        this.debouncedEditCell(element.businessObject, getComparisonString(comparisonOperator, comparisonValue));
        this.setState({
          comparisonValue
        });
      }
    }
    onRangeStartTypeChange(value) {
      const element = this.props.context.element;
      const _this$state4 = this.state,
        type = _this$state4.type,
        rangeStartValue = _this$state4.rangeStartValue,
        rangeEndValue = _this$state4.rangeEndValue,
        rangeEndType = _this$state4.rangeEndType;
      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(rangeStartValue, rangeEndValue, value, rangeEndType));
        this.setState({
          rangeStartType: value
        });
      }
    }
    onRangeStartValueChange(value) {
      const element = this.props.context.element;
      const _this$state5 = this.state,
        type = _this$state5.type,
        rangeEndValue = _this$state5.rangeEndValue,
        rangeStartType = _this$state5.rangeStartType,
        rangeEndType = _this$state5.rangeEndType;
      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(value, rangeEndValue, rangeStartType, rangeEndType));
        this.setState({
          rangeStartValue: value
        });
      }
    }
    onRangeEndTypeChange(value) {
      const element = this.props.context.element;
      const _this$state6 = this.state,
        type = _this$state6.type,
        rangeStartValue = _this$state6.rangeStartValue,
        rangeEndValue = _this$state6.rangeEndValue,
        rangeStartType = _this$state6.rangeStartType;
      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(rangeStartValue, rangeEndValue, rangeStartType, value));
        this.setState({
          rangeEndType: value
        });
      }
    }
    onRangeEndValueChange(value) {
      const element = this.props.context.element;
      const _this$state7 = this.state,
        type = _this$state7.type,
        rangeStartValue = _this$state7.rangeStartValue,
        rangeStartType = _this$state7.rangeStartType,
        rangeEndType = _this$state7.rangeEndType;
      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(rangeStartValue, value, rangeStartType, rangeEndType));
        this.setState({
          rangeEndValue: value
        });
      }
    }
    renderComparison(comparisonOperator, comparisonValue) {
      const comparisonOperatorOptions = [{
        label: this._translate('Equals'),
        value: 'equals'
      }, {
        label: this._translate('Less'),
        value: 'less'
      }, {
        label: this._translate('Less or equals'),
        value: 'lessEquals'
      }, {
        label: this._translate('Greater'),
        value: 'greater'
      }, {
        label: this._translate('Greater or equals'),
        value: 'greaterEquals'
      }];
      return createVNode(1, "div", "comparison", [createVNode(1, "h4", "dms-heading", this._translate('Value'), 0), createVNode(1, "div", "dms-fill-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onComparisonOperatorChange,
        "options": comparisonOperatorOptions,
        "value": comparisonOperator
      }), createTextVNode("\xA0"), createComponentVNode(2, Input, {
        "className": "comparison-number-input",
        "onInput": this.onComparisonValueChange,
        "type": "number",
        "value": comparisonValue
      })], 4)], 4);
    }
    renderRange(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {
      const rangeTypeOptions = [{
        label: this._translate('Include'),
        value: 'include'
      }, {
        label: this._translate('Exclude'),
        value: 'exclude'
      }];
      return createVNode(1, "div", "range", [createVNode(1, "h4", "dms-heading", this._translate('Start value'), 0), createVNode(1, "div", "dms-fill-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeStartTypeChange,
        "options": rangeTypeOptions,
        "value": rangeStartType
      }), createTextVNode("\xA0"), createComponentVNode(2, Input, {
        "className": "range-start-number-input",
        "onInput": this.onRangeStartValueChange,
        "type": "number",
        "value": rangeStartValue
      })], 4), createVNode(1, "h4", "dms-heading", this._translate('End value'), 0), createVNode(1, "div", "dms-fill-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeEndTypeChange,
        "options": rangeTypeOptions,
        "value": rangeEndType
      }), createTextVNode("\xA0"), createComponentVNode(2, Input, {
        "className": "range-end-number-input",
        "onInput": this.onRangeEndValueChange,
        "type": "number",
        "value": rangeEndValue
      })], 4)], 4);
    }
    render() {
      const _this$state8 = this.state,
        type = _this$state8.type,
        comparisonOperator = _this$state8.comparisonOperator,
        comparisonValue = _this$state8.comparisonValue,
        rangeStartValue = _this$state8.rangeStartValue,
        rangeEndValue = _this$state8.rangeEndValue,
        rangeStartType = _this$state8.rangeStartType,
        rangeEndType = _this$state8.rangeEndType;
      const typeOptions = [{
        label: this._translate('Comparison'),
        value: COMPARISON
      }, {
        label: this._translate('Range'),
        value: RANGE
      }];
      return createVNode(1, "div", "context-menu-container simple-number-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit Number'), 0), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": typeOptions,
        "value": type
      }), 2), type === COMPARISON && this.renderComparison(comparisonOperator, comparisonValue), type === RANGE && this.renderRange(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType)], 0);
    }
  }

  class OutputNumberEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$3(element.businessObject.text);
      if (parsedString) {
        this.state = {
          value: parsedString.value
        };
      } else {
        this.state = {
          value: ''
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onInput = this.onInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onInput(value) {
      const element = this.props.context.element;
      this.debouncedEditCell(element.businessObject, value);
      this.setState({
        value
      });
    }
    render() {
      const value = this.state.value;
      return createVNode(1, "div", "context-menu-container simple-number-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit Number'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set Value'), 0), createComponentVNode(2, Input, {
        "onInput": this.onInput,
        "type": "number",
        "value": value
      })], 4);
    }
  }

  class SimpleNumberEdit {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        const typeRef = getTypeRef$3(element);
        return (isInput$1(element.col) || isOutput(element.col)) && isNumber(typeRef);
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$3(context.element);
          if (isNumber(typeRef)) {
            if (isInput$1(context.element.col)) {
              return InputNumberEdit;
            } else if (isOutput(context.element.col)) {
              return OutputNumberEdit;
            }
          }
        }
      });
    }
  }
  SimpleNumberEdit.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$3(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  const numberTypes = ['number', 'integer', 'long', 'double'];
  function isNumber(typeRef) {
    return numberTypes.includes(typeRef);
  }

  var simpleNumberEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleNumberEdit'],
    simpleNumberEdit: ['type', SimpleNumberEdit]
  };

  /**
   * Parse input/output entry string to unary tests and type of unary tests.
   *
   * Example:
   *
   * not("foo", "bar")
   *
   * returns
   *
   * {
   *   type: 'negation',
   *   values: [ "foo", "bar, baz" ]
   * }
   *
   * @param {string} string - Input/Output entry as string e.g. "foo", "bar".
   */
  function parseString$2(string) {
    // empty string or no string at all
    if (!string || isEmptyString(string.trim())) {
      return {
        type: 'disjunction',
        values: []
      };
    }

    // disjunction
    let values = string.split(',');
    const result = {
      type: 'disjunction',
      values: []
    };
    let openString = '';
    values.forEach(value => {
      openString += value;
      if (/^"[^"]*"$/.test(openString.trim())) {
        result.values.push(openString.trim());
        openString = '';
      } else {
        openString += ',';
      }
    });
    if (!openString) {
      return result;
    }

    // negation
    result.type = 'negation';
    result.values = [];
    openString = '';
    const matches = string.match(/^\s*not\((.*)\)\s*$/);
    if (matches) {
      values = matches[1].split(',');
      values.forEach(value => {
        openString += value;
        if (/^"[^"]*"$/.test(openString.trim())) {
          result.values.push(openString.trim());
          openString = '';
        } else {
          openString += ',';
        }
      });
      if (!openString) {
        return result;
      }
    }
  }

  // TODO(philippfromme): seperate when refactoring component
  function getInputOrOutputValues(inputOrOutput) {
    const inputOrOutputValues = isInput$1(inputOrOutput) ? inputOrOutput.inputValues : inputOrOutput.outputValues;
    if (!inputOrOutputValues || isEmptyString(inputOrOutputValues.text)) {
      return [];
    } else {
      return inputOrOutputValues.text.split(',').map(value => value.trim());
    }
  }
  function isEmptyString(string) {
    return string === '';
  }

  const DISJUNCTION = 'disjunction',
    NEGATION = 'negation';
  const INPUT_VALUES_LABEL = 'Predefined Values',
    OUTPUT_VALUES_LABEL = 'Predefined Values',
    INPUT_ENTRY_VALUES_LABEL = 'Custom Values';
  class SimpleStringEditContextMenuComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      let parsedString = parseString$2(props.context.element.businessObject.text);

      // could not parse
      if (!parsedString) {
        parsedString = {
          values: [],
          type: DISJUNCTION
        };
      }
      const inputOrOutputValues = getInputOrOutputValues(props.context.element.col.businessObject);
      const filteredValues = parsedString.values.filter(value => {
        return !includes(inputOrOutputValues, value);
      });
      const isInputClause = isInput$1(props.context.element.col);
      let items = inputOrOutputValues.map(value => {
        return {
          value,
          isChecked: includes(parsedString.values, value),
          isRemovable: false,
          group: isInputClause ? this._translate(INPUT_VALUES_LABEL) : this._translate(OUTPUT_VALUES_LABEL)
        };
      });
      if (isInputClause) {
        items = items.concat(filteredValues.map(value => {
          return {
            value,
            isChecked: true,
            isRemovable: true,
            group: this._translate(INPUT_ENTRY_VALUES_LABEL)
          };
        }));
      }
      let inputValue = '';
      if (!isInputClause && parsedString.values.length && !includes(inputOrOutputValues, parsedString.values[0])) {
        inputValue = parsedString.values[0];
      }
      this.state = {
        items,
        unaryTestsType: parsedString.type,
        inputValue,
        isOutputValueInputChecked: inputValue !== ''
      };
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.addUnaryTestsListItem = this.addUnaryTestsListItem.bind(this);
      this.onInput = this.onInput.bind(this);
      this.onKeyDown = this.onKeyDown.bind(this);
      this.onOutputValueInputClick = this.onOutputValueInputClick.bind(this);
      this.onUnaryTestsListChanged = this.onUnaryTestsListChanged.bind(this);
      this.onUnaryTestsTypeChange = this.onUnaryTestsTypeChange.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }

    /**
     * Change type of unary tests.
     */
    onUnaryTestsTypeChange(value) {
      const items = this.state.items;
      const values = getValues(items);
      const element = this.props.context.element;
      if (value === DISJUNCTION) {
        this.editCell(element.businessObject, values.join(','));
        this.setState({
          unaryTestsType: DISJUNCTION
        });
      } else {
        this.editCell(element.businessObject, "not(".concat(values.join(','), ")"));
        this.setState({
          unaryTestsType: NEGATION
        });
      }
    }

    /**
     * Change list of unary tests.
     */
    onUnaryTestsListChanged(items) {
      // get checked items
      const values = getValues(items);
      const element = this.props.context.element;
      const unaryTestsType = this.state.unaryTestsType;
      if (unaryTestsType === DISJUNCTION) {
        this.editCell(element.businessObject, values.join(','));
      } else {
        this.editCell(element.businessObject, "not(".concat(values.join(','), ")"));
      }
      this.setState({
        items,
        isOutputValueInputChecked: false
      });
    }

    /**
     * Set output value to input value.
     */
    onOutputValueInputClick() {
      const element = this.props.context.element;
      const _this$state = this.state,
        inputValue = _this$state.inputValue,
        items = _this$state.items;
      const parsedString = parseString$2(inputValue);
      if (!parsedString || parsedString.values.length > 1) {
        return;
      }
      this.editCell(element.businessObject, "".concat(parsedString.values.join('')));

      // uncheck all other values
      this.setState({
        items: items.map(item => {
          item.isChecked = false;
          return item;
        }),
        isOutputValueInputChecked: true
      });
    }

    /**
     * Set output value if valid.
     */
    onInput(_ref) {
      let isValid = _ref.isValid,
        value = _ref.value;
      const isOutputValueInputChecked = this.state.isOutputValueInputChecked;
      this.setState({
        inputValue: value
      });
      const element = this.props.context.element;
      if (!isInput$1(element) && isValid && isOutputValueInputChecked) {
        this.debouncedEditCell(element.businessObject, value);
      }
    }

    /**
     * Add new value on ENTER.
     */
    onKeyDown(_ref2) {
      let isValid = _ref2.isValid,
        event = _ref2.event;
      if (!isEnter(event.keyCode)) {
        return;
      }
      const element = this.props.context.element;
      const isInputClause = isInput$1(element.col);

      // stop ENTER propagation (and ContextMenu close)
      if (isInputClause || !isValid) {
        event.stopPropagation();
        event.preventDefault();
      }
      if (isValid) {
        if (isInputClause) {
          this.addUnaryTestsListItem();
        } else {
          this.onOutputValueInputClick();
        }
      }
    }

    /**
     * Add unary tests to list.
     */
    addUnaryTestsListItem() {
      const _this$state2 = this.state,
        inputValue = _this$state2.inputValue,
        items = _this$state2.items,
        unaryTestsType = _this$state2.unaryTestsType;
      const parsedInput = parseString$2(inputValue);
      if (!parsedInput) {
        return;
      }
      const element = this.props.context.element;
      const values = getValues(items);
      const newValues = [].concat(values, parsedInput.values);
      if (unaryTestsType === DISJUNCTION) {
        this.editCell(element.businessObject, newValues.join(','));
      } else {
        this.editCell(element.businessObject, "not(".concat(newValues.join(','), ")"));
      }
      const newItems = items.concat(parsedInput.values.map(value => {
        return {
          value,
          isChecked: true,
          isRemovable: true,
          group: this._translate('Custom Values')
        };
      }));
      this.setState({
        items: newItems,
        inputValue: ''
      });
    }
    render() {
      const element = this.props.context.element;
      const _this$state3 = this.state,
        inputValue = _this$state3.inputValue,
        isOutputValueInputChecked = _this$state3.isOutputValueInputChecked,
        items = _this$state3.items,
        unaryTestsType = _this$state3.unaryTestsType;
      const options = [{
        label: this._translate('Match one'),
        value: DISJUNCTION
      }, {
        label: this._translate('Match none'),
        value: NEGATION
      }];
      const isInputClause = isInput$1(element.col);
      const isNegation = unaryTestsType === NEGATION;
      const showRadio = !isInputClause && items.length > 0;
      return createVNode(1, "div", "simple-string-edit context-menu-container", [createVNode(1, "h3", "dms-heading", this._translate('Edit String'), 0), isInputClause && createVNode(1, "p", null, createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onUnaryTestsTypeChange,
        "options": options,
        "value": isNegation ? NEGATION : DISJUNCTION
      }, null, node => this.selectNode = node), 2), createComponentVNode(2, List, {
        "onChange": this.onUnaryTestsListChanged,
        "items": items,
        "type": isInputClause ? 'checkbox' : 'radio'
      }), isInputClause ? createVNode(1, "h4", "dms-heading", this._translate('Add Values'), 0) : createVNode(1, "h4", "dms-heading", this._translate('Set Value'), 0), createVNode(1, "div", "dms-fill-row", [showRadio && createVNode(64, "input", "cursor-pointer", null, 1, {
        "checked": isOutputValueInputChecked,
        "onClick": this.onOutputValueInputClick,
        "type": "radio",
        "style": {
          marginRight: '8px'
        }
      }), createComponentVNode(2, ValidatedInput, {
        "className": "dms-block",
        "onKeyDown": this.onKeyDown,
        "onInput": this.onInput,
        "placeholder": isInputClause ? this._translate('"value", "value", ...') : this._translate('"value"'),
        "type": "text",
        "validate": value => {
          if (!parseString$2(value)) {
            return this._translate('Strings must be in double quotes.');
          }
        },
        "value": inputValue
      })], 0)], 0);
    }
  }

  // helpers //////////////////////

  function isEnter(keyCode) {
    return keyCode === 13;
  }

  /**
   * Get array of actual values from array of items.
   *
   * @param {Array} items - Array of items.
   */
  function getValues(items) {
    return items.filter(item => item.isChecked).map(item => item.value);
  }
  function includes(array, value) {
    return array.indexOf(value) !== -1;
  }

  class SimpleStringEdit {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        return (isInput$1(element.col) || isOutput(element.col)) && getTypeRef$2(element) === 'string';
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$2(context.element);
          if (typeRef === 'string') {
            return SimpleStringEditContextMenuComponent;
          }
        }
      });
    }
  }
  SimpleStringEdit.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$2(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }

  var simpleStringEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleStringEdit'],
    simpleStringEdit: ['type', SimpleStringEdit]
  };

  const ISO_TIME_REGEX = /^(?:\d\d:){2}\d\d(?:Z|(?:[@+-][^")]+))?$/;
  const BETWEEN_TIME_REGEX = /^\[time\("([^"]*)"\)..time\("([^"]*)"\)\]$/;
  const BEFORE_AFTER_TIME_REGEX = /^(<|>)\s*time\("([^"]*)"\)$/;
  const EXACT_TIME_REGEX = /^time\("([^"]*)"\)$/;
  const EXACT$3 = 'exact',
    BEFORE$3 = 'before',
    AFTER$3 = 'after',
    BETWEEN$3 = 'between';
  function validateISOString$1(string) {
    if (!ISO_TIME_REGEX.test(string.trim())) {
      return 'Time must match pattern hh:mm:ss[time zone].';
    }
  }
  function getTimeString(type, times) {
    if (type === EXACT$3) {
      return "time(\"".concat(times[0], "\")");
    } else if (type === BEFORE$3) {
      return "< time(\"".concat(times[0], "\")");
    } else if (type === AFTER$3) {
      return "> time(\"".concat(times[0], "\")");
    } else if (type === BETWEEN$3) {
      return "[time(\"".concat(times[0], "\")..time(\"").concat(times[1], "\")]");
    }
  }
  function getSampleTime() {
    const time = new Date();
    return time.toISOString().slice(11, -5) + 'Z';
  }
  function parseString$1(string) {
    // emtpy
    if (!string || string.trim() === '') {
      return {
        type: 'exact',
        time: ''
      };
    }

    // between
    let matches = string.match(BETWEEN_TIME_REGEX);
    if (matches) {
      return {
        type: 'between',
        times: [matches[1], matches[2]]
      };
    }

    // before or after
    matches = string.match(BEFORE_AFTER_TIME_REGEX);
    if (matches) {
      return {
        type: matches[1] === '<' ? 'before' : 'after',
        time: matches[2]
      };
    }

    // exact
    matches = string.match(EXACT_TIME_REGEX);
    if (matches) {
      return {
        type: 'exact',
        time: matches[1]
      };
    }
  }

  const EXACT$2 = 'exact',
    BEFORE$2 = 'before',
    AFTER$2 = 'after',
    BETWEEN$2 = 'between';
  class InputTimeEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$1(element.businessObject.text);
      if (parsedString) {
        let times;
        if (parsedString.time) {
          times = [parsedString.time, ''];
        } else if (parsedString.times) {
          times = parsedString.times;
        } else {
          times = ['', ''];
        }
        this.state = {
          type: parsedString.type,
          times: times
        };
      } else {
        this.state = {
          type: EXACT$2,
          times: ['', '']
        };
      }
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onTypeChange = this.onTypeChange.bind(this);
      this.onSetStartTimeNowClick = this.onSetStartTimeNowClick.bind(this);
      this.onSetEndTimeNowClick = this.onSetEndTimeNowClick.bind(this);
      this.onStartTimeInput = this.onStartTimeInput.bind(this);
      this.onEndTimeInput = this.onEndTimeInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onTypeChange(value) {
      const element = this.props.context.element;
      const times = this.state.times;
      this.setState({
        type: value
      });
      if (parseString$1(getTimeString(value, times))) {
        this.editCell(element.businessObject, getTimeString(value, times));
      }
    }
    onSetStartTimeNowClick() {
      const element = this.props.context.element;
      const _this$state = this.state,
        times = _this$state.times,
        type = _this$state.type;
      const time = getSampleTime();
      this.setState({
        times: [time, times[1]]
      });
      if (parseString$1(getTimeString(type, [time, times[1]]))) {
        this.editCell(element.businessObject, getTimeString(type, [time, times[1]]));
      }
    }
    onSetEndTimeNowClick() {
      const element = this.props.context.element;
      const _this$state2 = this.state,
        times = _this$state2.times,
        type = _this$state2.type;
      const time = getSampleTime();
      this.setState({
        times: [times[0], time]
      });
      if (parseString$1(getTimeString(type, [times[0], time]))) {
        this.editCell(element.businessObject, getTimeString(type, [times[0], time]));
      }
    }
    onStartTimeInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      const _this$state3 = this.state,
        times = _this$state3.times,
        type = _this$state3.type;
      this.setState({
        times: [value, times[1]]
      });
      this.debouncedEditCell(element.businessObject, getTimeString(type, [value, times[1]]));
    }
    onEndTimeInput(_ref2) {
      let value = _ref2.value;
      const element = this.props.context.element;
      const _this$state4 = this.state,
        times = _this$state4.times,
        type = _this$state4.type;
      this.setState({
        times: [times[0], value]
      });
      this.debouncedEditCell(element.businessObject, getTimeString(type, [times[0], value]));
    }
    render() {
      const _this$state5 = this.state,
        times = _this$state5.times,
        type = _this$state5.type;
      const options = [{
        label: this._translate('Exactly'),
        value: EXACT$2
      }, {
        label: this._translate('Before'),
        value: BEFORE$2
      }, {
        label: this._translate('After'),
        value: AFTER$2
      }, {
        label: this._translate('Between'),
        value: BETWEEN$2
      }];
      return createVNode(1, "div", "context-menu-container simple-time-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit time'), 0), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": options,
        "value": type
      }), 2), createVNode(1, "h4", "dms-heading", type === BETWEEN$2 ? this._translate('Edit start time') : this._translate('Set time'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "start-time-input dms-block",
        "onInput": this.onStartTimeInput,
        "placeholder": this._translate('e.g. { example } ', {
          example: getSampleDate$2()
        }),
        "validate": string => validateISOString$1(string) && this._translate(validateISOString$1(string)),
        "value": times[0]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-now", this._translate('Use now'), 0, {
        "type": "button",
        "onClick": this.onSetStartTimeNowClick
      }), createTextVNode(".")], 4)], 4), type === BETWEEN$2 && createVNode(1, "h4", "dms-heading", this._translate('Edit end time'), 0), type === BETWEEN$2 && createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "end-time-input dms-block",
        "onInput": this.onEndTimeInput,
        "placeholder": this._translate('e.g. { example } ', {
          example: getSampleDate$2()
        }),
        "validate": string => validateISOString$1(string) && this._translate(validateISOString$1(string)),
        "value": times[1]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-now", this._translate('Use now'), 0, {
        "type": "button",
        "onClick": this.onSetEndTimeNowClick
      }), createTextVNode(".")], 4)], 4)], 0);
    }
  }

  class OutputTimeEdit extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._modeling = context.injector.get('modeling');
      const element = this.props.context.element;
      const parsedString = parseString$1(element.businessObject.text);
      this.state = {
        date: parsedString ? parsedString.date : ''
      };
      const debounceInput = context.injector.get('debounceInput');
      this.debouncedEditCell = debounceInput(this.editCell.bind(this));
      this.editCell = this.editCell.bind(this);
      this.onClick = this.onClick.bind(this);
      this.onInput = this.onInput.bind(this);
    }
    editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
    onClick() {
      const element = this.props.context.element;
      const date = getSampleTime();
      this.setState({
        date
      });
      this.editCell(element.businessObject, "time(\"".concat(date, "\")"));
    }
    onInput(_ref) {
      let value = _ref.value;
      const element = this.props.context.element;
      this.setState({
        date: value
      });
      this.debouncedEditCell(element.businessObject, "time(\"".concat(value, "\")"));
    }
    render() {
      const date = this.state.date;
      return createVNode(1, "div", "context-menu-container simple-time-edit", [createVNode(1, "h3", "dms-heading", this._translate('Edit Date'), 0), createVNode(1, "h4", "dms-heading", this._translate('Set Date'), 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "onInput": this.onInput,
        "placeholder": this._translate('e.g. { example } ', {
          example: getSampleDate$2()
        }),
        "validate": string => validateISOString$1(string) && this._translate(validateISOString$1(string)),
        "value": date,
        "className": "dms-block"
      }), createVNode(1, "p", "dms-hint", [this._translate('Set date'), createTextVNode(" "), createVNode(1, "button", "use-now", this._translate('to now'), 0, {
        "type": "button",
        "onClick": this.onClick
      }), createTextVNode(".")], 0)], 4)], 4);
    }
  }

  class SimpleDateEdit$1 {
    constructor(components, simpleMode) {
      simpleMode.registerProvider(element => {
        const typeRef = getTypeRef$1(element);
        return (isInput$1(element.col) || isOutput(element.col)) && isTime(typeRef);
      });
      components.onGetComponent('context-menu', function () {
        let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
          if (!context.element) {
            return;
          }
          const typeRef = getTypeRef$1(context.element);
          if (isTime(typeRef)) {
            if (isInput$1(context.element.col)) {
              return InputTimeEdit;
            } else if (isOutput(context.element.col)) {
              return OutputTimeEdit;
            }
          }
        }
      });
    }
  }
  SimpleDateEdit$1.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef$1(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  function isTime(typeRef) {
    return typeRef === 'time';
  }

  var simpleTimeEditModule = {
    __depends__: [keyboardModule, simpleModeModule],
    __init__: ['simpleTimeEdit'],
    simpleTimeEdit: ['type', SimpleDateEdit$1]
  };

  function _defineProperty$4(obj, key, value) {
    key = _toPropertyKey$4(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$4(arg) {
    var key = _toPrimitive$4(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$4(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class ResizeColumn extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$4(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$4(this, "handleMouseDown", event => {
        const cell = closest(event.target, 'th', false);
        startResize({
          node: cell,
          event,
          minWidth: this.props.minWidth || 150,
          onEnd: this.saveWidth
        });
      });
      _defineProperty$4(this, "saveWidth", newWidth => {
        const col = this.props.col;
        const update = {};
        if (is(col, 'dmn:DecisionTable')) {
          update.annotationsWidth = newWidth;
        } else {
          update.width = newWidth;
        }
        this.modeling.updateProperties(col, update);
      });
      inject(this);
    }
    componentDidMount() {
      const root = this.getRoot();
      this.changeSupport.onElementsChanged(root, this.onElementsChanged);
    }
    componentWillUnmount() {
      const root = this.getRoot();
      this.changeSupport.offElementsChanged(root, this.onElementsChanged);
    }
    getRoot() {
      return this.sheet.getRoot();
    }
    isLastInputOrOutput() {
      const col = this.props.col,
        root = this.getRoot(),
        bo = getBusinessObject(root);
      if (is(col, 'dmn:InputClause')) {
        const inputs = bo.get('input');
        return inputs.indexOf(col) === inputs.length - 1;
      } else if (is(col, 'dmn:OutputClause')) {
        const outputs = bo.get('output');
        return outputs.indexOf(col) === outputs.length - 1;
      }
    }
    render() {
      const style = this.isLastInputOrOutput() ? {
        right: '-7px',
        width: '27px'
      } : null;
      return createVNode(1, "div", "resize-column-handle", null, 1, {
        "onMouseDown": this.handleMouseDown,
        "title": this.translate('Resize'),
        "style": style
      });
    }
  }
  ResizeColumn.$inject = ['sheet', 'changeSupport', 'translate', 'modeling'];

  // helper
  function startResize(_ref) {
    let node = _ref.node,
      event = _ref.event,
      minWidth = _ref.minWidth,
      _ref$onEnd = _ref.onEnd,
      onEnd = _ref$onEnd === void 0 ? noop$1 : _ref$onEnd;
    event.preventDefault();
    const initialWidth = node.getBoundingClientRect().width;
    const initialX = event.clientX;
    let currentUpdate;
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    function handleMouseMove(event) {
      event.preventDefault();
      const currentWidth = getResizedWidth(event.clientX);
      if (currentUpdate) {
        cancelAnimationFrame(currentUpdate);
      }
      currentUpdate = requestAnimationFrame(() => {
        node.style.width = currentWidth + 'px';
      });
    }
    function handleMouseUp(event) {
      event.preventDefault();
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      const currentWidth = getResizedWidth(event.clientX);
      onEnd(currentWidth);
    }
    function getResizedWidth(currentX) {
      const delta = currentX - initialX;
      return Math.max(initialWidth + delta, minWidth);
    }
  }
  function noop$1() {}

  function ColumnResizeProvider(components) {
    components.onGetComponent('cell-inner', function () {
      let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const cellType = context.cellType;
      if (cellType === 'input-cell' || cellType === 'output-cell' || cellType === 'annotations') {
        return ResizeColumn;
      }
    });
  }
  ColumnResizeProvider.$inject = ['components'];

  var columnResizeModule = {
    __init__: ['columnResizeProvider'],
    columnResizeProvider: ['type', ColumnResizeProvider]
  };

  class Editor$2 extends Viewer$2 {
    getModules() {
      return [...Viewer$2._getModules(), ...Editor$2._getModules()];
    }
    static _getModules() {
      return [addRuleModule, annotationsEditorModule, cellSelectionModule, contextMenuModule, copyCutPasteModule, copyCutPasteKeybindingsModule, createInputsModule, DataTypesModule, decisionTableContextMenu, decisionTableEditorActionsModule, decisionTableHeadEditorModule, columnResizeModule, dragAndDropModule, descriptionModule, expressionLanguageModule, ExpressionLanguagesModule, keyboardModule, tablePropertiesEditorModule, editorActionsModule, hitPolicyEditorModule, interactionEventsModule, modelingModule, decisionRulesEditorModule, selectionModule, simpleModeModule, simpleBooleanEditModule, simpleDateEditModule, simpleDateTimeEditModule, simpleDurationEditModule, simpleNumberEditModule, simpleStringEditModule, simpleTimeEditModule];
    }
  }

  class ChangeSupport {
    constructor(eventBus) {
      this._listeners = {};
      eventBus.on('elements.changed', _ref => {
        let elements = _ref.elements;
        this.elementsChanged(elements);
      });
      eventBus.on('element.updateId', _ref2 => {
        let element = _ref2.element,
          newId = _ref2.newId;
        this.updateId(element.id, newId);
      });
    }
    elementsChanged(elements) {
      const invoked = {};
      const elementsLength = elements.length;
      for (let i = 0; i < elementsLength; i++) {
        const id = elements[i].id;
        if (invoked[id]) {
          return;
        }
        invoked[id] = true;
        const listenersLength = this._listeners[id] && this._listeners[id].length;
        if (listenersLength) {
          for (let j = 0; j < listenersLength; j++) {
            // listeners might remove themselves before they get called
            this._listeners[id][j] && this._listeners[id][j]();
          }
        }
      }
    }
    onElementsChanged(id, listener) {
      if (!this._listeners[id]) {
        this._listeners[id] = [];
      }

      // avoid push for better performance
      this._listeners[id][this._listeners[id].length] = listener;
    }
    offElementsChanged(id, listener) {
      if (!this._listeners[id]) {
        return;
      }
      if (listener) {
        const idx = this._listeners[id].indexOf(listener);
        if (idx !== -1) {
          this._listeners[id].splice(idx, 1);
        }
      } else {
        this._listeners[id].length = 0;
      }
    }
    updateId(oldId, newId) {
      if (this._listeners[oldId]) {
        this._listeners[newId] = this._listeners[oldId];
        delete this._listeners[oldId];
      }
    }
  }
  ChangeSupport.$inject = ['eventBus'];

  const DEFAULT_PRIORITY = 1000;
  class Components {
    constructor() {
      this._listeners = {};
    }
    getComponent(type, context) {
      const listeners = this._listeners[type];
      if (!listeners) {
        return;
      }
      let component;
      for (let i = 0; i < listeners.length; i++) {
        component = listeners[i].callback(context);
        if (component) {
          break;
        }
      }
      return component;
    }
    getComponents(type, context) {
      const listeners = this._listeners[type];
      if (!listeners) {
        return;
      }
      const components = [];
      for (let i = 0; i < listeners.length; i++) {
        const component = listeners[i].callback(context);
        if (component) {
          components.push(component);
        }
      }
      if (!components.length) {
        return;
      }
      return components;
    }
    onGetComponent(type, priority, callback) {
      if (isFunction$2(priority)) {
        callback = priority;
        priority = DEFAULT_PRIORITY;
      }
      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }
      const listeners = this._getListeners(type);
      let existingListener, idx;
      const newListener = {
        priority,
        callback
      };
      for (idx = 0; existingListener = listeners[idx]; idx++) {
        if (existingListener.priority < priority) {
          // prepend newListener at before existingListener
          listeners.splice(idx, 0, newListener);
          return;
        }
      }
      listeners.push(newListener);
    }
    offGetComponent(type, callback) {
      const listeners = this._getListeners(type);
      let listener, listenerCallback, idx;
      if (callback) {
        // move through listeners from back to front
        // and remove matching listeners
        for (idx = listeners.length - 1; listener = listeners[idx]; idx--) {
          listenerCallback = listener.callback;
          if (listenerCallback === callback) {
            listeners.splice(idx, 1);
          }
        }
      } else {
        // clear listeners
        listeners.length = 0;
      }
    }
    _getListeners(type) {
      let listeners = this._listeners[type];
      if (!listeners) {
        this._listeners[type] = listeners = [];
      }
      return listeners;
    }
  }

  class ViewerComponent extends Component {
    constructor(props) {
      super(props);
      const injector = this._injector = props.injector;
      this._changeSupport = injector.get('changeSupport');
      this._components = injector.get('components');
      this._renderer = injector.get('renderer');
    }
    getChildContext() {
      return {
        changeSupport: this._changeSupport,
        components: this._components,
        renderer: this._renderer,
        injector: this._injector
      };
    }
    render() {
      const components = this._components.getComponents('viewer');
      return createVNode(1, "div", "viewer-container", components && components.map((Component, index) => createComponentVNode(2, Component, null, index)), 0);
    }
  }

  class Renderer {
    constructor(changeSupport, components, config, eventBus, injector) {
      const container = config.container;
      this._container = container;
      eventBus.on('renderer.mount', () => {
        render(createComponentVNode(2, ViewerComponent, {
          "injector": injector
        }), container);
      });
      eventBus.on('renderer.unmount', () => {
        render(null, container);
      });
    }
    getContainer() {
      return this._container;
    }
  }
  Renderer.$inject = ['changeSupport', 'components', 'config.renderer', 'eventBus', 'injector'];

  var core = {
    __init__: ['changeSupport', 'components', 'renderer'],
    changeSupport: ['type', ChangeSupport],
    components: ['type', Components],
    eventBus: ['type', EventBus],
    renderer: ['type', Renderer]
  };

  const _excluded$2 = ["modules"];
  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  /**
   * A base for React-style viewers.
   */
  class Viewer$1 {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let injector = options.injector;
      if (!injector) {
        let _this$_init = this._init(options),
          modules = _this$_init.modules,
          config = _this$_init.config;
        injector = createInjector(config, modules);
      }
      this.get = injector.get;
      this.invoke = injector.invoke;
      this.get('eventBus').fire('viewer.init');
    }

    /**
     * Intialize and return modules and config used for creation.
     *
     * @param  {Object} options
     *
     * @return {Object} { modules=[], config }
     */
    _init(options) {
      let modules = options.modules,
        config = _objectWithoutProperties$1(options, _excluded$2);
      return {
        modules,
        config
      };
    }

    /**
     * Destroy. This results in removing the attachment from the container.
     */
    destroy() {
      const eventBus = this.get('eventBus');
      eventBus.fire('viewer.destroy');
    }

    /**
     * Clear. Should be used to reset the state of any stateful services.
     */
    clear() {
      const eventBus = this.get('eventBus');
      eventBus.fire('viewer.clear');
    }
  }

  // helpers //////////////////////

  function createInjector(config, modules) {
    const bootstrapModules = [{
      config: ['value', config]
    }, core].concat(modules || []);
    const injector = new Injector(bootstrapModules);
    injector.init();
    return injector;
  }

  /**
   * A single decision element registry.
   *
   * The sole purpose of this service is to provide the necessary API
   * to serve shared components, i.e. the UpdatePropertiesHandler.
   */
  class ElementRegistry {
    constructor(viewer, eventBus) {
      this._eventBus = eventBus;
      this._viewer = viewer;
    }
    getDecision() {
      return this._viewer.getDecision();
    }
    updateId(element, newId) {
      var decision = this.getDecision();
      if (element !== decision) {
        throw new Error('element !== decision');
      }
      this._eventBus.fire('element.updateId', {
        element: element,
        newId: newId
      });
      element.id = newId;
    }
  }
  ElementRegistry.$inject = ['viewer', 'eventBus'];

  var CoreModule = {
    __init__: ['elementRegistry'],
    elementRegistry: ['type', ElementRegistry]
  };

  class DecisionPropertiesComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this._viewer = context.injector.get('viewer');
    }
    render() {
      // there is only one single element
      const _this$_viewer$getDeci = this._viewer.getDecision(),
        name = _this$_viewer$getDeci.name;
      return createVNode(1, "div", "decision-properties", createVNode(1, "h3", "decision-name", name, 0), 2);
    }
  }

  const HIGH_PRIORITY$1 = 1500;
  class DecisionProperties$1 {
    constructor(components) {
      components.onGetComponent('viewer', HIGH_PRIORITY$1, () => DecisionPropertiesComponent);
    }
  }
  DecisionProperties$1.$inject = ['components'];

  var DecisionPropertiesModule = {
    __init__: ['decisionProperties'],
    decisionProperties: ['type', DecisionProperties$1]
  };

  class LiteralExpressionPropertiesComponent$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._viewer = context.injector.get('viewer');
    }
    render() {
      const _this$_viewer$getDeci = this._viewer.getDecision(),
        literalExpression = _this$_viewer$getDeci.decisionLogic,
        variable = _this$_viewer$getDeci.variable;
      return createVNode(1, "div", "literal-expression-properties", createVNode(1, "table", null, [createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Variable Name:'), 0), createVNode(1, "td", null, createVNode(1, "span", null, variable.name || '-', 0), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Variable Type:'), 0), createVNode(1, "td", null, createVNode(1, "span", null, this._translate(variable.typeRef) || '-', 0), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Expression Language:'), 0), createVNode(1, "td", null, createVNode(1, "span", null, literalExpression.expressionLanguage || '-', 0), 2)], 4)], 4), 2);
    }
  }

  const LOW_PRIORITY$1 = 500;
  class DecisionProperties {
    constructor(components) {
      components.onGetComponent('viewer', LOW_PRIORITY$1, () => {
        return LiteralExpressionPropertiesComponent$1;
      });
    }
  }
  DecisionProperties.$inject = ['components'];

  var LiteralExpressionPropertiesModule = {
    __depends__: [],
    __init__: ['literalExpressionProperties'],
    literalExpressionProperties: ['type', DecisionProperties]
  };

  function _defineProperty$3(obj, key, value) {
    key = _toPropertyKey$3(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$3(arg) {
    var key = _toPrimitive$3(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$3(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class PoweredByLogoComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$3(this, "onClick", () => {
        this._eventBus.fire('poweredBy.show');
      });
      const injector = context.injector;
      this._eventBus = injector.get('eventBus');
    }
    render() {
      return createVNode(1, "div", "powered-by", createVNode(1, "div", "powered-by__logo", createComponentVNode(2, Logo), 2), 2, {
        "onClick": this.onClick,
        "title": "Powered by bpmn.io"
      }, null, node => this.node = node);
    }
  }

  class PoweredByOverlayComponent extends Component {
    constructor(props) {
      super(props);
      this.state = {
        show: false
      };
      this.onClick = this.onClick.bind(this);
      this.onShow = this.onShow.bind(this);
    }
    onClick() {
      this.setState({
        show: false
      });
    }
    onShow() {
      this.setState({
        show: true
      });
    }
    componentWillMount() {
      const eventBus = this._eventBus = this.context.injector.get('eventBus');
      eventBus.on('poweredBy.show', this.onShow);
    }
    componentWillUnmount() {
      this._eventBus.off('poweredBy.show', this.onShow);
    }
    render() {
      const show = this.state.show;
      return show && createVNode(1, "div", "powered-by-overlay", createVNode(1, "div", "powered-by-overlay-content", [createVNode(1, "a", "logo", createComponentVNode(2, Logo), 2, {
        "href": "https://bpmn.io",
        "target": "_blank",
        "rel": "noopener"
      }), createVNode(1, "span", null, [createTextVNode("Web-based tooling for BPMN, DMN and CMMN diagrams powered by "), createVNode(1, "a", null, createTextVNode("bpmn.io"), 2, {
        "href": "http://bpmn.io",
        "target": "_blank"
      }), createTextVNode(".")], 4)], 4, {
        "onClick": e => e.stopPropagation()
      }), 2, {
        "onClick": this.onClick
      });
    }
  }

  const HIGHER_PRIORITY$1 = 2000;
  class PoweredBy {
    constructor(components, eventBus) {
      components.onGetComponent('viewer', HIGHER_PRIORITY$1, () => {
        return PoweredByLogoComponent;
      });
      components.onGetComponent('viewer', () => {
        return PoweredByOverlayComponent;
      });
    }
  }
  PoweredBy.$inject = ['components', 'eventBus'];

  var PoweredByModule = {
    __init__: ['poweredBy'],
    poweredBy: ['type', PoweredBy]
  };

  class TextareaComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this._viewer = context.injector.get('viewer');
    }
    render() {
      const text = this._viewer.getDecision().decisionLogic.text;
      return createVNode(1, "div", "textarea", createVNode(1, "div", "content", text, 0), 2);
    }
  }

  class Textarea$1 {
    constructor(components) {
      components.onGetComponent('viewer', () => TextareaComponent);
    }
  }
  Textarea$1.$inject = ['components'];

  var TextareaModule = {
    __init__: ['textarea'],
    textarea: ['type', Textarea$1]
  };

  function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey$2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$2(arg) {
    var key = _toPrimitive$2(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$2(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class ViewDrdComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$2(this, "onClick", () => {
        this._eventBus.fire('showDrd');
      });
      const injector = context.injector;
      this._translate = injector.get('translate');
      this._eventBus = injector.get('eventBus');
    }
    render() {
      return createVNode(1, "div", "view-drd", createVNode(1, "button", "view-drd-button", this._translate('View DRD'), 0, {
        "type": "button",
        "onClick": this.onClick
      }), 2, null, null, node => this.node = node);
    }
  }
  ViewDrdComponent.$inject = ['translate'];

  const VERY_HIGH_PRIORITY = 2000;
  class ViewDrd {
    constructor(components, viewer, eventBus, injector) {
      this._injector = injector;
      this._viewer = viewer;
      components.onGetComponent('viewer', VERY_HIGH_PRIORITY, () => {
        if (this.canViewDrd()) {
          return ViewDrdComponent;
        }
      });
      eventBus.on('showDrd', () => {
        const parent = injector.get('_parent', false);

        // there is only one single element
        const definitions = this.getDefinitions();

        // open definitions
        const view = parent.getView(definitions);
        parent.open(view);
      });
    }
    canViewDrd() {
      const parent = this._injector.get('_parent', false);
      if (!parent) {
        return;
      }

      // there is only one single element
      const definitions = this.getDefinitions();
      return !!parent.getView(definitions);
    }
    getDefinitions() {
      return getDefinitions(this._viewer.getDecision());
    }
  }
  ViewDrd.$inject = ['components', 'viewer', 'eventBus', 'injector'];

  // helpers //////////////////////

  function getDefinitions(decision) {
    const definitions = decision.$parent;
    return definitions;
  }

  var ViewDrdModule = {
    __init__: ['viewDrd'],
    viewDrd: ['type', ViewDrd]
  };

  const _excluded$1 = ["modules", "additionalModules"];
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenResult} OpenResult
   */

  /**
   * @typedef {import('dmn-js-shared/lib/base/View).OpenError} OpenError
   */

  class Viewer extends Viewer$1 {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const container = Viewer._createContainer();
      super(assign$4(options, {
        renderer: {
          container
        }
      }));
      this._container = container;
    }

    /**
     * Open diagram element.
     *
     * @param  {ModdleElement} decision
     * @returns {Promise} Resolves with {OpenResult} when successful
     * or rejects with {OpenError}
     */
    open(decision) {
      var self = this;
      return new Promise(function (resolve, reject) {
        var err;

        // use try/catch to not swallow synchronous exceptions
        // that may be raised during model parsing
        try {
          if (self._decision) {
            // clear existing literal expression
            self.clear();

            // unmount first
            self.get('eventBus').fire('renderer.unmount');
          }

          // update literal expression
          self._decision = decision;

          // let others know about import
          self.get('eventBus').fire('import', decision);
          self.get('eventBus').fire('renderer.mount');
        } catch (e) {
          err = e;
        }

        // handle synchronously thrown exception
        if (err) {
          err.warnings = err.warnings || [];
          reject(err);
        } else {
          resolve({
            warnings: []
          });
        }
      });
    }

    /**
     * Initialize the literal expression, returning { modules: [], config }.
     *
     * @param  {Object} options
     *
     * @return {Object} init config
     */
    _init(options) {
      let modules = options.modules,
        additionalModules = options.additionalModules,
        config = _objectWithoutProperties(options, _excluded$1);
      let baseModules = modules || this.getModules();
      let extraModules = additionalModules || [];
      let staticModules = [{
        viewer: ['value', this]
      }];
      let allModules = [...baseModules, ...extraModules, ...staticModules];
      return {
        modules: allModules,
        config
      };
    }

    /**
     * Register an event listener
     *
     * Remove a previously added listener via {@link #off(event, callback)}.
     *
     * @param {string} event
     * @param {number} [priority]
     * @param {Function} callback
     * @param {Object} [that]
     */
    on(event, priority, callback, target) {
      return this.get('eventBus').on(event, priority, callback, target);
    }

    /**
     * De-register an event listener
     *
     * @param {string} event
     * @param {Function} callback
     */
    off(event, callback) {
      this.get('eventBus').off(event, callback);
    }

    /**
     * Emit an event on the underlying {@link EventBus}
     *
     * @param  {string} type
     * @param  {Object} event
     *
     * @return {Object} event processing result (if any)
     */
    _emit(type, event) {
      return this.get('eventBus').fire(type, event);
    }

    /**
     * Returns the currently displayed decision.
     *
     * @return {ModdleElement}
     */
    getDecision() {
      return this._decision;
    }

    /**
     * Attach viewer to given parent node.
     *
     * @param  {Element} parentNode
     */
    attachTo(parentNode) {
      if (!parentNode) {
        throw new Error('parentNode required');
      }

      // ensure we detach from the
      // previous, old parent
      this.detach();
      parentNode.appendChild(this._container);
      this._emit('attach', {});
    }

    /**
     * Detach viewer from parent node, if attached.
     */
    detach() {
      const container = this._container,
        parentNode = container.parentNode;
      if (!parentNode) {
        return;
      }
      this._emit('detach', {});
      remove$4(container);
    }
    destroy() {
      super.destroy();
      this.detach();
    }
    getModules() {
      return Viewer._getModules();
    }
    static _getModules() {
      return [CoreModule, TranslateModule, DecisionPropertiesModule, LiteralExpressionPropertiesModule, PoweredByModule, TextareaModule, ViewDrdModule];
    }
    static _createContainer() {
      return domify$1('<div class="dmn-literal-expression-container"></div>');
    }
  }

  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey$1(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey$1(arg) {
    var key = _toPrimitive$1(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive$1(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  class DecisionPropertiesEditorComponent extends Component {
    constructor(props, context) {
      super(props, context);
      _defineProperty$1(this, "onElementsChanged", () => {
        this.forceUpdate();
      });
      _defineProperty$1(this, "setDecisionName", name => {
        this._modeling.editDecisionName(name);
      });
      this._viewer = context.injector.get('viewer');
      this._modeling = context.injector.get('modeling');
      this.setupChangeListeners({
        bind: this.getDecision().id
      });
    }
    componentWillUnmount() {
      this.setupChangeListeners({
        unbind: this.getDecision().id
      });
    }
    getDecision() {
      return this._viewer.getDecision();
    }
    setupChangeListeners(_ref) {
      let bind = _ref.bind,
        unbind = _ref.unbind;
      const changeSupport = this.context.changeSupport;
      if (typeof unbind === 'string') {
        changeSupport.offElementsChanged(unbind, this.onElementsChanged);
      }
      if (typeof bind === 'string') {
        changeSupport.onElementsChanged(bind, this.onElementsChanged);
      }
    }
    render() {
      const _this$getDecision = this.getDecision(),
        name = _this$getDecision.name;
      return createVNode(1, "header", "decision-properties", createComponentVNode(2, DecisionName, {
        "className": "decision-name editor",
        "value": name,
        "onBlur": resetScroll,
        "onChange": this.setDecisionName
      }), 2);
    }
  }
  class DecisionName extends EditableComponent {
    render() {
      return createVNode(1, "h3", this.getClassName(), this.getEditor(), 0);
    }
  }
  function resetScroll(event) {
    event.target.scroll(0, 0);
  }

  const HIGH_PRIORITY = 1500;
  class DecisionPropertiesEditor {
    constructor(components) {
      components.onGetComponent('viewer', HIGH_PRIORITY, () => {
        return DecisionPropertiesEditorComponent;
      });
    }
  }
  DecisionPropertiesEditor.$inject = ['components'];

  var DecisionPropertiesEditorModule = {
    __depends__: [DebounceInput],
    __init__: ['decisionProperties'],
    decisionProperties: ['type', DecisionPropertiesEditor]
  };

  const NOT_REGISTERED_ERROR = 'is not a registered action',
    IS_REGISTERED_ERROR = 'is already registered';

  /**
   * An interface that provides access to modeling actions by decoupling
   * the one who requests the action to be triggered and the trigger itself.
   *
   * It's possible to add new actions by registering them with ´registerAction´ and likewise
   * unregister existing ones with ´unregisterAction´.
   *
   */
  class EditorActions$1 {
    constructor(commandStack, eventBus) {
      this._actions = {
        undo() {
          commandStack.undo();
        },
        redo() {
          commandStack.redo();
        }
      };
    }

    /**
     * Triggers a registered action
     *
     * @param  {string} action
     * @param  {Object} opts
     *
     * @return {Unknown} Returns what the registered listener returns
     */
    trigger(action, opts) {
      if (!this._actions[action]) {
        throw error(action, NOT_REGISTERED_ERROR);
      }
      return this._actions[action](opts);
    }

    /**
     * Registers a collections of actions.
     * The key of the object will be the name of the action.
     *
     * @param  {Object} actions
     */
    register(actions, listener) {
      if (typeof actions === 'string') {
        return this._registerAction(actions, listener);
      }
      forEach$3(actions, (listener, action) => {
        this._registerAction(action, listener);
      });
    }

    /**
     * Registers a listener to an action key
     *
     * @param  {string} action
     * @param  {Function} listener
     */
    _registerAction(action, listener) {
      if (this.isRegistered(action)) {
        throw error(action, IS_REGISTERED_ERROR);
      }
      this._actions[action] = listener;
    }

    /**
     * Unregister an existing action
     *
     * @param {string} action
     */
    unregister(action) {
      if (!this.isRegistered(action)) {
        throw error(action, NOT_REGISTERED_ERROR);
      }
      this._actions[action] = undefined;
    }

    /**
     * Checks wether the given action is registered
     *
     * @param {string} action
     *
     * @return {boolean}
     */
    isRegistered(action) {
      return !!this._actions[action];
    }
  }
  EditorActions$1.$inject = ['commandStack', 'eventBus'];

  // helpers /////////////

  function error(action, message) {
    return new Error(action + ' ' + message);
  }

  var EditorActions = {
    __init__: ['editorActions'],
    editorActions: ['type', EditorActions$1]
  };

  function isCmd(modifiers) {
    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (modifiers.altKey) {
      return false;
    }
    return modifiers.ctrlKey || modifiers.metaKey;
  }
  function isShift(modifiers) {
    return modifiers.shiftKey;
  }

  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  /**
   * A keyboard abstraction that may be activated and
   * deactivated by users at will, consuming key events
   * and triggering diagram actions.
   *
   * The implementation fires the following key events that allow
   * other components to hook into key handling:
   *
   *  - keyboard.bind
   *  - keyboard.unbind
   *  - keyboard.init
   *  - keyboard.destroy
   *
   * All events contain the fields (node, listeners).
   *
   * A default binding for the keyboard may be specified via the
   * `keyboard.bindTo` configuration option.
   *
   * @param {Config} config
   * @param {EventBus} eventBus
   * @param {EditorActions} editorActions
   */
  class Keyboard {
    constructor(config, eventBus, editorActions) {
      _defineProperty(this, "_init", () => {
        this._registerDefaultBindings();
        this._fire('init');
      });
      _defineProperty(this, "_destroy", () => {
        this._fire('destroy');
        this.unbind();
        this._listeners = null;
      });
      _defineProperty(this, "_keyHandler", event => {
        var i,
          l,
          listeners = this._listeners,
          code = event.keyCode || event.charCode || -1;
        for (i = 0; l = listeners[i]; i++) {
          if (l(code, event)) {
            event.preventDefault();
            event.stopPropagation();
            return;
          }
        }
      });
      _defineProperty(this, "unbind", () => {
        var node = this._node;
        if (node) {
          this._fire('unbind');

          // unbind key events
          event.unbind(node, 'keydown', this._keyHandler, true);
        }
        this._node = null;
      });
      this._config = config || {};
      this._eventBus = eventBus;
      this._editorActions = editorActions;
      this._listeners = [];
      eventBus.on('viewer.destroy', this._destroy);
      eventBus.on('viewer.init', this._init);
      eventBus.on('attach', () => {
        if (this._config.bindTo) {
          this.bind(config.bindTo);
        }
      });
      eventBus.on('detach', this.unbind);
    }
    bind(node) {
      // make sure that the keyboard is only bound once to the DOM
      this.unbind();
      this._node = node;

      // bind key events
      event.bind(node, 'keydown', this._keyHandler, true);
      this._fire('bind');
    }
    getBinding() {
      return this._node;
    }
    _fire(event) {
      this._eventBus.fire('keyboard.' + event, {
        node: this._node,
        listeners: this._listeners
      });
    }
    _registerDefaultBindings() {
      var listeners = this._listeners;
      var editorActions = this._editorActions;

      // init default listeners

      // undo
      // (CTRL|CMD) + Z
      function undo(key, modifiers) {
        if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {
          editorActions.trigger('undo');
          return true;
        }
      }

      // redo
      // CTRL + Y
      // CMD + SHIFT + Z
      function redo(key, modifiers) {
        if (isCmd(modifiers) && (key === 89 || key === 90 && isShift(modifiers))) {
          editorActions.trigger('redo');
          return true;
        }
      }
      listeners.push(undo);
      listeners.push(redo);
    }

    /**
     * Add a listener function that is notified with (key, modifiers) whenever
     * the keyboard is bound and the user presses a key.
     *
     * @param {Function} listenerFn
     */
    addListener(listenerFn) {
      this._listeners.unshift(listenerFn);
    }
    removeListener(listenerFn) {
      this._listeners = this._listeners.filter(l => l !== listenerFn);
    }
  }
  Keyboard.$inject = ['config.keyboard', 'eventBus', 'editorActions'];

  var KeyboardModule = {
    __depends__: [EditorActions],
    __init__: ['keyboard'],
    keyboard: ['type', Keyboard]
  };

  class LiteralExpressionPropertiesComponent extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._viewer = context.injector.get('viewer');
      this._modeling = context.injector.get('modeling');
      this._dataTypes = context.injector.get('dataTypes');
      const decision = this._viewer.getDecision();
      this.state = {
        name: decision.variable.name,
        typeRef: decision.variable.typeRef
      };
      this.setVariableName = this.setVariableName.bind(this);
      this.setVariableType = this.setVariableType.bind(this);
    }
    setVariableName(name) {
      this._modeling.editVariableName(name);
      this.setState({
        name
      });
    }
    setVariableType(typeRef) {
      if (typeRef === '') {
        this._modeling.editVariableType(undefined);
        this.setState({
          typeRef: undefined
        });
      } else {
        this._modeling.editVariableType(typeRef);
        this.setState({
          typeRef
        });
      }
    }
    render() {
      const _this$state = this.state,
        name = _this$state.name,
        typeRef = _this$state.typeRef;
      const typeRefOptions = this._dataTypes.getAll().map(t => {
        return {
          label: this._translate(t),
          value: t
        };
      });
      return createVNode(1, "div", "literal-expression-properties", createVNode(1, "table", null, [createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Variable Name:'), 0), createVNode(1, "td", null, createComponentVNode(2, Input, {
        "className": "variable-name-input",
        "onInput": this.setVariableName,
        "placeholder": 'name',
        "value": name || ''
      }), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Variable Type:'), 0), createVNode(1, "td", null, createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "onChange": this.setVariableType,
        "options": typeRefOptions,
        "value": typeRef,
        "className": "variable-type-select dms-block"
      }), 2), 2)], 4), createComponentVNode(2, ExpressionLanguage)], 4), 2);
    }
  }
  class ExpressionLanguage extends Component {
    constructor(props, context) {
      super(props, context);
      this._translate = context.injector.get('translate');
      this._viewer = context.injector.get('viewer');
      this._modeling = context.injector.get('modeling');
      this._expressionLanguages = context.injector.get('expressionLanguages');
      this.setExpressionLanguage = this.setExpressionLanguage.bind(this);
    }
    setExpressionLanguage(expressionLanguage) {
      if (expressionLanguage === '') {
        this._modeling.editExpressionLanguage(undefined);
      } else {
        this._modeling.editExpressionLanguage(expressionLanguage);
      }
    }
    _getExpressionLanguage() {
      const decision = this._viewer.getDecision();
      const literalExpression = decision.decisionLogic;
      return literalExpression && literalExpression.expressionLanguage ? literalExpression.expressionLanguage.toLowerCase() : this._getDefaultExpressionLanguage();
    }
    _getDefaultExpressionLanguage() {
      return this._expressionLanguages.getDefault().value;
    }
    _shouldRender() {
      const expressionLanguages = this._expressionLanguages.getAll();
      if (expressionLanguages.length > 1) {
        return true;
      }
      const expressionLanguage = this._getExpressionLanguage();
      return expressionLanguage !== this._getDefaultExpressionLanguage();
    }
    render() {
      if (!this._shouldRender()) {
        return null;
      }
      const expressionLanguage = this._getExpressionLanguage();
      const languageOptions = this._expressionLanguages.getAll();
      return createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate('Expression Language:'), 0), createVNode(1, "td", null, createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "onChange": this.setExpressionLanguage,
        "options": languageOptions,
        "value": expressionLanguage,
        "className": "expression-language-select dms-block"
      }), 2), 2)], 4);
    }
  }

  const LOW_PRIORITY = 500;
  class LiteralExpressionPropertiesEditor {
    constructor(components) {
      components.onGetComponent('viewer', LOW_PRIORITY, () => {
        return LiteralExpressionPropertiesComponent;
      });
    }
  }
  LiteralExpressionPropertiesEditor.$inject = ['components'];

  var LiteralExpressionPropertiesEditorModule = {
    __depends__: [DebounceInput, KeyboardModule, ExpressionLanguagesModule, DataTypes],
    __init__: ['literalExpressionProperties'],
    literalExpressionProperties: ['type', LiteralExpressionPropertiesEditor]
  };

  class Modeling {
    constructor(commandStack, viewer, eventBus) {
      this._commandStack = commandStack;
      this._viewer = viewer;
      this._eventBus = eventBus;
      eventBus.on('viewer.init', () => {
        // register modeling handlers
        registerHandlers(this.getHandlers(), commandStack);
      });
    }
    getHandlers() {
      return Modeling._getHandlers();
    }
    static _getHandlers() {
      return {
        'element.updateProperties': EditPropertiesHandler
      };
    }
    getDecision() {
      return this._viewer.getDecision();
    }
    editDecisionName(name) {
      const decision = this.getDecision();
      const context = {
        element: decision,
        properties: {
          name
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editDecisionId(id) {
      const decision = this.getDecision();
      const context = {
        element: decision,
        properties: {
          id
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editLiteralExpressionText(text) {
      const decision = this.getDecision(),
        literalExpression = decision.decisionLogic;
      const context = {
        element: literalExpression,
        properties: {
          text
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editExpressionLanguage(expressionLanguage) {
      const decision = this.getDecision(),
        literalExpression = decision.decisionLogic;
      const context = {
        element: literalExpression,
        properties: {
          expressionLanguage
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editVariableName(name) {
      const decision = this.getDecision(),
        variable = decision.variable;
      const context = {
        element: variable,
        properties: {
          name
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
    editVariableType(typeRef) {
      const decision = this.getDecision(),
        variable = decision.variable;
      const context = {
        element: variable,
        properties: {
          typeRef
        }
      };
      this._commandStack.execute('element.updateProperties', context);
    }
  }
  Modeling.$inject = ['commandStack', 'viewer', 'eventBus'];

  // helpers //////////////////////

  /**
   * Register handlers with the command stack
   *
   * @param {Object} handlers { id -> Handler } map
   * @param {CommandStack} commandStack
   */
  function registerHandlers(handlers, commandStack) {
    forEach$3(handlers, function (handler, id) {
      commandStack.registerHandler(id, handler);
    });
  }

  var ModelingModule = {
    __init__: ['idChangeBehavior', 'modeling'],
    commandStack: ['type', CommandStack$1],
    idChangeBehavior: ['type', IdChangeBehavior],
    modeling: ['type', Modeling]
  };

  class TextareaEditorComponent$1 extends Component {
    constructor(props, context) {
      super(props, context);
      this._modeling = context.injector.get('modeling');
      this._viewer = context.injector.get('viewer');
      this.editLiteralExpressionText = this.editLiteralExpressionText.bind(this);
      this.onElementsChanged = this.onElementsChanged.bind(this);

      // there is only one single element
      const _this$getLiteralExpre = this.getLiteralExpression(),
        id = _this$getLiteralExpre.id;
      context.changeSupport.onElementsChanged(id, this.onElementsChanged);
    }
    getLiteralExpression() {
      return this._viewer.getDecision().decisionLogic;
    }
    onElementsChanged() {
      this.forceUpdate();
    }
    editLiteralExpressionText(text) {
      this._modeling.editLiteralExpressionText(text);
    }
    render() {
      // there is only one single element
      const _this$getLiteralExpre2 = this.getLiteralExpression(),
        text = _this$getLiteralExpre2.text;
      return createComponentVNode(2, Editor$1, {
        "className": "textarea editor",
        "value": text,
        "onChange": this.editLiteralExpressionText
      });
    }
  }
  class Editor$1 extends EditableComponent {
    render() {
      return createVNode(1, "div", this.getClassName(), this.getEditor(), 0);
    }
  }

  class Textarea {
    constructor(components) {
      components.onGetComponent('viewer', () => TextareaEditorComponent$1);
    }
  }
  Textarea.$inject = ['components'];

  var TextareaEditorComponent = {
    __depends__: [DebounceInput],
    __init__: ['textarea'],
    textarea: ['type', Textarea]
  };

  class Editor extends Viewer {
    getModules() {
      return [...Viewer._getModules(), ...Editor._getModules()];
    }
    static _getModules() {
      return [DecisionPropertiesEditorModule, KeyboardModule, LiteralExpressionPropertiesEditorModule, ModelingModule, ExpressionLanguagesModule, DataTypesModule, TextareaEditorComponent];
    }
  }

  /**
   * The dmn editor.
   */
  class Modeler extends EditingManager {
    _getViewProviders() {
      return [{
        id: 'drd',
        constructor: Modeler$1,
        opens: 'dmn:Definitions'
      }, {
        id: 'decisionTable',
        constructor: Editor$2,
        opens(element) {
          return is(element, 'dmn:Decision') && is(element.decisionLogic, 'dmn:DecisionTable');
        }
      }, {
        id: 'literalExpression',
        constructor: Editor,
        opens(element) {
          return is(element, 'dmn:Decision') && is(element.decisionLogic, 'dmn:LiteralExpression');
        }
      }];
    }
    _getInitialView(views) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      let initialView = super._getInitialView(views, ...rest);
      if (!initialView) {
        return;
      }
      const element = initialView.element;

      // if initial view is definitions without DI, try to open another view
      if (is(element, 'dmn:Definitions') && !containsDi(element)) {
        initialView = find$2(views, view => !is(view.element, 'dmn:Definitions')) || initialView;
      }
      return initialView;
    }
  }

  var CROSS_COLOR = '#CCC',
    BORDER_COLOR = 'rgba(0,0,0,0.1)';

  /**
   * A diagram-js extension that shows a (0, 0) origin indicator
   * on the canvas as well as (optionally) the canvas borders.
   *
   * @param {Object} [config]
   * @param {Canvas} canvas
   */
  function ConfigureOrigin(config, canvas) {
    config = config || {};
    var borderColor = config.borderColor || BORDER_COLOR,
      crossColor = config.crossColor || CROSS_COLOR;
    var w = 30,
      h = 2,
      w_half = w / 2,
      s = -h / 2,
      lineStart = w_half + 7;
    var parent = canvas.getLayer('djs-origin', -1);
    var g, line, cross, label;
    g = createEl('g', {
      'pointer-events': 'none'
    });
    append(parent, g);
    if (config.showBorder !== false) {
      // the dashed lines, marking positive document coordinates
      line = createEl('path', {
        'class': cls('border'),
        'd': path(['M', -lineStart, s, 'H', -1000, 'M', lineStart, s, 'H', 6000, 'M', s, -lineStart, 'V', -1000, 'M', s, lineStart, 'V', 3000]),
        'fill': 'none',
        'stroke': borderColor,
        'stroke-width': h + 'px',
        'stroke-dasharray': '6, 6',
        'shape-rendering': 'crispedges'
      });
      append(g, line);
    }

    // the cross that marks the diagram origin
    cross = createEl('path', {
      d: path(['M', -w_half, s, 'H', w_half, 'M', s, -w_half, 'V', w_half]),
      'class': cls('cross'),
      'fill': 'none',
      'stroke': crossColor,
      'stroke-width': h + 'px',
      'stroke-linecap': 'round'
    });
    append(g, cross);
    label = createEl('text', {
      x: -40,
      y: -10,
      fill: crossColor,
      'class': cls('label')
    });
    label.textContent = '(0, 0)';
    append(g, label);
  }
  ConfigureOrigin.$inject = ['config.origin', 'canvas'];

  // helpers ///////////////////////////////////

  function path(parts) {
    return parts.join(' ');
  }
  function cls(name) {
    return 'djs-origin-' + name;
  }
  function createEl(type, attrs) {
    var el = create$2(type);
    attr(el, attrs);
    return el;
  }

  var diagramOriginModule = {
    __init__: [ConfigureOrigin]
  };

  var DEFAULT_OPTIONS = {
    offset: {
      x: 150,
      y: 75
    },
    tolerance: 50,
    alignOnSave: true
  };
  var HIGHER_PRIORITY = 1250;

  /**
   * Moves diagram contents to the origin + offset,
   * optionally upon diagram save.
   *
   * @param {Object} config
   * @param {didi.Injector} injector
   * @param {EventBus} eventBus
   * @param {CommandStack} commandStack
   * @param {Canvas} canvas
   * @param {Modeling} modeling
   */
  function AlignToOrigin(config, injector, eventBus, commandStack, canvas, modeling) {
    /**
     * Return actual config with defaults applied.
     */
    function applyDefaults(config) {
      var c = assign$4({}, DEFAULT_OPTIONS, config || {});
      if (isNumber$3(c.offset)) {
        c.offset = {
          x: c.offset,
          y: c.offset
        };
      }
      return c;
    }
    config = applyDefaults(config);

    /**
     * Compute adjustment given the specified diagram origin.
     *
     * @param {Point} origin
     *
     * @return {Point} adjustment
     */
    function computeAdjustment(origin, config) {
      var offset = config.offset,
        tolerance = config.tolerance;
      var adjustment = {};
      ['x', 'y'].forEach(function (axis) {
        var delta = -origin[axis] + offset[axis];
        var gridSnapping = injector.get('gridSnapping', false);
        if (gridSnapping) {
          delta = quantize(delta, gridSnapping.getGridSpacing());
        }
        adjustment[axis] = Math.abs(delta) < tolerance ? 0 : delta;
      });
      return adjustment;
    }

    /**
     * Align the diagram content to the origin.
     *
     * @param {Object} options
     */
    function align() {
      var bounds = canvas.viewbox().inner;
      var elements = canvas.getRootElement().children;
      if (!elements.length) {
        return;
      }
      var delta = computeAdjustment(bounds, config);
      if (delta.x === 0 && delta.y === 0) {
        return;
      }
      commandStack.execute('elements.alignToOrigin', {
        elements: elements,
        delta: delta
      });
    }

    /**
     * Setup align on save functionality
     */
    function bindOnSave() {
      // nested editors expose _parent to access the
      // save responsible entity
      var parent = injector.get('_parent', false);
      var localEvents = eventBus;
      var parentEvents = parent && parent._eventBus;
      (parentEvents || localEvents).on('saveXML.start', HIGHER_PRIORITY, align);
      if (parentEvents) {
        // unregister for saveXML.start
        localEvents.on('diagram.destroy', function () {
          parentEvents.off('saveXML.start', align);
        });
      }
    }

    /**
     * Create a function that compensates the element movement
     * by moving applying the delta in the given direction.
     */
    function movementCompensator(direction) {
      /**
       * Handler to executed
       */
      return function (context) {
        // adjust canvas after the commandstack got changed
        eventBus.once('commandStack.changed', function () {
          var delta = context.delta;
          var scale = canvas.viewbox().scale;
          canvas.scroll({
            dx: direction * delta.x * scale,
            dy: direction * delta.y * scale
          });
        });
      };
    }

    // command registration

    /**
     * A command handler that compensates the element movement
     * by applying the inverse move operation on the canvas.
     */
    commandStack.register('elements.alignToOrigin', {
      preExecute: function (context) {
        var delta = context.delta,
          elements = context.elements;
        modeling.moveElements(elements, delta);
      },
      execute: movementCompensator(-1),
      revert: movementCompensator(1)
    });

    // setup

    if (config.alignOnSave) {
      bindOnSave();
    }

    // API

    this.align = align;
    this.computeAdjustment = computeAdjustment;

    // internal debugging purposes
    this._config = config;
  }
  AlignToOrigin.$inject = ['config.alignToOrigin', 'injector', 'eventBus', 'commandStack', 'canvas', 'modeling'];

  // helpers /////////////////////////

  function quantize(value, quantum, fn) {
    if (!fn) {
      fn = 'round';
    }
    return Math[fn](value / quantum) * quantum;
  }

  var alignToOriginModule = {
    __init__: ['alignToOrigin'],
    alignToOrigin: ['type', AlignToOrigin]
  };

  var _excluded = ["common", "drd"];
  var CamundaDmnModeler$1 = /*#__PURE__*/function (_DmnModeler) {
    _inherits$1(CamundaDmnModeler, _DmnModeler);
    var _super = _createSuper(CamundaDmnModeler);
    function CamundaDmnModeler() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, CamundaDmnModeler);
      var _options$common = options.common,
        common = _options$common === void 0 ? {} : _options$common,
        _options$drd = options.drd,
        drd = _options$drd === void 0 ? {} : _options$drd,
        otherOptions = _objectWithoutProperties$7(options, _excluded);
      var disableAdjustOrigin = drd.disableAdjustOrigin || common.disableAdjustOrigin;
      return _super.call(this, _objectSpread2(_objectSpread2({}, otherOptions), {}, {
        common: common,
        drd: mergeModules(drd, [disableAdjustOrigin ? diagramOriginModule : alignToOriginModule, index$2, index$1])
      }));
    }
    return _createClass(CamundaDmnModeler);
  }(Modeler); // helpers ///////////////////////
  function mergeModules(config, editorModules) {
    var additionalModules = config.additionalModules || [];
    return _objectSpread2(_objectSpread2({}, config), {}, {
      additionalModules: [].concat(_toConsumableArray(editorModules), _toConsumableArray(additionalModules))
    });
  }

  var InputEditor = /*#__PURE__*/function (_Component) {
    _inherits$1(InputEditor, _Component);
    var _super = _createSuper(InputEditor);
    function InputEditor(props, context) {
      var _this;
      _classCallCheck(this, InputEditor);
      _this = _super.call(this, props, context);
      _this._translate = context.injector.get('translate');
      _this._modeling = context.injector.get('modeling');
      var debounceInput = context.injector.get('debounceInput');
      _this.state = {
        inputVariable: _this.props.context.input.get('camunda:inputVariable') || ''
      };
      _this.handleInputVariableChange = _this.handleInputVariableChange.bind(_assertThisInitialized(_this));
      _this._setInputVariable = debounceInput(_this._setInputVariable);
      return _this;
    }
    _createClass(InputEditor, [{
      key: "handleInputVariableChange",
      value: function handleInputVariableChange(value) {
        var _this2 = this;
        this.setState({
          inputVariable: value || undefined
        }, function () {
          return _this2._setInputVariable(value);
        });
      }
    }, {
      key: "_setInputVariable",
      value: function _setInputVariable(inputVariable) {
        return this._modeling.updateProperties(this.props.context.input, {
          // set to <undefined> to remove the property
          'camunda:inputVariable': inputVariable || undefined
        });
      }
    }, {
      key: "render",
      value: function render() {
        var inputVariable = this.state.inputVariable;
        return createVNode(1, "div", "context-menu-container", createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", this._translate('Input Variable'), 0), createComponentVNode(2, Input, {
          "className": "ref-input-variable",
          "value": inputVariable || '',
          "onInput": this.handleInputVariableChange,
          "placeholder": this._translate('cellInput')
        })], 4), 2);
      }
    }]);
    return InputEditor;
  }(Component);

  var InputVariableProvider = /*#__PURE__*/_createClass(function InputVariableProvider(components) {
    _classCallCheck(this, InputVariableProvider);
    components.onGetComponent('context-menu', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (context.contextMenuType === 'input-edit') {
        return InputEditor;
      }
    });
  });
  InputVariableProvider.$inject = ['components'];

  var InputVariableModule = {
    __init__: ['camundaPlatformInputVariable'],
    camundaPlatformInputVariable: ['type', InputVariableProvider]
  };

  var ISO_DATE_REGEX = /^\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d$/;

  // eslint-disable-next-line
  var BETWEEN_DATE_REGEX = /^\[date and time\("(\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d)"\)..date and time\("(\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d)"/;

  // eslint-disable-next-line
  var BEFORE_AFTER_DATE_REGEX = /^(<|>)\s*date and time\("(\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d)"\)/;
  var EXACT_DATE_REGEX = /^date and time\("(\d{4}(?:-\d\d){2}T(?:\d\d:){2}\d\d)"\)$/;
  var EXACT$1 = 'exact',
    BEFORE$1 = 'before',
    AFTER$1 = 'after',
    BETWEEN$1 = 'between';
  function validateISOString(string) {
    if (!ISO_DATE_REGEX.test(string.trim())) {
      return 'Date must match pattern yyyy-MM-ddTHH:mm:ss.';
    }
  }
  function getDateString(type, dates) {
    if (type === EXACT$1) {
      return "date and time(\"".concat(dates[0], "\")");
    } else if (type === BEFORE$1) {
      return "< date and time(\"".concat(dates[0], "\")");
    } else if (type === AFTER$1) {
      return "> date and time(\"".concat(dates[0], "\")");
    } else if (type === BETWEEN$1) {
      return "[date and time(\"".concat(dates[0], "\")..date and time(\"").concat(dates[1], "\")]");
    }
  }
  function getSampleDate() {
    var date = new Date();
    date.setUTCHours(0, 0, 0, 0);
    return date.toISOString().slice(0, -5);
  }
  function parseString(string) {
    // emtpy
    if (!string || string.trim() === '') {
      return {
        type: 'exact',
        date: ''
      };
    }

    // between
    var matches = string.match(BETWEEN_DATE_REGEX);
    if (matches) {
      return {
        type: 'between',
        dates: [matches[1], matches[2]]
      };
    }

    // before or after
    matches = string.match(BEFORE_AFTER_DATE_REGEX);
    if (matches) {
      return {
        type: matches[1] === '<' ? 'before' : 'after',
        date: matches[2]
      };
    }

    // exact
    matches = string.match(EXACT_DATE_REGEX);
    if (matches) {
      return {
        type: 'exact',
        date: matches[1]
      };
    }
  }

  var EXACT = 'exact',
    BEFORE = 'before',
    AFTER = 'after',
    BETWEEN = 'between';
  var InputDateEdit = /*#__PURE__*/function (_Component) {
    _inherits$1(InputDateEdit, _Component);
    var _super = _createSuper(InputDateEdit);
    function InputDateEdit(props, context) {
      var _this;
      _classCallCheck(this, InputDateEdit);
      _this = _super.call(this, props, context);
      _this._modeling = context.injector.get('modeling');
      var element = _this.props.context.element;
      var parsedString = parseString(element.businessObject.text);
      if (parsedString) {
        var dates;
        if (parsedString.date) {
          dates = [parsedString.date, ''];
        } else if (parsedString.dates) {
          dates = parsedString.dates;
        } else {
          dates = ['', ''];
        }
        _this.state = {
          type: parsedString.type,
          dates: dates
        };
      } else {
        _this.state = {
          type: EXACT,
          dates: ['', '']
        };
      }
      var debounceInput = context.injector.get('debounceInput');
      _this.debouncedEditCell = debounceInput(_this.editCell.bind(_assertThisInitialized(_this)));
      _this.editCell = _this.editCell.bind(_assertThisInitialized(_this));
      _this.onTypeChange = _this.onTypeChange.bind(_assertThisInitialized(_this));
      _this.onSetStartDateTodayClick = _this.onSetStartDateTodayClick.bind(_assertThisInitialized(_this));
      _this.onSetEndDateTodayClick = _this.onSetEndDateTodayClick.bind(_assertThisInitialized(_this));
      _this.onStartDateInput = _this.onStartDateInput.bind(_assertThisInitialized(_this));
      _this.onEndDateInput = _this.onEndDateInput.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(InputDateEdit, [{
      key: "editCell",
      value: function editCell(cell, text) {
        this._modeling.editCell(cell, text);
      }
    }, {
      key: "onTypeChange",
      value: function onTypeChange(value) {
        var element = this.props.context.element;
        var dates = this.state.dates;
        this.setState({
          type: value
        });
        if (parseString(getDateString(value, dates))) {
          this.editCell(element.businessObject, getDateString(value, dates));
        }
      }
    }, {
      key: "onSetStartDateTodayClick",
      value: function onSetStartDateTodayClick() {
        var element = this.props.context.element;
        var _this$state = this.state,
          dates = _this$state.dates,
          type = _this$state.type;
        var date = getSampleDate();
        this.setState({
          dates: [date, dates[1]]
        });
        if (parseString(getDateString(type, [date, dates[1]]))) {
          this.editCell(element.businessObject, getDateString(type, [date, dates[1]]));
        }
      }
    }, {
      key: "onSetEndDateTodayClick",
      value: function onSetEndDateTodayClick() {
        var element = this.props.context.element;
        var _this$state2 = this.state,
          dates = _this$state2.dates,
          type = _this$state2.type;
        var date = getSampleDate();
        this.setState({
          dates: [dates[0], date]
        });
        if (parseString(getDateString(type, [dates[0], date]))) {
          this.editCell(element.businessObject, getDateString(type, [dates[0], date]));
        }
      }
    }, {
      key: "onStartDateInput",
      value: function onStartDateInput(_ref) {
        var isValid = _ref.isValid,
          value = _ref.value;
        if (isValid) {
          var element = this.props.context.element;
          var _this$state3 = this.state,
            dates = _this$state3.dates,
            type = _this$state3.type;
          this.setState({
            dates: [value, dates[1]]
          });
          this.debouncedEditCell(element.businessObject, getDateString(type, [value, dates[1]]));
        }
      }
    }, {
      key: "onEndDateInput",
      value: function onEndDateInput(_ref2) {
        var isValid = _ref2.isValid,
          value = _ref2.value;
        if (isValid) {
          var element = this.props.context.element;
          var _this$state4 = this.state,
            dates = _this$state4.dates,
            type = _this$state4.type;
          this.setState({
            dates: [dates[0], value]
          });
          this.debouncedEditCell(element.businessObject, getDateString(type, [dates[0], value]));
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state5 = this.state,
          dates = _this$state5.dates,
          type = _this$state5.type;
        var options = [{
          label: 'Exactly',
          value: EXACT
        }, {
          label: 'Before',
          value: BEFORE
        }, {
          label: 'After',
          value: AFTER
        }, {
          label: 'Between',
          value: BETWEEN
        }];
        return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", createTextVNode("Edit Date"), 2), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
          "noInput": true,
          "onChange": this.onTypeChange,
          "options": options,
          "value": type
        }), 2), createVNode(1, "h4", "dms-heading", type === BETWEEN ? 'Edit Start Date' : 'Set Date', 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
          "className": "start-date-input dms-block",
          "onInput": this.onStartDateInput,
          "placeholder": "e.g. ".concat(getSampleDate()),
          "validate": validateISOString,
          "value": dates[0]
        }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", createTextVNode("Use today"), 2, {
          "type": "button",
          "onClick": this.onSetStartDateTodayClick
        }), createTextVNode(".")], 4)], 4), type === BETWEEN && createVNode(1, "h4", "dms-heading", createTextVNode("Edit End Date"), 2), type === BETWEEN && createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
          "className": "end-date-input dms-block",
          "onInput": this.onEndDateInput,
          "placeholder": "e.g. ".concat(getSampleDate()),
          "validate": validateISOString,
          "value": dates[1]
        }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-today", createTextVNode("Use today"), 2, {
          "type": "button",
          "onClick": this.onSetEndDateTodayClick
        }), createTextVNode(".")], 4)], 4)], 0);
      }
    }]);
    return InputDateEdit;
  }(Component);

  var OutputDateEdit = /*#__PURE__*/function (_Component) {
    _inherits$1(OutputDateEdit, _Component);
    var _super = _createSuper(OutputDateEdit);
    function OutputDateEdit(props, context) {
      var _this;
      _classCallCheck(this, OutputDateEdit);
      _this = _super.call(this, props, context);
      _this._modeling = context.injector.get('modeling');
      var element = _this.props.context.element;
      var parsedString = parseString(element.businessObject.text);
      _this.state = {
        date: parsedString ? parsedString.date : ''
      };
      var debounceInput = context.injector.get('debounceInput');
      _this.debouncedEditCell = debounceInput(_this.editCell.bind(_assertThisInitialized(_this)));
      _this.editCell = _this.editCell.bind(_assertThisInitialized(_this));
      _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
      _this.onInput = _this.onInput.bind(_assertThisInitialized(_this));
      return _this;
    }
    _createClass(OutputDateEdit, [{
      key: "editCell",
      value: function editCell(cell, text) {
        this._modeling.editCell(cell, text);
      }
    }, {
      key: "onClick",
      value: function onClick() {
        var element = this.props.context.element;
        var date = getSampleDate();
        this.setState({
          date: date
        });
        this.editCell(element.businessObject, "date and time(\"".concat(date, "\")"));
      }
    }, {
      key: "onInput",
      value: function onInput(_ref) {
        var isValid = _ref.isValid,
          value = _ref.value;
        if (isValid) {
          var element = this.props.context.element;
          this.setState({
            date: value
          });
          this.debouncedEditCell(element.businessObject, "date and time(\"".concat(value, "\")"));
        }
      }
    }, {
      key: "render",
      value: function render() {
        var date = this.state.date;
        return createVNode(1, "div", "context-menu-container simple-date-edit", [createVNode(1, "h3", "dms-heading", createTextVNode("Edit Date"), 2), createVNode(1, "h4", "dms-heading", createTextVNode("Set Date"), 2), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
          "onInput": this.onInput,
          "placeholder": "e.g. ".concat(getSampleDate()),
          "validate": validateISOString,
          "value": date,
          "className": "dms-block"
        }), createVNode(1, "p", "dms-hint", [createTextVNode("Set date "), createVNode(1, "button", "use-today", createTextVNode("to today"), 2, {
          "type": "button",
          "onClick": this.onClick
        }), createTextVNode(".")], 4)], 4)], 4);
      }
    }]);
    return OutputDateEdit;
  }(Component);

  var SimpleDateEdit = /*#__PURE__*/_createClass(function SimpleDateEdit(components, simpleMode) {
    _classCallCheck(this, SimpleDateEdit);
    simpleMode.registerProvider(function (element) {
      var typeRef = getTypeRef(element);
      return (isInput$1(element.col) || isOutput(element.col)) && isDate(typeRef);
    });
    components.onGetComponent('context-menu', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (context.contextMenuType && context.contextMenuType === 'simple-mode-edit') {
        if (!context.element) {
          return;
        }
        var typeRef = getTypeRef(context.element);
        if (isDate(typeRef)) {
          if (isInput$1(context.element.col)) {
            return InputDateEdit;
          } else if (isOutput(context.element.col)) {
            return OutputDateEdit;
          }
        }
      }
    });
  });
  SimpleDateEdit.$inject = ['components', 'simpleMode'];

  // helpers //////////////////////

  function getTypeRef(element) {
    if (isInput$1(element.col)) {
      return element.col && element.col.businessObject.inputExpression.typeRef;
    } else {
      return element.col && element.col.businessObject.typeRef;
    }
  }
  function isDate(typeRef) {
    return typeRef === 'date';
  }

  var SimpleDateEditModule = {
    __init__: ['simpleDateEdit'],
    simpleDateEdit: ['type', SimpleDateEdit]
  };

  // disables simple edit mode for unsupported data types
  var SimpleModeModule = {
    simpleDurationEdit: ['type', noop],
    simpleDateTimeEdit: ['type', noop],
    simpleTimeEdit: ['type', noop]
  };
  function noop() {}

  var EXPRESSION_LANGUAGE_OPTIONS = [{
    label: 'FEEL',
    value: 'feel'
  }, {
    label: 'JUEL',
    value: 'juel'
  }, {
    label: 'JavaScript',
    value: 'javascript'
  }, {
    label: 'Groovy',
    value: 'groovy'
  }, {
    label: 'Python',
    value: 'python'
  }, {
    label: 'JRuby',
    value: 'jruby'
  }];
  var dataTypes = ['string', 'boolean', 'integer', 'long', 'double', 'date'];
  var CamundaDmnModeler = /*#__PURE__*/function (_BaseModeler) {
    _inherits$1(CamundaDmnModeler, _BaseModeler);
    var _super = _createSuper(CamundaDmnModeler);
    function CamundaDmnModeler() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, CamundaDmnModeler);
      var expressionLanguages = mergeExpressionLanguagesConfig(options.common);
      var decisionTable = options.decisionTable || {};
      var drd = options.drd || {};
      return _super.call(this, _objectSpread2(_objectSpread2({}, options), {}, {
        common: _objectSpread2(_objectSpread2({
          dataTypes: dataTypes
        }, options.common), {}, {
          expressionLanguages: expressionLanguages
        }),
        decisionTable: _objectSpread2(_objectSpread2({}, decisionTable), {}, {
          additionalModules: [InputVariableModule, SimpleDateEditModule, SimpleModeModule].concat(decisionTable.additionalModules || [])
        }),
        drd: _objectSpread2(_objectSpread2({}, drd), {}, {
          additionalModules: [index].concat(drd.additionalModules || [])
        }),
        moddleExtensions: _objectSpread2({
          camunda: CamundaModdle
        }, options.moddleExtensions)
      }));
    }
    return _createClass(CamundaDmnModeler);
  }(CamundaDmnModeler$1);
  function mergeExpressionLanguagesConfig() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var expressionLanguagesConfig = options.expressionLanguages || {};
    var effectiveConfig = {
      options: expressionLanguagesConfig.options || EXPRESSION_LANGUAGE_OPTIONS,
      "default": expressionLanguagesConfig["default"] || {
        editor: 'feel'
      }
    };
    return effectiveConfig;
  }

  return CamundaDmnModeler;

}));
